
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00001ed4  00001f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ed4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019a  00800154  00800154  00001fbc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000750  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001b0f1  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049fd  00000000  00000000  0001d851  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000800e  00000000  00000000  0002224e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015cc  00000000  00000000  0002a25c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023f5  00000000  00000000  0002b828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006d46  00000000  00000000  0002dc1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a60  00000000  00000000  00034963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
       e:	00 00       	nop
      10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
      22:	00 00       	nop
      24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
      26:	00 00       	nop
      28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9a c3       	rjmp	.+1844   	; 0x762 <__vector_11>
      2e:	00 00       	nop
      30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
      32:	00 00       	nop
      34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
      36:	00 00       	nop
      38:	45 c0       	rjmp	.+138    	; 0xc4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
      46:	00 00       	nop
      48:	d4 c3       	rjmp	.+1960   	; 0x7f2 <__vector_18>
      4a:	00 00       	nop
      4c:	10 c4       	rjmp	.+2080   	; 0x86e <__vector_19>
      4e:	00 00       	nop
      50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2210>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2345>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e4 ed       	ldi	r30, 0xD4	; 212
      9e:	fe e1       	ldi	r31, 0x1E	; 30
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a4 35       	cpi	r26, 0x54	; 84
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	a4 e5       	ldi	r26, 0x54	; 84
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	ae 3e       	cpi	r26, 0xEE	; 238
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 2a 0b 	call	0x1654	; 0x1654 <main>
      c0:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <_exit>

000000c4 <__bad_interrupt>:
      c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
      c6:	36 d3       	rcall	.+1644   	; 0x734 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
      c8:	84 e1       	ldi	r24, 0x14	; 20
      ca:	91 e0       	ldi	r25, 0x01	; 1
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
      cc:	34 d3       	rcall	.+1640   	; 0x736 <_pal_lld_init>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
      ce:	c4 d2       	rcall	.+1416   	; 0x658 <sdInit>
      d0:	2d d3       	rcall	.+1626   	; 0x72c <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <stInit>

000000d4 <stInit>:

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
      d4:	71 c3       	rjmp	.+1762   	; 0x7b8 <st_lld_init>

000000d6 <stGetCounter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
      d6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
      da:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 * @api
 */
systime_t stGetCounter(void) {

  return st_lld_get_counter();
}
      de:	08 95       	ret

000000e0 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
      e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
      e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  /* Reset pending. */
  TIFR_REG = _BV(OCF1A);
      e8:	82 e0       	ldi	r24, 0x02	; 2
      ea:	86 bb       	out	0x16, r24	; 22

  /* Enable interrupt. */
  TIMSK_REG = _BV(OCIE1A);
      ec:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
}
      f0:	08 95       	ret

000000f2 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  TIMSK_REG = 0;
      f2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
      f6:	08 95       	ret

000000f8 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
      f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
      fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
}
     100:	08 95       	ret

00000102 <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     102:	af 92       	push	r10
     104:	bf 92       	push	r11
     106:	cf 92       	push	r12
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	ec 01       	movw	r28, r24
     118:	6b 01       	movw	r12, r22
     11a:	8a 01       	movw	r16, r20
     11c:	8c 81       	ldd	r24, Y+4	; 0x04
     11e:	9d 81       	ldd	r25, Y+5	; 0x05
     120:	84 17       	cp	r24, r20
     122:	95 07       	cpc	r25, r21
     124:	10 f4       	brcc	.+4      	; 0x12a <iq_read+0x28>
     126:	0c 81       	ldd	r16, Y+4	; 0x04
     128:	1d 81       	ldd	r17, Y+5	; 0x05
     12a:	6c 85       	ldd	r22, Y+12	; 0x0c
     12c:	7d 85       	ldd	r23, Y+13	; 0x0d
     12e:	e8 84       	ldd	r14, Y+8	; 0x08
     130:	f9 84       	ldd	r15, Y+9	; 0x09
     132:	e6 1a       	sub	r14, r22
     134:	f7 0a       	sbc	r15, r23
     136:	0e 15       	cp	r16, r14
     138:	1f 05       	cpc	r17, r15
     13a:	98 f1       	brcs	.+102    	; 0x1a2 <iq_read+0xa0>
     13c:	e0 16       	cp	r14, r16
     13e:	f1 06       	cpc	r15, r17
     140:	d0 f0       	brcs	.+52     	; 0x176 <iq_read+0x74>
     142:	a8 01       	movw	r20, r16
     144:	c6 01       	movw	r24, r12
     146:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <memcpy>
     14a:	8e 81       	ldd	r24, Y+6	; 0x06
     14c:	9f 81       	ldd	r25, Y+7	; 0x07
     14e:	9d 87       	std	Y+13, r25	; 0x0d
     150:	8c 87       	std	Y+12, r24	; 0x0c
     152:	8c 81       	ldd	r24, Y+4	; 0x04
     154:	9d 81       	ldd	r25, Y+5	; 0x05
     156:	80 1b       	sub	r24, r16
     158:	91 0b       	sbc	r25, r17
     15a:	9d 83       	std	Y+5, r25	; 0x05
     15c:	8c 83       	std	Y+4, r24	; 0x04
     15e:	c8 01       	movw	r24, r16
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	bf 90       	pop	r11
     172:	af 90       	pop	r10
     174:	08 95       	ret
     176:	a7 01       	movw	r20, r14
     178:	c6 01       	movw	r24, r12
     17a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <memcpy>
     17e:	58 01       	movw	r10, r16
     180:	ae 18       	sub	r10, r14
     182:	bf 08       	sbc	r11, r15
     184:	6e 81       	ldd	r22, Y+6	; 0x06
     186:	7f 81       	ldd	r23, Y+7	; 0x07
     188:	a5 01       	movw	r20, r10
     18a:	c6 01       	movw	r24, r12
     18c:	8e 0d       	add	r24, r14
     18e:	9f 1d       	adc	r25, r15
     190:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <memcpy>
     194:	4e 81       	ldd	r20, Y+6	; 0x06
     196:	5f 81       	ldd	r21, Y+7	; 0x07
     198:	4a 0d       	add	r20, r10
     19a:	5b 1d       	adc	r21, r11
     19c:	5d 87       	std	Y+13, r21	; 0x0d
     19e:	4c 87       	std	Y+12, r20	; 0x0c
     1a0:	d8 cf       	rjmp	.-80     	; 0x152 <iq_read+0x50>
     1a2:	a8 01       	movw	r20, r16
     1a4:	c6 01       	movw	r24, r12
     1a6:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <memcpy>
     1aa:	8c 85       	ldd	r24, Y+12	; 0x0c
     1ac:	9d 85       	ldd	r25, Y+13	; 0x0d
     1ae:	80 0f       	add	r24, r16
     1b0:	91 1f       	adc	r25, r17
     1b2:	9d 87       	std	Y+13, r25	; 0x0d
     1b4:	8c 87       	std	Y+12, r24	; 0x0c
     1b6:	cd cf       	rjmp	.-102    	; 0x152 <iq_read+0x50>

000001b8 <oq_write>:
     1b8:	af 92       	push	r10
     1ba:	bf 92       	push	r11
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	ec 01       	movw	r28, r24
     1ce:	6b 01       	movw	r12, r22
     1d0:	8a 01       	movw	r16, r20
     1d2:	8c 81       	ldd	r24, Y+4	; 0x04
     1d4:	9d 81       	ldd	r25, Y+5	; 0x05
     1d6:	84 17       	cp	r24, r20
     1d8:	95 07       	cpc	r25, r21
     1da:	10 f4       	brcc	.+4      	; 0x1e0 <oq_write+0x28>
     1dc:	0c 81       	ldd	r16, Y+4	; 0x04
     1de:	1d 81       	ldd	r17, Y+5	; 0x05
     1e0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1e2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1e4:	e8 84       	ldd	r14, Y+8	; 0x08
     1e6:	f9 84       	ldd	r15, Y+9	; 0x09
     1e8:	e8 1a       	sub	r14, r24
     1ea:	f9 0a       	sbc	r15, r25
     1ec:	0e 15       	cp	r16, r14
     1ee:	1f 05       	cpc	r17, r15
     1f0:	98 f1       	brcs	.+102    	; 0x258 <oq_write+0xa0>
     1f2:	e0 16       	cp	r14, r16
     1f4:	f1 06       	cpc	r15, r17
     1f6:	d0 f0       	brcs	.+52     	; 0x22c <oq_write+0x74>
     1f8:	a8 01       	movw	r20, r16
     1fa:	b6 01       	movw	r22, r12
     1fc:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <memcpy>
     200:	8e 81       	ldd	r24, Y+6	; 0x06
     202:	9f 81       	ldd	r25, Y+7	; 0x07
     204:	9b 87       	std	Y+11, r25	; 0x0b
     206:	8a 87       	std	Y+10, r24	; 0x0a
     208:	8c 81       	ldd	r24, Y+4	; 0x04
     20a:	9d 81       	ldd	r25, Y+5	; 0x05
     20c:	80 1b       	sub	r24, r16
     20e:	91 0b       	sbc	r25, r17
     210:	9d 83       	std	Y+5, r25	; 0x05
     212:	8c 83       	std	Y+4, r24	; 0x04
     214:	c8 01       	movw	r24, r16
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	df 90       	pop	r13
     224:	cf 90       	pop	r12
     226:	bf 90       	pop	r11
     228:	af 90       	pop	r10
     22a:	08 95       	ret
     22c:	a7 01       	movw	r20, r14
     22e:	b6 01       	movw	r22, r12
     230:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <memcpy>
     234:	58 01       	movw	r10, r16
     236:	ae 18       	sub	r10, r14
     238:	bf 08       	sbc	r11, r15
     23a:	b6 01       	movw	r22, r12
     23c:	6e 0d       	add	r22, r14
     23e:	7f 1d       	adc	r23, r15
     240:	a5 01       	movw	r20, r10
     242:	8e 81       	ldd	r24, Y+6	; 0x06
     244:	9f 81       	ldd	r25, Y+7	; 0x07
     246:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <memcpy>
     24a:	4e 81       	ldd	r20, Y+6	; 0x06
     24c:	5f 81       	ldd	r21, Y+7	; 0x07
     24e:	4a 0d       	add	r20, r10
     250:	5b 1d       	adc	r21, r11
     252:	5b 87       	std	Y+11, r21	; 0x0b
     254:	4a 87       	std	Y+10, r20	; 0x0a
     256:	d8 cf       	rjmp	.-80     	; 0x208 <oq_write+0x50>
     258:	a8 01       	movw	r20, r16
     25a:	b6 01       	movw	r22, r12
     25c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <memcpy>
     260:	8a 85       	ldd	r24, Y+10	; 0x0a
     262:	9b 85       	ldd	r25, Y+11	; 0x0b
     264:	80 0f       	add	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	9b 87       	std	Y+11, r25	; 0x0b
     26a:	8a 87       	std	Y+10, r24	; 0x0a
     26c:	cd cf       	rjmp	.-102    	; 0x208 <oq_write+0x50>

0000026e <iqObjectInit>:
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	fc 01       	movw	r30, r24
     274:	91 83       	std	Z+1, r25	; 0x01
     276:	80 83       	st	Z, r24
     278:	93 83       	std	Z+3, r25	; 0x03
     27a:	82 83       	std	Z+2, r24	; 0x02
     27c:	15 82       	std	Z+5, r1	; 0x05
     27e:	14 82       	std	Z+4, r1	; 0x04
     280:	77 83       	std	Z+7, r23	; 0x07
     282:	66 83       	std	Z+6, r22	; 0x06
     284:	75 87       	std	Z+13, r23	; 0x0d
     286:	64 87       	std	Z+12, r22	; 0x0c
     288:	73 87       	std	Z+11, r23	; 0x0b
     28a:	62 87       	std	Z+10, r22	; 0x0a
     28c:	64 0f       	add	r22, r20
     28e:	75 1f       	adc	r23, r21
     290:	71 87       	std	Z+9, r23	; 0x09
     292:	60 87       	std	Z+8, r22	; 0x08
     294:	37 87       	std	Z+15, r19	; 0x0f
     296:	26 87       	std	Z+14, r18	; 0x0e
     298:	11 8b       	std	Z+17, r17	; 0x11
     29a:	00 8b       	std	Z+16, r16	; 0x10
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <iqPutI>:
     2a2:	fc 01       	movw	r30, r24
     2a4:	a2 85       	ldd	r26, Z+10	; 0x0a
     2a6:	b3 85       	ldd	r27, Z+11	; 0x0b
     2a8:	84 85       	ldd	r24, Z+12	; 0x0c
     2aa:	95 85       	ldd	r25, Z+13	; 0x0d
     2ac:	a8 17       	cp	r26, r24
     2ae:	b9 07       	cpc	r27, r25
     2b0:	e9 f0       	breq	.+58     	; 0x2ec <iqPutI+0x4a>
     2b2:	84 81       	ldd	r24, Z+4	; 0x04
     2b4:	95 81       	ldd	r25, Z+5	; 0x05
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	95 83       	std	Z+5, r25	; 0x05
     2ba:	84 83       	std	Z+4, r24	; 0x04
     2bc:	cd 01       	movw	r24, r26
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	93 87       	std	Z+11, r25	; 0x0b
     2c2:	82 87       	std	Z+10, r24	; 0x0a
     2c4:	6c 93       	st	X, r22
     2c6:	22 85       	ldd	r18, Z+10	; 0x0a
     2c8:	33 85       	ldd	r19, Z+11	; 0x0b
     2ca:	80 85       	ldd	r24, Z+8	; 0x08
     2cc:	91 85       	ldd	r25, Z+9	; 0x09
     2ce:	28 17       	cp	r18, r24
     2d0:	39 07       	cpc	r19, r25
     2d2:	20 f0       	brcs	.+8      	; 0x2dc <iqPutI+0x3a>
     2d4:	86 81       	ldd	r24, Z+6	; 0x06
     2d6:	97 81       	ldd	r25, Z+7	; 0x07
     2d8:	93 87       	std	Z+11, r25	; 0x0b
     2da:	82 87       	std	Z+10, r24	; 0x0a
     2dc:	cf 01       	movw	r24, r30
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <chThdDequeueNextI>
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	08 95       	ret
     2ec:	84 81       	ldd	r24, Z+4	; 0x04
     2ee:	95 81       	ldd	r25, Z+5	; 0x05
     2f0:	89 2b       	or	r24, r25
     2f2:	f9 f2       	breq	.-66     	; 0x2b2 <iqPutI+0x10>
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	9f ef       	ldi	r25, 0xFF	; 255
     2f8:	08 95       	ret

000002fa <iqGetTimeout>:
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	ec 01       	movw	r28, r24
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	f8 94       	cli
     310:	07 c0       	rjmp	.+14     	; 0x320 <iqGetTimeout+0x26>
     312:	b7 01       	movw	r22, r14
     314:	a6 01       	movw	r20, r12
     316:	ce 01       	movw	r24, r28
     318:	0e 94 3d 0a 	call	0x147a	; 0x147a <chThdEnqueueTimeoutS>
     31c:	97 fd       	sbrc	r25, 7
     31e:	2a c0       	rjmp	.+84     	; 0x374 <iqGetTimeout+0x7a>
     320:	8c 81       	ldd	r24, Y+4	; 0x04
     322:	9d 81       	ldd	r25, Y+5	; 0x05
     324:	89 2b       	or	r24, r25
     326:	a9 f3       	breq	.-22     	; 0x312 <iqGetTimeout+0x18>
     328:	8c 81       	ldd	r24, Y+4	; 0x04
     32a:	9d 81       	ldd	r25, Y+5	; 0x05
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	9d 83       	std	Y+5, r25	; 0x05
     330:	8c 83       	std	Y+4, r24	; 0x04
     332:	ec 85       	ldd	r30, Y+12	; 0x0c
     334:	fd 85       	ldd	r31, Y+13	; 0x0d
     336:	cf 01       	movw	r24, r30
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	9d 87       	std	Y+13, r25	; 0x0d
     33c:	8c 87       	std	Y+12, r24	; 0x0c
     33e:	10 81       	ld	r17, Z
     340:	28 85       	ldd	r18, Y+8	; 0x08
     342:	39 85       	ldd	r19, Y+9	; 0x09
     344:	82 17       	cp	r24, r18
     346:	93 07       	cpc	r25, r19
     348:	20 f0       	brcs	.+8      	; 0x352 <iqGetTimeout+0x58>
     34a:	8e 81       	ldd	r24, Y+6	; 0x06
     34c:	9f 81       	ldd	r25, Y+7	; 0x07
     34e:	9d 87       	std	Y+13, r25	; 0x0d
     350:	8c 87       	std	Y+12, r24	; 0x0c
     352:	ee 85       	ldd	r30, Y+14	; 0x0e
     354:	ff 85       	ldd	r31, Y+15	; 0x0f
     356:	30 97       	sbiw	r30, 0x00	; 0
     358:	11 f0       	breq	.+4      	; 0x35e <iqGetTimeout+0x64>
     35a:	ce 01       	movw	r24, r28
     35c:	09 95       	icall
     35e:	78 94       	sei
     360:	81 2f       	mov	r24, r17
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	08 95       	ret
     374:	78 94       	sei
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	08 95       	ret

00000386 <iqReadTimeout>:
     386:	4f 92       	push	r4
     388:	5f 92       	push	r5
     38a:	6f 92       	push	r6
     38c:	7f 92       	push	r7
     38e:	8f 92       	push	r8
     390:	9f 92       	push	r9
     392:	af 92       	push	r10
     394:	bf 92       	push	r11
     396:	cf 92       	push	r12
     398:	df 92       	push	r13
     39a:	ef 92       	push	r14
     39c:	ff 92       	push	r15
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	6c 01       	movw	r12, r24
     3a8:	7b 01       	movw	r14, r22
     3aa:	4a 01       	movw	r8, r20
     3ac:	28 01       	movw	r4, r16
     3ae:	39 01       	movw	r6, r18
     3b0:	fc 01       	movw	r30, r24
     3b2:	a6 84       	ldd	r10, Z+14	; 0x0e
     3b4:	b7 84       	ldd	r11, Z+15	; 0x0f
     3b6:	f8 94       	cli
     3b8:	41 15       	cp	r20, r1
     3ba:	51 05       	cpc	r21, r1
     3bc:	b9 f0       	breq	.+46     	; 0x3ec <iqReadTimeout+0x66>
     3be:	8a 01       	movw	r16, r20
     3c0:	a8 01       	movw	r20, r16
     3c2:	b7 01       	movw	r22, r14
     3c4:	c6 01       	movw	r24, r12
     3c6:	9d de       	rcall	.-710    	; 0x102 <iq_read>
     3c8:	ec 01       	movw	r28, r24
     3ca:	89 2b       	or	r24, r25
     3cc:	11 f1       	breq	.+68     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     3ce:	a1 14       	cp	r10, r1
     3d0:	b1 04       	cpc	r11, r1
     3d2:	19 f0       	breq	.+6      	; 0x3da <iqReadTimeout+0x54>
     3d4:	c6 01       	movw	r24, r12
     3d6:	f5 01       	movw	r30, r10
     3d8:	09 95       	icall
     3da:	78 94       	sei
     3dc:	0c 1b       	sub	r16, r28
     3de:	1d 0b       	sbc	r17, r29
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
     3e4:	f8 94       	cli
     3e6:	01 15       	cp	r16, r1
     3e8:	11 05       	cpc	r17, r1
     3ea:	51 f7       	brne	.-44     	; 0x3c0 <iqReadTimeout+0x3a>
     3ec:	c4 01       	movw	r24, r8
     3ee:	78 94       	sei
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	af 90       	pop	r10
     404:	9f 90       	pop	r9
     406:	8f 90       	pop	r8
     408:	7f 90       	pop	r7
     40a:	6f 90       	pop	r6
     40c:	5f 90       	pop	r5
     40e:	4f 90       	pop	r4
     410:	08 95       	ret
     412:	b3 01       	movw	r22, r6
     414:	a2 01       	movw	r20, r4
     416:	c6 01       	movw	r24, r12
     418:	0e 94 3d 0a 	call	0x147a	; 0x147a <chThdEnqueueTimeoutS>
     41c:	89 2b       	or	r24, r25
     41e:	81 f2       	breq	.-96     	; 0x3c0 <iqReadTimeout+0x3a>
     420:	c4 01       	movw	r24, r8
     422:	80 1b       	sub	r24, r16
     424:	91 0b       	sbc	r25, r17
     426:	e3 cf       	rjmp	.-58     	; 0x3ee <iqReadTimeout+0x68>

00000428 <oqObjectInit>:
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	fc 01       	movw	r30, r24
     42e:	91 83       	std	Z+1, r25	; 0x01
     430:	80 83       	st	Z, r24
     432:	93 83       	std	Z+3, r25	; 0x03
     434:	82 83       	std	Z+2, r24	; 0x02
     436:	55 83       	std	Z+5, r21	; 0x05
     438:	44 83       	std	Z+4, r20	; 0x04
     43a:	77 83       	std	Z+7, r23	; 0x07
     43c:	66 83       	std	Z+6, r22	; 0x06
     43e:	75 87       	std	Z+13, r23	; 0x0d
     440:	64 87       	std	Z+12, r22	; 0x0c
     442:	73 87       	std	Z+11, r23	; 0x0b
     444:	62 87       	std	Z+10, r22	; 0x0a
     446:	64 0f       	add	r22, r20
     448:	75 1f       	adc	r23, r21
     44a:	71 87       	std	Z+9, r23	; 0x09
     44c:	60 87       	std	Z+8, r22	; 0x08
     44e:	37 87       	std	Z+15, r19	; 0x0f
     450:	26 87       	std	Z+14, r18	; 0x0e
     452:	11 8b       	std	Z+17, r17	; 0x11
     454:	00 8b       	std	Z+16, r16	; 0x10
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	08 95       	ret

0000045c <oqPutTimeout>:
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	ec 01       	movw	r28, r24
     46c:	16 2f       	mov	r17, r22
     46e:	69 01       	movw	r12, r18
     470:	7a 01       	movw	r14, r20
     472:	f8 94       	cli
     474:	06 c0       	rjmp	.+12     	; 0x482 <oqPutTimeout+0x26>
     476:	b7 01       	movw	r22, r14
     478:	a6 01       	movw	r20, r12
     47a:	ce 01       	movw	r24, r28
     47c:	fe d7       	rcall	.+4092   	; 0x147a <chThdEnqueueTimeoutS>
     47e:	97 fd       	sbrc	r25, 7
     480:	2c c0       	rjmp	.+88     	; 0x4da <oqPutTimeout+0x7e>
     482:	8c 81       	ldd	r24, Y+4	; 0x04
     484:	9d 81       	ldd	r25, Y+5	; 0x05
     486:	89 2b       	or	r24, r25
     488:	b1 f3       	breq	.-20     	; 0x476 <oqPutTimeout+0x1a>
     48a:	8c 81       	ldd	r24, Y+4	; 0x04
     48c:	9d 81       	ldd	r25, Y+5	; 0x05
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	9d 83       	std	Y+5, r25	; 0x05
     492:	8c 83       	std	Y+4, r24	; 0x04
     494:	ea 85       	ldd	r30, Y+10	; 0x0a
     496:	fb 85       	ldd	r31, Y+11	; 0x0b
     498:	cf 01       	movw	r24, r30
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	9b 87       	std	Y+11, r25	; 0x0b
     49e:	8a 87       	std	Y+10, r24	; 0x0a
     4a0:	10 83       	st	Z, r17
     4a2:	2a 85       	ldd	r18, Y+10	; 0x0a
     4a4:	3b 85       	ldd	r19, Y+11	; 0x0b
     4a6:	88 85       	ldd	r24, Y+8	; 0x08
     4a8:	99 85       	ldd	r25, Y+9	; 0x09
     4aa:	28 17       	cp	r18, r24
     4ac:	39 07       	cpc	r19, r25
     4ae:	20 f0       	brcs	.+8      	; 0x4b8 <oqPutTimeout+0x5c>
     4b0:	8e 81       	ldd	r24, Y+6	; 0x06
     4b2:	9f 81       	ldd	r25, Y+7	; 0x07
     4b4:	9b 87       	std	Y+11, r25	; 0x0b
     4b6:	8a 87       	std	Y+10, r24	; 0x0a
     4b8:	ee 85       	ldd	r30, Y+14	; 0x0e
     4ba:	ff 85       	ldd	r31, Y+15	; 0x0f
     4bc:	30 97       	sbiw	r30, 0x00	; 0
     4be:	11 f0       	breq	.+4      	; 0x4c4 <oqPutTimeout+0x68>
     4c0:	ce 01       	movw	r24, r28
     4c2:	09 95       	icall
     4c4:	78 94       	sei
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	08 95       	ret
     4da:	78 94       	sei
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	08 95       	ret

000004ec <oqGetI>:
     4ec:	cf 93       	push	r28
     4ee:	fc 01       	movw	r30, r24
     4f0:	a4 85       	ldd	r26, Z+12	; 0x0c
     4f2:	b5 85       	ldd	r27, Z+13	; 0x0d
     4f4:	82 85       	ldd	r24, Z+10	; 0x0a
     4f6:	93 85       	ldd	r25, Z+11	; 0x0b
     4f8:	8a 17       	cp	r24, r26
     4fa:	9b 07       	cpc	r25, r27
     4fc:	e1 f0       	breq	.+56     	; 0x536 <oqGetI+0x4a>
     4fe:	84 81       	ldd	r24, Z+4	; 0x04
     500:	95 81       	ldd	r25, Z+5	; 0x05
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	95 83       	std	Z+5, r25	; 0x05
     506:	84 83       	std	Z+4, r24	; 0x04
     508:	cd 01       	movw	r24, r26
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	95 87       	std	Z+13, r25	; 0x0d
     50e:	84 87       	std	Z+12, r24	; 0x0c
     510:	cc 91       	ld	r28, X
     512:	20 85       	ldd	r18, Z+8	; 0x08
     514:	31 85       	ldd	r19, Z+9	; 0x09
     516:	82 17       	cp	r24, r18
     518:	93 07       	cpc	r25, r19
     51a:	40 f4       	brcc	.+16     	; 0x52c <oqGetI+0x40>
     51c:	cf 01       	movw	r24, r30
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	ca d7       	rcall	.+3988   	; 0x14b8 <chThdDequeueNextI>
     524:	8c 2f       	mov	r24, r28
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	cf 91       	pop	r28
     52a:	08 95       	ret
     52c:	86 81       	ldd	r24, Z+6	; 0x06
     52e:	97 81       	ldd	r25, Z+7	; 0x07
     530:	95 87       	std	Z+13, r25	; 0x0d
     532:	84 87       	std	Z+12, r24	; 0x0c
     534:	f3 cf       	rjmp	.-26     	; 0x51c <oqGetI+0x30>
     536:	84 81       	ldd	r24, Z+4	; 0x04
     538:	95 81       	ldd	r25, Z+5	; 0x05
     53a:	89 2b       	or	r24, r25
     53c:	01 f3       	breq	.-64     	; 0x4fe <oqGetI+0x12>
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	9f ef       	ldi	r25, 0xFF	; 255
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     546:	4f 92       	push	r4
     548:	5f 92       	push	r5
     54a:	6f 92       	push	r6
     54c:	7f 92       	push	r7
     54e:	8f 92       	push	r8
     550:	9f 92       	push	r9
     552:	af 92       	push	r10
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	6c 01       	movw	r12, r24
     568:	7b 01       	movw	r14, r22
     56a:	4a 01       	movw	r8, r20
     56c:	28 01       	movw	r4, r16
     56e:	39 01       	movw	r6, r18
  qnotify_t nfy = oqp->q_notify;
     570:	fc 01       	movw	r30, r24
     572:	a6 84       	ldd	r10, Z+14	; 0x0e
     574:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     576:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     578:	41 15       	cp	r20, r1
     57a:	51 05       	cpc	r21, r1
     57c:	b9 f0       	breq	.+46     	; 0x5ac <oqWriteTimeout+0x66>
     57e:	8a 01       	movw	r16, r20
    size_t done;

    done = oq_write(oqp, bp, n);
     580:	a8 01       	movw	r20, r16
     582:	b7 01       	movw	r22, r14
     584:	c6 01       	movw	r24, r12
     586:	18 de       	rcall	.-976    	; 0x1b8 <oq_write>
     588:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
     58a:	89 2b       	or	r24, r25
     58c:	11 f1       	breq	.+68     	; 0x5d2 <oqWriteTimeout+0x8c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     58e:	a1 14       	cp	r10, r1
     590:	b1 04       	cpc	r11, r1
     592:	19 f0       	breq	.+6      	; 0x59a <oqWriteTimeout+0x54>
        nfy(oqp);
     594:	c6 01       	movw	r24, r12
     596:	f5 01       	movw	r30, r10
     598:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     59a:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
     59c:	0c 1b       	sub	r16, r28
     59e:	1d 0b       	sbc	r17, r29
      bp += done;
     5a0:	ec 0e       	add	r14, r28
     5a2:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     5a4:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     5a6:	01 15       	cp	r16, r1
     5a8:	11 05       	cpc	r17, r1
     5aa:	51 f7       	brne	.-44     	; 0x580 <oqWriteTimeout+0x3a>
     5ac:	c4 01       	movw	r24, r8
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     5ae:	78 94       	sei
    }
  }

  osalSysUnlock();
  return max - n;
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	bf 90       	pop	r11
     5c2:	af 90       	pop	r10
     5c4:	9f 90       	pop	r9
     5c6:	8f 90       	pop	r8
     5c8:	7f 90       	pop	r7
     5ca:	6f 90       	pop	r6
     5cc:	5f 90       	pop	r5
     5ce:	4f 90       	pop	r4
     5d0:	08 95       	ret
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     5d2:	b3 01       	movw	r22, r6
     5d4:	a2 01       	movw	r20, r4
     5d6:	c6 01       	movw	r24, r12
     5d8:	50 d7       	rcall	.+3744   	; 0x147a <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     5da:	89 2b       	or	r24, r25
     5dc:	89 f2       	breq	.-94     	; 0x580 <oqWriteTimeout+0x3a>
     5de:	c4 01       	movw	r24, r8
     5e0:	80 1b       	sub	r24, r16
     5e2:	91 0b       	sbc	r25, r17
     5e4:	e4 cf       	rjmp	.-56     	; 0x5ae <oqWriteTimeout+0x68>

000005e6 <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	05 96       	adiw	r24, 0x05	; 5
     5ec:	cc de       	rcall	.-616    	; 0x386 <iqReadTimeout>
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	08 95       	ret

000005f4 <_read>:
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	0f ef       	ldi	r16, 0xFF	; 255
     5fa:	1f ef       	ldi	r17, 0xFF	; 255
     5fc:	98 01       	movw	r18, r16
     5fe:	05 96       	adiw	r24, 0x05	; 5
     600:	c2 de       	rcall	.-636    	; 0x386 <iqReadTimeout>
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <_writet>:
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	47 96       	adiw	r24, 0x17	; 23
     60e:	9b df       	rcall	.-202    	; 0x546 <oqWriteTimeout>
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	08 95       	ret

00000616 <_write>:
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	0f ef       	ldi	r16, 0xFF	; 255
     61c:	1f ef       	ldi	r17, 0xFF	; 255
     61e:	98 01       	movw	r18, r16
     620:	47 96       	adiw	r24, 0x17	; 23
     622:	91 df       	rcall	.-222    	; 0x546 <oqWriteTimeout>
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <_gett>:
     62a:	05 96       	adiw	r24, 0x05	; 5
     62c:	66 ce       	rjmp	.-820    	; 0x2fa <iqGetTimeout>

0000062e <_get>:
     62e:	4f ef       	ldi	r20, 0xFF	; 255
     630:	5f ef       	ldi	r21, 0xFF	; 255
     632:	ba 01       	movw	r22, r20
     634:	05 96       	adiw	r24, 0x05	; 5
     636:	61 ce       	rjmp	.-830    	; 0x2fa <iqGetTimeout>

00000638 <_putt>:
     638:	47 96       	adiw	r24, 0x17	; 23
     63a:	10 cf       	rjmp	.-480    	; 0x45c <oqPutTimeout>

0000063c <_put>:
     63c:	2f ef       	ldi	r18, 0xFF	; 255
     63e:	3f ef       	ldi	r19, 0xFF	; 255
     640:	a9 01       	movw	r20, r18
     642:	47 96       	adiw	r24, 0x17	; 23
     644:	0b cf       	rjmp	.-490    	; 0x45c <oqPutTimeout>

00000646 <_ctl>:
     646:	61 30       	cpi	r22, 0x01	; 1
     648:	71 05       	cpc	r23, r1
     64a:	19 f0       	breq	.+6      	; 0x652 <_ctl+0xc>
     64c:	8c ee       	ldi	r24, 0xEC	; 236
     64e:	9f ef       	ldi	r25, 0xFF	; 255
     650:	08 95       	ret
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	08 95       	ret

00000658 <sdInit>:
     658:	41 c1       	rjmp	.+642    	; 0x8dc <sd_lld_init>

0000065a <sdObjectInit>:
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	ec 01       	movw	r28, r24
     668:	9b 01       	movw	r18, r22
     66a:	7a 01       	movw	r14, r20
     66c:	fc 01       	movw	r30, r24
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	81 93       	st	Z+, r24
     674:	91 93       	st	Z+, r25
     676:	fb 83       	std	Y+3, r31	; 0x03
     678:	ea 83       	std	Y+2, r30	; 0x02
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	8c 83       	std	Y+4, r24	; 0x04
     67e:	be 01       	movw	r22, r28
     680:	67 5d       	subi	r22, 0xD7	; 215
     682:	7f 4f       	sbci	r23, 0xFF	; 255
     684:	8e 01       	movw	r16, r28
     686:	40 e1       	ldi	r20, 0x10	; 16
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	ce 01       	movw	r24, r28
     68c:	05 96       	adiw	r24, 0x05	; 5
     68e:	ef dd       	rcall	.-1058   	; 0x26e <iqObjectInit>
     690:	be 01       	movw	r22, r28
     692:	67 5c       	subi	r22, 0xC7	; 199
     694:	7f 4f       	sbci	r23, 0xFF	; 255
     696:	97 01       	movw	r18, r14
     698:	40 e1       	ldi	r20, 0x10	; 16
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	ce 01       	movw	r24, r28
     69e:	47 96       	adiw	r24, 0x17	; 23
     6a0:	c3 de       	rcall	.-634    	; 0x428 <oqObjectInit>
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	08 95       	ret

000006b0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ec 01       	movw	r28, r24
     6b8:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     6ba:	89 85       	ldd	r24, Y+9	; 0x09
     6bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6be:	89 2b       	or	r24, r25
     6c0:	51 f0       	breq	.+20     	; 0x6d6 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     6c2:	61 2f       	mov	r22, r17
     6c4:	ce 01       	movw	r24, r28
     6c6:	05 96       	adiw	r24, 0x05	; 5
     6c8:	ec dd       	rcall	.-1064   	; 0x2a2 <iqPutI>
     6ca:	97 fd       	sbrc	r25, 7
     6cc:	0e c0       	rjmp	.+28     	; 0x6ea <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     6d6:	64 e0       	ldi	r22, 0x04	; 4
     6d8:	ce 01       	movw	r24, r28
     6da:	02 96       	adiw	r24, 0x02	; 2
     6dc:	24 d7       	rcall	.+3656   	; 0x1526 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     6de:	61 2f       	mov	r22, r17
     6e0:	ce 01       	movw	r24, r28
     6e2:	05 96       	adiw	r24, 0x05	; 5
     6e4:	de dd       	rcall	.-1092   	; 0x2a2 <iqPutI>
     6e6:	97 ff       	sbrs	r25, 7
     6e8:	f2 cf       	rjmp	.-28     	; 0x6ce <sdIncomingDataI+0x1e>
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	ce 01       	movw	r24, r28
     6ee:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	17 c7       	rjmp	.+3630   	; 0x1526 <chEvtBroadcastFlagsI>

000006f8 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
     702:	47 96       	adiw	r24, 0x17	; 23
     704:	f3 de       	rcall	.-538    	; 0x4ec <oqGetI>
     706:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
     708:	97 fd       	sbrc	r25, 7
     70a:	06 c0       	rjmp	.+12     	; 0x718 <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
     70c:	ce 01       	movw	r24, r28
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	08 95       	ret
     718:	68 e0       	ldi	r22, 0x08	; 8
     71a:	c8 01       	movw	r24, r16
     71c:	02 96       	adiw	r24, 0x02	; 2
     71e:	03 d7       	rcall	.+3590   	; 0x1526 <chEvtBroadcastFlagsI>
     720:	ce 01       	movw	r24, r28
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret

0000072c <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
     72c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK  = 0x00;
     730:	1d ba       	out	0x1d, r1	; 29

}
     732:	08 95       	ret

00000734 <hal_lld_init>:
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
}
     734:	08 95       	ret

00000736 <_pal_lld_init>:
  (void)mode;
  (void)callback;
  (void)arg;

  /* TODO: Implement the interruption here. */
}
     736:	fc 01       	movw	r30, r24
     738:	80 81       	ld	r24, Z
     73a:	85 b9       	out	0x05, r24	; 5
     73c:	81 81       	ldd	r24, Z+1	; 0x01
     73e:	84 b9       	out	0x04, r24	; 4
     740:	82 81       	ldd	r24, Z+2	; 0x02
     742:	88 b9       	out	0x08, r24	; 8
     744:	83 81       	ldd	r24, Z+3	; 0x03
     746:	87 b9       	out	0x07, r24	; 7
     748:	84 81       	ldd	r24, Z+4	; 0x04
     74a:	8b b9       	out	0x0b, r24	; 11
     74c:	85 81       	ldd	r24, Z+5	; 0x05
     74e:	8a b9       	out	0x0a, r24	; 10
     750:	08 95       	ret

00000752 <_pal_lld_setlineid>:
 *
 * @return    line  the builded line
 *
 * @notapi
 */
ioline_t _pal_lld_setlineid(ioportid_t port, uint8_t pad) {
     752:	28 2f       	mov	r18, r24
     754:	86 2f       	mov	r24, r22

  line.port = port;
  line.pad  = pad;

  return line;
}
     756:	62 2f       	mov	r22, r18
     758:	79 2f       	mov	r23, r25
     75a:	08 95       	ret

0000075c <_pal_lld_getportfromline>:
 *
 * @return    port  the port of the corresponding line
 *
 * @notapi
 */
ioportid_t _pal_lld_getportfromline(ioline_t line) {
     75c:	cb 01       	movw	r24, r22

  return line.port;
}
     75e:	08 95       	ret

00000760 <_pal_lld_getpadfromline>:
 * @notapi
 */
uint8_t _pal_lld_getpadfromline(ioline_t line) {

  return line.pad;
}
     760:	08 95       	ret

00000762 <__vector_11>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	2f 93       	push	r18
     76e:	3f 93       	push	r19
     770:	4f 93       	push	r20
     772:	5f 93       	push	r21
     774:	6f 93       	push	r22
     776:	7f 93       	push	r23
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	af 93       	push	r26
     77e:	bf 93       	push	r27
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
     78a:	c4 d0       	rcall	.+392    	; 0x914 <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     78c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <__avr_in_isr>
     790:	db d4       	rcall	.+2486   	; 0x1148 <chSchIsPreemptionRequired>
     792:	81 11       	cpse	r24, r1
     794:	e9 d4       	rcall	.+2514   	; 0x1168 <chSchDoPreemption>
}
     796:	ff 91       	pop	r31
     798:	ef 91       	pop	r30
     79a:	bf 91       	pop	r27
     79c:	af 91       	pop	r26
     79e:	9f 91       	pop	r25
     7a0:	8f 91       	pop	r24
     7a2:	7f 91       	pop	r23
     7a4:	6f 91       	pop	r22
     7a6:	5f 91       	pop	r21
     7a8:	4f 91       	pop	r20
     7aa:	3f 91       	pop	r19
     7ac:	2f 91       	pop	r18
     7ae:	0f 90       	pop	r0
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	0f 90       	pop	r0
     7b4:	1f 90       	pop	r1
     7b6:	18 95       	reti

000007b8 <st_lld_init>:
  /*
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source. */
  TCCR1A     = 0;
     7b8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B     = _BV(WGM12);
     7bc:	e1 e8       	ldi	r30, 0x81	; 129
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	88 e0       	ldi	r24, 0x08	; 8
     7c2:	80 83       	st	Z, r24

  /* Start disabled. */
  TCCR1C     = 0;
     7c4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
  OCR1A      = 0;
     7c8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     7cc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  TCNT1      = 0;
     7d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     7d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  TIFR_REG   = _BV(OCF1A);                              /* Reset pending.   */
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	86 bb       	out	0x16, r24	; 22
  TIMSK_REG  = 0;
     7dc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  TCCR1B     = PRESCALER;
     7e0:	85 e0       	ldi	r24, 0x05	; 5
     7e2:	80 83       	st	Z, r24
#else
  #error "Neither TCCR0A nor TCCR0 registers are defined"
#endif

#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
     7e4:	08 95       	ret

000007e6 <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
     7e6:	e1 ec       	ldi	r30, 0xC1	; 193
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	80 62       	ori	r24, 0x20	; 32
     7ee:	80 83       	st	Z, r24
}
     7f0:	08 95       	ret

000007f2 <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	11 24       	eor	r1, r1
     7fc:	2f 93       	push	r18
     7fe:	3f 93       	push	r19
     800:	4f 93       	push	r20
     802:	5f 93       	push	r21
     804:	6f 93       	push	r22
     806:	7f 93       	push	r23
     808:	8f 93       	push	r24
     80a:	9f 93       	push	r25
     80c:	af 93       	push	r26
     80e:	bf 93       	push	r27
     810:	ef 93       	push	r30
     812:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__avr_in_isr>

  sra = UCSR0A;
     81a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
     81e:	98 2f       	mov	r25, r24
     820:	9c 71       	andi	r25, 0x1C	; 28
     822:	41 f0       	breq	.+16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    sts |= SD_PARITY_ERROR;
     824:	60 e2       	ldi	r22, 0x20	; 32
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
     826:	82 ff       	sbrs	r24, 2
     828:	60 e0       	ldi	r22, 0x00	; 0
    sts |= SD_PARITY_ERROR;
  if (sra & fe)
     82a:	84 fd       	sbrc	r24, 4
     82c:	1e c0       	rjmp	.+60     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     82e:	8f e4       	ldi	r24, 0x4F	; 79
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	79 d6       	rcall	.+3314   	; 0x1526 <chEvtBroadcastFlagsI>

  sra = UCSR0A;
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
     834:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     838:	8d e4       	ldi	r24, 0x4D	; 77
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	39 df       	rcall	.-398    	; 0x6b0 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     83e:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <__avr_in_isr>
     842:	82 d4       	rcall	.+2308   	; 0x1148 <chSchIsPreemptionRequired>
     844:	81 11       	cpse	r24, r1
     846:	90 d4       	rcall	.+2336   	; 0x1168 <chSchDoPreemption>
}
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	7f 91       	pop	r23
     856:	6f 91       	pop	r22
     858:	5f 91       	pop	r21
     85a:	4f 91       	pop	r20
     85c:	3f 91       	pop	r19
     85e:	2f 91       	pop	r18
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti
  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    sts |= SD_PARITY_ERROR;
  if (sra & fe)
    sts |= SD_FRAMING_ERROR;
     86a:	60 64       	ori	r22, 0x40	; 64
     86c:	e0 cf       	rjmp	.-64     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>

0000086e <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
     896:	8d e4       	ldi	r24, 0x4D	; 77
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	2e df       	rcall	.-420    	; 0x6f8 <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
     89c:	97 fd       	sbrc	r25, 7
     89e:	18 c0       	rjmp	.+48     	; 0x8d0 <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
     8a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

  OSAL_IRQ_EPILOGUE();
     8a4:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <__avr_in_isr>
     8a8:	4f d4       	rcall	.+2206   	; 0x1148 <chSchIsPreemptionRequired>
     8aa:	81 11       	cpse	r24, r1
     8ac:	5d d4       	rcall	.+2234   	; 0x1168 <chSchDoPreemption>
}
     8ae:	ff 91       	pop	r31
     8b0:	ef 91       	pop	r30
     8b2:	bf 91       	pop	r27
     8b4:	af 91       	pop	r26
     8b6:	9f 91       	pop	r25
     8b8:	8f 91       	pop	r24
     8ba:	7f 91       	pop	r23
     8bc:	6f 91       	pop	r22
     8be:	5f 91       	pop	r21
     8c0:	4f 91       	pop	r20
     8c2:	3f 91       	pop	r19
     8c4:	2f 91       	pop	r18
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
     8d0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     8d4:	8f 7d       	andi	r24, 0xDF	; 223
     8d6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     8da:	e4 cf       	rjmp	.-56     	; 0x8a4 <__vector_19+0x36>

000008dc <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
     8dc:	43 ef       	ldi	r20, 0xF3	; 243
     8de:	53 e0       	ldi	r21, 0x03	; 3
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	8d e4       	ldi	r24, 0x4D	; 77
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	b8 ce       	rjmp	.-656    	; 0x65a <sdObjectInit>

000008ea <chSysInit>:
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    ch_delta_list_t *dlp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	c6 e9       	ldi	r28, 0x96	; 150
     8f0:	d2 e0       	ldi	r29, 0x02	; 2
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	88 83       	st	Y, r24
     8f6:	1a 82       	std	Y+2, r1	; 0x02
     8f8:	19 82       	std	Y+1, r1	; 0x01
     8fa:	3a d6       	rcall	.+3188   	; 0x1570 <__core_init>
     8fc:	69 d6       	rcall	.+3282   	; 0x15d0 <__heap_init>
     8fe:	6d e1       	ldi	r22, 0x1D	; 29
     900:	71 e0       	ldi	r23, 0x01	; 1
     902:	89 e9       	ldi	r24, 0x99	; 153
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	70 d4       	rcall	.+2272   	; 0x11e8 <chInstanceObjectInit>
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	88 83       	st	Y, r24
     90c:	78 94       	sei
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <chSysTimerHandlerI>:
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
     914:	30 c2       	rjmp	.+1120   	; 0xd76 <chVTDoTickI>

00000916 <chRFCUCollectFaultsI>:
/**
 * @brief   Adds fault flags to the current mask.
 *
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
     91a:	e9 e9       	ldi	r30, 0x99	; 153
     91c:	f2 e0       	ldi	r31, 0x02	; 2
     91e:	07 8d       	ldd	r16, Z+31	; 0x1f
     920:	10 a1       	ldd	r17, Z+32	; 0x20
     922:	21 a1       	ldd	r18, Z+33	; 0x21
     924:	32 a1       	ldd	r19, Z+34	; 0x22
     926:	dc 01       	movw	r26, r24
     928:	cb 01       	movw	r24, r22
     92a:	80 2b       	or	r24, r16
     92c:	91 2b       	or	r25, r17
     92e:	a2 2b       	or	r26, r18
     930:	b3 2b       	or	r27, r19
     932:	87 8f       	std	Z+31, r24	; 0x1f
     934:	90 a3       	std	Z+32, r25	; 0x20
     936:	a1 a3       	std	Z+33, r26	; 0x21
     938:	b2 a3       	std	Z+34, r27	; 0x22
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	08 95       	ret

00000940 <vt_insert_first.constprop.5>:
  } while (dlp != &vtlp->dlist);

  chDbgAssert(false, "timer not in list");

  return (sysinterval_t)-1;
}
     940:	8f 92       	push	r8
     942:	9f 92       	push	r9
     944:	af 92       	push	r10
     946:	bf 92       	push	r11
     948:	cf 92       	push	r12
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	fc 01       	movw	r30, r24
     95a:	eb 01       	movw	r28, r22
     95c:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <ch0+0x10>
     960:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <ch0+0xf>
     964:	24 83       	std	Z+4, r18	; 0x04
     966:	35 83       	std	Z+5, r19	; 0x05
     968:	46 83       	std	Z+6, r20	; 0x06
     96a:	57 83       	std	Z+7, r21	; 0x07
     96c:	80 ea       	ldi	r24, 0xA0	; 160
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	93 83       	std	Z+3, r25	; 0x03
     972:	82 83       	std	Z+2, r24	; 0x02
     974:	a0 91 a0 02 	lds	r26, 0x02A0	; 0x8002a0 <ch0+0x7>
     978:	b0 91 a1 02 	lds	r27, 0x02A1	; 0x8002a1 <ch0+0x8>
     97c:	b1 83       	std	Z+1, r27	; 0x01
     97e:	a0 83       	st	Z, r26
     980:	13 96       	adiw	r26, 0x03	; 3
     982:	fc 93       	st	X, r31
     984:	ee 93       	st	-X, r30
     986:	12 97       	sbiw	r26, 0x02	; 2
     988:	f0 93 a1 02 	sts	0x02A1, r31	; 0x8002a1 <ch0+0x8>
     98c:	e0 93 a0 02 	sts	0x02A0, r30	; 0x8002a0 <ch0+0x7>
     990:	69 01       	movw	r12, r18
     992:	7a 01       	movw	r14, r20
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	c8 16       	cp	r12, r24
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	d8 06       	cpc	r13, r24
     99c:	e1 04       	cpc	r14, r1
     99e:	f1 04       	cpc	r15, r1
     9a0:	20 f0       	brcs	.+8      	; 0x9aa <vt_insert_first.constprop.5+0x6a>
     9a2:	c1 2c       	mov	r12, r1
     9a4:	d1 2c       	mov	r13, r1
     9a6:	76 01       	movw	r14, r12
     9a8:	da 94       	dec	r13
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	c8 16       	cp	r12, r24
     9ae:	d1 04       	cpc	r13, r1
     9b0:	e1 04       	cpc	r14, r1
     9b2:	f1 04       	cpc	r15, r1
     9b4:	28 f4       	brcc	.+10     	; 0x9c0 <vt_insert_first.constprop.5+0x80>
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	c9 2e       	mov	r12, r25
     9ba:	d1 2c       	mov	r13, r1
     9bc:	e1 2c       	mov	r14, r1
     9be:	f1 2c       	mov	r15, r1
     9c0:	ce 01       	movw	r24, r28
     9c2:	8c 0d       	add	r24, r12
     9c4:	9d 1d       	adc	r25, r13
     9c6:	8c db       	rcall	.-2280   	; 0xe0 <stStartAlarm>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	88 2e       	mov	r8, r24
     9cc:	91 2c       	mov	r9, r1
     9ce:	a1 2c       	mov	r10, r1
     9d0:	b1 2c       	mov	r11, r1
     9d2:	0e c0       	rjmp	.+28     	; 0x9f0 <vt_insert_first.constprop.5+0xb0>
     9d4:	75 01       	movw	r14, r10
     9d6:	64 01       	movw	r12, r8
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	c8 1a       	sub	r12, r24
     9dc:	d8 0a       	sbc	r13, r24
     9de:	e8 0a       	sbc	r14, r24
     9e0:	f8 0a       	sbc	r15, r24
     9e2:	ce 01       	movw	r24, r28
     9e4:	8c 0d       	add	r24, r12
     9e6:	9d 1d       	adc	r25, r13
     9e8:	87 db       	rcall	.-2290   	; 0xf8 <stSetAlarm>
     9ea:	e8 01       	movw	r28, r16
     9ec:	46 01       	movw	r8, r12
     9ee:	57 01       	movw	r10, r14
     9f0:	72 db       	rcall	.-2332   	; 0xd6 <stGetCounter>
     9f2:	8c 01       	movw	r16, r24
     9f4:	8c 1b       	sub	r24, r28
     9f6:	9d 0b       	sbc	r25, r29
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	a0 e0       	ldi	r26, 0x00	; 0
     9fc:	8c 15       	cp	r24, r12
     9fe:	9d 05       	cpc	r25, r13
     a00:	ae 05       	cpc	r26, r14
     a02:	bf 05       	cpc	r27, r15
     a04:	38 f7       	brcc	.-50     	; 0x9d4 <vt_insert_first.constprop.5+0x94>
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	88 16       	cp	r8, r24
     a0a:	91 04       	cpc	r9, r1
     a0c:	a1 04       	cpc	r10, r1
     a0e:	b1 04       	cpc	r11, r1
     a10:	68 f4       	brcc	.+26     	; 0xa2c <vt_insert_first.constprop.5+0xec>
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	ef 90       	pop	r14
     a1e:	df 90       	pop	r13
     a20:	cf 90       	pop	r12
     a22:	bf 90       	pop	r11
     a24:	af 90       	pop	r10
     a26:	9f 90       	pop	r9
     a28:	8f 90       	pop	r8
     a2a:	08 95       	ret
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	64 cf       	rjmp	.-312    	; 0x916 <chRFCUCollectFaultsI>

00000a4e <vt_set_alarm>:
     a4e:	8f 92       	push	r8
     a50:	9f 92       	push	r9
     a52:	af 92       	push	r10
     a54:	bf 92       	push	r11
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
     a64:	6a 01       	movw	r12, r20
     a66:	7b 01       	movw	r14, r22
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	c2 16       	cp	r12, r18
     a6c:	2f ef       	ldi	r18, 0xFF	; 255
     a6e:	d2 06       	cpc	r13, r18
     a70:	e1 04       	cpc	r14, r1
     a72:	f1 04       	cpc	r15, r1
     a74:	20 f0       	brcs	.+8      	; 0xa7e <vt_set_alarm+0x30>
     a76:	c1 2c       	mov	r12, r1
     a78:	d1 2c       	mov	r13, r1
     a7a:	76 01       	movw	r14, r12
     a7c:	da 94       	dec	r13
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	c8 16       	cp	r12, r24
     a82:	d1 04       	cpc	r13, r1
     a84:	e1 04       	cpc	r14, r1
     a86:	f1 04       	cpc	r15, r1
     a88:	28 f4       	brcc	.+10     	; 0xa94 <vt_set_alarm+0x46>
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	c9 2e       	mov	r12, r25
     a8e:	d1 2c       	mov	r13, r1
     a90:	e1 2c       	mov	r14, r1
     a92:	f1 2c       	mov	r15, r1
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	88 2e       	mov	r8, r24
     a98:	91 2c       	mov	r9, r1
     a9a:	a1 2c       	mov	r10, r1
     a9c:	b1 2c       	mov	r11, r1
     a9e:	0a c0       	rjmp	.+20     	; 0xab4 <vt_set_alarm+0x66>
     aa0:	75 01       	movw	r14, r10
     aa2:	64 01       	movw	r12, r8
     aa4:	2f ef       	ldi	r18, 0xFF	; 255
     aa6:	c2 1a       	sub	r12, r18
     aa8:	d2 0a       	sbc	r13, r18
     aaa:	e2 0a       	sbc	r14, r18
     aac:	f2 0a       	sbc	r15, r18
     aae:	ec 01       	movw	r28, r24
     ab0:	46 01       	movw	r8, r12
     ab2:	57 01       	movw	r10, r14
     ab4:	ce 01       	movw	r24, r28
     ab6:	8c 0d       	add	r24, r12
     ab8:	9d 1d       	adc	r25, r13
     aba:	1e db       	rcall	.-2500   	; 0xf8 <stSetAlarm>
     abc:	0c db       	rcall	.-2536   	; 0xd6 <stGetCounter>
     abe:	ac 01       	movw	r20, r24
     ac0:	4c 1b       	sub	r20, r28
     ac2:	5d 0b       	sbc	r21, r29
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	4c 15       	cp	r20, r12
     aca:	5d 05       	cpc	r21, r13
     acc:	6e 05       	cpc	r22, r14
     ace:	7f 05       	cpc	r23, r15
     ad0:	38 f7       	brcc	.-50     	; 0xaa0 <vt_set_alarm+0x52>
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	88 16       	cp	r8, r24
     ad6:	91 04       	cpc	r9, r1
     ad8:	a1 04       	cpc	r10, r1
     ada:	b1 04       	cpc	r11, r1
     adc:	58 f4       	brcc	.+22     	; 0xaf4 <vt_set_alarm+0xa6>
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	08 95       	ret
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	bf 90       	pop	r11
     b0a:	af 90       	pop	r10
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	02 cf       	rjmp	.-508    	; 0x916 <chRFCUCollectFaultsI>

00000b12 <vt_enqueue.constprop.4>:
     b12:	8f 92       	push	r8
     b14:	9f 92       	push	r9
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	ec 01       	movw	r28, r24
     b28:	4a 01       	movw	r8, r20
     b2a:	5b 01       	movw	r10, r22
     b2c:	d4 da       	rcall	.-2648   	; 0xd6 <stGetCounter>
     b2e:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <ch0+0x7>
     b32:	f0 91 a1 02 	lds	r31, 0x02A1	; 0x8002a1 <ch0+0x8>
     b36:	22 e0       	ldi	r18, 0x02	; 2
     b38:	e0 3a       	cpi	r30, 0xA0	; 160
     b3a:	f2 07       	cpc	r31, r18
     b3c:	09 f4       	brne	.+2      	; 0xb40 <vt_enqueue.constprop.4+0x2e>
     b3e:	73 c0       	rjmp	.+230    	; 0xc26 <vt_enqueue.constprop.4+0x114>
     b40:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <ch0+0xf>
     b44:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <ch0+0x10>
     b48:	ac 01       	movw	r20, r24
     b4a:	42 1b       	sub	r20, r18
     b4c:	53 0b       	sbc	r21, r19
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	75 01       	movw	r14, r10
     b54:	64 01       	movw	r12, r8
     b56:	c4 0e       	add	r12, r20
     b58:	d5 1e       	adc	r13, r21
     b5a:	e6 1e       	adc	r14, r22
     b5c:	f7 1e       	adc	r15, r23
     b5e:	c4 16       	cp	r12, r20
     b60:	d5 06       	cpc	r13, r21
     b62:	e6 06       	cpc	r14, r22
     b64:	f7 06       	cpc	r15, r23
     b66:	08 f4       	brcc	.+2      	; 0xb6a <vt_enqueue.constprop.4+0x58>
     b68:	4f c0       	rjmp	.+158    	; 0xc08 <vt_enqueue.constprop.4+0xf6>
     b6a:	44 81       	ldd	r20, Z+4	; 0x04
     b6c:	55 81       	ldd	r21, Z+5	; 0x05
     b6e:	66 81       	ldd	r22, Z+6	; 0x06
     b70:	77 81       	ldd	r23, Z+7	; 0x07
     b72:	c4 16       	cp	r12, r20
     b74:	d5 06       	cpc	r13, r21
     b76:	e6 06       	cpc	r14, r22
     b78:	f7 06       	cpc	r15, r23
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <vt_enqueue.constprop.4+0x6c>
     b7c:	48 c0       	rjmp	.+144    	; 0xc0e <vt_enqueue.constprop.4+0xfc>
     b7e:	4c 15       	cp	r20, r12
     b80:	5d 05       	cpc	r21, r13
     b82:	6e 05       	cpc	r22, r14
     b84:	7f 05       	cpc	r23, r15
     b86:	80 f4       	brcc	.+32     	; 0xba8 <vt_enqueue.constprop.4+0x96>
     b88:	c4 1a       	sub	r12, r20
     b8a:	d5 0a       	sbc	r13, r21
     b8c:	e6 0a       	sbc	r14, r22
     b8e:	f7 0a       	sbc	r15, r23
     b90:	01 90       	ld	r0, Z+
     b92:	f0 81       	ld	r31, Z
     b94:	e0 2d       	mov	r30, r0
     b96:	44 81       	ldd	r20, Z+4	; 0x04
     b98:	55 81       	ldd	r21, Z+5	; 0x05
     b9a:	66 81       	ldd	r22, Z+6	; 0x06
     b9c:	77 81       	ldd	r23, Z+7	; 0x07
     b9e:	4c 15       	cp	r20, r12
     ba0:	5d 05       	cpc	r21, r13
     ba2:	6e 05       	cpc	r22, r14
     ba4:	7f 05       	cpc	r23, r15
     ba6:	80 f3       	brcs	.-32     	; 0xb88 <vt_enqueue.constprop.4+0x76>
     ba8:	cc 82       	std	Y+4, r12	; 0x04
     baa:	dd 82       	std	Y+5, r13	; 0x05
     bac:	ee 82       	std	Y+6, r14	; 0x06
     bae:	ff 82       	std	Y+7, r15	; 0x07
     bb0:	f9 83       	std	Y+1, r31	; 0x01
     bb2:	e8 83       	st	Y, r30
     bb4:	a2 81       	ldd	r26, Z+2	; 0x02
     bb6:	b3 81       	ldd	r27, Z+3	; 0x03
     bb8:	bb 83       	std	Y+3, r27	; 0x03
     bba:	aa 83       	std	Y+2, r26	; 0x02
     bbc:	cd 93       	st	X+, r28
     bbe:	dc 93       	st	X, r29
     bc0:	d3 83       	std	Z+3, r29	; 0x03
     bc2:	c2 83       	std	Z+2, r28	; 0x02
     bc4:	84 81       	ldd	r24, Z+4	; 0x04
     bc6:	95 81       	ldd	r25, Z+5	; 0x05
     bc8:	a6 81       	ldd	r26, Z+6	; 0x06
     bca:	b7 81       	ldd	r27, Z+7	; 0x07
     bcc:	8c 19       	sub	r24, r12
     bce:	9d 09       	sbc	r25, r13
     bd0:	ae 09       	sbc	r26, r14
     bd2:	bf 09       	sbc	r27, r15
     bd4:	84 83       	std	Z+4, r24	; 0x04
     bd6:	95 83       	std	Z+5, r25	; 0x05
     bd8:	a6 83       	std	Z+6, r26	; 0x06
     bda:	b7 83       	std	Z+7, r27	; 0x07
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	9f ef       	ldi	r25, 0xFF	; 255
     be0:	dc 01       	movw	r26, r24
     be2:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <ch0+0xb>
     be6:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <ch0+0xc>
     bea:	a0 93 a6 02 	sts	0x02A6, r26	; 0x8002a6 <ch0+0xd>
     bee:	b0 93 a7 02 	sts	0x02A7, r27	; 0x8002a7 <ch0+0xe>
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	df 90       	pop	r13
     bfc:	cf 90       	pop	r12
     bfe:	bf 90       	pop	r11
     c00:	af 90       	pop	r10
     c02:	9f 90       	pop	r9
     c04:	8f 90       	pop	r8
     c06:	08 95       	ret
     c08:	75 01       	movw	r14, r10
     c0a:	64 01       	movw	r12, r8
     c0c:	ae cf       	rjmp	.-164    	; 0xb6a <vt_enqueue.constprop.4+0x58>
     c0e:	b5 01       	movw	r22, r10
     c10:	a4 01       	movw	r20, r8
     c12:	1d df       	rcall	.-454    	; 0xa4e <vt_set_alarm>
     c14:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <ch0+0x7>
     c18:	f0 91 a1 02 	lds	r31, 0x02A1	; 0x8002a1 <ch0+0x8>
     c1c:	44 81       	ldd	r20, Z+4	; 0x04
     c1e:	55 81       	ldd	r21, Z+5	; 0x05
     c20:	66 81       	ldd	r22, Z+6	; 0x06
     c22:	77 81       	ldd	r23, Z+7	; 0x07
     c24:	ac cf       	rjmp	.-168    	; 0xb7e <vt_enqueue.constprop.4+0x6c>
     c26:	a5 01       	movw	r20, r10
     c28:	94 01       	movw	r18, r8
     c2a:	bc 01       	movw	r22, r24
     c2c:	ce 01       	movw	r24, r28
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	8f 90       	pop	r8
     c42:	7e ce       	rjmp	.-772    	; 0x940 <vt_insert_first.constprop.5>

00000c44 <chVTDoSetI>:
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	fc 01       	movw	r30, r24
     c4a:	13 87       	std	Z+11, r17	; 0x0b
     c4c:	02 87       	std	Z+10, r16	; 0x0a
     c4e:	31 87       	std	Z+9, r19	; 0x09
     c50:	20 87       	std	Z+8, r18	; 0x08
     c52:	14 86       	std	Z+12, r1	; 0x0c
     c54:	15 86       	std	Z+13, r1	; 0x0d
     c56:	16 86       	std	Z+14, r1	; 0x0e
     c58:	17 86       	std	Z+15, r1	; 0x0f
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	59 cf       	rjmp	.-334    	; 0xb12 <vt_enqueue.constprop.4>

00000c60 <chVTDoResetI>:
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	fc 01       	movw	r30, r24
     c6a:	a0 81       	ld	r26, Z
     c6c:	b1 81       	ldd	r27, Z+1	; 0x01
     c6e:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <ch0+0x7>
     c72:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <ch0+0x8>
     c76:	e8 17       	cp	r30, r24
     c78:	f9 07       	cpc	r31, r25
     c7a:	81 f1       	breq	.+96     	; 0xcdc <chVTDoResetI+0x7c>
     c7c:	c2 81       	ldd	r28, Z+2	; 0x02
     c7e:	d3 81       	ldd	r29, Z+3	; 0x03
     c80:	b9 83       	std	Y+1, r27	; 0x01
     c82:	a8 83       	st	Y, r26
     c84:	a0 81       	ld	r26, Z
     c86:	b1 81       	ldd	r27, Z+1	; 0x01
     c88:	13 96       	adiw	r26, 0x03	; 3
     c8a:	dc 93       	st	X, r29
     c8c:	ce 93       	st	-X, r28
     c8e:	12 97       	sbiw	r26, 0x02	; 2
     c90:	14 96       	adiw	r26, 0x04	; 4
     c92:	4d 91       	ld	r20, X+
     c94:	5d 91       	ld	r21, X+
     c96:	6d 91       	ld	r22, X+
     c98:	7c 91       	ld	r23, X
     c9a:	17 97       	sbiw	r26, 0x07	; 7
     c9c:	04 81       	ldd	r16, Z+4	; 0x04
     c9e:	15 81       	ldd	r17, Z+5	; 0x05
     ca0:	26 81       	ldd	r18, Z+6	; 0x06
     ca2:	37 81       	ldd	r19, Z+7	; 0x07
     ca4:	40 0f       	add	r20, r16
     ca6:	51 1f       	adc	r21, r17
     ca8:	62 1f       	adc	r22, r18
     caa:	73 1f       	adc	r23, r19
     cac:	14 96       	adiw	r26, 0x04	; 4
     cae:	4d 93       	st	X+, r20
     cb0:	5d 93       	st	X+, r21
     cb2:	6d 93       	st	X+, r22
     cb4:	7c 93       	st	X, r23
     cb6:	17 97       	sbiw	r26, 0x07	; 7
     cb8:	11 82       	std	Z+1, r1	; 0x01
     cba:	10 82       	st	Z, r1
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	9f ef       	ldi	r25, 0xFF	; 255
     cc0:	dc 01       	movw	r26, r24
     cc2:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <ch0+0xb>
     cc6:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <ch0+0xc>
     cca:	a0 93 a6 02 	sts	0x02A6, r26	; 0x8002a6 <ch0+0xd>
     cce:	b0 93 a7 02 	sts	0x02A7, r27	; 0x8002a7 <ch0+0xe>
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	08 95       	ret
     cdc:	b0 93 a1 02 	sts	0x02A1, r27	; 0x8002a1 <ch0+0x8>
     ce0:	a0 93 a0 02 	sts	0x02A0, r26	; 0x8002a0 <ch0+0x7>
     ce4:	80 ea       	ldi	r24, 0xA0	; 160
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	13 96       	adiw	r26, 0x03	; 3
     cea:	9c 93       	st	X, r25
     cec:	8e 93       	st	-X, r24
     cee:	12 97       	sbiw	r26, 0x02	; 2
     cf0:	11 82       	std	Z+1, r1	; 0x01
     cf2:	10 82       	st	Z, r1
     cf4:	a0 91 a0 02 	lds	r26, 0x02A0	; 0x8002a0 <ch0+0x7>
     cf8:	b0 91 a1 02 	lds	r27, 0x02A1	; 0x8002a1 <ch0+0x8>
     cfc:	a8 17       	cp	r26, r24
     cfe:	b9 07       	cpc	r27, r25
     d00:	a9 f1       	breq	.+106    	; 0xd6c <chVTDoResetI+0x10c>
     d02:	14 96       	adiw	r26, 0x04	; 4
     d04:	4d 91       	ld	r20, X+
     d06:	5d 91       	ld	r21, X+
     d08:	6d 91       	ld	r22, X+
     d0a:	7c 91       	ld	r23, X
     d0c:	17 97       	sbiw	r26, 0x07	; 7
     d0e:	04 81       	ldd	r16, Z+4	; 0x04
     d10:	15 81       	ldd	r17, Z+5	; 0x05
     d12:	26 81       	ldd	r18, Z+6	; 0x06
     d14:	37 81       	ldd	r19, Z+7	; 0x07
     d16:	40 0f       	add	r20, r16
     d18:	51 1f       	adc	r21, r17
     d1a:	62 1f       	adc	r22, r18
     d1c:	73 1f       	adc	r23, r19
     d1e:	14 96       	adiw	r26, 0x04	; 4
     d20:	4d 93       	st	X+, r20
     d22:	5d 93       	st	X+, r21
     d24:	6d 93       	st	X+, r22
     d26:	7c 93       	st	X, r23
     d28:	17 97       	sbiw	r26, 0x07	; 7
     d2a:	d5 d9       	rcall	.-3158   	; 0xd6 <stGetCounter>
     d2c:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <ch0+0xf>
     d30:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <ch0+0x10>
     d34:	8c 01       	movw	r16, r24
     d36:	02 1b       	sub	r16, r18
     d38:	13 0b       	sbc	r17, r19
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <ch0+0x7>
     d42:	f0 91 a1 02 	lds	r31, 0x02A1	; 0x8002a1 <ch0+0x8>
     d46:	44 81       	ldd	r20, Z+4	; 0x04
     d48:	55 81       	ldd	r21, Z+5	; 0x05
     d4a:	66 81       	ldd	r22, Z+6	; 0x06
     d4c:	77 81       	ldd	r23, Z+7	; 0x07
     d4e:	04 17       	cp	r16, r20
     d50:	15 07       	cpc	r17, r21
     d52:	26 07       	cpc	r18, r22
     d54:	37 07       	cpc	r19, r23
     d56:	08 f0       	brcs	.+2      	; 0xd5a <chVTDoResetI+0xfa>
     d58:	bc cf       	rjmp	.-136    	; 0xcd2 <chVTDoResetI+0x72>
     d5a:	40 1b       	sub	r20, r16
     d5c:	51 0b       	sbc	r21, r17
     d5e:	62 0b       	sbc	r22, r18
     d60:	73 0b       	sbc	r23, r19
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	71 ce       	rjmp	.-798    	; 0xa4e <vt_set_alarm>
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	be c9       	rjmp	.-3204   	; 0xf2 <stStopAlarm>

00000d76 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
     d76:	4f 92       	push	r4
     d78:	5f 92       	push	r5
     d7a:	6f 92       	push	r6
     d7c:	7f 92       	push	r7
     d7e:	8f 92       	push	r8
     d80:	9f 92       	push	r9
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
  dlp->delta -= delta;

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     d96:	cc 24       	eor	r12, r12
     d98:	ca 94       	dec	r12
     d9a:	dc 2c       	mov	r13, r12
     d9c:	76 01       	movw	r14, r12
     d9e:	0f c0       	rjmp	.+30     	; 0xdbe <chVTDoTickI+0x48>
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
     da0:	6a 85       	ldd	r22, Y+10	; 0x0a
     da2:	7b 85       	ldd	r23, Y+11	; 0x0b
     da4:	e8 85       	ldd	r30, Y+8	; 0x08
     da6:	f9 85       	ldd	r31, Y+9	; 0x09
     da8:	ce 01       	movw	r24, r28
     daa:	09 95       	icall

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
     dac:	8c 85       	ldd	r24, Y+12	; 0x0c
     dae:	9d 85       	ldd	r25, Y+13	; 0x0d
     db0:	ae 85       	ldd	r26, Y+14	; 0x0e
     db2:	bf 85       	ldd	r27, Y+15	; 0x0f
     db4:	89 2b       	or	r24, r25
     db6:	8a 2b       	or	r24, r26
     db8:	8b 2b       	or	r24, r27
     dba:	09 f0       	breq	.+2      	; 0xdbe <chVTDoTickI+0x48>
     dbc:	5a c0       	rjmp	.+180    	; 0xe72 <chVTDoTickI+0xfc>
     than the interval between "now" and "lasttime".*/
  while (true) {
    systime_t lasttime;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
     dbe:	c0 91 a0 02 	lds	r28, 0x02A0	; 0x8002a0 <ch0+0x7>
     dc2:	d0 91 a1 02 	lds	r29, 0x02A1	; 0x8002a1 <ch0+0x8>
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {

  return stGetCounter();
     dc6:	87 d9       	rcall	.-3314   	; 0xd6 <stGetCounter>

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
     dc8:	00 91 a8 02 	lds	r16, 0x02A8	; 0x8002a8 <ch0+0xf>
     dcc:	10 91 a9 02 	lds	r17, 0x02A9	; 0x8002a9 <ch0+0x10>
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
     dd0:	4c 01       	movw	r8, r24
     dd2:	80 1a       	sub	r8, r16
     dd4:	91 0a       	sbc	r9, r17
     dd6:	b1 2c       	mov	r11, r1
     dd8:	a1 2c       	mov	r10, r1

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
     dda:	4c 81       	ldd	r20, Y+4	; 0x04
     ddc:	5d 81       	ldd	r21, Y+5	; 0x05
     dde:	6e 81       	ldd	r22, Y+6	; 0x06
     de0:	7f 81       	ldd	r23, Y+7	; 0x07
     de2:	84 16       	cp	r8, r20
     de4:	95 06       	cpc	r9, r21
     de6:	a6 06       	cpc	r10, r22
     de8:	b7 06       	cpc	r11, r23
     dea:	f0 f0       	brcs	.+60     	; 0xe28 <chVTDoTickI+0xb2>

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
     dec:	04 0f       	add	r16, r20
     dee:	15 1f       	adc	r17, r21
      break;
    }

    /* Last time deadline is updated to the next timer's time.*/
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;
     df0:	10 93 a9 02 	sts	0x02A9, r17	; 0x8002a9 <ch0+0x10>
     df4:	00 93 a8 02 	sts	0x02A8, r16	; 0x8002a8 <ch0+0xf>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
     df8:	ea 81       	ldd	r30, Y+2	; 0x02
     dfa:	fb 81       	ldd	r31, Y+3	; 0x03
     dfc:	88 81       	ld	r24, Y
     dfe:	99 81       	ldd	r25, Y+1	; 0x01
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
  dlp->next->prev = dlp->prev;
     e04:	a8 81       	ld	r26, Y
     e06:	b9 81       	ldd	r27, Y+1	; 0x01
     e08:	13 96       	adiw	r26, 0x03	; 3
     e0a:	fc 93       	st	X, r31
     e0c:	ee 93       	st	-X, r30
     e0e:	12 97       	sbiw	r26, 0x02	; 2

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
     e10:	19 82       	std	Y+1, r1	; 0x01
     e12:	18 82       	st	Y, r1

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
     e14:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <ch0+0x7>
     e18:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <ch0+0x8>
     e1c:	80 5a       	subi	r24, 0xA0	; 160
     e1e:	92 40       	sbci	r25, 0x02	; 2
     e20:	09 f0       	breq	.+2      	; 0xe24 <chVTDoTickI+0xae>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     e22:	be cf       	rjmp	.-132    	; 0xda0 <chVTDoTickI+0x2a>
     e24:	66 d9       	rcall	.-3380   	; 0xf2 <stStopAlarm>
     e26:	bc cf       	rjmp	.-136    	; 0xda0 <chVTDoTickI+0x2a>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
     e28:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <ch0+0x7>
     e2c:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <ch0+0x8>
     e30:	20 5a       	subi	r18, 0xA0	; 160
     e32:	32 40       	sbci	r19, 0x02	; 2
     e34:	09 f4       	brne	.+2      	; 0xe38 <chVTDoTickI+0xc2>
     e36:	78 c0       	rjmp	.+240    	; 0xf28 <chVTDoTickI+0x1b2>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
     e38:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <ch0+0x10>
     e3c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <ch0+0xf>
  vtp->dlist.delta -= nowdelta;
     e40:	48 19       	sub	r20, r8
     e42:	59 09       	sbc	r21, r9
     e44:	6a 09       	sbc	r22, r10
     e46:	7b 09       	sbc	r23, r11
     e48:	4c 83       	std	Y+4, r20	; 0x04
     e4a:	5d 83       	std	Y+5, r21	; 0x05
     e4c:	6e 83       	std	Y+6, r22	; 0x06
     e4e:	7f 83       	std	Y+7, r23	; 0x07

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	bf 90       	pop	r11
     e62:	af 90       	pop	r10
     e64:	9f 90       	pop	r9
     e66:	8f 90       	pop	r8
     e68:	7f 90       	pop	r7
     e6a:	6f 90       	pop	r6
     e6c:	5f 90       	pop	r5
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
     e6e:	4f 90       	pop	r4
     e70:	ee cd       	rjmp	.-1060   	; 0xa4e <vt_set_alarm>
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {

  return stGetCounter();
     e72:	31 d9       	rcall	.-3486   	; 0xd6 <stGetCounter>
     e74:	5c 01       	movw	r10, r24
     e76:	2c 01       	movw	r4, r24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
     e78:	40 1a       	sub	r4, r16
     e7a:	51 0a       	sbc	r5, r17
     e7c:	71 2c       	mov	r7, r1
     e7e:	61 2c       	mov	r6, r1
     e80:	8c 85       	ldd	r24, Y+12	; 0x0c
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
     e82:	9d 85       	ldd	r25, Y+13	; 0x0d
     e84:	ae 85       	ldd	r26, Y+14	; 0x0e
     e86:	bf 85       	ldd	r27, Y+15	; 0x0f
     e88:	84 15       	cp	r24, r4
     e8a:	95 05       	cpc	r25, r5
     e8c:	a6 05       	cpc	r26, r6
     e8e:	b7 05       	cpc	r27, r7
     e90:	08 f4       	brcc	.+2      	; 0xe94 <chVTDoTickI+0x11e>
     e92:	5b c0       	rjmp	.+182    	; 0xf4a <chVTDoTickI+0x1d4>
     e94:	00 91 a0 02 	lds	r16, 0x02A0	; 0x8002a0 <ch0+0x7>
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {

  return (bool)(dlhp == dlhp->next);
     e98:	10 91 a1 02 	lds	r17, 0x02A1	; 0x8002a1 <ch0+0x8>
     e9c:	e2 e0       	ldi	r30, 0x02	; 2
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
     e9e:	00 3a       	cpi	r16, 0xA0	; 160
     ea0:	1e 07       	cpc	r17, r30
     ea2:	09 f4       	brne	.+2      	; 0xea6 <chVTDoTickI+0x130>
     ea4:	62 c0       	rjmp	.+196    	; 0xf6a <chVTDoTickI+0x1f4>
     ea6:	f8 01       	movw	r30, r16
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     ea8:	44 81       	ldd	r20, Z+4	; 0x04
     eaa:	55 81       	ldd	r21, Z+5	; 0x05
     eac:	66 81       	ldd	r22, Z+6	; 0x06
     eae:	77 81       	ldd	r23, Z+7	; 0x07
     eb0:	48 17       	cp	r20, r24
     eb2:	59 07       	cpc	r21, r25
     eb4:	6a 07       	cpc	r22, r26
     eb6:	7b 07       	cpc	r23, r27
     eb8:	88 f4       	brcc	.+34     	; 0xedc <chVTDoTickI+0x166>
     eba:	84 1b       	sub	r24, r20
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
     ebc:	95 0b       	sbc	r25, r21
     ebe:	a6 0b       	sbc	r26, r22
     ec0:	b7 0b       	sbc	r27, r23
     ec2:	f8 01       	movw	r30, r16
    dlp = dlp->next;
     ec4:	00 81       	ld	r16, Z
     ec6:	11 81       	ldd	r17, Z+1	; 0x01
     ec8:	f8 01       	movw	r30, r16
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     eca:	44 81       	ldd	r20, Z+4	; 0x04
     ecc:	55 81       	ldd	r21, Z+5	; 0x05
     ece:	66 81       	ldd	r22, Z+6	; 0x06
     ed0:	77 81       	ldd	r23, Z+7	; 0x07
     ed2:	48 17       	cp	r20, r24
     ed4:	59 07       	cpc	r21, r25
     ed6:	6a 07       	cpc	r22, r26
     ed8:	7b 07       	cpc	r23, r27
     eda:	78 f3       	brcs	.-34     	; 0xeba <chVTDoTickI+0x144>
     edc:	8c 83       	std	Y+4, r24	; 0x04
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {

  dlp->delta      = delta;
     ede:	9d 83       	std	Y+5, r25	; 0x05
     ee0:	ae 83       	std	Y+6, r26	; 0x06
     ee2:	bf 83       	std	Y+7, r27	; 0x07
     ee4:	19 83       	std	Y+1, r17	; 0x01
  dlp->next       = dlhp;
     ee6:	08 83       	st	Y, r16
     ee8:	f8 01       	movw	r30, r16
  dlp->prev       = dlp->next->prev;
     eea:	22 81       	ldd	r18, Z+2	; 0x02
     eec:	33 81       	ldd	r19, Z+3	; 0x03
     eee:	3b 83       	std	Y+3, r19	; 0x03
     ef0:	2a 83       	std	Y+2, r18	; 0x02
     ef2:	f9 01       	movw	r30, r18
  dlp->prev->next = dlp;
     ef4:	d1 83       	std	Z+1, r29	; 0x01
     ef6:	c0 83       	st	Z, r28
     ef8:	f8 01       	movw	r30, r16
  dlhp->prev      = dlp;
     efa:	d3 83       	std	Z+3, r29	; 0x03
     efc:	c2 83       	std	Z+2, r28	; 0x02
     efe:	44 81       	ldd	r20, Z+4	; 0x04

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
     f00:	55 81       	ldd	r21, Z+5	; 0x05
     f02:	66 81       	ldd	r22, Z+6	; 0x06
     f04:	77 81       	ldd	r23, Z+7	; 0x07
     f06:	48 1b       	sub	r20, r24
     f08:	59 0b       	sbc	r21, r25
     f0a:	6a 0b       	sbc	r22, r26
     f0c:	7b 0b       	sbc	r23, r27
     f0e:	44 83       	std	Z+4, r20	; 0x04
     f10:	55 83       	std	Z+5, r21	; 0x05
     f12:	66 83       	std	Z+6, r22	; 0x06
     f14:	77 83       	std	Z+7, r23	; 0x07
     f16:	c0 92 a4 02 	sts	0x02A4, r12	; 0x8002a4 <ch0+0xb>

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     f1a:	d0 92 a5 02 	sts	0x02A5, r13	; 0x8002a5 <ch0+0xc>
     f1e:	e0 92 a6 02 	sts	0x02A6, r14	; 0x8002a6 <ch0+0xd>
     f22:	f0 92 a7 02 	sts	0x02A7, r15	; 0x8002a7 <ch0+0xe>
     f26:	4b cf       	rjmp	.-362    	; 0xdbe <chVTDoTickI+0x48>
     f28:	df 91       	pop	r29
  vtp->dlist.delta -= nowdelta;

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	5f 90       	pop	r5
     f46:	4f 90       	pop	r4
     f48:	08 95       	ret
     f4a:	62 e0       	ldi	r22, 0x02	; 2
      if (nowdelta > vtp->reload) {
        /* System time is already past the deadline, logging the fault and
           proceeding with a minimum delay.*/

        chDbgAssert(false, "skipped deadline");
        chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	e1 dc       	rcall	.-1598   	; 0x916 <chRFCUCollectFaultsI>
     f54:	00 91 a0 02 	lds	r16, 0x02A0	; 0x8002a0 <ch0+0x7>
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {

  return (bool)(dlhp == dlhp->next);
     f58:	10 91 a1 02 	lds	r17, 0x02A1	; 0x8002a1 <ch0+0x8>
     f5c:	82 e0       	ldi	r24, 0x02	; 2
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
     f5e:	00 3a       	cpi	r16, 0xA0	; 160
     f60:	18 07       	cpc	r17, r24
     f62:	e1 f0       	breq	.+56     	; 0xf9c <chVTDoTickI+0x226>
     f64:	d3 01       	movw	r26, r6
     f66:	c2 01       	movw	r24, r4
     f68:	9e cf       	rjmp	.-196    	; 0xea6 <chVTDoTickI+0x130>
     f6a:	9c 01       	movw	r18, r24

        delay = (sysinterval_t)0;
      }
      else {
        /* Enqueuing the timer again using the calculated delta.*/
        delay = vtp->reload - nowdelta;
     f6c:	ad 01       	movw	r20, r26
     f6e:	24 19       	sub	r18, r4
     f70:	35 09       	sbc	r19, r5
     f72:	46 09       	sbc	r20, r6
     f74:	57 09       	sbc	r21, r7
     f76:	b5 01       	movw	r22, r10
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {

        vt_insert_first(vtlp, vtp, now, delay);
     f78:	ce 01       	movw	r24, r28
     f7a:	df 91       	pop	r29
  vtp->dlist.delta -= nowdelta;

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	bf 90       	pop	r11
     f8c:	af 90       	pop	r10
     f8e:	9f 90       	pop	r9
     f90:	8f 90       	pop	r8
     f92:	7f 90       	pop	r7
     f94:	6f 90       	pop	r6
     f96:	5f 90       	pop	r5
     f98:	4f 90       	pop	r4
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {

        vt_insert_first(vtlp, vtp, now, delay);
     f9a:	d2 cc       	rjmp	.-1628   	; 0x940 <vt_insert_first.constprop.5>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
           proceeding with a minimum delay.*/

        chDbgAssert(false, "skipped deadline");
        chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);

        delay = (sysinterval_t)0;
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	a9 01       	movw	r20, r18
     fa2:	e9 cf       	rjmp	.-46     	; 0xf76 <chVTDoTickI+0x200>

00000fa4 <__sch_wakeup>:
     fa4:	cf 93       	push	r28
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
     fa6:	df 93       	push	r29
     fa8:	db 01       	movw	r26, r22
     faa:	1f 96       	adiw	r26, 0x0f	; 15
     fac:	8c 91       	ld	r24, X
     fae:	1f 97       	sbiw	r26, 0x0f	; 15
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	f1 f1       	breq	.+124    	; 0x1030 <__sch_wakeup+0x8c>
     fb4:	80 f5       	brcc	.+96     	; 0x1016 <__sch_wakeup+0x72>
     fb6:	88 23       	and	r24, r24
     fb8:	59 f1       	breq	.+86     	; 0x1010 <__sch_wakeup+0x6c>
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	31 f4       	brne	.+12     	; 0xfca <__sch_wakeup+0x26>
     fbe:	52 96       	adiw	r26, 0x12	; 18
     fc0:	ed 91       	ld	r30, X+
     fc2:	fc 91       	ld	r31, X
     fc4:	53 97       	sbiw	r26, 0x13	; 19
     fc6:	11 82       	std	Z+1, r1	; 0x01
     fc8:	10 82       	st	Z, r1
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	9f ef       	ldi	r25, 0xFF	; 255
     fce:	53 96       	adiw	r26, 0x13	; 19
     fd0:	9c 93       	st	X, r25
     fd2:	8e 93       	st	-X, r24
     fd4:	52 97       	sbiw	r26, 0x12	; 18
     fd6:	1f 96       	adiw	r26, 0x0f	; 15
     fd8:	1c 92       	st	X, r1
     fda:	1f 97       	sbiw	r26, 0x0f	; 15
     fdc:	1b 96       	adiw	r26, 0x0b	; 11
     fde:	ed 91       	ld	r30, X+
     fe0:	fc 91       	ld	r31, X
     fe2:	1c 97       	sbiw	r26, 0x0c	; 12
     fe4:	14 96       	adiw	r26, 0x04	; 4
     fe6:	9c 91       	ld	r25, X
     fe8:	14 97       	sbiw	r26, 0x04	; 4
     fea:	01 90       	ld	r0, Z+
     fec:	f0 81       	ld	r31, Z
     fee:	e0 2d       	mov	r30, r0
     ff0:	84 81       	ldd	r24, Z+4	; 0x04
     ff2:	89 17       	cp	r24, r25
     ff4:	d0 f7       	brcc	.-12     	; 0xfea <__sch_wakeup+0x46>
     ff6:	11 96       	adiw	r26, 0x01	; 1
     ff8:	fc 93       	st	X, r31
     ffa:	ee 93       	st	-X, r30
     ffc:	c2 81       	ldd	r28, Z+2	; 0x02
     ffe:	d3 81       	ldd	r29, Z+3	; 0x03
    1000:	13 96       	adiw	r26, 0x03	; 3
    1002:	dc 93       	st	X, r29
    1004:	ce 93       	st	-X, r28
    1006:	12 97       	sbiw	r26, 0x02	; 2
    1008:	b9 83       	std	Y+1, r27	; 0x01
    100a:	a8 83       	st	Y, r26
    100c:	b3 83       	std	Z+3, r27	; 0x03
    100e:	a2 83       	std	Z+2, r26	; 0x02
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret
    1016:	87 30       	cpi	r24, 0x07	; 7
    1018:	59 f0       	breq	.+22     	; 0x1030 <__sch_wakeup+0x8c>
    101a:	8c 30       	cpi	r24, 0x0C	; 12
    101c:	49 f0       	breq	.+18     	; 0x1030 <__sch_wakeup+0x8c>
    101e:	85 30       	cpi	r24, 0x05	; 5
    1020:	a1 f6       	brne	.-88     	; 0xfca <__sch_wakeup+0x26>
    1022:	52 96       	adiw	r26, 0x12	; 18
    1024:	ed 91       	ld	r30, X+
    1026:	fc 91       	ld	r31, X
    1028:	53 97       	sbiw	r26, 0x13	; 19
    102a:	84 81       	ldd	r24, Z+4	; 0x04
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	84 83       	std	Z+4, r24	; 0x04
    1030:	12 96       	adiw	r26, 0x02	; 2
    1032:	ed 91       	ld	r30, X+
    1034:	fc 91       	ld	r31, X
    1036:	13 97       	sbiw	r26, 0x03	; 3
    1038:	8d 91       	ld	r24, X+
    103a:	9c 91       	ld	r25, X
    103c:	11 97       	sbiw	r26, 0x01	; 1
    103e:	91 83       	std	Z+1, r25	; 0x01
    1040:	80 83       	st	Z, r24
    1042:	cd 91       	ld	r28, X+
    1044:	dc 91       	ld	r29, X
    1046:	11 97       	sbiw	r26, 0x01	; 1
    1048:	fb 83       	std	Y+3, r31	; 0x03
    104a:	ea 83       	std	Y+2, r30	; 0x02
    104c:	be cf       	rjmp	.-132    	; 0xfca <__sch_wakeup+0x26>

0000104e <chSchReadyI>:
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	dc 01       	movw	r26, r24
    1054:	1f 96       	adiw	r26, 0x0f	; 15
    1056:	1c 92       	st	X, r1
    1058:	1f 97       	sbiw	r26, 0x0f	; 15
    105a:	1b 96       	adiw	r26, 0x0b	; 11
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	1c 97       	sbiw	r26, 0x0c	; 12
    1062:	14 96       	adiw	r26, 0x04	; 4
    1064:	8c 91       	ld	r24, X
    1066:	14 97       	sbiw	r26, 0x04	; 4
    1068:	01 90       	ld	r0, Z+
    106a:	f0 81       	ld	r31, Z
    106c:	e0 2d       	mov	r30, r0
    106e:	94 81       	ldd	r25, Z+4	; 0x04
    1070:	98 17       	cp	r25, r24
    1072:	d0 f7       	brcc	.-12     	; 0x1068 <chSchReadyI+0x1a>
    1074:	11 96       	adiw	r26, 0x01	; 1
    1076:	fc 93       	st	X, r31
    1078:	ee 93       	st	-X, r30
    107a:	c2 81       	ldd	r28, Z+2	; 0x02
    107c:	d3 81       	ldd	r29, Z+3	; 0x03
    107e:	13 96       	adiw	r26, 0x03	; 3
    1080:	dc 93       	st	X, r29
    1082:	ce 93       	st	-X, r28
    1084:	12 97       	sbiw	r26, 0x02	; 2
    1086:	b9 83       	std	Y+1, r27	; 0x01
    1088:	a8 83       	st	Y, r26
    108a:	b3 83       	std	Z+3, r27	; 0x03
    108c:	a2 83       	std	Z+2, r26	; 0x02
    108e:	cd 01       	movw	r24, r26
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <chSchGoSleepS>:
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	e9 e9       	ldi	r30, 0x99	; 153
    109c:	f2 e0       	ldi	r31, 0x02	; 2
    109e:	65 81       	ldd	r22, Z+5	; 0x05
    10a0:	76 81       	ldd	r23, Z+6	; 0x06
    10a2:	db 01       	movw	r26, r22
    10a4:	1f 96       	adiw	r26, 0x0f	; 15
    10a6:	8c 93       	st	X, r24
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	ec 01       	movw	r28, r24
    10ae:	a8 81       	ld	r26, Y
    10b0:	b9 81       	ldd	r27, Y+1	; 0x01
    10b2:	b1 83       	std	Z+1, r27	; 0x01
    10b4:	a0 83       	st	Z, r26
    10b6:	13 96       	adiw	r26, 0x03	; 3
    10b8:	fc 93       	st	X, r31
    10ba:	ee 93       	st	-X, r30
    10bc:	12 97       	sbiw	r26, 0x02	; 2
    10be:	21 e0       	ldi	r18, 0x01	; 1
    10c0:	2f 87       	std	Y+15, r18	; 0x0f
    10c2:	96 83       	std	Z+6, r25	; 0x06
    10c4:	85 83       	std	Z+5, r24	; 0x05
    10c6:	91 d2       	rcall	.+1314   	; 0x15ea <_port_switch>
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	08 95       	ret

000010ce <chSchGoSleepTimeoutS>:
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	60 97       	sbiw	r28, 0x10	; 16
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	d8 2e       	mov	r13, r24
    10ee:	e0 90 9e 02 	lds	r14, 0x029E	; 0x80029e <ch0+0x5>
    10f2:	f0 90 9f 02 	lds	r15, 0x029F	; 0x80029f <ch0+0x6>
    10f6:	4f 3f       	cpi	r20, 0xFF	; 255
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	58 07       	cpc	r21, r24
    10fc:	68 07       	cpc	r22, r24
    10fe:	78 07       	cpc	r23, r24
    1100:	01 f1       	breq	.+64     	; 0x1142 <chSchGoSleepTimeoutS+0x74>
    1102:	87 01       	movw	r16, r14
    1104:	22 ed       	ldi	r18, 0xD2	; 210
    1106:	37 e0       	ldi	r19, 0x07	; 7
    1108:	ce 01       	movw	r24, r28
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	9b dd       	rcall	.-1226   	; 0xc44 <chVTDoSetI>
    110e:	8d 2d       	mov	r24, r13
    1110:	c2 df       	rcall	.-124    	; 0x1096 <chSchGoSleepS>
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	89 2b       	or	r24, r25
    1118:	19 f0       	breq	.+6      	; 0x1120 <chSchGoSleepTimeoutS+0x52>
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	a0 dd       	rcall	.-1216   	; 0xc60 <chVTDoResetI>
    1120:	f7 01       	movw	r30, r14
    1122:	82 89       	ldd	r24, Z+18	; 0x12
    1124:	93 89       	ldd	r25, Z+19	; 0x13
    1126:	60 96       	adiw	r28, 0x10	; 16
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	08 95       	ret
    1142:	8d 2d       	mov	r24, r13
    1144:	a8 df       	rcall	.-176    	; 0x1096 <chSchGoSleepS>
    1146:	ec cf       	rjmp	.-40     	; 0x1120 <chSchGoSleepTimeoutS+0x52>

00001148 <chSchIsPreemptionRequired>:
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
    1148:	a0 91 99 02 	lds	r26, 0x0299	; 0x800299 <ch0>
    114c:	b0 91 9a 02 	lds	r27, 0x029A	; 0x80029a <ch0+0x1>
  tprio_t p2 = tp->hdr.pqueue.prio;
    1150:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <ch0+0x5>
    1154:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <ch0+0x6>
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	14 96       	adiw	r26, 0x04	; 4
    115c:	2c 91       	ld	r18, X
    115e:	94 81       	ldd	r25, Z+4	; 0x04
    1160:	92 17       	cp	r25, r18
    1162:	08 f0       	brcs	.+2      	; 0x1166 <chSchIsPreemptionRequired+0x1e>
    1164:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    1166:	08 95       	ret

00001168 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
    116c:	a0 91 9e 02 	lds	r26, 0x029E	; 0x80029e <ch0+0x5>
    1170:	b0 91 9f 02 	lds	r27, 0x029F	; 0x80029f <ch0+0x6>
 * @return              The removed element pointer.
 *
 * @notapi
 */
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  ch_priority_queue_t *p = pqp->next;
    1174:	40 91 99 02 	lds	r20, 0x0299	; 0x800299 <ch0>
    1178:	50 91 9a 02 	lds	r21, 0x029A	; 0x80029a <ch0+0x1>

  pqp->next       = p->next;
    117c:	ea 01       	movw	r28, r20
    117e:	e8 81       	ld	r30, Y
    1180:	f9 81       	ldd	r31, Y+1	; 0x01
    1182:	f0 93 9a 02 	sts	0x029A, r31	; 0x80029a <ch0+0x1>
    1186:	e0 93 99 02 	sts	0x0299, r30	; 0x800299 <ch0>
  pqp->next->prev = pqp;
    118a:	89 e9       	ldi	r24, 0x99	; 153
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	93 83       	std	Z+3, r25	; 0x03
    1190:	82 83       	std	Z+2, r24	; 0x02
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	8f 87       	std	Y+15, r24	; 0x0f
  __instance_set_currthread(oip, ntp);
    1196:	50 93 9f 02 	sts	0x029F, r21	; 0x80029f <ch0+0x6>
    119a:	40 93 9e 02 	sts	0x029E, r20	; 0x80029e <ch0+0x5>

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
    119e:	1f 96       	adiw	r26, 0x0f	; 15
    11a0:	1c 92       	st	X, r1
    11a2:	1f 97       	sbiw	r26, 0x0f	; 15

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
    11a4:	1b 96       	adiw	r26, 0x0b	; 11
    11a6:	ed 91       	ld	r30, X+
    11a8:	fc 91       	ld	r31, X
    11aa:	1c 97       	sbiw	r26, 0x0c	; 12
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio > p->prio));
    11ac:	14 96       	adiw	r26, 0x04	; 4
    11ae:	2c 91       	ld	r18, X
    11b0:	14 97       	sbiw	r26, 0x04	; 4
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
    11b2:	01 90       	ld	r0, Z+
    11b4:	f0 81       	ld	r31, Z
    11b6:	e0 2d       	mov	r30, r0
  } while (unlikely(pqp->prio > p->prio));
    11b8:	94 81       	ldd	r25, Z+4	; 0x04
    11ba:	29 17       	cp	r18, r25
    11bc:	d0 f3       	brcs	.-12     	; 0x11b2 <chSchDoPreemption+0x4a>

  /* Insertion on prev.*/
  p->next       = pqp;
    11be:	11 96       	adiw	r26, 0x01	; 1
    11c0:	fc 93       	st	X, r31
    11c2:	ee 93       	st	-X, r30
  p->prev       = pqp->prev;
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	13 96       	adiw	r26, 0x03	; 3
    11ca:	9c 93       	st	X, r25
    11cc:	8e 93       	st	-X, r24
    11ce:	12 97       	sbiw	r26, 0x02	; 2
  p->prev->next = p;
    11d0:	ec 01       	movw	r28, r24
    11d2:	b9 83       	std	Y+1, r27	; 0x01
    11d4:	a8 83       	st	Y, r26
  pqp->prev     = p;
    11d6:	b3 83       	std	Z+3, r27	; 0x03
    11d8:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
    11da:	bd 01       	movw	r22, r26
    11dc:	ca 01       	movw	r24, r20
    11de:	05 d2       	rcall	.+1034   	; 0x15ea <_port_switch>
}
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
    11e6:	ff cf       	rjmp	.-2      	; 0x11e6 <__idle_thread>

000011e8 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to the @p os_instance_config_t structure
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
    11e8:	cf 92       	push	r12
    11ea:	df 92       	push	r13
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	2b 97       	sbiw	r28, 0x0b	; 11
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	8c 01       	movw	r16, r24
    1208:	6b 01       	movw	r12, r22
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
    120a:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <ch_system+0x2>
    120e:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <ch_system+0x1>

  /* Core associated to this instance.*/
  oip->core_id = core_id;
    1212:	fc 01       	movw	r30, r24
    1214:	16 8e       	std	Z+30, r1	; 0x1e
    1216:	15 8e       	std	Z+29, r1	; 0x1d

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
    1218:	74 a3       	std	Z+36, r23	; 0x24
    121a:	63 a3       	std	Z+35, r22	; 0x23

  /* Port initialization for the current instance.*/
  port_init(oip);
    121c:	ff 24       	eor	r15, r15
    121e:	f3 94       	inc	r15
    1220:	f0 92 e2 02 	sts	0x02E2, r15	; 0x8002e2 <__avr_in_isr>
 *
 * @notapi
 */
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {

  pqp->next = pqp;
    1224:	91 83       	std	Z+1, r25	; 0x01
    1226:	80 83       	st	Z, r24
  pqp->prev = pqp;
    1228:	93 83       	std	Z+3, r25	; 0x03
    122a:	82 83       	std	Z+2, r24	; 0x02
  pqp->prio = (tprio_t)0;
    122c:	14 82       	std	Z+4, r1	; 0x04
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {

  ch_queue_init(&rp->queue);
    122e:	49 96       	adiw	r24, 0x19	; 25
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
    1230:	92 8f       	std	Z+26, r25	; 0x1a
    1232:	81 8f       	std	Z+25, r24	; 0x19
  qp->prev = qp;
    1234:	94 8f       	std	Z+28, r25	; 0x1c
    1236:	83 8f       	std	Z+27, r24	; 0x1b
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
    1238:	17 8e       	std	Z+31, r1	; 0x1f
    123a:	10 a2       	std	Z+32, r1	; 0x20
    123c:	11 a2       	std	Z+33, r1	; 0x21
    123e:	12 a2       	std	Z+34, r1	; 0x22
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {

  ch_dlist_init(&vtlp->dlist);
    1240:	42 97       	sbiw	r24, 0x12	; 18
 *
 * @notapi
 */
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {

  dlhp->next  = dlhp;
    1242:	90 87       	std	Z+8, r25	; 0x08
    1244:	87 83       	std	Z+7, r24	; 0x07
  dlhp->prev  = dlhp;
    1246:	92 87       	std	Z+10, r25	; 0x0a
    1248:	81 87       	std	Z+9, r24	; 0x09
  dlhp->delta = (sysinterval_t)-1;
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	9f ef       	ldi	r25, 0xFF	; 255
    124e:	dc 01       	movw	r26, r24
    1250:	83 87       	std	Z+11, r24	; 0x0b
    1252:	94 87       	std	Z+12, r25	; 0x0c
    1254:	a5 87       	std	Z+13, r26	; 0x0d
    1256:	b6 87       	std	Z+14, r27	; 0x0e
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
    1258:	10 8a       	std	Z+16, r1	; 0x10
    125a:	17 86       	std	Z+15, r1	; 0x0f
    125c:	0e 94 6b 00 	call	0xd6	; 0xd6 <stGetCounter>
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
    1260:	9c 01       	movw	r18, r24
    1262:	f8 01       	movw	r30, r16
    1264:	21 8b       	std	Z+17, r18	; 0x11
    1266:	32 8b       	std	Z+18, r19	; 0x12
    1268:	13 8a       	std	Z+19, r1	; 0x13
    126a:	14 8a       	std	Z+20, r1	; 0x14
    126c:	15 8a       	std	Z+21, r1	; 0x15
    126e:	16 8a       	std	Z+22, r1	; 0x16
    1270:	17 8a       	std	Z+23, r1	; 0x17
    1272:	10 8e       	std	Z+24, r1	; 0x18
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
    1274:	ed 5b       	subi	r30, 0xBD	; 189
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	11 82       	std	Z+1, r1	; 0x01
    127a:	10 82       	st	Z, r1
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
    127c:	b8 01       	movw	r22, r16
    127e:	6b 5d       	subi	r22, 0xDB	; 219
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	20 e8       	ldi	r18, 0x80	; 128
    1284:	48 e2       	ldi	r20, 0x28	; 40
    1286:	51 e0       	ldi	r21, 0x01	; 1
    1288:	c8 01       	movw	r24, r16
    128a:	2a d0       	rcall	.+84     	; 0x12e0 <__thd_object_init>
    128c:	f8 01       	movw	r30, r16
    128e:	96 83       	std	Z+6, r25	; 0x06
    1290:	85 83       	std	Z+5, r24	; 0x05
#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
    1292:	fc 01       	movw	r30, r24
    1294:	f7 86       	std	Z+15, r15	; 0x0f
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
    1296:	83 e2       	ldi	r24, 0x23	; 35
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	f6 01       	movw	r30, r12
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	93 81       	ldd	r25, Z+3	; 0x03
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	84 81       	ldd	r24, Z+4	; 0x04
    12aa:	95 81       	ldd	r25, Z+5	; 0x05
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	ff 82       	std	Y+7, r15	; 0x07
    12b2:	83 ef       	ldi	r24, 0xF3	; 243
    12b4:	98 e0       	ldi	r25, 0x08	; 8
    12b6:	99 87       	std	Y+9, r25	; 0x09
    12b8:	88 87       	std	Y+8, r24	; 0x08
    12ba:	1b 86       	std	Y+11, r1	; 0x0b
    12bc:	1a 86       	std	Y+10, r1	; 0x0a
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
    12be:	ce 01       	movw	r24, r28
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	9e d0       	rcall	.+316    	; 0x1400 <chThdCreateI>
  }
#endif
}
    12c4:	2b 96       	adiw	r28, 0x0b	; 11
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	08 95       	ret

000012e0 <__thd_object_init>:
void chThdResume(thread_reference_t *trp, msg_t msg) {

  chSysLock();
  chThdResumeS(trp, msg);
  chSysUnlock();
}
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	fb 01       	movw	r30, r22
    12e6:	24 83       	std	Z+4, r18	; 0x04
    12e8:	32 e0       	ldi	r19, 0x02	; 2
    12ea:	37 87       	std	Z+15, r19	; 0x0f
    12ec:	10 8a       	std	Z+16, r1	; 0x10
    12ee:	94 87       	std	Z+12, r25	; 0x0c
    12f0:	83 87       	std	Z+11, r24	; 0x0b
    12f2:	25 8f       	std	Z+29, r18	; 0x1d
    12f4:	14 8e       	std	Z+28, r1	; 0x1c
    12f6:	13 8e       	std	Z+27, r1	; 0x1b
    12f8:	12 8e       	std	Z+26, r1	; 0x1a
    12fa:	21 e0       	ldi	r18, 0x01	; 1
    12fc:	21 8b       	std	Z+17, r18	; 0x11
    12fe:	56 87       	std	Z+14, r21	; 0x0e
    1300:	45 87       	std	Z+13, r20	; 0x0d
    1302:	9b 01       	movw	r18, r22
    1304:	29 5f       	subi	r18, 0xF9	; 249
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	ac 01       	movw	r20, r24
    130a:	47 5e       	subi	r20, 0xE7	; 231
    130c:	5f 4f       	sbci	r21, 0xFF	; 255
    130e:	50 87       	std	Z+8, r21	; 0x08
    1310:	47 83       	std	Z+7, r20	; 0x07
    1312:	ec 01       	movw	r28, r24
    1314:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1316:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1318:	b2 87       	std	Z+10, r27	; 0x0a
    131a:	a1 87       	std	Z+9, r26	; 0x09
    131c:	2d 93       	st	X+, r18
    131e:	3c 93       	st	X, r19
    1320:	3c 8f       	std	Y+28, r19	; 0x1c
    1322:	2b 8f       	std	Y+27, r18	; 0x1b
    1324:	cb 01       	movw	r24, r22
    1326:	44 96       	adiw	r24, 0x14	; 20
    1328:	95 8b       	std	Z+21, r25	; 0x15
    132a:	84 8b       	std	Z+20, r24	; 0x14
    132c:	02 96       	adiw	r24, 0x02	; 2
    132e:	97 8b       	std	Z+23, r25	; 0x17
    1330:	86 8b       	std	Z+22, r24	; 0x16
    1332:	91 8f       	std	Z+25, r25	; 0x19
    1334:	80 8f       	std	Z+24, r24	; 0x18
    1336:	cb 01       	movw	r24, r22
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	08 95       	ret

0000133e <chThdCreateSuspendedI>:
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	dc 01       	movw	r26, r24
    1344:	14 96       	adiw	r26, 0x04	; 4
    1346:	2d 91       	ld	r18, X+
    1348:	3c 91       	ld	r19, X
    134a:	15 97       	sbiw	r26, 0x05	; 5
    134c:	f9 01       	movw	r30, r18
    134e:	7e 97       	sbiw	r30, 0x1e	; 30
    1350:	e9 01       	movw	r28, r18
    1352:	e3 97       	sbiw	r28, 0x33	; 51
    1354:	d6 83       	std	Z+6, r29	; 0x06
    1356:	c5 83       	std	Z+5, r28	; 0x05
    1358:	17 96       	adiw	r26, 0x07	; 7
    135a:	9c 91       	ld	r25, X
    135c:	17 97       	sbiw	r26, 0x07	; 7
    135e:	18 96       	adiw	r26, 0x08	; 8
    1360:	8c 91       	ld	r24, X
    1362:	18 97       	sbiw	r26, 0x08	; 8
    1364:	9a 8b       	std	Y+18, r25	; 0x12
    1366:	89 8b       	std	Y+17, r24	; 0x11
    1368:	19 96       	adiw	r26, 0x09	; 9
    136a:	9c 91       	ld	r25, X
    136c:	19 97       	sbiw	r26, 0x09	; 9
    136e:	1a 96       	adiw	r26, 0x0a	; 10
    1370:	8c 91       	ld	r24, X
    1372:	1a 97       	sbiw	r26, 0x0a	; 10
    1374:	98 8b       	std	Y+16, r25	; 0x10
    1376:	8f 87       	std	Y+15, r24	; 0x0f
    1378:	84 e2       	ldi	r24, 0x24	; 36
    137a:	9b e0       	ldi	r25, 0x0B	; 11
    137c:	9b 8b       	std	Y+19, r25	; 0x13
    137e:	8c 8b       	std	Y+20, r24	; 0x14
    1380:	16 96       	adiw	r26, 0x06	; 6
    1382:	8c 91       	ld	r24, X
    1384:	16 97       	sbiw	r26, 0x06	; 6
    1386:	4d 91       	ld	r20, X+
    1388:	5c 91       	ld	r21, X
    138a:	84 83       	std	Z+4, r24	; 0x04
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	97 87       	std	Z+15, r25	; 0x0f
    1390:	10 8a       	std	Z+16, r1	; 0x10
    1392:	69 e9       	ldi	r22, 0x99	; 153
    1394:	72 e0       	ldi	r23, 0x02	; 2
    1396:	74 87       	std	Z+12, r23	; 0x0c
    1398:	63 87       	std	Z+11, r22	; 0x0b
    139a:	85 8f       	std	Z+29, r24	; 0x1d
    139c:	14 8e       	std	Z+28, r1	; 0x1c
    139e:	13 8e       	std	Z+27, r1	; 0x1b
    13a0:	12 8e       	std	Z+26, r1	; 0x1a
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	81 8b       	std	Z+17, r24	; 0x11
    13a6:	56 87       	std	Z+14, r21	; 0x0e
    13a8:	45 87       	std	Z+13, r20	; 0x0d
    13aa:	d9 01       	movw	r26, r18
    13ac:	57 97       	sbiw	r26, 0x17	; 23
    13ae:	82 eb       	ldi	r24, 0xB2	; 178
    13b0:	92 e0       	ldi	r25, 0x02	; 2
    13b2:	11 96       	adiw	r26, 0x01	; 1
    13b4:	9c 93       	st	X, r25
    13b6:	8e 93       	st	-X, r24
    13b8:	eb 01       	movw	r28, r22
    13ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13be:	13 96       	adiw	r26, 0x03	; 3
    13c0:	9c 93       	st	X, r25
    13c2:	8e 93       	st	-X, r24
    13c4:	12 97       	sbiw	r26, 0x02	; 2
    13c6:	ec 01       	movw	r28, r24
    13c8:	b9 83       	std	Y+1, r27	; 0x01
    13ca:	a8 83       	st	Y, r26
    13cc:	eb 01       	movw	r28, r22
    13ce:	bc 8f       	std	Y+28, r27	; 0x1c
    13d0:	ab 8f       	std	Y+27, r26	; 0x1b
    13d2:	1d 96       	adiw	r26, 0x0d	; 13
    13d4:	0b 2e       	mov	r0, r27
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	0c 92       	st	X, r0
    13da:	11 97       	sbiw	r26, 0x01	; 1
    13dc:	ac 93       	st	X, r26
    13de:	12 96       	adiw	r26, 0x02	; 2
    13e0:	0b 2e       	mov	r0, r27
    13e2:	11 96       	adiw	r26, 0x01	; 1
    13e4:	0c 92       	st	X, r0
    13e6:	11 97       	sbiw	r26, 0x01	; 1
    13e8:	ac 93       	st	X, r26
    13ea:	0a 2e       	mov	r0, r26
    13ec:	1b 2e       	mov	r1, r27
    13ee:	13 96       	adiw	r26, 0x03	; 3
    13f0:	1c 92       	st	X, r1
    13f2:	0e 92       	st	-X, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	12 97       	sbiw	r26, 0x02	; 2
    13f8:	cf 01       	movw	r24, r30
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <chThdCreateI>:
    1400:	9e df       	rcall	.-196    	; 0x133e <chThdCreateSuspendedI>
    1402:	25 ce       	rjmp	.-950    	; 0x104e <chSchReadyI>

00001404 <chThdExitS>:
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	c0 91 9e 02 	lds	r28, 0x029E	; 0x80029e <ch0+0x5>
    1410:	d0 91 9f 02 	lds	r29, 0x029F	; 0x80029f <ch0+0x6>
    1414:	9b 8b       	std	Y+19, r25	; 0x13
    1416:	8a 8b       	std	Y+18, r24	; 0x12
    1418:	8e 01       	movw	r16, r28
    141a:	0c 5e       	subi	r16, 0xEC	; 236
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	8c 89       	ldd	r24, Y+20	; 0x14
    1420:	9d 89       	ldd	r25, Y+21	; 0x15
    1422:	08 17       	cp	r16, r24
    1424:	19 07       	cpc	r17, r25
    1426:	59 f0       	breq	.+22     	; 0x143e <chThdExitS+0x3a>
    1428:	fc 01       	movw	r30, r24
    142a:	20 81       	ld	r18, Z
    142c:	31 81       	ldd	r19, Z+1	; 0x01
    142e:	3d 8b       	std	Y+21, r19	; 0x15
    1430:	2c 8b       	std	Y+20, r18	; 0x14
    1432:	0d de       	rcall	.-998    	; 0x104e <chSchReadyI>
    1434:	8c 89       	ldd	r24, Y+20	; 0x14
    1436:	9d 89       	ldd	r25, Y+21	; 0x15
    1438:	80 17       	cp	r24, r16
    143a:	91 07       	cpc	r25, r17
    143c:	a9 f7       	brne	.-22     	; 0x1428 <chThdExitS+0x24>
    143e:	89 89       	ldd	r24, Y+17	; 0x11
    1440:	81 11       	cpse	r24, r1
    1442:	0c c0       	rjmp	.+24     	; 0x145c <chThdExitS+0x58>
    1444:	e9 85       	ldd	r30, Y+9	; 0x09
    1446:	fa 85       	ldd	r31, Y+10	; 0x0a
    1448:	8f 81       	ldd	r24, Y+7	; 0x07
    144a:	98 85       	ldd	r25, Y+8	; 0x08
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
    1450:	af 81       	ldd	r26, Y+7	; 0x07
    1452:	b8 85       	ldd	r27, Y+8	; 0x08
    1454:	13 96       	adiw	r26, 0x03	; 3
    1456:	fc 93       	st	X, r31
    1458:	ee 93       	st	-X, r30
    145a:	12 97       	sbiw	r26, 0x02	; 2
    145c:	8f e0       	ldi	r24, 0x0F	; 15
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	17 ce       	rjmp	.-978    	; 0x1096 <chSchGoSleepS>

00001468 <chThdExit>:
    1468:	f8 94       	cli
    146a:	cc cf       	rjmp	.-104    	; 0x1404 <chThdExitS>

0000146c <chThdSleep>:
    146c:	ab 01       	movw	r20, r22
    146e:	bc 01       	movw	r22, r24
    1470:	f8 94       	cli
    1472:	88 e0       	ldi	r24, 0x08	; 8
    1474:	2c de       	rcall	.-936    	; 0x10ce <chSchGoSleepTimeoutS>
    1476:	78 94       	sei
    1478:	08 95       	ret

0000147a <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
    147e:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <ch0+0x5>
    1482:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <ch0+0x6>
  thread_t *currtp = chThdGetSelfX();

  if (unlikely(TIME_IMMEDIATE == timeout)) {
    1486:	41 15       	cp	r20, r1
    1488:	51 05       	cpc	r21, r1
    148a:	61 05       	cpc	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	79 f0       	breq	.+30     	; 0x14ae <chThdEnqueueTimeoutS+0x34>
 *
 * @notapi
 */
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {

  p->next       = qp;
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
  p->prev       = qp->prev;
    1494:	ec 01       	movw	r28, r24
    1496:	aa 81       	ldd	r26, Y+2	; 0x02
    1498:	bb 81       	ldd	r27, Y+3	; 0x03
    149a:	b3 83       	std	Z+3, r27	; 0x03
    149c:	a2 83       	std	Z+2, r26	; 0x02
  p->prev->next = p;
    149e:	ed 93       	st	X+, r30
    14a0:	fc 93       	st	X, r31
  qp->prev      = p;
    14a2:	fb 83       	std	Y+3, r31	; 0x03
    14a4:	ea 83       	std	Y+2, r30	; 0x02
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
    14a6:	84 e0       	ldi	r24, 0x04	; 4
}
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
    14ac:	10 ce       	rjmp	.-992    	; 0x10ce <chSchGoSleepTimeoutS>
}
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool ch_queue_notempty(const ch_queue_t *qp) {

  return (bool)(qp->next != qp);
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01

  if (ch_queue_notempty(&tqp->queue)) {
    14c2:	e8 17       	cp	r30, r24
    14c4:	f9 07       	cpc	r31, r25
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <chThdDequeueNextI+0x2c>
 * @notapi
 */
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
  ch_queue_t *p = qp->next;

  qp->next       = p->next;
    14c8:	ec 01       	movw	r28, r24
    14ca:	a8 81       	ld	r26, Y
    14cc:	b9 81       	ldd	r27, Y+1	; 0x01
    14ce:	b1 83       	std	Z+1, r27	; 0x01
    14d0:	a0 83       	st	Z, r26
  qp->next->prev = qp;
    14d2:	13 96       	adiw	r26, 0x03	; 3
    14d4:	fc 93       	st	X, r31
    14d6:	ee 93       	st	-X, r30
    14d8:	12 97       	sbiw	r26, 0x02	; 2

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
    14da:	7b 8b       	std	Y+19, r23	; 0x13
    14dc:	6a 8b       	std	Y+18, r22	; 0x12
    chThdDoDequeueNextI(tqp, msg);
  }
}
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
    14e2:	b5 cd       	rjmp	.-1174   	; 0x104e <chSchReadyI>
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
    14ea:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
  qp->prev = qp;
    14f0:	93 83       	std	Z+3, r25	; 0x03
    14f2:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
    14f4:	15 82       	std	Z+5, r1	; 0x05
    14f6:	14 82       	std	Z+4, r1	; 0x04
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
    14f8:	08 95       	ret

000014fa <chEvtSignalI>:

  chSysLock();
  chEvtSignalI(tp, events);
  chSchRescheduleS();
  chSysUnlock();
}
    14fa:	fc 01       	movw	r30, r24
    14fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    14fe:	68 2b       	or	r22, r24
    1500:	62 8f       	std	Z+26, r22	; 0x1a
    1502:	87 85       	ldd	r24, Z+15	; 0x0f
    1504:	8a 30       	cpi	r24, 0x0A	; 10
    1506:	59 f0       	breq	.+22     	; 0x151e <chEvtSignalI+0x24>
    1508:	8b 30       	cpi	r24, 0x0B	; 11
    150a:	09 f0       	breq	.+2      	; 0x150e <chEvtSignalI+0x14>
    150c:	08 95       	ret
    150e:	82 89       	ldd	r24, Z+18	; 0x12
    1510:	68 23       	and	r22, r24
    1512:	86 13       	cpse	r24, r22
    1514:	fb cf       	rjmp	.-10     	; 0x150c <chEvtSignalI+0x12>
    1516:	13 8a       	std	Z+19, r1	; 0x13
    1518:	12 8a       	std	Z+18, r1	; 0x12
    151a:	cf 01       	movw	r24, r30
    151c:	98 cd       	rjmp	.-1232   	; 0x104e <chSchReadyI>
    151e:	82 89       	ldd	r24, Z+18	; 0x12
    1520:	68 23       	and	r22, r24
    1522:	c9 f7       	brne	.-14     	; 0x1516 <chEvtSignalI+0x1c>
    1524:	08 95       	ret

00001526 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
    1526:	ef 92       	push	r14
    1528:	ff 92       	push	r15
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	7c 01       	movw	r14, r24
    1532:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
    1534:	fc 01       	movw	r30, r24
    1536:	c0 81       	ld	r28, Z
    1538:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    153a:	8c 17       	cp	r24, r28
    153c:	9d 07       	cpc	r25, r29
    153e:	91 f0       	breq	.+36     	; 0x1564 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	81 2b       	or	r24, r17
    1544:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
    1546:	11 23       	and	r17, r17
    1548:	19 f0       	breq	.+6      	; 0x1550 <chEvtBroadcastFlagsI+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
    154a:	8e 81       	ldd	r24, Y+6	; 0x06
    154c:	81 23       	and	r24, r17
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
    154e:	21 f0       	breq	.+8      	; 0x1558 <chEvtBroadcastFlagsI+0x32>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    1550:	6c 81       	ldd	r22, Y+4	; 0x04
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	9b 81       	ldd	r25, Y+3	; 0x03
    1556:	d1 df       	rcall	.-94     	; 0x14fa <chEvtSignalI>
    }
    elp = elp->next;
    1558:	09 90       	ld	r0, Y+
    155a:	d8 81       	ld	r29, Y
    155c:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    155e:	ec 16       	cp	r14, r28
    1560:	fd 06       	cpc	r15, r29
    1562:	71 f7       	brne	.-36     	; 0x1540 <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	08 95       	ret

00001570 <__core_init>:
  chSysLock();
  p = chCoreAllocFromBaseI(size, align, offset);
  chSysUnlock();

  return p;
}
    1570:	ee ed       	ldi	r30, 0xDE	; 222
    1572:	f2 e0       	ldi	r31, 0x02	; 2
    1574:	8f eb       	ldi	r24, 0xBF	; 191
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
    157c:	8f e3       	ldi	r24, 0x3F	; 63
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	93 83       	std	Z+3, r25	; 0x03
    1582:	82 83       	std	Z+2, r24	; 0x02
    1584:	08 95       	ret

00001586 <chCoreAllocFromTop>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1586:	f8 94       	cli
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
    1588:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <ch_memcore+0x2>
    158c:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <ch_memcore+0x3>
    1590:	9f 01       	movw	r18, r30
    1592:	28 1b       	sub	r18, r24
    1594:	39 0b       	sbc	r19, r25
    1596:	c9 01       	movw	r24, r18
    1598:	71 95       	neg	r23
    159a:	61 95       	neg	r22
    159c:	71 09       	sbc	r23, r1
    159e:	86 23       	and	r24, r22
    15a0:	97 23       	and	r25, r23
  prev = p - offset;
    15a2:	9c 01       	movw	r18, r24
    15a4:	24 1b       	sub	r18, r20
    15a6:	35 0b       	sbc	r19, r21

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    15a8:	40 91 de 02 	lds	r20, 0x02DE	; 0x8002de <ch_memcore>
    15ac:	50 91 df 02 	lds	r21, 0x02DF	; 0x8002df <ch_memcore+0x1>
    15b0:	24 17       	cp	r18, r20
    15b2:	35 07       	cpc	r19, r21
    15b4:	48 f0       	brcs	.+18     	; 0x15c8 <chCoreAllocFromTop+0x42>
    15b6:	e2 17       	cp	r30, r18
    15b8:	f3 07       	cpc	r31, r19
    15ba:	30 f0       	brcs	.+12     	; 0x15c8 <chCoreAllocFromTop+0x42>
    return NULL;
  }

  ch_memcore.topmem = prev;
    15bc:	30 93 e1 02 	sts	0x02E1, r19	; 0x8002e1 <ch_memcore+0x3>
    15c0:	20 93 e0 02 	sts	0x02E0, r18	; 0x8002e0 <ch_memcore+0x2>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    15c4:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
    15c6:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    return NULL;
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
    15ce:	08 95       	ret

000015d0 <__heap_init>:
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
    15d0:	ef e3       	ldi	r30, 0x3F	; 63
    15d2:	f2 e0       	ldi	r31, 0x02	; 2
    15d4:	83 ec       	ldi	r24, 0xC3	; 195
    15d6:	9a e0       	ldi	r25, 0x0A	; 10
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
    15dc:	13 82       	std	Z+3, r1	; 0x03
    15de:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
    15e0:	15 82       	std	Z+5, r1	; 0x05
    15e2:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
    15e4:	85 e4       	ldi	r24, 0x45	; 69
    15e6:	92 e0       	ldi	r25, 0x02	; 2
    15e8:	80 cf       	rjmp	.-256    	; 0x14ea <chMtxObjectInit>

000015ea <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
    15ea:	2f 92       	push	r2
  asm volatile ("push    r3");
    15ec:	3f 92       	push	r3
  asm volatile ("push    r4");
    15ee:	4f 92       	push	r4
  asm volatile ("push    r5");
    15f0:	5f 92       	push	r5
  asm volatile ("push    r6");
    15f2:	6f 92       	push	r6
  asm volatile ("push    r7");
    15f4:	7f 92       	push	r7
  asm volatile ("push    r8");
    15f6:	8f 92       	push	r8
  asm volatile ("push    r9");
    15f8:	9f 92       	push	r9
  asm volatile ("push    r10");
    15fa:	af 92       	push	r10
  asm volatile ("push    r11");
    15fc:	bf 92       	push	r11
  asm volatile ("push    r12");
    15fe:	cf 92       	push	r12
  asm volatile ("push    r13");
    1600:	df 92       	push	r13
  asm volatile ("push    r14");
    1602:	ef 92       	push	r14
  asm volatile ("push    r15");
    1604:	ff 92       	push	r15
  asm volatile ("push    r16");
    1606:	0f 93       	push	r16
  asm volatile ("push    r17");
    1608:	1f 93       	push	r17
  asm volatile ("push    r28");
    160a:	cf 93       	push	r28
  asm volatile ("push    r29");
    160c:	df 93       	push	r29

#if defined(__CHIBIOS_RT__)
  asm volatile ("movw    r30, r22");
    160e:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
    1610:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
    1612:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
    1614:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
    1616:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
    1618:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
    161a:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
    161c:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
    161e:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
    1620:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
    1622:	df 91       	pop	r29
  asm volatile ("pop     r28");
    1624:	cf 91       	pop	r28
  asm volatile ("pop     r17");
    1626:	1f 91       	pop	r17
  asm volatile ("pop     r16");
    1628:	0f 91       	pop	r16
  asm volatile ("pop     r15");
    162a:	ff 90       	pop	r15
  asm volatile ("pop     r14");
    162c:	ef 90       	pop	r14
  asm volatile ("pop     r13");
    162e:	df 90       	pop	r13
  asm volatile ("pop     r12");
    1630:	cf 90       	pop	r12
  asm volatile ("pop     r11");
    1632:	bf 90       	pop	r11
  asm volatile ("pop     r10");
    1634:	af 90       	pop	r10
  asm volatile ("pop     r9");
    1636:	9f 90       	pop	r9
  asm volatile ("pop     r8");
    1638:	8f 90       	pop	r8
  asm volatile ("pop     r7");
    163a:	7f 90       	pop	r7
  asm volatile ("pop     r6");
    163c:	6f 90       	pop	r6
  asm volatile ("pop     r5");
    163e:	5f 90       	pop	r5
  asm volatile ("pop     r4");
    1640:	4f 90       	pop	r4
  asm volatile ("pop     r3");
    1642:	3f 90       	pop	r3
  asm volatile ("pop     r2");
    1644:	2f 90       	pop	r2
  asm volatile ("ret");
    1646:	08 95       	ret

00001648 <_port_thread_start>:
    1648:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
    164a:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
    164c:	f1 01       	movw	r30, r2
  asm volatile ("icall");
    164e:	09 95       	icall
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
    1650:	0b cf       	rjmp	.-490    	; 0x1468 <chThdExit>
}
    1652:	08 95       	ret

00001654 <main>:
  }
}

void bufferInit(EventBuffer *buffer)
{
  buffer->head = 0;
    1654:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <ev_buffer+0x8>
  buffer->tail = 0;
    1658:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <ev_buffer+0x9>
  buffer->size = 0;
    165c:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <ev_buffer+0xa>
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
    1660:	0e 94 63 00 	call	0xc6	; 0xc6 <halInit>
  chSysInit();
    1664:	42 d9       	rcall	.-3452   	; 0x8ea <chSysInit>

  while (1)
  {
    if (palReadLine(PED_FLAG) == PAL_LOW)
    {
      palToggleLine(PEDESTRE_VERDE);
    1666:	01 e0       	ldi	r16, 0x01	; 1
    1668:	10 e0       	ldi	r17, 0x00	; 0
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <main+0x22>
    }

    /* Debouncing. */
    chThdSleepMilliseconds(50);
    166c:	6e e0       	ldi	r22, 0x0E	; 14
    166e:	73 e0       	ldi	r23, 0x03	; 3
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	fb de       	rcall	.-522    	; 0x146c <chThdSleep>
   */
  // chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);

  while (1)
  {
    if (palReadLine(PED_FLAG) == PAL_LOW)
    1676:	62 e0       	ldi	r22, 0x02	; 2
    1678:	86 e2       	ldi	r24, 0x26	; 38
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	6a d8       	rcall	.-3884   	; 0x752 <_pal_lld_setlineid>
    167e:	6e d8       	rcall	.-3876   	; 0x75c <_pal_lld_getportfromline>
    1680:	fc 01       	movw	r30, r24
    1682:	c0 81       	ld	r28, Z
    1684:	62 e0       	ldi	r22, 0x02	; 2
    1686:	86 e2       	ldi	r24, 0x26	; 38
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	63 d8       	rcall	.-3898   	; 0x752 <_pal_lld_setlineid>
    168c:	69 d8       	rcall	.-3886   	; 0x760 <_pal_lld_getpadfromline>
    168e:	2c 2f       	mov	r18, r28
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <main+0x44>
    1694:	35 95       	asr	r19
    1696:	27 95       	ror	r18
    1698:	8a 95       	dec	r24
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <main+0x40>
    169c:	20 fd       	sbrc	r18, 0
    169e:	e6 cf       	rjmp	.-52     	; 0x166c <main+0x18>
    {
      palToggleLine(PEDESTRE_VERDE);
    16a0:	63 e0       	ldi	r22, 0x03	; 3
    16a2:	83 e2       	ldi	r24, 0x23	; 35
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	55 d8       	rcall	.-3926   	; 0x752 <_pal_lld_setlineid>
    16a8:	59 d8       	rcall	.-3918   	; 0x75c <_pal_lld_getportfromline>
    16aa:	fc 01       	movw	r30, r24
    16ac:	c2 81       	ldd	r28, Z+2	; 0x02
    16ae:	63 e0       	ldi	r22, 0x03	; 3
    16b0:	83 e2       	ldi	r24, 0x23	; 35
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	4e d8       	rcall	.-3940   	; 0x752 <_pal_lld_setlineid>
    16b6:	54 d8       	rcall	.-3928   	; 0x760 <_pal_lld_getpadfromline>
    16b8:	d8 2f       	mov	r29, r24
    16ba:	63 e0       	ldi	r22, 0x03	; 3
    16bc:	83 e2       	ldi	r24, 0x23	; 35
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	48 d8       	rcall	.-3952   	; 0x752 <_pal_lld_setlineid>
    16c2:	4c d8       	rcall	.-3944   	; 0x75c <_pal_lld_getportfromline>
    16c4:	98 01       	movw	r18, r16
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <main+0x76>
    16c8:	22 0f       	add	r18, r18
    16ca:	da 95       	dec	r29
    16cc:	ea f7       	brpl	.-6      	; 0x16c8 <main+0x74>
    16ce:	c2 27       	eor	r28, r18
    16d0:	fc 01       	movw	r30, r24
    16d2:	c2 83       	std	Z+2, r28	; 0x02
    16d4:	cb cf       	rjmp	.-106    	; 0x166c <main+0x18>

000016d6 <vfprintf>:
    16d6:	ab e0       	ldi	r26, 0x0B	; 11
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e0 e7       	ldi	r30, 0x70	; 112
    16dc:	fb e0       	ldi	r31, 0x0B	; 11
    16de:	c4 c2       	rjmp	.+1416   	; 0x1c68 <__prologue_saves__+0x8>
    16e0:	6c 01       	movw	r12, r24
    16e2:	7b 01       	movw	r14, r22
    16e4:	3a 01       	movw	r6, r20
    16e6:	fc 01       	movw	r30, r24
    16e8:	17 82       	std	Z+7, r1	; 0x07
    16ea:	16 82       	std	Z+6, r1	; 0x06
    16ec:	83 81       	ldd	r24, Z+3	; 0x03
    16ee:	81 ff       	sbrs	r24, 1
    16f0:	ff c0       	rjmp	.+510    	; 0x18f0 <vfprintf+0x21a>
    16f2:	ce 01       	movw	r24, r28
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	4c 01       	movw	r8, r24
    16f8:	f6 01       	movw	r30, r12
    16fa:	b3 80       	ldd	r11, Z+3	; 0x03
    16fc:	f7 01       	movw	r30, r14
    16fe:	b3 fc       	sbrc	r11, 3
    1700:	05 91       	lpm	r16, Z+
    1702:	b3 fe       	sbrs	r11, 3
    1704:	01 91       	ld	r16, Z+
    1706:	7f 01       	movw	r14, r30
    1708:	00 23       	and	r16, r16
    170a:	41 f1       	breq	.+80     	; 0x175c <vfprintf+0x86>
    170c:	05 32       	cpi	r16, 0x25	; 37
    170e:	39 f4       	brne	.+14     	; 0x171e <vfprintf+0x48>
    1710:	b3 fc       	sbrc	r11, 3
    1712:	05 91       	lpm	r16, Z+
    1714:	b3 fe       	sbrs	r11, 3
    1716:	01 91       	ld	r16, Z+
    1718:	7f 01       	movw	r14, r30
    171a:	05 32       	cpi	r16, 0x25	; 37
    171c:	39 f5       	brne	.+78     	; 0x176c <vfprintf+0x96>
    171e:	b6 01       	movw	r22, r12
    1720:	80 2f       	mov	r24, r16
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	2c d3       	rcall	.+1624   	; 0x1d7e <fputc>
    1726:	53 01       	movw	r10, r6
    1728:	35 01       	movw	r6, r10
    172a:	e6 cf       	rjmp	.-52     	; 0x16f8 <vfprintf+0x22>
    172c:	10 68       	ori	r17, 0x80	; 128
    172e:	f7 01       	movw	r30, r14
    1730:	b3 fc       	sbrc	r11, 3
    1732:	05 91       	lpm	r16, Z+
    1734:	b3 fe       	sbrs	r11, 3
    1736:	01 91       	ld	r16, Z+
    1738:	7f 01       	movw	r14, r30
    173a:	17 fd       	sbrc	r17, 7
    173c:	0d c0       	rjmp	.+26     	; 0x1758 <vfprintf+0x82>
    173e:	00 23       	and	r16, r16
    1740:	69 f0       	breq	.+26     	; 0x175c <vfprintf+0x86>
    1742:	60 2f       	mov	r22, r16
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	8f e6       	ldi	r24, 0x6F	; 111
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	c9 d2       	rcall	.+1426   	; 0x1cde <strchr_P>
    174c:	89 2b       	or	r24, r25
    174e:	79 f7       	brne	.-34     	; 0x172e <vfprintf+0x58>
    1750:	03 32       	cpi	r16, 0x23	; 35
    1752:	51 f0       	breq	.+20     	; 0x1768 <vfprintf+0x92>
    1754:	0c 36       	cpi	r16, 0x6C	; 108
    1756:	51 f3       	breq	.-44     	; 0x172c <vfprintf+0x56>
    1758:	01 11       	cpse	r16, r1
    175a:	0a c0       	rjmp	.+20     	; 0x1770 <vfprintf+0x9a>
    175c:	f6 01       	movw	r30, r12
    175e:	86 81       	ldd	r24, Z+6	; 0x06
    1760:	97 81       	ldd	r25, Z+7	; 0x07
    1762:	2b 96       	adiw	r28, 0x0b	; 11
    1764:	ee e0       	ldi	r30, 0x0E	; 14
    1766:	9c c2       	rjmp	.+1336   	; 0x1ca0 <__epilogue_restores__+0x8>
    1768:	10 e1       	ldi	r17, 0x10	; 16
    176a:	e1 cf       	rjmp	.-62     	; 0x172e <vfprintf+0x58>
    176c:	10 e0       	ldi	r17, 0x00	; 0
    176e:	e5 cf       	rjmp	.-54     	; 0x173a <vfprintf+0x64>
    1770:	60 2f       	mov	r22, r16
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	88 e6       	ldi	r24, 0x68	; 104
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	b2 d2       	rcall	.+1380   	; 0x1cde <strchr_P>
    177a:	89 2b       	or	r24, r25
    177c:	49 f0       	breq	.+18     	; 0x1790 <vfprintf+0xba>
    177e:	53 01       	movw	r10, r6
    1780:	f4 e0       	ldi	r31, 0x04	; 4
    1782:	af 0e       	add	r10, r31
    1784:	b1 1c       	adc	r11, r1
    1786:	b6 01       	movw	r22, r12
    1788:	8f e3       	ldi	r24, 0x3F	; 63
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	f8 d2       	rcall	.+1520   	; 0x1d7e <fputc>
    178e:	cc cf       	rjmp	.-104    	; 0x1728 <vfprintf+0x52>
    1790:	03 36       	cpi	r16, 0x63	; 99
    1792:	09 f4       	brne	.+2      	; 0x1796 <vfprintf+0xc0>
    1794:	52 c0       	rjmp	.+164    	; 0x183a <vfprintf+0x164>
    1796:	03 37       	cpi	r16, 0x73	; 115
    1798:	09 f4       	brne	.+2      	; 0x179c <vfprintf+0xc6>
    179a:	59 c0       	rjmp	.+178    	; 0x184e <vfprintf+0x178>
    179c:	03 35       	cpi	r16, 0x53	; 83
    179e:	09 f4       	brne	.+2      	; 0x17a2 <vfprintf+0xcc>
    17a0:	55 c0       	rjmp	.+170    	; 0x184c <vfprintf+0x176>
    17a2:	04 36       	cpi	r16, 0x64	; 100
    17a4:	19 f0       	breq	.+6      	; 0x17ac <vfprintf+0xd6>
    17a6:	09 36       	cpi	r16, 0x69	; 105
    17a8:	09 f0       	breq	.+2      	; 0x17ac <vfprintf+0xd6>
    17aa:	70 c0       	rjmp	.+224    	; 0x188c <vfprintf+0x1b6>
    17ac:	53 01       	movw	r10, r6
    17ae:	17 ff       	sbrs	r17, 7
    17b0:	62 c0       	rjmp	.+196    	; 0x1876 <vfprintf+0x1a0>
    17b2:	f4 e0       	ldi	r31, 0x04	; 4
    17b4:	af 0e       	add	r10, r31
    17b6:	b1 1c       	adc	r11, r1
    17b8:	f3 01       	movw	r30, r6
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	1f 7e       	andi	r17, 0xEF	; 239
    17c4:	97 ff       	sbrs	r25, 7
    17c6:	08 c0       	rjmp	.+16     	; 0x17d8 <vfprintf+0x102>
    17c8:	90 95       	com	r25
    17ca:	80 95       	com	r24
    17cc:	70 95       	com	r23
    17ce:	61 95       	neg	r22
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255
    17d2:	8f 4f       	sbci	r24, 0xFF	; 255
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	10 64       	ori	r17, 0x40	; 64
    17d8:	2a e0       	ldi	r18, 0x0A	; 10
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	a4 01       	movw	r20, r8
    17de:	17 d3       	rcall	.+1582   	; 0x1e0e <__ultoa_invert>
    17e0:	08 2f       	mov	r16, r24
    17e2:	08 19       	sub	r16, r8
    17e4:	16 ff       	sbrs	r17, 6
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <vfprintf+0x11a>
    17e8:	b6 01       	movw	r22, r12
    17ea:	8d e2       	ldi	r24, 0x2D	; 45
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	c7 d2       	rcall	.+1422   	; 0x1d7e <fputc>
    17f0:	14 ff       	sbrs	r17, 4
    17f2:	13 c0       	rjmp	.+38     	; 0x181a <vfprintf+0x144>
    17f4:	fe 01       	movw	r30, r28
    17f6:	e0 0f       	add	r30, r16
    17f8:	f1 1d       	adc	r31, r1
    17fa:	80 81       	ld	r24, Z
    17fc:	80 33       	cpi	r24, 0x30	; 48
    17fe:	69 f0       	breq	.+26     	; 0x181a <vfprintf+0x144>
    1800:	b6 01       	movw	r22, r12
    1802:	80 e3       	ldi	r24, 0x30	; 48
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	bb d2       	rcall	.+1398   	; 0x1d7e <fputc>
    1808:	12 ff       	sbrs	r17, 2
    180a:	07 c0       	rjmp	.+14     	; 0x181a <vfprintf+0x144>
    180c:	10 72       	andi	r17, 0x20	; 32
    180e:	81 2f       	mov	r24, r17
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	b6 01       	movw	r22, r12
    1814:	88 5a       	subi	r24, 0xA8	; 168
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	b2 d2       	rcall	.+1380   	; 0x1d7e <fputc>
    181a:	01 50       	subi	r16, 0x01	; 1
    181c:	10 e0       	ldi	r17, 0x00	; 0
    181e:	0f 5f       	subi	r16, 0xFF	; 255
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	08 0d       	add	r16, r8
    1824:	19 1d       	adc	r17, r9
    1826:	f8 01       	movw	r30, r16
    1828:	82 91       	ld	r24, -Z
    182a:	8f 01       	movw	r16, r30
    182c:	b6 01       	movw	r22, r12
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a6 d2       	rcall	.+1356   	; 0x1d7e <fputc>
    1832:	08 15       	cp	r16, r8
    1834:	19 05       	cpc	r17, r9
    1836:	b9 f7       	brne	.-18     	; 0x1826 <vfprintf+0x150>
    1838:	77 cf       	rjmp	.-274    	; 0x1728 <vfprintf+0x52>
    183a:	53 01       	movw	r10, r6
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	a8 0e       	add	r10, r24
    1840:	b1 1c       	adc	r11, r1
    1842:	b6 01       	movw	r22, r12
    1844:	f3 01       	movw	r30, r6
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	a0 cf       	rjmp	.-192    	; 0x178c <vfprintf+0xb6>
    184c:	11 60       	ori	r17, 0x01	; 1
    184e:	53 01       	movw	r10, r6
    1850:	f2 e0       	ldi	r31, 0x02	; 2
    1852:	af 0e       	add	r10, r31
    1854:	b1 1c       	adc	r11, r1
    1856:	f3 01       	movw	r30, r6
    1858:	60 80       	ld	r6, Z
    185a:	71 80       	ldd	r7, Z+1	; 0x01
    185c:	f3 01       	movw	r30, r6
    185e:	10 fd       	sbrc	r17, 0
    1860:	85 91       	lpm	r24, Z+
    1862:	10 ff       	sbrs	r17, 0
    1864:	81 91       	ld	r24, Z+
    1866:	3f 01       	movw	r6, r30
    1868:	88 23       	and	r24, r24
    186a:	09 f4       	brne	.+2      	; 0x186e <vfprintf+0x198>
    186c:	5d cf       	rjmp	.-326    	; 0x1728 <vfprintf+0x52>
    186e:	b6 01       	movw	r22, r12
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	85 d2       	rcall	.+1290   	; 0x1d7e <fputc>
    1874:	f3 cf       	rjmp	.-26     	; 0x185c <vfprintf+0x186>
    1876:	f2 e0       	ldi	r31, 0x02	; 2
    1878:	af 0e       	add	r10, r31
    187a:	b1 1c       	adc	r11, r1
    187c:	f3 01       	movw	r30, r6
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	07 2e       	mov	r0, r23
    1884:	00 0c       	add	r0, r0
    1886:	88 0b       	sbc	r24, r24
    1888:	99 0b       	sbc	r25, r25
    188a:	9b cf       	rjmp	.-202    	; 0x17c2 <vfprintf+0xec>
    188c:	00 37       	cpi	r16, 0x70	; 112
    188e:	09 f1       	breq	.+66     	; 0x18d2 <vfprintf+0x1fc>
    1890:	40 f4       	brcc	.+16     	; 0x18a2 <vfprintf+0x1cc>
    1892:	08 35       	cpi	r16, 0x58	; 88
    1894:	01 f1       	breq	.+64     	; 0x18d6 <vfprintf+0x200>
    1896:	0f 36       	cpi	r16, 0x6F	; 111
    1898:	09 f0       	breq	.+2      	; 0x189c <vfprintf+0x1c6>
    189a:	60 cf       	rjmp	.-320    	; 0x175c <vfprintf+0x86>
    189c:	28 e0       	ldi	r18, 0x08	; 8
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	0c c0       	rjmp	.+24     	; 0x18ba <vfprintf+0x1e4>
    18a2:	05 37       	cpi	r16, 0x75	; 117
    18a4:	39 f0       	breq	.+14     	; 0x18b4 <vfprintf+0x1de>
    18a6:	08 37       	cpi	r16, 0x78	; 120
    18a8:	09 f0       	breq	.+2      	; 0x18ac <vfprintf+0x1d6>
    18aa:	58 cf       	rjmp	.-336    	; 0x175c <vfprintf+0x86>
    18ac:	14 62       	ori	r17, 0x24	; 36
    18ae:	20 e1       	ldi	r18, 0x10	; 16
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	03 c0       	rjmp	.+6      	; 0x18ba <vfprintf+0x1e4>
    18b4:	1f 7e       	andi	r17, 0xEF	; 239
    18b6:	2a e0       	ldi	r18, 0x0A	; 10
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	53 01       	movw	r10, r6
    18bc:	17 ff       	sbrs	r17, 7
    18be:	0f c0       	rjmp	.+30     	; 0x18de <vfprintf+0x208>
    18c0:	f4 e0       	ldi	r31, 0x04	; 4
    18c2:	af 0e       	add	r10, r31
    18c4:	b1 1c       	adc	r11, r1
    18c6:	f3 01       	movw	r30, r6
    18c8:	60 81       	ld	r22, Z
    18ca:	71 81       	ldd	r23, Z+1	; 0x01
    18cc:	82 81       	ldd	r24, Z+2	; 0x02
    18ce:	93 81       	ldd	r25, Z+3	; 0x03
    18d0:	85 cf       	rjmp	.-246    	; 0x17dc <vfprintf+0x106>
    18d2:	10 61       	ori	r17, 0x10	; 16
    18d4:	eb cf       	rjmp	.-42     	; 0x18ac <vfprintf+0x1d6>
    18d6:	14 60       	ori	r17, 0x04	; 4
    18d8:	20 e1       	ldi	r18, 0x10	; 16
    18da:	32 e0       	ldi	r19, 0x02	; 2
    18dc:	ee cf       	rjmp	.-36     	; 0x18ba <vfprintf+0x1e4>
    18de:	f2 e0       	ldi	r31, 0x02	; 2
    18e0:	af 0e       	add	r10, r31
    18e2:	b1 1c       	adc	r11, r1
    18e4:	f3 01       	movw	r30, r6
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	76 cf       	rjmp	.-276    	; 0x17dc <vfprintf+0x106>
    18f0:	8f ef       	ldi	r24, 0xFF	; 255
    18f2:	9f ef       	ldi	r25, 0xFF	; 255
    18f4:	36 cf       	rjmp	.-404    	; 0x1762 <vfprintf+0x8c>

000018f6 <putval>:
    18f6:	20 fd       	sbrc	r18, 0
    18f8:	09 c0       	rjmp	.+18     	; 0x190c <putval+0x16>
    18fa:	fc 01       	movw	r30, r24
    18fc:	23 fd       	sbrc	r18, 3
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <putval+0x14>
    1900:	22 ff       	sbrs	r18, 2
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <putval+0x12>
    1904:	73 83       	std	Z+3, r23	; 0x03
    1906:	62 83       	std	Z+2, r22	; 0x02
    1908:	51 83       	std	Z+1, r21	; 0x01
    190a:	40 83       	st	Z, r20
    190c:	08 95       	ret

0000190e <mulacc>:
    190e:	44 fd       	sbrc	r20, 4
    1910:	17 c0       	rjmp	.+46     	; 0x1940 <mulacc+0x32>
    1912:	46 fd       	sbrc	r20, 6
    1914:	1d c0       	rjmp	.+58     	; 0x1950 <mulacc+0x42>
    1916:	db 01       	movw	r26, r22
    1918:	fc 01       	movw	r30, r24
    191a:	aa 0f       	add	r26, r26
    191c:	bb 1f       	adc	r27, r27
    191e:	ee 1f       	adc	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	10 94       	com	r1
    1924:	d1 f7       	brne	.-12     	; 0x191a <mulacc+0xc>
    1926:	6a 0f       	add	r22, r26
    1928:	7b 1f       	adc	r23, r27
    192a:	8e 1f       	adc	r24, r30
    192c:	9f 1f       	adc	r25, r31
    192e:	66 0f       	add	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	62 0f       	add	r22, r18
    1938:	71 1d       	adc	r23, r1
    193a:	81 1d       	adc	r24, r1
    193c:	91 1d       	adc	r25, r1
    193e:	08 95       	ret
    1940:	33 e0       	ldi	r19, 0x03	; 3
    1942:	66 0f       	add	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	88 1f       	adc	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	31 50       	subi	r19, 0x01	; 1
    194c:	d1 f7       	brne	.-12     	; 0x1942 <mulacc+0x34>
    194e:	f3 cf       	rjmp	.-26     	; 0x1936 <mulacc+0x28>
    1950:	34 e0       	ldi	r19, 0x04	; 4
    1952:	f7 cf       	rjmp	.-18     	; 0x1942 <mulacc+0x34>

00001954 <skip_spaces>:
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	8c 01       	movw	r16, r24
    195e:	c8 01       	movw	r24, r16
    1960:	d2 d1       	rcall	.+932    	; 0x1d06 <fgetc>
    1962:	ec 01       	movw	r28, r24
    1964:	97 fd       	sbrc	r25, 7
    1966:	06 c0       	rjmp	.+12     	; 0x1974 <skip_spaces+0x20>
    1968:	b2 d1       	rcall	.+868    	; 0x1cce <isspace>
    196a:	89 2b       	or	r24, r25
    196c:	c1 f7       	brne	.-16     	; 0x195e <skip_spaces+0xa>
    196e:	b8 01       	movw	r22, r16
    1970:	ce 01       	movw	r24, r28
    1972:	35 d2       	rcall	.+1130   	; 0x1dde <ungetc>
    1974:	ce 01       	movw	r24, r28
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	08 95       	ret

00001980 <conv_int>:
    1980:	8f 92       	push	r8
    1982:	9f 92       	push	r9
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	8c 01       	movw	r16, r24
    1996:	d6 2f       	mov	r29, r22
    1998:	7a 01       	movw	r14, r20
    199a:	b2 2e       	mov	r11, r18
    199c:	b4 d1       	rcall	.+872    	; 0x1d06 <fgetc>
    199e:	9c 01       	movw	r18, r24
    19a0:	33 27       	eor	r19, r19
    19a2:	2b 32       	cpi	r18, 0x2B	; 43
    19a4:	31 05       	cpc	r19, r1
    19a6:	29 f0       	breq	.+10     	; 0x19b2 <conv_int+0x32>
    19a8:	2d 32       	cpi	r18, 0x2D	; 45
    19aa:	31 05       	cpc	r19, r1
    19ac:	a1 f4       	brne	.+40     	; 0x19d6 <conv_int+0x56>
    19ae:	68 94       	set
    19b0:	b7 f8       	bld	r11, 7
    19b2:	d1 50       	subi	r29, 0x01	; 1
    19b4:	61 f4       	brne	.+24     	; 0x19ce <conv_int+0x4e>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	bf 90       	pop	r11
    19c6:	af 90       	pop	r10
    19c8:	9f 90       	pop	r9
    19ca:	8f 90       	pop	r8
    19cc:	08 95       	ret
    19ce:	c8 01       	movw	r24, r16
    19d0:	9a d1       	rcall	.+820    	; 0x1d06 <fgetc>
    19d2:	97 fd       	sbrc	r25, 7
    19d4:	f0 cf       	rjmp	.-32     	; 0x19b6 <conv_int+0x36>
    19d6:	cb 2d       	mov	r28, r11
    19d8:	cd 7f       	andi	r28, 0xFD	; 253
    19da:	2b 2d       	mov	r18, r11
    19dc:	20 73       	andi	r18, 0x30	; 48
    19de:	e9 f4       	brne	.+58     	; 0x1a1a <conv_int+0x9a>
    19e0:	80 33       	cpi	r24, 0x30	; 48
    19e2:	d9 f4       	brne	.+54     	; 0x1a1a <conv_int+0x9a>
    19e4:	aa 24       	eor	r10, r10
    19e6:	aa 94       	dec	r10
    19e8:	ad 0e       	add	r10, r29
    19ea:	79 f0       	breq	.+30     	; 0x1a0a <conv_int+0x8a>
    19ec:	c8 01       	movw	r24, r16
    19ee:	8b d1       	rcall	.+790    	; 0x1d06 <fgetc>
    19f0:	97 fd       	sbrc	r25, 7
    19f2:	0b c0       	rjmp	.+22     	; 0x1a0a <conv_int+0x8a>
    19f4:	28 2f       	mov	r18, r24
    19f6:	2f 7d       	andi	r18, 0xDF	; 223
    19f8:	28 35       	cpi	r18, 0x58	; 88
    19fa:	59 f4       	brne	.+22     	; 0x1a12 <conv_int+0x92>
    19fc:	c2 64       	ori	r28, 0x42	; 66
    19fe:	d2 50       	subi	r29, 0x02	; 2
    1a00:	21 f0       	breq	.+8      	; 0x1a0a <conv_int+0x8a>
    1a02:	c8 01       	movw	r24, r16
    1a04:	80 d1       	rcall	.+768    	; 0x1d06 <fgetc>
    1a06:	97 ff       	sbrs	r25, 7
    1a08:	08 c0       	rjmp	.+16     	; 0x1a1a <conv_int+0x9a>
    1a0a:	81 2c       	mov	r8, r1
    1a0c:	91 2c       	mov	r9, r1
    1a0e:	54 01       	movw	r10, r8
    1a10:	1a c0       	rjmp	.+52     	; 0x1a46 <conv_int+0xc6>
    1a12:	b6 fe       	sbrs	r11, 6
    1a14:	29 c0       	rjmp	.+82     	; 0x1a68 <conv_int+0xe8>
    1a16:	c2 60       	ori	r28, 0x02	; 2
    1a18:	da 2d       	mov	r29, r10
    1a1a:	81 2c       	mov	r8, r1
    1a1c:	91 2c       	mov	r9, r1
    1a1e:	54 01       	movw	r10, r8
    1a20:	20 ed       	ldi	r18, 0xD0	; 208
    1a22:	28 0f       	add	r18, r24
    1a24:	28 30       	cpi	r18, 0x08	; 8
    1a26:	18 f1       	brcs	.+70     	; 0x1a6e <conv_int+0xee>
    1a28:	c4 fd       	sbrc	r28, 4
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <conv_int+0xbe>
    1a2c:	2a 30       	cpi	r18, 0x0A	; 10
    1a2e:	f8 f0       	brcs	.+62     	; 0x1a6e <conv_int+0xee>
    1a30:	c6 ff       	sbrs	r28, 6
    1a32:	05 c0       	rjmp	.+10     	; 0x1a3e <conv_int+0xbe>
    1a34:	2f 7d       	andi	r18, 0xDF	; 223
    1a36:	3f ee       	ldi	r19, 0xEF	; 239
    1a38:	32 0f       	add	r19, r18
    1a3a:	36 30       	cpi	r19, 0x06	; 6
    1a3c:	b8 f0       	brcs	.+46     	; 0x1a6c <conv_int+0xec>
    1a3e:	b8 01       	movw	r22, r16
    1a40:	ce d1       	rcall	.+924    	; 0x1dde <ungetc>
    1a42:	c1 ff       	sbrs	r28, 1
    1a44:	b8 cf       	rjmp	.-144    	; 0x19b6 <conv_int+0x36>
    1a46:	c7 ff       	sbrs	r28, 7
    1a48:	08 c0       	rjmp	.+16     	; 0x1a5a <conv_int+0xda>
    1a4a:	b0 94       	com	r11
    1a4c:	a0 94       	com	r10
    1a4e:	90 94       	com	r9
    1a50:	80 94       	com	r8
    1a52:	81 1c       	adc	r8, r1
    1a54:	91 1c       	adc	r9, r1
    1a56:	a1 1c       	adc	r10, r1
    1a58:	b1 1c       	adc	r11, r1
    1a5a:	2c 2f       	mov	r18, r28
    1a5c:	b5 01       	movw	r22, r10
    1a5e:	a4 01       	movw	r20, r8
    1a60:	c7 01       	movw	r24, r14
    1a62:	49 df       	rcall	.-366    	; 0x18f6 <putval>
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	a8 cf       	rjmp	.-176    	; 0x19b8 <conv_int+0x38>
    1a68:	c2 61       	ori	r28, 0x12	; 18
    1a6a:	d6 cf       	rjmp	.-84     	; 0x1a18 <conv_int+0x98>
    1a6c:	27 50       	subi	r18, 0x07	; 7
    1a6e:	4c 2f       	mov	r20, r28
    1a70:	c5 01       	movw	r24, r10
    1a72:	b4 01       	movw	r22, r8
    1a74:	4c df       	rcall	.-360    	; 0x190e <mulacc>
    1a76:	4b 01       	movw	r8, r22
    1a78:	5c 01       	movw	r10, r24
    1a7a:	c2 60       	ori	r28, 0x02	; 2
    1a7c:	d1 50       	subi	r29, 0x01	; 1
    1a7e:	19 f3       	breq	.-58     	; 0x1a46 <conv_int+0xc6>
    1a80:	c8 01       	movw	r24, r16
    1a82:	41 d1       	rcall	.+642    	; 0x1d06 <fgetc>
    1a84:	97 ff       	sbrs	r25, 7
    1a86:	cc cf       	rjmp	.-104    	; 0x1a20 <conv_int+0xa0>
    1a88:	dc cf       	rjmp	.-72     	; 0x1a42 <conv_int+0xc2>

00001a8a <vfscanf>:
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	ea e4       	ldi	r30, 0x4A	; 74
    1a90:	fd e0       	ldi	r31, 0x0D	; 13
    1a92:	e9 c0       	rjmp	.+466    	; 0x1c66 <__prologue_saves__+0x6>
    1a94:	6c 01       	movw	r12, r24
    1a96:	eb 01       	movw	r28, r22
    1a98:	5a 01       	movw	r10, r20
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	17 82       	std	Z+7, r1	; 0x07
    1a9e:	16 82       	std	Z+6, r1	; 0x06
    1aa0:	51 2c       	mov	r5, r1
    1aa2:	f6 01       	movw	r30, r12
    1aa4:	f3 80       	ldd	r15, Z+3	; 0x03
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	f3 fc       	sbrc	r15, 3
    1aaa:	85 91       	lpm	r24, Z+
    1aac:	f3 fe       	sbrs	r15, 3
    1aae:	81 91       	ld	r24, Z+
    1ab0:	18 2f       	mov	r17, r24
    1ab2:	ef 01       	movw	r28, r30
    1ab4:	88 23       	and	r24, r24
    1ab6:	c9 f0       	breq	.+50     	; 0x1aea <vfscanf+0x60>
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	09 d1       	rcall	.+530    	; 0x1cce <isspace>
    1abc:	89 2b       	or	r24, r25
    1abe:	19 f0       	breq	.+6      	; 0x1ac6 <vfscanf+0x3c>
    1ac0:	c6 01       	movw	r24, r12
    1ac2:	48 df       	rcall	.-368    	; 0x1954 <skip_spaces>
    1ac4:	ee cf       	rjmp	.-36     	; 0x1aa2 <vfscanf+0x18>
    1ac6:	15 32       	cpi	r17, 0x25	; 37
    1ac8:	41 f4       	brne	.+16     	; 0x1ada <vfscanf+0x50>
    1aca:	fe 01       	movw	r30, r28
    1acc:	f3 fc       	sbrc	r15, 3
    1ace:	15 91       	lpm	r17, Z+
    1ad0:	f3 fe       	sbrs	r15, 3
    1ad2:	11 91       	ld	r17, Z+
    1ad4:	ef 01       	movw	r28, r30
    1ad6:	15 32       	cpi	r17, 0x25	; 37
    1ad8:	59 f4       	brne	.+22     	; 0x1af0 <vfscanf+0x66>
    1ada:	c6 01       	movw	r24, r12
    1adc:	14 d1       	rcall	.+552    	; 0x1d06 <fgetc>
    1ade:	97 fd       	sbrc	r25, 7
    1ae0:	98 c0       	rjmp	.+304    	; 0x1c12 <vfscanf+0x188>
    1ae2:	18 17       	cp	r17, r24
    1ae4:	f1 f2       	breq	.-68     	; 0x1aa2 <vfscanf+0x18>
    1ae6:	b6 01       	movw	r22, r12
    1ae8:	7a d1       	rcall	.+756    	; 0x1dde <ungetc>
    1aea:	85 2d       	mov	r24, r5
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	95 c0       	rjmp	.+298    	; 0x1c1a <vfscanf+0x190>
    1af0:	00 e0       	ldi	r16, 0x00	; 0
    1af2:	1a 32       	cpi	r17, 0x2A	; 42
    1af4:	31 f4       	brne	.+12     	; 0x1b02 <vfscanf+0x78>
    1af6:	f3 fc       	sbrc	r15, 3
    1af8:	15 91       	lpm	r17, Z+
    1afa:	f3 fe       	sbrs	r15, 3
    1afc:	11 91       	ld	r17, Z+
    1afe:	ef 01       	movw	r28, r30
    1b00:	01 e0       	ldi	r16, 0x01	; 1
    1b02:	e1 2c       	mov	r14, r1
    1b04:	20 ed       	ldi	r18, 0xD0	; 208
    1b06:	21 0f       	add	r18, r17
    1b08:	2a 30       	cpi	r18, 0x0A	; 10
    1b0a:	38 f1       	brcs	.+78     	; 0x1b5a <vfscanf+0xd0>
    1b0c:	01 ff       	sbrs	r16, 1
    1b0e:	34 c0       	rjmp	.+104    	; 0x1b78 <vfscanf+0xee>
    1b10:	ee 20       	and	r14, r14
    1b12:	59 f3       	breq	.-42     	; 0x1aea <vfscanf+0x60>
    1b14:	18 36       	cpi	r17, 0x68	; 104
    1b16:	99 f1       	breq	.+102    	; 0x1b7e <vfscanf+0xf4>
    1b18:	1c 36       	cpi	r17, 0x6C	; 108
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <vfscanf+0x94>
    1b1c:	3a c0       	rjmp	.+116    	; 0x1b92 <vfscanf+0x108>
    1b1e:	11 23       	and	r17, r17
    1b20:	21 f3       	breq	.-56     	; 0x1aea <vfscanf+0x60>
    1b22:	61 2f       	mov	r22, r17
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	8f e7       	ldi	r24, 0x7F	; 127
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	d9 d0       	rcall	.+434    	; 0x1cde <strchr_P>
    1b2c:	89 2b       	or	r24, r25
    1b2e:	e9 f2       	breq	.-70     	; 0x1aea <vfscanf+0x60>
    1b30:	91 2c       	mov	r9, r1
    1b32:	81 2c       	mov	r8, r1
    1b34:	00 fd       	sbrc	r16, 0
    1b36:	06 c0       	rjmp	.+12     	; 0x1b44 <vfscanf+0xba>
    1b38:	f5 01       	movw	r30, r10
    1b3a:	80 80       	ld	r8, Z
    1b3c:	91 80       	ldd	r9, Z+1	; 0x01
    1b3e:	c5 01       	movw	r24, r10
    1b40:	02 96       	adiw	r24, 0x02	; 2
    1b42:	5c 01       	movw	r10, r24
    1b44:	1e 36       	cpi	r17, 0x6E	; 110
    1b46:	69 f5       	brne	.+90     	; 0x1ba2 <vfscanf+0x118>
    1b48:	f6 01       	movw	r30, r12
    1b4a:	46 81       	ldd	r20, Z+6	; 0x06
    1b4c:	57 81       	ldd	r21, Z+7	; 0x07
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	20 2f       	mov	r18, r16
    1b54:	c4 01       	movw	r24, r8
    1b56:	cf de       	rcall	.-610    	; 0x18f6 <putval>
    1b58:	a4 cf       	rjmp	.-184    	; 0x1aa2 <vfscanf+0x18>
    1b5a:	02 60       	ori	r16, 0x02	; 2
    1b5c:	6e 2d       	mov	r22, r14
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	d3 de       	rcall	.-602    	; 0x190e <mulacc>
    1b68:	e6 2e       	mov	r14, r22
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	f3 fc       	sbrc	r15, 3
    1b6e:	15 91       	lpm	r17, Z+
    1b70:	f3 fe       	sbrs	r15, 3
    1b72:	11 91       	ld	r17, Z+
    1b74:	ef 01       	movw	r28, r30
    1b76:	c6 cf       	rjmp	.-116    	; 0x1b04 <vfscanf+0x7a>
    1b78:	ee 24       	eor	r14, r14
    1b7a:	ea 94       	dec	r14
    1b7c:	cb cf       	rjmp	.-106    	; 0x1b14 <vfscanf+0x8a>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	f3 fc       	sbrc	r15, 3
    1b82:	15 91       	lpm	r17, Z+
    1b84:	f3 fe       	sbrs	r15, 3
    1b86:	11 91       	ld	r17, Z+
    1b88:	ef 01       	movw	r28, r30
    1b8a:	18 36       	cpi	r17, 0x68	; 104
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <vfscanf+0x106>
    1b8e:	c7 cf       	rjmp	.-114    	; 0x1b1e <vfscanf+0x94>
    1b90:	08 60       	ori	r16, 0x08	; 8
    1b92:	04 60       	ori	r16, 0x04	; 4
    1b94:	fe 01       	movw	r30, r28
    1b96:	f3 fc       	sbrc	r15, 3
    1b98:	15 91       	lpm	r17, Z+
    1b9a:	f3 fe       	sbrs	r15, 3
    1b9c:	11 91       	ld	r17, Z+
    1b9e:	ef 01       	movw	r28, r30
    1ba0:	be cf       	rjmp	.-132    	; 0x1b1e <vfscanf+0x94>
    1ba2:	13 36       	cpi	r17, 0x63	; 99
    1ba4:	b9 f4       	brne	.+46     	; 0x1bd4 <vfscanf+0x14a>
    1ba6:	01 fd       	sbrc	r16, 1
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfscanf+0x124>
    1baa:	ee 24       	eor	r14, r14
    1bac:	e3 94       	inc	r14
    1bae:	c6 01       	movw	r24, r12
    1bb0:	aa d0       	rcall	.+340    	; 0x1d06 <fgetc>
    1bb2:	97 fd       	sbrc	r25, 7
    1bb4:	2e c0       	rjmp	.+92     	; 0x1c12 <vfscanf+0x188>
    1bb6:	81 14       	cp	r8, r1
    1bb8:	91 04       	cpc	r9, r1
    1bba:	29 f0       	breq	.+10     	; 0x1bc6 <vfscanf+0x13c>
    1bbc:	f4 01       	movw	r30, r8
    1bbe:	80 83       	st	Z, r24
    1bc0:	c4 01       	movw	r24, r8
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	4c 01       	movw	r8, r24
    1bc6:	ea 94       	dec	r14
    1bc8:	e1 10       	cpse	r14, r1
    1bca:	f1 cf       	rjmp	.-30     	; 0x1bae <vfscanf+0x124>
    1bcc:	00 fd       	sbrc	r16, 0
    1bce:	69 cf       	rjmp	.-302    	; 0x1aa2 <vfscanf+0x18>
    1bd0:	53 94       	inc	r5
    1bd2:	67 cf       	rjmp	.-306    	; 0x1aa2 <vfscanf+0x18>
    1bd4:	c6 01       	movw	r24, r12
    1bd6:	be de       	rcall	.-644    	; 0x1954 <skip_spaces>
    1bd8:	97 fd       	sbrc	r25, 7
    1bda:	1b c0       	rjmp	.+54     	; 0x1c12 <vfscanf+0x188>
    1bdc:	1f 36       	cpi	r17, 0x6F	; 111
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <vfscanf+0x158>
    1be0:	3d c0       	rjmp	.+122    	; 0x1c5c <vfscanf+0x1d2>
    1be2:	30 f4       	brcc	.+12     	; 0x1bf0 <vfscanf+0x166>
    1be4:	14 36       	cpi	r17, 0x64	; 100
    1be6:	41 f0       	breq	.+16     	; 0x1bf8 <vfscanf+0x16e>
    1be8:	19 36       	cpi	r17, 0x69	; 105
    1bea:	39 f0       	breq	.+14     	; 0x1bfa <vfscanf+0x170>
    1bec:	00 64       	ori	r16, 0x40	; 64
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <vfscanf+0x170>
    1bf0:	13 37       	cpi	r17, 0x73	; 115
    1bf2:	11 f1       	breq	.+68     	; 0x1c38 <vfscanf+0x1ae>
    1bf4:	15 37       	cpi	r17, 0x75	; 117
    1bf6:	d1 f7       	brne	.-12     	; 0x1bec <vfscanf+0x162>
    1bf8:	00 62       	ori	r16, 0x20	; 32
    1bfa:	20 2f       	mov	r18, r16
    1bfc:	a4 01       	movw	r20, r8
    1bfe:	6e 2d       	mov	r22, r14
    1c00:	c6 01       	movw	r24, r12
    1c02:	be de       	rcall	.-644    	; 0x1980 <conv_int>
    1c04:	81 11       	cpse	r24, r1
    1c06:	e2 cf       	rjmp	.-60     	; 0x1bcc <vfscanf+0x142>
    1c08:	f6 01       	movw	r30, r12
    1c0a:	83 81       	ldd	r24, Z+3	; 0x03
    1c0c:	80 73       	andi	r24, 0x30	; 48
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <vfscanf+0x188>
    1c10:	6c cf       	rjmp	.-296    	; 0x1aea <vfscanf+0x60>
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	9f ef       	ldi	r25, 0xFF	; 255
    1c16:	51 10       	cpse	r5, r1
    1c18:	68 cf       	rjmp	.-304    	; 0x1aea <vfscanf+0x60>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	ef e0       	ldi	r30, 0x0F	; 15
    1c20:	3e c0       	rjmp	.+124    	; 0x1c9e <__epilogue_restores__+0x6>
    1c22:	81 14       	cp	r8, r1
    1c24:	91 04       	cpc	r9, r1
    1c26:	29 f0       	breq	.+10     	; 0x1c32 <vfscanf+0x1a8>
    1c28:	f4 01       	movw	r30, r8
    1c2a:	60 82       	st	Z, r6
    1c2c:	c4 01       	movw	r24, r8
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	4c 01       	movw	r8, r24
    1c32:	ea 94       	dec	r14
    1c34:	ee 20       	and	r14, r14
    1c36:	59 f0       	breq	.+22     	; 0x1c4e <vfscanf+0x1c4>
    1c38:	c6 01       	movw	r24, r12
    1c3a:	65 d0       	rcall	.+202    	; 0x1d06 <fgetc>
    1c3c:	3c 01       	movw	r6, r24
    1c3e:	97 fd       	sbrc	r25, 7
    1c40:	06 c0       	rjmp	.+12     	; 0x1c4e <vfscanf+0x1c4>
    1c42:	45 d0       	rcall	.+138    	; 0x1cce <isspace>
    1c44:	89 2b       	or	r24, r25
    1c46:	69 f3       	breq	.-38     	; 0x1c22 <vfscanf+0x198>
    1c48:	b6 01       	movw	r22, r12
    1c4a:	c3 01       	movw	r24, r6
    1c4c:	c8 d0       	rcall	.+400    	; 0x1dde <ungetc>
    1c4e:	81 14       	cp	r8, r1
    1c50:	91 04       	cpc	r9, r1
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <vfscanf+0x1cc>
    1c54:	bb cf       	rjmp	.-138    	; 0x1bcc <vfscanf+0x142>
    1c56:	f4 01       	movw	r30, r8
    1c58:	10 82       	st	Z, r1
    1c5a:	b8 cf       	rjmp	.-144    	; 0x1bcc <vfscanf+0x142>
    1c5c:	00 61       	ori	r16, 0x10	; 16
    1c5e:	cd cf       	rjmp	.-102    	; 0x1bfa <vfscanf+0x170>

00001c60 <__prologue_saves__>:
    1c60:	2f 92       	push	r2
    1c62:	3f 92       	push	r3
    1c64:	4f 92       	push	r4
    1c66:	5f 92       	push	r5
    1c68:	6f 92       	push	r6
    1c6a:	7f 92       	push	r7
    1c6c:	8f 92       	push	r8
    1c6e:	9f 92       	push	r9
    1c70:	af 92       	push	r10
    1c72:	bf 92       	push	r11
    1c74:	cf 92       	push	r12
    1c76:	df 92       	push	r13
    1c78:	ef 92       	push	r14
    1c7a:	ff 92       	push	r15
    1c7c:	0f 93       	push	r16
    1c7e:	1f 93       	push	r17
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	ca 1b       	sub	r28, r26
    1c8a:	db 0b       	sbc	r29, r27
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	09 94       	ijmp

00001c98 <__epilogue_restores__>:
    1c98:	2a 88       	ldd	r2, Y+18	; 0x12
    1c9a:	39 88       	ldd	r3, Y+17	; 0x11
    1c9c:	48 88       	ldd	r4, Y+16	; 0x10
    1c9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ca0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ca2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ca4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ca6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ca8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1caa:	b9 84       	ldd	r11, Y+9	; 0x09
    1cac:	c8 84       	ldd	r12, Y+8	; 0x08
    1cae:	df 80       	ldd	r13, Y+7	; 0x07
    1cb0:	ee 80       	ldd	r14, Y+6	; 0x06
    1cb2:	fd 80       	ldd	r15, Y+5	; 0x05
    1cb4:	0c 81       	ldd	r16, Y+4	; 0x04
    1cb6:	1b 81       	ldd	r17, Y+3	; 0x03
    1cb8:	aa 81       	ldd	r26, Y+2	; 0x02
    1cba:	b9 81       	ldd	r27, Y+1	; 0x01
    1cbc:	ce 0f       	add	r28, r30
    1cbe:	d1 1d       	adc	r29, r1
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	ed 01       	movw	r28, r26
    1ccc:	08 95       	ret

00001cce <isspace>:
    1cce:	91 11       	cpse	r25, r1
    1cd0:	fc c0       	rjmp	.+504    	; 0x1eca <__ctype_isfalse>
    1cd2:	80 32       	cpi	r24, 0x20	; 32
    1cd4:	19 f0       	breq	.+6      	; 0x1cdc <isspace+0xe>
    1cd6:	89 50       	subi	r24, 0x09	; 9
    1cd8:	85 50       	subi	r24, 0x05	; 5
    1cda:	d0 f7       	brcc	.-12     	; 0x1cd0 <isspace+0x2>
    1cdc:	08 95       	ret

00001cde <strchr_P>:
    1cde:	fc 01       	movw	r30, r24
    1ce0:	05 90       	lpm	r0, Z+
    1ce2:	06 16       	cp	r0, r22
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <strchr_P+0x10>
    1ce6:	00 20       	and	r0, r0
    1ce8:	d9 f7       	brne	.-10     	; 0x1ce0 <strchr_P+0x2>
    1cea:	c0 01       	movw	r24, r0
    1cec:	08 95       	ret
    1cee:	31 97       	sbiw	r30, 0x01	; 1
    1cf0:	cf 01       	movw	r24, r30
    1cf2:	08 95       	ret

00001cf4 <memcpy>:
    1cf4:	fb 01       	movw	r30, r22
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <memcpy+0xa>
    1cfa:	01 90       	ld	r0, Z+
    1cfc:	0d 92       	st	X+, r0
    1cfe:	41 50       	subi	r20, 0x01	; 1
    1d00:	50 40       	sbci	r21, 0x00	; 0
    1d02:	d8 f7       	brcc	.-10     	; 0x1cfa <memcpy+0x6>
    1d04:	08 95       	ret

00001d06 <fgetc>:
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	20 ff       	sbrs	r18, 0
    1d10:	1a c0       	rjmp	.+52     	; 0x1d46 <fgetc+0x40>
    1d12:	26 ff       	sbrs	r18, 6
    1d14:	0c c0       	rjmp	.+24     	; 0x1d2e <fgetc+0x28>
    1d16:	2f 7b       	andi	r18, 0xBF	; 191
    1d18:	2b 83       	std	Y+3, r18	; 0x03
    1d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	9f 83       	std	Y+7, r25	; 0x07
    1d22:	8e 83       	std	Y+6, r24	; 0x06
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret
    1d2e:	22 ff       	sbrs	r18, 2
    1d30:	18 c0       	rjmp	.+48     	; 0x1d62 <fgetc+0x5c>
    1d32:	e8 81       	ld	r30, Y
    1d34:	f9 81       	ldd	r31, Y+1	; 0x01
    1d36:	80 81       	ld	r24, Z
    1d38:	08 2e       	mov	r0, r24
    1d3a:	00 0c       	add	r0, r0
    1d3c:	99 0b       	sbc	r25, r25
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	29 f4       	brne	.+10     	; 0x1d4c <fgetc+0x46>
    1d42:	20 62       	ori	r18, 0x20	; 32
    1d44:	2b 83       	std	Y+3, r18	; 0x03
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	9f ef       	ldi	r25, 0xFF	; 255
    1d4a:	ee cf       	rjmp	.-36     	; 0x1d28 <fgetc+0x22>
    1d4c:	31 96       	adiw	r30, 0x01	; 1
    1d4e:	f9 83       	std	Y+1, r31	; 0x01
    1d50:	e8 83       	st	Y, r30
    1d52:	2e 81       	ldd	r18, Y+6	; 0x06
    1d54:	3f 81       	ldd	r19, Y+7	; 0x07
    1d56:	2f 5f       	subi	r18, 0xFF	; 255
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	3f 83       	std	Y+7, r19	; 0x07
    1d5c:	2e 83       	std	Y+6, r18	; 0x06
    1d5e:	99 27       	eor	r25, r25
    1d60:	e3 cf       	rjmp	.-58     	; 0x1d28 <fgetc+0x22>
    1d62:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d64:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d66:	09 95       	icall
    1d68:	97 ff       	sbrs	r25, 7
    1d6a:	f3 cf       	rjmp	.-26     	; 0x1d52 <fgetc+0x4c>
    1d6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	21 f0       	breq	.+8      	; 0x1d7a <fgetc+0x74>
    1d72:	80 e2       	ldi	r24, 0x20	; 32
    1d74:	82 2b       	or	r24, r18
    1d76:	8b 83       	std	Y+3, r24	; 0x03
    1d78:	e6 cf       	rjmp	.-52     	; 0x1d46 <fgetc+0x40>
    1d7a:	80 e1       	ldi	r24, 0x10	; 16
    1d7c:	fb cf       	rjmp	.-10     	; 0x1d74 <fgetc+0x6e>

00001d7e <fputc>:
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	18 2f       	mov	r17, r24
    1d88:	09 2f       	mov	r16, r25
    1d8a:	eb 01       	movw	r28, r22
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	81 fd       	sbrc	r24, 1
    1d90:	09 c0       	rjmp	.+18     	; 0x1da4 <fputc+0x26>
    1d92:	1f ef       	ldi	r17, 0xFF	; 255
    1d94:	0f ef       	ldi	r16, 0xFF	; 255
    1d96:	81 2f       	mov	r24, r17
    1d98:	90 2f       	mov	r25, r16
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret
    1da4:	82 ff       	sbrs	r24, 2
    1da6:	14 c0       	rjmp	.+40     	; 0x1dd0 <fputc+0x52>
    1da8:	2e 81       	ldd	r18, Y+6	; 0x06
    1daa:	3f 81       	ldd	r19, Y+7	; 0x07
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	9d 81       	ldd	r25, Y+5	; 0x05
    1db0:	28 17       	cp	r18, r24
    1db2:	39 07       	cpc	r19, r25
    1db4:	3c f4       	brge	.+14     	; 0x1dc4 <fputc+0x46>
    1db6:	e8 81       	ld	r30, Y
    1db8:	f9 81       	ldd	r31, Y+1	; 0x01
    1dba:	cf 01       	movw	r24, r30
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	99 83       	std	Y+1, r25	; 0x01
    1dc0:	88 83       	st	Y, r24
    1dc2:	10 83       	st	Z, r17
    1dc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	9f 83       	std	Y+7, r25	; 0x07
    1dcc:	8e 83       	std	Y+6, r24	; 0x06
    1dce:	e3 cf       	rjmp	.-58     	; 0x1d96 <fputc+0x18>
    1dd0:	e8 85       	ldd	r30, Y+8	; 0x08
    1dd2:	f9 85       	ldd	r31, Y+9	; 0x09
    1dd4:	81 2f       	mov	r24, r17
    1dd6:	09 95       	icall
    1dd8:	89 2b       	or	r24, r25
    1dda:	a1 f3       	breq	.-24     	; 0x1dc4 <fputc+0x46>
    1ddc:	da cf       	rjmp	.-76     	; 0x1d92 <fputc+0x14>

00001dde <ungetc>:
    1dde:	fb 01       	movw	r30, r22
    1de0:	23 81       	ldd	r18, Z+3	; 0x03
    1de2:	20 ff       	sbrs	r18, 0
    1de4:	11 c0       	rjmp	.+34     	; 0x1e08 <ungetc+0x2a>
    1de6:	26 fd       	sbrc	r18, 6
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <ungetc+0x2a>
    1dea:	8f 3f       	cpi	r24, 0xFF	; 255
    1dec:	98 07       	cpc	r25, r24
    1dee:	71 f0       	breq	.+28     	; 0x1e0c <ungetc+0x2e>
    1df0:	82 83       	std	Z+2, r24	; 0x02
    1df2:	2f 7d       	andi	r18, 0xDF	; 223
    1df4:	20 64       	ori	r18, 0x40	; 64
    1df6:	23 83       	std	Z+3, r18	; 0x03
    1df8:	26 81       	ldd	r18, Z+6	; 0x06
    1dfa:	37 81       	ldd	r19, Z+7	; 0x07
    1dfc:	21 50       	subi	r18, 0x01	; 1
    1dfe:	31 09       	sbc	r19, r1
    1e00:	37 83       	std	Z+7, r19	; 0x07
    1e02:	26 83       	std	Z+6, r18	; 0x06
    1e04:	99 27       	eor	r25, r25
    1e06:	08 95       	ret
    1e08:	8f ef       	ldi	r24, 0xFF	; 255
    1e0a:	9f ef       	ldi	r25, 0xFF	; 255
    1e0c:	08 95       	ret

00001e0e <__ultoa_invert>:
    1e0e:	fa 01       	movw	r30, r20
    1e10:	aa 27       	eor	r26, r26
    1e12:	28 30       	cpi	r18, 0x08	; 8
    1e14:	51 f1       	breq	.+84     	; 0x1e6a <__ultoa_invert+0x5c>
    1e16:	20 31       	cpi	r18, 0x10	; 16
    1e18:	81 f1       	breq	.+96     	; 0x1e7a <__ultoa_invert+0x6c>
    1e1a:	e8 94       	clt
    1e1c:	6f 93       	push	r22
    1e1e:	6e 7f       	andi	r22, 0xFE	; 254
    1e20:	6e 5f       	subi	r22, 0xFE	; 254
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	8f 4f       	sbci	r24, 0xFF	; 255
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	af 4f       	sbci	r26, 0xFF	; 255
    1e2a:	b1 e0       	ldi	r27, 0x01	; 1
    1e2c:	3e d0       	rcall	.+124    	; 0x1eaa <__ultoa_invert+0x9c>
    1e2e:	b4 e0       	ldi	r27, 0x04	; 4
    1e30:	3c d0       	rcall	.+120    	; 0x1eaa <__ultoa_invert+0x9c>
    1e32:	67 0f       	add	r22, r23
    1e34:	78 1f       	adc	r23, r24
    1e36:	89 1f       	adc	r24, r25
    1e38:	9a 1f       	adc	r25, r26
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	68 0f       	add	r22, r24
    1e3e:	79 1f       	adc	r23, r25
    1e40:	8a 1f       	adc	r24, r26
    1e42:	91 1d       	adc	r25, r1
    1e44:	a1 1d       	adc	r26, r1
    1e46:	6a 0f       	add	r22, r26
    1e48:	71 1d       	adc	r23, r1
    1e4a:	81 1d       	adc	r24, r1
    1e4c:	91 1d       	adc	r25, r1
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	20 d0       	rcall	.+64     	; 0x1e92 <__ultoa_invert+0x84>
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <__ultoa_invert+0x48>
    1e54:	68 94       	set
    1e56:	3f 91       	pop	r19
    1e58:	2a e0       	ldi	r18, 0x0A	; 10
    1e5a:	26 9f       	mul	r18, r22
    1e5c:	11 24       	eor	r1, r1
    1e5e:	30 19       	sub	r19, r0
    1e60:	30 5d       	subi	r19, 0xD0	; 208
    1e62:	31 93       	st	Z+, r19
    1e64:	de f6       	brtc	.-74     	; 0x1e1c <__ultoa_invert+0xe>
    1e66:	cf 01       	movw	r24, r30
    1e68:	08 95       	ret
    1e6a:	46 2f       	mov	r20, r22
    1e6c:	47 70       	andi	r20, 0x07	; 7
    1e6e:	40 5d       	subi	r20, 0xD0	; 208
    1e70:	41 93       	st	Z+, r20
    1e72:	b3 e0       	ldi	r27, 0x03	; 3
    1e74:	0f d0       	rcall	.+30     	; 0x1e94 <__ultoa_invert+0x86>
    1e76:	c9 f7       	brne	.-14     	; 0x1e6a <__ultoa_invert+0x5c>
    1e78:	f6 cf       	rjmp	.-20     	; 0x1e66 <__ultoa_invert+0x58>
    1e7a:	46 2f       	mov	r20, r22
    1e7c:	4f 70       	andi	r20, 0x0F	; 15
    1e7e:	40 5d       	subi	r20, 0xD0	; 208
    1e80:	4a 33       	cpi	r20, 0x3A	; 58
    1e82:	18 f0       	brcs	.+6      	; 0x1e8a <__ultoa_invert+0x7c>
    1e84:	49 5d       	subi	r20, 0xD9	; 217
    1e86:	31 fd       	sbrc	r19, 1
    1e88:	40 52       	subi	r20, 0x20	; 32
    1e8a:	41 93       	st	Z+, r20
    1e8c:	02 d0       	rcall	.+4      	; 0x1e92 <__ultoa_invert+0x84>
    1e8e:	a9 f7       	brne	.-22     	; 0x1e7a <__ultoa_invert+0x6c>
    1e90:	ea cf       	rjmp	.-44     	; 0x1e66 <__ultoa_invert+0x58>
    1e92:	b4 e0       	ldi	r27, 0x04	; 4
    1e94:	a6 95       	lsr	r26
    1e96:	97 95       	ror	r25
    1e98:	87 95       	ror	r24
    1e9a:	77 95       	ror	r23
    1e9c:	67 95       	ror	r22
    1e9e:	ba 95       	dec	r27
    1ea0:	c9 f7       	brne	.-14     	; 0x1e94 <__ultoa_invert+0x86>
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	61 05       	cpc	r22, r1
    1ea6:	71 05       	cpc	r23, r1
    1ea8:	08 95       	ret
    1eaa:	9b 01       	movw	r18, r22
    1eac:	ac 01       	movw	r20, r24
    1eae:	0a 2e       	mov	r0, r26
    1eb0:	06 94       	lsr	r0
    1eb2:	57 95       	ror	r21
    1eb4:	47 95       	ror	r20
    1eb6:	37 95       	ror	r19
    1eb8:	27 95       	ror	r18
    1eba:	ba 95       	dec	r27
    1ebc:	c9 f7       	brne	.-14     	; 0x1eb0 <__ultoa_invert+0xa2>
    1ebe:	62 0f       	add	r22, r18
    1ec0:	73 1f       	adc	r23, r19
    1ec2:	84 1f       	adc	r24, r20
    1ec4:	95 1f       	adc	r25, r21
    1ec6:	a0 1d       	adc	r26, r0
    1ec8:	08 95       	ret

00001eca <__ctype_isfalse>:
    1eca:	99 27       	eor	r25, r25
    1ecc:	88 27       	eor	r24, r24

00001ece <__ctype_istrue>:
    1ece:	08 95       	ret

00001ed0 <_exit>:
    1ed0:	f8 94       	cli

00001ed2 <__stop_program>:
    1ed2:	ff cf       	rjmp	.-2      	; 0x1ed2 <__stop_program>
