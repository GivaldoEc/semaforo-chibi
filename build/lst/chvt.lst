   1               		.file	"chvt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_insert_first.constprop.5,"ax",@progbits
  12               	vt_insert_first.constprop.5:
  13               	.LFB209:
  14               		.file 1 "../../os/rt/src/chvt.c"
   1:../../os/rt/src/chvt.c **** /*
   2:../../os/rt/src/chvt.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/src/chvt.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/src/chvt.c **** 
   5:../../os/rt/src/chvt.c ****     This file is part of ChibiOS.
   6:../../os/rt/src/chvt.c **** 
   7:../../os/rt/src/chvt.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/src/chvt.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/src/chvt.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/src/chvt.c **** 
  11:../../os/rt/src/chvt.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/src/chvt.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/src/chvt.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/src/chvt.c ****     GNU General Public License for more details.
  15:../../os/rt/src/chvt.c **** 
  16:../../os/rt/src/chvt.c ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/src/chvt.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/src/chvt.c **** */
  19:../../os/rt/src/chvt.c **** 
  20:../../os/rt/src/chvt.c **** /**
  21:../../os/rt/src/chvt.c ****  * @file    rt/src/chvt.c
  22:../../os/rt/src/chvt.c ****  * @brief   Time and Virtual Timers module code.
  23:../../os/rt/src/chvt.c ****  *
  24:../../os/rt/src/chvt.c ****  * @addtogroup time
  25:../../os/rt/src/chvt.c ****  * @details Time and Virtual Timers related APIs and services.
  26:../../os/rt/src/chvt.c ****  * @{
  27:../../os/rt/src/chvt.c ****  */
  28:../../os/rt/src/chvt.c **** 
  29:../../os/rt/src/chvt.c **** #include <string.h>
  30:../../os/rt/src/chvt.c **** 
  31:../../os/rt/src/chvt.c **** #include "ch.h"
  32:../../os/rt/src/chvt.c **** 
  33:../../os/rt/src/chvt.c **** /*===========================================================================*/
  34:../../os/rt/src/chvt.c **** /* Module local definitions.                                                 */
  35:../../os/rt/src/chvt.c **** /*===========================================================================*/
  36:../../os/rt/src/chvt.c **** 
  37:../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  38:../../os/rt/src/chvt.c **** #define VT_MAX_DELAY                                                        \
  39:../../os/rt/src/chvt.c ****   (((sysinterval_t)TIME_MAX_SYSTIME) &                                      \
  40:../../os/rt/src/chvt.c ****    ~(sysinterval_t)(((sysinterval_t)1 << (CH_CFG_ST_RESOLUTION / 2)) - (sysinterval_t)1))
  41:../../os/rt/src/chvt.c **** #endif
  42:../../os/rt/src/chvt.c **** 
  43:../../os/rt/src/chvt.c **** /*===========================================================================*/
  44:../../os/rt/src/chvt.c **** /* Module exported variables.                                                */
  45:../../os/rt/src/chvt.c **** /*===========================================================================*/
  46:../../os/rt/src/chvt.c **** 
  47:../../os/rt/src/chvt.c **** /*===========================================================================*/
  48:../../os/rt/src/chvt.c **** /* Module local types.                                                       */
  49:../../os/rt/src/chvt.c **** /*===========================================================================*/
  50:../../os/rt/src/chvt.c **** 
  51:../../os/rt/src/chvt.c **** /*===========================================================================*/
  52:../../os/rt/src/chvt.c **** /* Module local variables.                                                   */
  53:../../os/rt/src/chvt.c **** /*===========================================================================*/
  54:../../os/rt/src/chvt.c **** 
  55:../../os/rt/src/chvt.c **** /*===========================================================================*/
  56:../../os/rt/src/chvt.c **** /* Module local functions.                                                   */
  57:../../os/rt/src/chvt.c **** /*===========================================================================*/
  58:../../os/rt/src/chvt.c **** 
  59:../../os/rt/src/chvt.c **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
  60:../../os/rt/src/chvt.c **** /**
  61:../../os/rt/src/chvt.c ****  * @brief   Alarm time setup.
  62:../../os/rt/src/chvt.c ****  * @note    An RFCU fault is registered if the system time skips past
  63:../../os/rt/src/chvt.c ****  *          <tt>(now + delay)</tt>, the deadline is skipped forward
  64:../../os/rt/src/chvt.c ****  *          in order to compensate for the event.
  65:../../os/rt/src/chvt.c ****  *
  66:../../os/rt/src/chvt.c ****  * @param[in] now       last known system time
  67:../../os/rt/src/chvt.c ****  * @param[in] delay     delay over @p now
  68:../../os/rt/src/chvt.c ****  */
  69:../../os/rt/src/chvt.c **** static void vt_set_alarm(systime_t now, sysinterval_t delay) {
  70:../../os/rt/src/chvt.c ****   sysinterval_t currdelta;
  71:../../os/rt/src/chvt.c **** 
  72:../../os/rt/src/chvt.c ****   /* Initial delta is what is configured statically.*/
  73:../../os/rt/src/chvt.c ****   currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
  74:../../os/rt/src/chvt.c **** 
  75:../../os/rt/src/chvt.c ****   if (delay < currdelta) {
  76:../../os/rt/src/chvt.c ****     /* We need to avoid that the system time goes past the alarm we are
  77:../../os/rt/src/chvt.c ****        going to set before the alarm is actually set.*/
  78:../../os/rt/src/chvt.c ****     delay = currdelta;
  79:../../os/rt/src/chvt.c ****   }
  80:../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  81:../../os/rt/src/chvt.c ****   else if (delay > VT_MAX_DELAY) {
  82:../../os/rt/src/chvt.c ****     /* The delta could be too large for the physical timer to handle
  83:../../os/rt/src/chvt.c ****        this can happen when: sizeof (systime_t) < sizeof (sysinterval_t).*/
  84:../../os/rt/src/chvt.c ****     delay = VT_MAX_DELAY;
  85:../../os/rt/src/chvt.c ****   }
  86:../../os/rt/src/chvt.c **** #endif
  87:../../os/rt/src/chvt.c **** 
  88:../../os/rt/src/chvt.c ****   /* Deadline skip detection and correction loop.*/
  89:../../os/rt/src/chvt.c ****   while (true) {
  90:../../os/rt/src/chvt.c ****     sysinterval_t nowdelta;
  91:../../os/rt/src/chvt.c ****     systime_t newnow;
  92:../../os/rt/src/chvt.c **** 
  93:../../os/rt/src/chvt.c ****     /* Setting up the alarm on the next deadline.*/
  94:../../os/rt/src/chvt.c ****     port_timer_set_alarm(chTimeAddX(now, delay));
  95:../../os/rt/src/chvt.c **** 
  96:../../os/rt/src/chvt.c ****     /* Check on current time, we need to detect the error condition where
  97:../../os/rt/src/chvt.c ****        current time skipped past the calculated deadline.
  98:../../os/rt/src/chvt.c ****        Note that the "<" condition is intentional, we want to make sure
  99:../../os/rt/src/chvt.c ****        that the alarm is set before the deadline is reached because the
 100:../../os/rt/src/chvt.c ****        comparison could happen on the transition depending on the timer
 101:../../os/rt/src/chvt.c ****        architecture.*/
 102:../../os/rt/src/chvt.c ****     newnow = chVTGetSystemTimeX();
 103:../../os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(now, newnow);
 104:../../os/rt/src/chvt.c ****     if (likely(nowdelta < delay)) {
 105:../../os/rt/src/chvt.c ****       break;
 106:../../os/rt/src/chvt.c ****     }
 107:../../os/rt/src/chvt.c **** 
 108:../../os/rt/src/chvt.c ****     /* Trying again with a more relaxed minimum delta.*/
 109:../../os/rt/src/chvt.c ****     currdelta += (sysinterval_t)1;
 110:../../os/rt/src/chvt.c **** 
 111:../../os/rt/src/chvt.c ****     /* Current time becomes the new "base" time.*/
 112:../../os/rt/src/chvt.c ****     now = newnow;
 113:../../os/rt/src/chvt.c ****     delay = currdelta;
 114:../../os/rt/src/chvt.c ****   }
 115:../../os/rt/src/chvt.c **** 
 116:../../os/rt/src/chvt.c **** #if !defined(CH_VT_RFCU_DISABLED)
 117:../../os/rt/src/chvt.c ****   /* Checking if a skip occurred.*/
 118:../../os/rt/src/chvt.c ****   if (currdelta > CH_CFG_ST_TIMEDELTA) {
 119:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 120:../../os/rt/src/chvt.c ****   }
 121:../../os/rt/src/chvt.c **** #else
 122:../../os/rt/src/chvt.c ****   /* Assertions as fallback.*/
 123:../../os/rt/src/chvt.c ****   chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
 124:../../os/rt/src/chvt.c **** #endif
 125:../../os/rt/src/chvt.c **** }
 126:../../os/rt/src/chvt.c **** 
 127:../../os/rt/src/chvt.c **** /**
 128:../../os/rt/src/chvt.c ****  * @brief   Inserts a timer as first element in a delta list.
 129:../../os/rt/src/chvt.c ****  * @note    This is the special case when the delta list is initially empty.
 130:../../os/rt/src/chvt.c ****  */
 131:../../os/rt/src/chvt.c **** static void vt_insert_first(virtual_timers_list_t *vtlp,
  15               		.loc 1 131 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 8F92      		push r8
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 8, -2
  22 0002 9F92      		push r9
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 9, -3
  26 0004 AF92      		push r10
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 10, -4
  30 0006 BF92      		push r11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 11, -5
  34 0008 CF92      		push r12
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 12, -6
  38 000a DF92      		push r13
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 13, -7
  42 000c EF92      		push r14
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 14, -8
  46 000e FF92      		push r15
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 15, -9
  50 0010 0F93      		push r16
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 16, -10
  54 0012 1F93      		push r17
  55               	.LCFI9:
  56               		.cfi_def_cfa_offset 12
  57               		.cfi_offset 17, -11
  58 0014 CF93      		push r28
  59               	.LCFI10:
  60               		.cfi_def_cfa_offset 13
  61               		.cfi_offset 28, -12
  62 0016 DF93      		push r29
  63               	.LCFI11:
  64               		.cfi_def_cfa_offset 14
  65               		.cfi_offset 29, -13
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 12 */
  69               	.L__stack_usage = 12
  70 0018 FC01      		movw r30,r24
  71 001a EB01      		movw r28,r22
  72               	.LVL1:
 132:../../os/rt/src/chvt.c ****                             virtual_timer_t *vtp,
 133:../../os/rt/src/chvt.c ****                             systime_t now,
 134:../../os/rt/src/chvt.c ****                             sysinterval_t delay) {
 135:../../os/rt/src/chvt.c ****   sysinterval_t currdelta;
 136:../../os/rt/src/chvt.c **** 
 137:../../os/rt/src/chvt.c ****   /* The delta list is empty, the current time becomes the new
 138:../../os/rt/src/chvt.c ****      delta list base time, the timer is inserted.*/
 139:../../os/rt/src/chvt.c ****   vtlp->lasttime = now;
  73               		.loc 1 139 0
  74 001c 7093 0000 		sts ch0+15+1,r23
  75 0020 6093 0000 		sts ch0+15,r22
  76               	.LVL2:
  77               	.LBB208:
  78               	.LBB209:
  79               		.file 2 "../../os/rt/include/chlists.h"
   1:../../os/rt/include/chlists.h **** /*
   2:../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chlists.h **** 
   5:../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chlists.h **** 
   7:../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chlists.h **** 
  11:../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chlists.h **** 
  16:../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chlists.h **** */
  19:../../os/rt/include/chlists.h **** 
  20:../../os/rt/include/chlists.h **** /**
  21:../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../os/rt/include/chlists.h ****  *
  24:../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../os/rt/include/chlists.h ****  * @{
  26:../../os/rt/include/chlists.h ****  */
  27:../../os/rt/include/chlists.h **** 
  28:../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../os/rt/include/chlists.h **** 
  31:../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../os/rt/include/chlists.h **** 
  35:../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../os/rt/include/chlists.h **** 
  39:../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../os/rt/include/chlists.h **** 
  43:../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../os/rt/include/chlists.h **** 
  47:../../os/rt/include/chlists.h **** /**
  48:../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../os/rt/include/chlists.h ****  */
  50:../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../os/rt/include/chlists.h **** 
  52:../../os/rt/include/chlists.h **** /**
  53:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../os/rt/include/chlists.h ****  *          and element.
  55:../../os/rt/include/chlists.h ****  */
  56:../../os/rt/include/chlists.h **** struct ch_list {
  57:../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../os/rt/include/chlists.h **** };
  59:../../os/rt/include/chlists.h **** 
  60:../../os/rt/include/chlists.h **** /**
  61:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../os/rt/include/chlists.h ****  */
  63:../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../os/rt/include/chlists.h **** 
  65:../../os/rt/include/chlists.h **** /**
  66:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../os/rt/include/chlists.h ****  *          and element.
  68:../../os/rt/include/chlists.h ****  */
  69:../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../os/rt/include/chlists.h **** };
  73:../../os/rt/include/chlists.h **** 
  74:../../os/rt/include/chlists.h **** /**
  75:../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../os/rt/include/chlists.h ****  *          header and element.
  77:../../os/rt/include/chlists.h ****  */
  78:../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../os/rt/include/chlists.h **** 
  80:../../os/rt/include/chlists.h **** /**
  81:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../os/rt/include/chlists.h ****  */
  85:../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../os/rt/include/chlists.h **** };
  90:../../os/rt/include/chlists.h **** 
  91:../../os/rt/include/chlists.h **** /**
  92:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../os/rt/include/chlists.h ****  *          header and element.
  94:../../os/rt/include/chlists.h ****  */
  95:../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../os/rt/include/chlists.h **** 
  97:../../os/rt/include/chlists.h **** /**
  98:../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../os/rt/include/chlists.h ****  */
 100:../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../os/rt/include/chlists.h **** };
 105:../../os/rt/include/chlists.h **** 
 106:../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../os/rt/include/chlists.h **** 
 110:../../os/rt/include/chlists.h **** /**
 111:../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../os/rt/include/chlists.h ****  *
 115:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../os/rt/include/chlists.h ****  */
 117:../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../os/rt/include/chlists.h **** 
 119:../../os/rt/include/chlists.h **** /**
 120:../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../os/rt/include/chlists.h ****  *
 124:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../os/rt/include/chlists.h ****  */
 126:../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../os/rt/include/chlists.h ****     ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../os/rt/include/chlists.h **** 
 129:../../os/rt/include/chlists.h **** /*===========================================================================*/
 130:../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 131:../../os/rt/include/chlists.h **** /*===========================================================================*/
 132:../../os/rt/include/chlists.h **** 
 133:../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 134:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 135:../../os/rt/include/chlists.h **** extern "C" {
 136:../../os/rt/include/chlists.h **** #endif
 137:../../os/rt/include/chlists.h **** 
 138:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 139:../../os/rt/include/chlists.h **** }
 140:../../os/rt/include/chlists.h **** #endif
 141:../../os/rt/include/chlists.h **** 
 142:../../os/rt/include/chlists.h **** /*===========================================================================*/
 143:../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 144:../../os/rt/include/chlists.h **** /*===========================================================================*/
 145:../../os/rt/include/chlists.h **** 
 146:../../os/rt/include/chlists.h **** /**
 147:../../os/rt/include/chlists.h ****  * @brief   List initialization.
 148:../../os/rt/include/chlists.h ****  *
 149:../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 150:../../os/rt/include/chlists.h ****  *
 151:../../os/rt/include/chlists.h ****  * @notapi
 152:../../os/rt/include/chlists.h ****  */
 153:../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 154:../../os/rt/include/chlists.h **** 
 155:../../os/rt/include/chlists.h ****   lp->next = lp;
 156:../../os/rt/include/chlists.h **** }
 157:../../os/rt/include/chlists.h **** 
 158:../../os/rt/include/chlists.h **** /**
 159:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 160:../../os/rt/include/chlists.h ****  *
 161:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 162:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 163:../../os/rt/include/chlists.h ****  *
 164:../../os/rt/include/chlists.h ****  * @notapi
 165:../../os/rt/include/chlists.h ****  */
 166:../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 167:../../os/rt/include/chlists.h **** 
 168:../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 169:../../os/rt/include/chlists.h **** }
 170:../../os/rt/include/chlists.h **** 
 171:../../os/rt/include/chlists.h **** /**
 172:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 173:../../os/rt/include/chlists.h ****  *
 174:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 175:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 176:../../os/rt/include/chlists.h ****  *
 177:../../os/rt/include/chlists.h ****  * @notapi
 178:../../os/rt/include/chlists.h ****  */
 179:../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 180:../../os/rt/include/chlists.h **** 
 181:../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 182:../../os/rt/include/chlists.h **** }
 183:../../os/rt/include/chlists.h **** 
 184:../../os/rt/include/chlists.h **** /**
 185:../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 186:../../os/rt/include/chlists.h ****  *
 187:../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 188:../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 189:../../os/rt/include/chlists.h ****  *
 190:../../os/rt/include/chlists.h ****  * @notapi
 191:../../os/rt/include/chlists.h ****  */
 192:../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 193:../../os/rt/include/chlists.h **** 
 194:../../os/rt/include/chlists.h ****   p->next = lp->next;
 195:../../os/rt/include/chlists.h ****   lp->next = p;
 196:../../os/rt/include/chlists.h **** }
 197:../../os/rt/include/chlists.h **** 
 198:../../os/rt/include/chlists.h **** /**
 199:../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 200:../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 201:../../os/rt/include/chlists.h ****  *
 202:../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 203:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 204:../../os/rt/include/chlists.h ****  *
 205:../../os/rt/include/chlists.h ****  * @notapi
 206:../../os/rt/include/chlists.h ****  */
 207:../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 208:../../os/rt/include/chlists.h **** 
 209:../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 210:../../os/rt/include/chlists.h ****   lp->next = p->next;
 211:../../os/rt/include/chlists.h **** 
 212:../../os/rt/include/chlists.h ****   return p;
 213:../../os/rt/include/chlists.h **** }
 214:../../os/rt/include/chlists.h **** 
 215:../../os/rt/include/chlists.h **** /**
 216:../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 217:../../os/rt/include/chlists.h ****  *
 218:../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 219:../../os/rt/include/chlists.h ****  *
 220:../../os/rt/include/chlists.h ****  * @notapi
 221:../../os/rt/include/chlists.h ****  */
 222:../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 223:../../os/rt/include/chlists.h **** 
 224:../../os/rt/include/chlists.h ****   qp->next = qp;
 225:../../os/rt/include/chlists.h ****   qp->prev = qp;
 226:../../os/rt/include/chlists.h **** }
 227:../../os/rt/include/chlists.h **** 
 228:../../os/rt/include/chlists.h **** /**
 229:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 230:../../os/rt/include/chlists.h ****  *
 231:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 232:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 233:../../os/rt/include/chlists.h ****  *
 234:../../os/rt/include/chlists.h ****  * @notapi
 235:../../os/rt/include/chlists.h ****  */
 236:../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 237:../../os/rt/include/chlists.h **** 
 238:../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 239:../../os/rt/include/chlists.h **** }
 240:../../os/rt/include/chlists.h **** 
 241:../../os/rt/include/chlists.h **** /**
 242:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 243:../../os/rt/include/chlists.h ****  *
 244:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 245:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 246:../../os/rt/include/chlists.h ****  *
 247:../../os/rt/include/chlists.h ****  * @notapi
 248:../../os/rt/include/chlists.h ****  */
 249:../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 250:../../os/rt/include/chlists.h **** 
 251:../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 252:../../os/rt/include/chlists.h **** }
 253:../../os/rt/include/chlists.h **** 
 254:../../os/rt/include/chlists.h **** /**
 255:../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 256:../../os/rt/include/chlists.h ****  *
 257:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 258:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 259:../../os/rt/include/chlists.h ****  *
 260:../../os/rt/include/chlists.h ****  * @notapi
 261:../../os/rt/include/chlists.h ****  */
 262:../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 263:../../os/rt/include/chlists.h **** 
 264:../../os/rt/include/chlists.h ****   p->next       = qp;
 265:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 266:../../os/rt/include/chlists.h ****   p->prev->next = p;
 267:../../os/rt/include/chlists.h ****   qp->prev      = p;
 268:../../os/rt/include/chlists.h **** }
 269:../../os/rt/include/chlists.h **** 
 270:../../os/rt/include/chlists.h **** /**
 271:../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 272:../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 273:../../os/rt/include/chlists.h ****  *          element with the highest priority.
 274:../../os/rt/include/chlists.h ****  *
 275:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 276:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 277:../../os/rt/include/chlists.h ****  *
 278:../../os/rt/include/chlists.h ****  * @notapi
 279:../../os/rt/include/chlists.h ****  */
 280:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 281:../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 282:../../os/rt/include/chlists.h **** 
 283:../../os/rt/include/chlists.h ****   qp->next       = p->next;
 284:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 285:../../os/rt/include/chlists.h **** 
 286:../../os/rt/include/chlists.h ****   return p;
 287:../../os/rt/include/chlists.h **** }
 288:../../os/rt/include/chlists.h **** 
 289:../../os/rt/include/chlists.h **** /**
 290:../../os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 291:../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 292:../../os/rt/include/chlists.h ****  *          element with the lowest priority.
 293:../../os/rt/include/chlists.h ****  *
 294:../../os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 295:../../os/rt/include/chlists.h ****  * @return          The removed element pointer.
 296:../../os/rt/include/chlists.h ****  *
 297:../../os/rt/include/chlists.h ****  * @notapi
 298:../../os/rt/include/chlists.h ****  */
 299:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 300:../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 301:../../os/rt/include/chlists.h **** 
 302:../../os/rt/include/chlists.h ****   qp->prev       = p->prev;
 303:../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 304:../../os/rt/include/chlists.h **** 
 305:../../os/rt/include/chlists.h ****   return p;
 306:../../os/rt/include/chlists.h **** }
 307:../../os/rt/include/chlists.h **** 
 308:../../os/rt/include/chlists.h **** /**
 309:../../os/rt/include/chlists.h ****  * @brief   Removes an element from a queue and returns it.
 310:../../os/rt/include/chlists.h ****  * @details The element is removed from the queue regardless of its relative
 311:../../os/rt/include/chlists.h ****  *          position and regardless the used insertion method.
 312:../../os/rt/include/chlists.h ****  *
 313:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be removed from the queue
 314:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 315:../../os/rt/include/chlists.h ****  *
 316:../../os/rt/include/chlists.h ****  * @notapi
 317:../../os/rt/include/chlists.h ****  */
 318:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 319:../../os/rt/include/chlists.h **** 
 320:../../os/rt/include/chlists.h ****   p->prev->next = p->next;
 321:../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 322:../../os/rt/include/chlists.h **** 
 323:../../os/rt/include/chlists.h ****   return p;
 324:../../os/rt/include/chlists.h **** }
 325:../../os/rt/include/chlists.h **** 
 326:../../os/rt/include/chlists.h **** /**
 327:../../os/rt/include/chlists.h ****  * @brief   Priority queue initialization.
 328:../../os/rt/include/chlists.h ****  * @note    The queue header priority is initialized to zero, all other
 329:../../os/rt/include/chlists.h ****  *          elements in the queue are assumed to have priority greater
 330:../../os/rt/include/chlists.h ****  *          than zero.
 331:../../os/rt/include/chlists.h ****  *
 332:../../os/rt/include/chlists.h ****  * @param[out] pqp      pointer to the priority queue header
 333:../../os/rt/include/chlists.h ****  *
 334:../../os/rt/include/chlists.h ****  * @notapi
 335:../../os/rt/include/chlists.h ****  */
 336:../../os/rt/include/chlists.h **** static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 337:../../os/rt/include/chlists.h **** 
 338:../../os/rt/include/chlists.h ****   pqp->next = pqp;
 339:../../os/rt/include/chlists.h ****   pqp->prev = pqp;
 340:../../os/rt/include/chlists.h ****   pqp->prio = (tprio_t)0;
 341:../../os/rt/include/chlists.h **** }
 342:../../os/rt/include/chlists.h **** 
 343:../../os/rt/include/chlists.h **** /**
 344:../../os/rt/include/chlists.h ****  * @brief   Removes the highest priority element from a priority queue and
 345:../../os/rt/include/chlists.h ****  *          returns it.
 346:../../os/rt/include/chlists.h ****  *
 347:../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 348:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 349:../../os/rt/include/chlists.h ****  *
 350:../../os/rt/include/chlists.h ****  * @notapi
 351:../../os/rt/include/chlists.h ****  */
 352:../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 353:../../os/rt/include/chlists.h ****   ch_priority_queue_t *p = pqp->next;
 354:../../os/rt/include/chlists.h **** 
 355:../../os/rt/include/chlists.h ****   pqp->next       = p->next;
 356:../../os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 357:../../os/rt/include/chlists.h **** 
 358:../../os/rt/include/chlists.h ****   return p;
 359:../../os/rt/include/chlists.h **** }
 360:../../os/rt/include/chlists.h **** 
 361:../../os/rt/include/chlists.h **** /**
 362:../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it behind
 363:../../os/rt/include/chlists.h ****  *          its peers.
 364:../../os/rt/include/chlists.h ****  * @details The element is positioned behind all elements with higher or
 365:../../os/rt/include/chlists.h ****  *          equal priority.
 366:../../os/rt/include/chlists.h ****  *
 367:../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 368:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 369:../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 370:../../os/rt/include/chlists.h ****  *
 371:../../os/rt/include/chlists.h ****  * @notapi
 372:../../os/rt/include/chlists.h ****  */
 373:../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_behind(ch_priority_queue_t *pqp,
 374:../../os/rt/include/chlists.h ****                                                            ch_priority_queue_t *p) {
 375:../../os/rt/include/chlists.h **** 
 376:../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 377:../../os/rt/include/chlists.h ****   do {
 378:../../os/rt/include/chlists.h ****     pqp = pqp->next;
 379:../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio >= p->prio));
 380:../../os/rt/include/chlists.h **** 
 381:../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 382:../../os/rt/include/chlists.h ****   p->next       = pqp;
 383:../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 384:../../os/rt/include/chlists.h ****   p->prev->next = p;
 385:../../os/rt/include/chlists.h ****   pqp->prev     = p;
 386:../../os/rt/include/chlists.h **** 
 387:../../os/rt/include/chlists.h ****   return p;
 388:../../os/rt/include/chlists.h **** }
 389:../../os/rt/include/chlists.h **** 
 390:../../os/rt/include/chlists.h **** /**
 391:../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it ahead of
 392:../../os/rt/include/chlists.h ****  *          its peers.
 393:../../os/rt/include/chlists.h ****  * @details The element is positioned ahead of all elements with higher or
 394:../../os/rt/include/chlists.h ****  *          equal priority.
 395:../../os/rt/include/chlists.h ****  *
 396:../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 397:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 398:../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 399:../../os/rt/include/chlists.h ****  *
 400:../../os/rt/include/chlists.h ****  * @notapi
 401:../../os/rt/include/chlists.h ****  */
 402:../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
 403:../../os/rt/include/chlists.h ****                                                           ch_priority_queue_t *p) {
 404:../../os/rt/include/chlists.h **** 
 405:../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 406:../../os/rt/include/chlists.h ****   do {
 407:../../os/rt/include/chlists.h ****     pqp = pqp->next;
 408:../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio > p->prio));
 409:../../os/rt/include/chlists.h **** 
 410:../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 411:../../os/rt/include/chlists.h ****   p->next       = pqp;
 412:../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 413:../../os/rt/include/chlists.h ****   p->prev->next = p;
 414:../../os/rt/include/chlists.h ****   pqp->prev     = p;
 415:../../os/rt/include/chlists.h **** 
 416:../../os/rt/include/chlists.h ****   return p;
 417:../../os/rt/include/chlists.h **** }
 418:../../os/rt/include/chlists.h **** 
 419:../../os/rt/include/chlists.h **** /**
 420:../../os/rt/include/chlists.h ****  * @brief   Delta list initialization.
 421:../../os/rt/include/chlists.h ****  *
 422:../../os/rt/include/chlists.h ****  * @param[out] dlhp    pointer to the delta list header
 423:../../os/rt/include/chlists.h ****  *
 424:../../os/rt/include/chlists.h ****  * @notapi
 425:../../os/rt/include/chlists.h ****  */
 426:../../os/rt/include/chlists.h **** static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 427:../../os/rt/include/chlists.h **** 
 428:../../os/rt/include/chlists.h ****   dlhp->next  = dlhp;
 429:../../os/rt/include/chlists.h ****   dlhp->prev  = dlhp;
 430:../../os/rt/include/chlists.h ****   dlhp->delta = (sysinterval_t)-1;
 431:../../os/rt/include/chlists.h **** }
 432:../../os/rt/include/chlists.h **** 
 433:../../os/rt/include/chlists.h **** /**
 434:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified delta list is empty.
 435:../../os/rt/include/chlists.h ****  *
 436:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 437:../../os/rt/include/chlists.h ****  * @return              The status of the delta list.
 438:../../os/rt/include/chlists.h ****  *
 439:../../os/rt/include/chlists.h ****  * @notapi
 440:../../os/rt/include/chlists.h ****  */
 441:../../os/rt/include/chlists.h **** static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
 442:../../os/rt/include/chlists.h **** 
 443:../../os/rt/include/chlists.h ****   return (bool)(dlhp == dlhp->next);
 444:../../os/rt/include/chlists.h **** }
 445:../../os/rt/include/chlists.h **** 
 446:../../os/rt/include/chlists.h **** /**
 447:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 448:../../os/rt/include/chlists.h ****  *
 449:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 450:../../os/rt/include/chlists.h ****  * @return              The status of the delta list.
 451:../../os/rt/include/chlists.h ****  *
 452:../../os/rt/include/chlists.h ****  * @notapi
 453:../../os/rt/include/chlists.h ****  */
 454:../../os/rt/include/chlists.h **** static inline bool ch_dlist_notempty(ch_delta_list_t *dlhp) {
 455:../../os/rt/include/chlists.h **** 
 456:../../os/rt/include/chlists.h ****   return (bool)(dlhp != dlhp->next);
 457:../../os/rt/include/chlists.h **** }
 458:../../os/rt/include/chlists.h **** 
 459:../../os/rt/include/chlists.h **** /**
 460:../../os/rt/include/chlists.h ****  * @brief   Last element in the delta list check.
 461:../../os/rt/include/chlists.h ****  *
 462:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 463:../../os/rt/include/chlists.h ****  * @param[in] dlp       pointer to the delta list element
 464:../../os/rt/include/chlists.h ****  *
 465:../../os/rt/include/chlists.h ****  * @notapi
 466:../../os/rt/include/chlists.h ****  */
 467:../../os/rt/include/chlists.h **** static inline bool ch_dlist_islast(ch_delta_list_t *dlhp,
 468:../../os/rt/include/chlists.h ****                                    ch_delta_list_t *dlp) {
 469:../../os/rt/include/chlists.h **** 
 470:../../os/rt/include/chlists.h ****   return (bool)(dlp->next == dlhp);
 471:../../os/rt/include/chlists.h **** }
 472:../../os/rt/include/chlists.h **** 
 473:../../os/rt/include/chlists.h **** /**
 474:../../os/rt/include/chlists.h ****  * @brief   Fist element in the delta list check.
 475:../../os/rt/include/chlists.h ****  *
 476:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 477:../../os/rt/include/chlists.h ****  * @param[in] dlp       pointer to the delta list element
 478:../../os/rt/include/chlists.h ****  *
 479:../../os/rt/include/chlists.h ****  * @notapi
 480:../../os/rt/include/chlists.h ****  */
 481:../../os/rt/include/chlists.h **** static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
 482:../../os/rt/include/chlists.h ****                                     ch_delta_list_t *dlp) {
 483:../../os/rt/include/chlists.h **** 
 484:../../os/rt/include/chlists.h ****   return (bool)(dlhp->next == dlp);
 485:../../os/rt/include/chlists.h **** }
 486:../../os/rt/include/chlists.h **** 
 487:../../os/rt/include/chlists.h **** /**
 488:../../os/rt/include/chlists.h ****  * @brief   Inserts an element after another header element.
 489:../../os/rt/include/chlists.h ****  *
 490:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header element
 491:../../os/rt/include/chlists.h ****  * @param[in] dlp       element to be inserted after the header element
 492:../../os/rt/include/chlists.h ****  * @param[in] delta     delta of the element to be inserted
 493:../../os/rt/include/chlists.h ****  *
 494:../../os/rt/include/chlists.h ****  * @notapi
 495:../../os/rt/include/chlists.h ****  */
 496:../../os/rt/include/chlists.h **** static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
 497:../../os/rt/include/chlists.h ****                                          ch_delta_list_t *dlp,
 498:../../os/rt/include/chlists.h ****                                          sysinterval_t delta) {
 499:../../os/rt/include/chlists.h **** 
 500:../../os/rt/include/chlists.h ****   dlp->delta      = delta;
  80               		.loc 2 500 0
  81 0024 2483      		std Z+4,r18
  82 0026 3583      		std Z+5,r19
  83 0028 4683      		std Z+6,r20
  84 002a 5783      		std Z+7,r21
 501:../../os/rt/include/chlists.h ****   dlp->prev       = dlhp;
  85               		.loc 2 501 0
  86 002c 80E0      		ldi r24,lo8(ch0+7)
  87 002e 90E0      		ldi r25,hi8(ch0+7)
  88               	.LVL3:
  89 0030 9383      		std Z+3,r25
  90 0032 8283      		std Z+2,r24
 502:../../os/rt/include/chlists.h ****   dlp->next       = dlp->prev->next;
  91               		.loc 2 502 0
  92 0034 A091 0000 		lds r26,ch0+7
  93 0038 B091 0000 		lds r27,ch0+7+1
  94 003c B183      		std Z+1,r27
  95 003e A083      		st Z,r26
 503:../../os/rt/include/chlists.h ****   dlp->next->prev = dlp;
  96               		.loc 2 503 0
  97 0040 1396      		adiw r26,2+1
  98 0042 FC93      		st X,r31
  99 0044 EE93      		st -X,r30
 100 0046 1297      		sbiw r26,2
 504:../../os/rt/include/chlists.h ****   dlhp->next      = dlp;
 101               		.loc 2 504 0
 102 0048 F093 0000 		sts ch0+7+1,r31
 103 004c E093 0000 		sts ch0+7,r30
 104               	.LVL4:
 105 0050 6901      		movw r12,r18
 106 0052 7A01      		movw r14,r20
 107 0054 81E0      		ldi r24,1
 108 0056 C816      		cp r12,r24
 109 0058 8FEF      		ldi r24,-1
 110 005a D806      		cpc r13,r24
 111 005c E104      		cpc r14,__zero_reg__
 112 005e F104      		cpc r15,__zero_reg__
 113               	.LVL5:
 114 0060 00F0      		brlo .L2
 115 0062 C12C      		mov r12,__zero_reg__
 116 0064 D12C      		mov r13,__zero_reg__
 117 0066 7601      		movw r14,r12
 118 0068 DA94      		dec r13
 119               	.LVL6:
 120               	.L2:
 121 006a 82E0      		ldi r24,2
 122 006c C816      		cp r12,r24
 123 006e D104      		cpc r13,__zero_reg__
 124 0070 E104      		cpc r14,__zero_reg__
 125 0072 F104      		cpc r15,__zero_reg__
 126 0074 00F4      		brsh .L3
 127 0076 92E0      		ldi r25,lo8(2)
 128 0078 C92E      		mov r12,r25
 129 007a D12C      		mov r13,__zero_reg__
 130 007c E12C      		mov r14,__zero_reg__
 131 007e F12C      		mov r15,__zero_reg__
 132               	.L3:
 133               	.LVL7:
 134               	.LBE209:
 135               	.LBE208:
 136               	.LBB210:
 137               	.LBB211:
 138               		.file 3 "../../os/rt/include/chtime.h"
   1:../../os/rt/include/chtime.h **** /*
   2:../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chtime.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chtime.h **** 
   5:../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chtime.h **** 
   7:../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chtime.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chtime.h **** 
  11:../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chtime.h **** 
  16:../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chtime.h **** */
  19:../../os/rt/include/chtime.h **** 
  20:../../os/rt/include/chtime.h **** /**
  21:../../os/rt/include/chtime.h ****  * @file    rt/include/chtime.h
  22:../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../os/rt/include/chtime.h ****  *
  24:../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../os/rt/include/chtime.h ****  * @details This module is responsible for handling of system time and time
  26:../../os/rt/include/chtime.h ****  *          intervals.
  27:../../os/rt/include/chtime.h ****  * @{
  28:../../os/rt/include/chtime.h ****  */
  29:../../os/rt/include/chtime.h **** 
  30:../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  31:../../os/rt/include/chtime.h **** #define CHTIME_H
  32:../../os/rt/include/chtime.h **** 
  33:../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  35:../../os/rt/include/chtime.h **** /*===========================================================================*/
  36:../../os/rt/include/chtime.h **** 
  37:../../os/rt/include/chtime.h **** /**
  38:../../os/rt/include/chtime.h ****  * @name    Special time constants
  39:../../os/rt/include/chtime.h ****  * @{
  40:../../os/rt/include/chtime.h ****  */
  41:../../os/rt/include/chtime.h **** /**
  42:../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  43:../../os/rt/include/chtime.h ****  *          specification.
  44:../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  45:../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  46:../../os/rt/include/chtime.h ****  */
  47:../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  48:../../os/rt/include/chtime.h **** 
  49:../../os/rt/include/chtime.h **** /**
  50:../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  51:../../os/rt/include/chtime.h ****  *          specification.
  52:../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  53:../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  54:../../os/rt/include/chtime.h ****  */
  55:../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  56:../../os/rt/include/chtime.h **** 
  57:../../os/rt/include/chtime.h **** /**
  58:../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  59:../../os/rt/include/chtime.h ****  */
  60:../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  61:../../os/rt/include/chtime.h **** 
  62:../../os/rt/include/chtime.h **** /**
  63:../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  64:../../os/rt/include/chtime.h ****  */
  65:../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  66:../../os/rt/include/chtime.h **** /** @} */
  67:../../os/rt/include/chtime.h **** 
  68:../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  70:../../os/rt/include/chtime.h **** /*===========================================================================*/
  71:../../os/rt/include/chtime.h **** 
  72:../../os/rt/include/chtime.h **** /*===========================================================================*/
  73:../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
  74:../../os/rt/include/chtime.h **** /*===========================================================================*/
  75:../../os/rt/include/chtime.h **** 
  76:../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
  77:../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
  78:../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
  79:../../os/rt/include/chtime.h **** #endif
  80:../../os/rt/include/chtime.h **** 
  81:../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
  82:../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
  83:../../os/rt/include/chtime.h **** #endif
  84:../../os/rt/include/chtime.h **** 
  85:../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
  86:../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
  87:../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
  88:../../os/rt/include/chtime.h **** #endif
  89:../../os/rt/include/chtime.h **** 
  90:../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
  91:../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
  92:../../os/rt/include/chtime.h **** #endif
  93:../../os/rt/include/chtime.h **** 
  94:../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
  95:../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
  96:../../os/rt/include/chtime.h **** #endif
  97:../../os/rt/include/chtime.h **** 
  98:../../os/rt/include/chtime.h **** /*===========================================================================*/
  99:../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 100:../../os/rt/include/chtime.h **** /*===========================================================================*/
 101:../../os/rt/include/chtime.h **** 
 102:../../os/rt/include/chtime.h **** /**
 103:../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 104:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 105:../../os/rt/include/chtime.h ****  */
 106:../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 107:../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 108:../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 109:../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 110:../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 111:../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 112:../../os/rt/include/chtime.h **** #endif
 113:../../os/rt/include/chtime.h **** 
 114:../../os/rt/include/chtime.h **** /**
 115:../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 116:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 117:../../os/rt/include/chtime.h ****  */
 118:../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 119:../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 120:../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 121:../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 122:../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 123:../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 124:../../os/rt/include/chtime.h **** #endif
 125:../../os/rt/include/chtime.h **** 
 126:../../os/rt/include/chtime.h **** /**
 127:../../os/rt/include/chtime.h ****  * @brief   Type of a time stamp.
 128:../../os/rt/include/chtime.h ****  */
 129:../../os/rt/include/chtime.h **** typedef uint64_t systimestamp_t;
 130:../../os/rt/include/chtime.h **** 
 131:../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 132:../../os/rt/include/chtime.h **** /**
 133:../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 134:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 135:../../os/rt/include/chtime.h ****  */
 136:../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 137:../../os/rt/include/chtime.h **** 
 138:../../os/rt/include/chtime.h **** /**
 139:../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 140:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 141:../../os/rt/include/chtime.h ****  */
 142:../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 143:../../os/rt/include/chtime.h **** 
 144:../../os/rt/include/chtime.h **** /**
 145:../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 146:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 147:../../os/rt/include/chtime.h ****  */
 148:../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 149:../../os/rt/include/chtime.h **** 
 150:../../os/rt/include/chtime.h **** /**
 151:../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 152:../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 153:../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 154:../../os/rt/include/chtime.h ****  */
 155:../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 156:../../os/rt/include/chtime.h **** 
 157:../../os/rt/include/chtime.h **** #else
 158:../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 159:../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 160:../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 161:../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 162:../../os/rt/include/chtime.h **** #endif
 163:../../os/rt/include/chtime.h **** 
 164:../../os/rt/include/chtime.h **** /*===========================================================================*/
 165:../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 166:../../os/rt/include/chtime.h **** /*===========================================================================*/
 167:../../os/rt/include/chtime.h **** 
 168:../../os/rt/include/chtime.h **** /**
 169:../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 170:../../os/rt/include/chtime.h ****  * @{
 171:../../os/rt/include/chtime.h ****  */
 172:../../os/rt/include/chtime.h **** /**
 173:../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 174:../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 175:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 176:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 177:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 178:../../os/rt/include/chtime.h ****  *          converted.
 179:../../os/rt/include/chtime.h ****  *
 180:../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 181:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 182:../../os/rt/include/chtime.h ****  *
 183:../../os/rt/include/chtime.h ****  * @api
 184:../../os/rt/include/chtime.h ****  */
 185:../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 186:../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 187:../../os/rt/include/chtime.h **** 
 188:../../os/rt/include/chtime.h **** /**
 189:../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 190:../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 191:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 192:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 193:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 194:../../os/rt/include/chtime.h ****  *          converted.
 195:../../os/rt/include/chtime.h ****  *
 196:../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 197:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 198:../../os/rt/include/chtime.h ****  *
 199:../../os/rt/include/chtime.h ****  * @api
 200:../../os/rt/include/chtime.h ****  */
 201:../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 202:../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 203:../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 204:../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 205:../../os/rt/include/chtime.h **** 
 206:../../os/rt/include/chtime.h **** /**
 207:../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 208:../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 209:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 210:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 211:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 212:../../os/rt/include/chtime.h ****  *          converted.
 213:../../os/rt/include/chtime.h ****  *
 214:../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 215:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 216:../../os/rt/include/chtime.h ****  *
 217:../../os/rt/include/chtime.h ****  * @api
 218:../../os/rt/include/chtime.h ****  */
 219:../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 220:../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 221:../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 222:../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 223:../../os/rt/include/chtime.h **** 
 224:../../os/rt/include/chtime.h **** /**
 225:../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 226:../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 227:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 228:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 229:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 230:../../os/rt/include/chtime.h ****  *          converted.
 231:../../os/rt/include/chtime.h ****  *
 232:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 233:../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 234:../../os/rt/include/chtime.h ****  *
 235:../../os/rt/include/chtime.h ****  * @api
 236:../../os/rt/include/chtime.h ****  */
 237:../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 238:../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 239:../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 240:../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 241:../../os/rt/include/chtime.h **** 
 242:../../os/rt/include/chtime.h **** /**
 243:../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 244:../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 245:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 246:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 247:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 248:../../os/rt/include/chtime.h ****  *          converted.
 249:../../os/rt/include/chtime.h ****  *
 250:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 251:../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 252:../../os/rt/include/chtime.h ****  *
 253:../../os/rt/include/chtime.h ****  * @api
 254:../../os/rt/include/chtime.h ****  */
 255:../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 256:../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 257:../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 258:../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 259:../../os/rt/include/chtime.h **** 
 260:../../os/rt/include/chtime.h **** /**
 261:../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 262:../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 263:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 264:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 265:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 266:../../os/rt/include/chtime.h ****  *          converted.
 267:../../os/rt/include/chtime.h ****  *
 268:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 269:../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 270:../../os/rt/include/chtime.h ****  *
 271:../../os/rt/include/chtime.h ****  * @api
 272:../../os/rt/include/chtime.h ****  */
 273:../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 274:../../os/rt/include/chtime.h ****   (time_usecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +        \
 275:../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 276:../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 277:../../os/rt/include/chtime.h **** /** @} */
 278:../../os/rt/include/chtime.h **** 
 279:../../os/rt/include/chtime.h **** /*===========================================================================*/
 280:../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 281:../../os/rt/include/chtime.h **** /*===========================================================================*/
 282:../../os/rt/include/chtime.h **** 
 283:../../os/rt/include/chtime.h **** #ifdef __cplusplus
 284:../../os/rt/include/chtime.h **** extern "C" {
 285:../../os/rt/include/chtime.h **** #endif
 286:../../os/rt/include/chtime.h **** 
 287:../../os/rt/include/chtime.h **** #ifdef __cplusplus
 288:../../os/rt/include/chtime.h **** }
 289:../../os/rt/include/chtime.h **** #endif
 290:../../os/rt/include/chtime.h **** 
 291:../../os/rt/include/chtime.h **** /*===========================================================================*/
 292:../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 293:../../os/rt/include/chtime.h **** /*===========================================================================*/
 294:../../os/rt/include/chtime.h **** 
 295:../../os/rt/include/chtime.h **** /**
 296:../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 297:../../os/rt/include/chtime.h ****  * @{
 298:../../os/rt/include/chtime.h ****  */
 299:../../os/rt/include/chtime.h **** /**
 300:../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 301:../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 302:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 303:../../os/rt/include/chtime.h ****  *
 304:../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 305:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 306:../../os/rt/include/chtime.h ****  *
 307:../../os/rt/include/chtime.h ****  * @special
 308:../../os/rt/include/chtime.h ****  */
 309:../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 310:../../os/rt/include/chtime.h ****   time_conv_t ticks;
 311:../../os/rt/include/chtime.h **** 
 312:../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 313:../../os/rt/include/chtime.h **** 
 314:../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 315:../../os/rt/include/chtime.h ****               "conversion overflow");
 316:../../os/rt/include/chtime.h **** 
 317:../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 318:../../os/rt/include/chtime.h **** }
 319:../../os/rt/include/chtime.h **** 
 320:../../os/rt/include/chtime.h **** /**
 321:../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 322:../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 323:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../os/rt/include/chtime.h ****  *
 325:../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 326:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 327:../../os/rt/include/chtime.h ****  *
 328:../../os/rt/include/chtime.h ****  * @special
 329:../../os/rt/include/chtime.h ****  */
 330:../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 331:../../os/rt/include/chtime.h ****   time_conv_t ticks;
 332:../../os/rt/include/chtime.h **** 
 333:../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 334:../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 335:../../os/rt/include/chtime.h **** 
 336:../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 337:../../os/rt/include/chtime.h ****               "conversion overflow");
 338:../../os/rt/include/chtime.h **** 
 339:../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 340:../../os/rt/include/chtime.h **** }
 341:../../os/rt/include/chtime.h **** 
 342:../../os/rt/include/chtime.h **** /**
 343:../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 344:../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 345:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 346:../../os/rt/include/chtime.h ****  *
 347:../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 348:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 349:../../os/rt/include/chtime.h ****  *
 350:../../os/rt/include/chtime.h ****  * @special
 351:../../os/rt/include/chtime.h ****  */
 352:../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 353:../../os/rt/include/chtime.h ****   time_conv_t ticks;
 354:../../os/rt/include/chtime.h **** 
 355:../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 356:../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 357:../../os/rt/include/chtime.h **** 
 358:../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 359:../../os/rt/include/chtime.h ****               "conversion overflow");
 360:../../os/rt/include/chtime.h **** 
 361:../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 362:../../os/rt/include/chtime.h **** }
 363:../../os/rt/include/chtime.h **** 
 364:../../os/rt/include/chtime.h **** /**
 365:../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 366:../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 367:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 368:../../os/rt/include/chtime.h ****  *
 369:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 370:../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 371:../../os/rt/include/chtime.h ****  *
 372:../../os/rt/include/chtime.h ****  * @special
 373:../../os/rt/include/chtime.h ****  */
 374:../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 375:../../os/rt/include/chtime.h ****   time_conv_t secs;
 376:../../os/rt/include/chtime.h **** 
 377:../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 378:../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 379:../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 380:../../os/rt/include/chtime.h **** 
 381:../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 382:../../os/rt/include/chtime.h ****               "conversion overflow");
 383:../../os/rt/include/chtime.h **** 
 384:../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 385:../../os/rt/include/chtime.h **** }
 386:../../os/rt/include/chtime.h **** 
 387:../../os/rt/include/chtime.h **** /**
 388:../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 389:../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 390:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 391:../../os/rt/include/chtime.h ****  *
 392:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 393:../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 394:../../os/rt/include/chtime.h ****  *
 395:../../os/rt/include/chtime.h ****  * @special
 396:../../os/rt/include/chtime.h ****  */
 397:../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 398:../../os/rt/include/chtime.h ****   time_conv_t msecs;
 399:../../os/rt/include/chtime.h **** 
 400:../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 401:../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 402:../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 403:../../os/rt/include/chtime.h **** 
 404:../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 405:../../os/rt/include/chtime.h ****               "conversion overflow");
 406:../../os/rt/include/chtime.h **** 
 407:../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 408:../../os/rt/include/chtime.h **** }
 409:../../os/rt/include/chtime.h **** 
 410:../../os/rt/include/chtime.h **** /**
 411:../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 412:../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 413:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 414:../../os/rt/include/chtime.h ****  *
 415:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 416:../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 417:../../os/rt/include/chtime.h ****  *
 418:../../os/rt/include/chtime.h ****  * @special
 419:../../os/rt/include/chtime.h ****  */
 420:../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 421:../../os/rt/include/chtime.h ****   time_conv_t usecs;
 422:../../os/rt/include/chtime.h **** 
 423:../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 424:../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 425:../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 426:../../os/rt/include/chtime.h **** 
 427:../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 428:../../os/rt/include/chtime.h ****               "conversion overflow");
 429:../../os/rt/include/chtime.h **** 
 430:../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 431:../../os/rt/include/chtime.h **** }
 432:../../os/rt/include/chtime.h **** 
 433:../../os/rt/include/chtime.h **** /**
 434:../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 435:../../os/rt/include/chtime.h ****  *
 436:../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 437:../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 438:../../os/rt/include/chtime.h ****  * @return              The new system time.
 439:../../os/rt/include/chtime.h ****  *
 440:../../os/rt/include/chtime.h ****  * @xclass
 441:../../os/rt/include/chtime.h ****  */
 442:../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 443:../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 444:../../os/rt/include/chtime.h **** 
 445:../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 446:../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 447:../../os/rt/include/chtime.h **** #endif
 448:../../os/rt/include/chtime.h **** 
 449:../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 139               		.loc 3 449 0
 140 0080 CE01      		movw r24,r28
 141 0082 8C0D      		add r24,r12
 142 0084 9D1D      		adc r25,r13
 143               	.LBE211:
 144               	.LBE210:
 145               	.LBB212:
 146               	.LBB213:
 147               		.file 4 "../../os/hal/osal/rt-nil/chcore_timer.h"
   1:../../os/hal/osal/rt-nil/chcore_timer.h **** /*
   2:../../os/hal/osal/rt-nil/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/chcore_timer.h **** 
   4:../../os/hal/osal/rt-nil/chcore_timer.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/chcore_timer.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/chcore_timer.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/chcore_timer.h **** 
   8:../../os/hal/osal/rt-nil/chcore_timer.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  10:../../os/hal/osal/rt-nil/chcore_timer.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/chcore_timer.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/chcore_timer.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/chcore_timer.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/chcore_timer.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/chcore_timer.h **** */
  16:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  17:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  18:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @file    osal/rt-nil//chcore_timer.h
  19:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   System Timer bindings header file.
  20:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  21:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @addtogroup OSAL_CHCORE_TIMER
  22:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @{
  23:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  24:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  25:../../os/hal/osal/rt-nil/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  26:../../os/hal/osal/rt-nil/chcore_timer.h **** #define CHCORE_TIMER_H
  27:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  28:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  29:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module constants.                                                         */
  30:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  31:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  32:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  33:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  34:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  36:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Derived constants and error checks.                                       */
  38:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  39:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  40:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  41:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module data structures and types.                                         */
  42:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  43:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  44:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  45:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module macros.                                                            */
  46:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  47:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  48:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  49:../../os/hal/osal/rt-nil/chcore_timer.h **** /* External declarations.                                                    */
  50:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  51:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  52:../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  53:../../os/hal/osal/rt-nil/chcore_timer.h **** extern "C" {
  54:../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  55:../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStartAlarm(systime_t time);
  56:../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStopAlarm(void);
  57:../../os/hal/osal/rt-nil/chcore_timer.h ****   void stSetAlarm(systime_t time);
  58:../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetCounter(void);
  59:../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetAlarm(void);
  60:../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  61:../../os/hal/osal/rt-nil/chcore_timer.h **** }
  62:../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  63:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  64:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  65:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module inline functions.                                                  */
  66:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  67:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  68:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  69:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Starts the alarm.
  70:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  71:../../os/hal/osal/rt-nil/chcore_timer.h ****  *          this call.
  72:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  73:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  74:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  75:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  76:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  77:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  78:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  79:../../os/hal/osal/rt-nil/chcore_timer.h ****   stStartAlarm(time);
 148               		.loc 4 79 0
 149 0086 0E94 0000 		call stStartAlarm
 150               	.LVL8:
 151               	.LBE213:
 152               	.LBE212:
 140:../../os/rt/src/chvt.c ****   ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
 141:../../os/rt/src/chvt.c **** 
 142:../../os/rt/src/chvt.c ****   /* Initial delta is what is configured statically.*/
 143:../../os/rt/src/chvt.c ****   currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 153               		.loc 1 143 0
 154 008a 82E0      		ldi r24,lo8(2)
 155 008c 882E      		mov r8,r24
 156 008e 912C      		mov r9,__zero_reg__
 157 0090 A12C      		mov r10,__zero_reg__
 158 0092 B12C      		mov r11,__zero_reg__
 159 0094 00C0      		rjmp .L5
 160               	.LVL9:
 161               	.L8:
 162               	.LBB214:
 144:../../os/rt/src/chvt.c **** 
 145:../../os/rt/src/chvt.c ****   /* If the requested delay is lower than the minimum safe delta then it
 146:../../os/rt/src/chvt.c ****      is raised to the minimum safe value.*/
 147:../../os/rt/src/chvt.c ****   if (delay < currdelta) {
 148:../../os/rt/src/chvt.c ****     /* We need to avoid that the system time goes past the alarm we are
 149:../../os/rt/src/chvt.c ****        going to set before the alarm is actually set.*/
 150:../../os/rt/src/chvt.c ****     delay = currdelta;
 151:../../os/rt/src/chvt.c ****   }
 152:../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 153:../../os/rt/src/chvt.c ****   else if (delay > VT_MAX_DELAY) {
 154:../../os/rt/src/chvt.c ****     /* The delta could be too large for the physical timer to handle
 155:../../os/rt/src/chvt.c ****        this can happen when: sizeof (systime_t) < sizeof (sysinterval_t).*/
 156:../../os/rt/src/chvt.c ****     delay = VT_MAX_DELAY;
 157:../../os/rt/src/chvt.c ****   }
 158:../../os/rt/src/chvt.c **** #endif
 159:../../os/rt/src/chvt.c **** 
 160:../../os/rt/src/chvt.c ****   /* Being the first element inserted in the list the alarm timer
 161:../../os/rt/src/chvt.c ****      is started.*/
 162:../../os/rt/src/chvt.c ****   port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
 163:../../os/rt/src/chvt.c **** 
 164:../../os/rt/src/chvt.c ****   /* Deadline skip detection and correction loop.*/
 165:../../os/rt/src/chvt.c ****   while (true) {
 166:../../os/rt/src/chvt.c ****     systime_t newnow;
 167:../../os/rt/src/chvt.c **** 
 168:../../os/rt/src/chvt.c ****     /* Check on current time, we need to detect the error condition where
 169:../../os/rt/src/chvt.c ****        current time skipped past the calculated deadline.
 170:../../os/rt/src/chvt.c ****        Note that the "<" condition is intentional, we want to make sure
 171:../../os/rt/src/chvt.c ****        that the alarm is set before the deadline is reached because the
 172:../../os/rt/src/chvt.c ****        comparison could happen on the transition depending on the timer
 173:../../os/rt/src/chvt.c ****        architecture.*/
 174:../../os/rt/src/chvt.c ****     newnow = chVTGetSystemTimeX();
 175:../../os/rt/src/chvt.c ****     if (likely(chTimeDiffX(now, newnow) < delay)) {
 176:../../os/rt/src/chvt.c ****       break;
 177:../../os/rt/src/chvt.c ****     }
 178:../../os/rt/src/chvt.c **** 
 179:../../os/rt/src/chvt.c ****     /* Trying again with a more relaxed minimum delta.*/
 180:../../os/rt/src/chvt.c ****     currdelta += (sysinterval_t)1;
 163               		.loc 1 180 0
 164 0096 7501      		movw r14,r10
 165 0098 6401      		movw r12,r8
 166               	.LVL10:
 167 009a 8FEF      		ldi r24,-1
 168 009c C81A      		sub r12,r24
 169 009e D80A      		sbc r13,r24
 170 00a0 E80A      		sbc r14,r24
 171 00a2 F80A      		sbc r15,r24
 172               	.LVL11:
 173               	.LBB215:
 174               	.LBB216:
 175               		.loc 3 449 0
 176 00a4 CE01      		movw r24,r28
 177 00a6 8C0D      		add r24,r12
 178 00a8 9D1D      		adc r25,r13
 179               	.LBE216:
 180               	.LBE215:
 181               	.LBB217:
 182               	.LBB218:
  80:../../os/hal/osal/rt-nil/chcore_timer.h **** }
  81:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  82:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  83:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  84:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  85:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  86:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  87:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  88:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  89:../../os/hal/osal/rt-nil/chcore_timer.h ****   stStopAlarm();
  90:../../os/hal/osal/rt-nil/chcore_timer.h **** }
  91:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  92:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  93:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Sets the alarm time.
  94:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  95:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  96:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  97:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  98:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  99:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
 100:../../os/hal/osal/rt-nil/chcore_timer.h **** 
 101:../../os/hal/osal/rt-nil/chcore_timer.h ****   stSetAlarm(time);
 183               		.loc 4 101 0
 184 00aa 0E94 0000 		call stSetAlarm
 185               	.LVL12:
 186               	.LBE218:
 187               	.LBE217:
 181:../../os/rt/src/chvt.c **** 
 182:../../os/rt/src/chvt.c ****     /* Setting up the alarm on the next deadline.*/
 183:../../os/rt/src/chvt.c ****     port_timer_set_alarm(chTimeAddX(now, currdelta));
 184:../../os/rt/src/chvt.c **** 
 185:../../os/rt/src/chvt.c ****     /* Current time becomes the new "base" time.*/
 186:../../os/rt/src/chvt.c ****     now = newnow;
 188               		.loc 1 186 0
 189 00ae E801      		movw r28,r16
 180:../../os/rt/src/chvt.c **** 
 190               		.loc 1 180 0
 191 00b0 4601      		movw r8,r12
 192 00b2 5701      		movw r10,r14
 193               	.LVL13:
 194               	.L5:
 195               	.LBB219:
 196               	.LBB220:
 197               	.LBB221:
 102:../../os/hal/osal/rt-nil/chcore_timer.h **** }
 103:../../os/hal/osal/rt-nil/chcore_timer.h **** 
 104:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
 105:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Returns the system time.
 106:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 107:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @return              The system time.
 108:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 109:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
 110:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
 111:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 112:../../os/hal/osal/rt-nil/chcore_timer.h **** 
 113:../../os/hal/osal/rt-nil/chcore_timer.h ****   return stGetCounter();
 198               		.loc 4 113 0
 199 00b4 0E94 0000 		call stGetCounter
 200               	.LVL14:
 201 00b8 8C01      		movw r16,r24
 202               	.LBE221:
 203               	.LBE220:
 204               	.LBE219:
 205               	.LBB222:
 206               	.LBB223:
 450:../../os/rt/include/chtime.h **** }
 451:../../os/rt/include/chtime.h **** 
 452:../../os/rt/include/chtime.h **** /**
 453:../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 454:../../os/rt/include/chtime.h ****  *
 455:../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 456:../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 457:../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 458:../../os/rt/include/chtime.h ****  *
 459:../../os/rt/include/chtime.h ****  * @xclass
 460:../../os/rt/include/chtime.h ****  */
 461:../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 462:../../os/rt/include/chtime.h **** 
 463:../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 464:../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 465:../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 207               		.loc 3 465 0
 208 00ba 8C1B      		sub r24,r28
 209 00bc 9D0B      		sbc r25,r29
 210 00be B0E0      		ldi r27,0
 211 00c0 A0E0      		ldi r26,0
 212               	.LBE223:
 213               	.LBE222:
 175:../../os/rt/src/chvt.c ****       break;
 214               		.loc 1 175 0
 215 00c2 8C15      		cp r24,r12
 216 00c4 9D05      		cpc r25,r13
 217 00c6 AE05      		cpc r26,r14
 218 00c8 BF05      		cpc r27,r15
 219 00ca 00F4      		brsh .L8
 220               	.LBE214:
 187:../../os/rt/src/chvt.c ****     delay = currdelta;
 188:../../os/rt/src/chvt.c ****   }
 189:../../os/rt/src/chvt.c **** 
 190:../../os/rt/src/chvt.c **** #if !defined(CH_VT_RFCU_DISABLED)
 191:../../os/rt/src/chvt.c ****   /* Checking if a skip occurred.*/
 192:../../os/rt/src/chvt.c ****   if (currdelta > CH_CFG_ST_TIMEDELTA) {
 221               		.loc 1 192 0
 222 00cc 83E0      		ldi r24,3
 223 00ce 8816      		cp r8,r24
 224 00d0 9104      		cpc r9,__zero_reg__
 225 00d2 A104      		cpc r10,__zero_reg__
 226 00d4 B104      		cpc r11,__zero_reg__
 227 00d6 00F4      		brsh .L9
 228               	/* epilogue start */
 193:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 194:../../os/rt/src/chvt.c ****   }
 195:../../os/rt/src/chvt.c **** #else
 196:../../os/rt/src/chvt.c ****   /* Assertions as fallback.*/
 197:../../os/rt/src/chvt.c ****   chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
 198:../../os/rt/src/chvt.c **** #endif
 199:../../os/rt/src/chvt.c **** }
 229               		.loc 1 199 0
 230 00d8 DF91      		pop r29
 231 00da CF91      		pop r28
 232               	.LVL15:
 233 00dc 1F91      		pop r17
 234 00de 0F91      		pop r16
 235 00e0 FF90      		pop r15
 236 00e2 EF90      		pop r14
 237 00e4 DF90      		pop r13
 238 00e6 CF90      		pop r12
 239               	.LVL16:
 240 00e8 BF90      		pop r11
 241 00ea AF90      		pop r10
 242 00ec 9F90      		pop r9
 243 00ee 8F90      		pop r8
 244               	.LVL17:
 245 00f0 0895      		ret
 246               	.LVL18:
 247               	.L9:
 248               	.LBB224:
 249               	.LBB225:
 193:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 250               		.loc 1 193 0
 251 00f2 61E0      		ldi r22,lo8(1)
 252 00f4 70E0      		ldi r23,0
 253 00f6 80E0      		ldi r24,0
 254 00f8 90E0      		ldi r25,0
 255               	/* epilogue start */
 256               	.LBE225:
 257               	.LBE224:
 258               		.loc 1 199 0
 259 00fa DF91      		pop r29
 260 00fc CF91      		pop r28
 261               	.LVL19:
 262 00fe 1F91      		pop r17
 263 0100 0F91      		pop r16
 264 0102 FF90      		pop r15
 265 0104 EF90      		pop r14
 266 0106 DF90      		pop r13
 267 0108 CF90      		pop r12
 268               	.LVL20:
 269 010a BF90      		pop r11
 270 010c AF90      		pop r10
 271 010e 9F90      		pop r9
 272 0110 8F90      		pop r8
 273               	.LVL21:
 274               	.LBB227:
 275               	.LBB226:
 193:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 276               		.loc 1 193 0
 277 0112 0C94 0000 		jmp chRFCUCollectFaultsI
 278               	.LVL22:
 279               	.LBE226:
 280               	.LBE227:
 281               		.cfi_endproc
 282               	.LFE209:
 284               		.section	.text.vt_set_alarm,"ax",@progbits
 286               	vt_set_alarm:
 287               	.LFB195:
  69:../../os/rt/src/chvt.c ****   sysinterval_t currdelta;
 288               		.loc 1 69 0
 289               		.cfi_startproc
 290               	.LVL23:
 291 0000 8F92      		push r8
 292               	.LCFI12:
 293               		.cfi_def_cfa_offset 3
 294               		.cfi_offset 8, -2
 295 0002 9F92      		push r9
 296               	.LCFI13:
 297               		.cfi_def_cfa_offset 4
 298               		.cfi_offset 9, -3
 299 0004 AF92      		push r10
 300               	.LCFI14:
 301               		.cfi_def_cfa_offset 5
 302               		.cfi_offset 10, -4
 303 0006 BF92      		push r11
 304               	.LCFI15:
 305               		.cfi_def_cfa_offset 6
 306               		.cfi_offset 11, -5
 307 0008 CF92      		push r12
 308               	.LCFI16:
 309               		.cfi_def_cfa_offset 7
 310               		.cfi_offset 12, -6
 311 000a DF92      		push r13
 312               	.LCFI17:
 313               		.cfi_def_cfa_offset 8
 314               		.cfi_offset 13, -7
 315 000c EF92      		push r14
 316               	.LCFI18:
 317               		.cfi_def_cfa_offset 9
 318               		.cfi_offset 14, -8
 319 000e FF92      		push r15
 320               	.LCFI19:
 321               		.cfi_def_cfa_offset 10
 322               		.cfi_offset 15, -9
 323 0010 CF93      		push r28
 324               	.LCFI20:
 325               		.cfi_def_cfa_offset 11
 326               		.cfi_offset 28, -10
 327 0012 DF93      		push r29
 328               	.LCFI21:
 329               		.cfi_def_cfa_offset 12
 330               		.cfi_offset 29, -11
 331               	/* prologue: function */
 332               	/* frame size = 0 */
 333               	/* stack size = 10 */
 334               	.L__stack_usage = 10
 335 0014 EC01      		movw r28,r24
 336 0016 6A01      		movw r12,r20
 337 0018 7B01      		movw r14,r22
 338               	.LVL24:
 339 001a 21E0      		ldi r18,1
 340 001c C216      		cp r12,r18
 341 001e 2FEF      		ldi r18,-1
 342 0020 D206      		cpc r13,r18
 343 0022 E104      		cpc r14,__zero_reg__
 344 0024 F104      		cpc r15,__zero_reg__
 345 0026 00F0      		brlo .L11
 346 0028 C12C      		mov r12,__zero_reg__
 347 002a D12C      		mov r13,__zero_reg__
 348 002c 7601      		movw r14,r12
 349 002e DA94      		dec r13
 350               	.L11:
 351 0030 82E0      		ldi r24,2
 352 0032 C816      		cp r12,r24
 353 0034 D104      		cpc r13,__zero_reg__
 354 0036 E104      		cpc r14,__zero_reg__
 355 0038 F104      		cpc r15,__zero_reg__
 356               	.LVL25:
 357 003a 00F4      		brsh .L12
 358 003c 92E0      		ldi r25,lo8(2)
 359 003e C92E      		mov r12,r25
 360 0040 D12C      		mov r13,__zero_reg__
 361 0042 E12C      		mov r14,__zero_reg__
 362 0044 F12C      		mov r15,__zero_reg__
 363               	.L12:
 364 0046 82E0      		ldi r24,lo8(2)
 365 0048 882E      		mov r8,r24
 366 004a 912C      		mov r9,__zero_reg__
 367 004c A12C      		mov r10,__zero_reg__
 368 004e B12C      		mov r11,__zero_reg__
 369 0050 00C0      		rjmp .L14
 370               	.LVL26:
 371               	.L16:
 372               	.LBB256:
 109:../../os/rt/src/chvt.c **** 
 373               		.loc 1 109 0
 374 0052 7501      		movw r14,r10
 375 0054 6401      		movw r12,r8
 376               	.LVL27:
 377 0056 2FEF      		ldi r18,-1
 378 0058 C21A      		sub r12,r18
 379 005a D20A      		sbc r13,r18
 380 005c E20A      		sbc r14,r18
 381 005e F20A      		sbc r15,r18
 382               	.LVL28:
 112:../../os/rt/src/chvt.c ****     delay = currdelta;
 383               		.loc 1 112 0
 384 0060 EC01      		movw r28,r24
 109:../../os/rt/src/chvt.c **** 
 385               		.loc 1 109 0
 386 0062 4601      		movw r8,r12
 387 0064 5701      		movw r10,r14
 388               	.LVL29:
 389               	.L14:
 390               	.LBB257:
 391               	.LBB258:
 449:../../os/rt/include/chtime.h **** }
 392               		.loc 3 449 0
 393 0066 CE01      		movw r24,r28
 394 0068 8C0D      		add r24,r12
 395 006a 9D1D      		adc r25,r13
 396               	.LBE258:
 397               	.LBE257:
 398               	.LBB259:
 399               	.LBB260:
 101:../../os/hal/osal/rt-nil/chcore_timer.h **** }
 400               		.loc 4 101 0
 401 006c 0E94 0000 		call stSetAlarm
 402               	.LVL30:
 403               	.LBE260:
 404               	.LBE259:
 405               	.LBB261:
 406               	.LBB262:
 407               	.LBB263:
 408               		.loc 4 113 0
 409 0070 0E94 0000 		call stGetCounter
 410               	.LVL31:
 411               	.LBE263:
 412               	.LBE262:
 413               	.LBE261:
 414               	.LBB264:
 415               	.LBB265:
 416               		.loc 3 465 0
 417 0074 AC01      		movw r20,r24
 418 0076 4C1B      		sub r20,r28
 419 0078 5D0B      		sbc r21,r29
 420 007a 70E0      		ldi r23,0
 421 007c 60E0      		ldi r22,0
 422               	.LBE265:
 423               	.LBE264:
 104:../../os/rt/src/chvt.c ****       break;
 424               		.loc 1 104 0
 425 007e 4C15      		cp r20,r12
 426 0080 5D05      		cpc r21,r13
 427 0082 6E05      		cpc r22,r14
 428 0084 7F05      		cpc r23,r15
 429 0086 00F4      		brsh .L16
 430               	.LBE256:
 118:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 431               		.loc 1 118 0
 432 0088 83E0      		ldi r24,3
 433 008a 8816      		cp r8,r24
 434 008c 9104      		cpc r9,__zero_reg__
 435 008e A104      		cpc r10,__zero_reg__
 436 0090 B104      		cpc r11,__zero_reg__
 437 0092 00F4      		brsh .L17
 438               	/* epilogue start */
 125:../../os/rt/src/chvt.c **** 
 439               		.loc 1 125 0
 440 0094 DF91      		pop r29
 441 0096 CF91      		pop r28
 442               	.LVL32:
 443 0098 FF90      		pop r15
 444 009a EF90      		pop r14
 445 009c DF90      		pop r13
 446 009e CF90      		pop r12
 447               	.LVL33:
 448 00a0 BF90      		pop r11
 449 00a2 AF90      		pop r10
 450 00a4 9F90      		pop r9
 451 00a6 8F90      		pop r8
 452               	.LVL34:
 453 00a8 0895      		ret
 454               	.LVL35:
 455               	.L17:
 456               	.LBB266:
 457               	.LBB267:
 193:../../os/rt/src/chvt.c ****   }
 458               		.loc 1 193 0
 459 00aa 61E0      		ldi r22,lo8(1)
 460 00ac 70E0      		ldi r23,0
 461 00ae 80E0      		ldi r24,0
 462 00b0 90E0      		ldi r25,0
 463               	/* epilogue start */
 464               	.LBE267:
 465               	.LBE266:
 125:../../os/rt/src/chvt.c **** 
 466               		.loc 1 125 0
 467 00b2 DF91      		pop r29
 468 00b4 CF91      		pop r28
 469               	.LVL36:
 470 00b6 FF90      		pop r15
 471 00b8 EF90      		pop r14
 472 00ba DF90      		pop r13
 473 00bc CF90      		pop r12
 474               	.LVL37:
 475 00be BF90      		pop r11
 476 00c0 AF90      		pop r10
 477 00c2 9F90      		pop r9
 478 00c4 8F90      		pop r8
 479               	.LVL38:
 480               	.LBB269:
 481               	.LBB268:
 193:../../os/rt/src/chvt.c ****   }
 482               		.loc 1 193 0
 483 00c6 0C94 0000 		jmp chRFCUCollectFaultsI
 484               	.LVL39:
 485               	.LBE268:
 486               	.LBE269:
 487               		.cfi_endproc
 488               	.LFE195:
 490               		.section	.text.vt_enqueue.constprop.4,"ax",@progbits
 492               	vt_enqueue.constprop.4:
 493               	.LFB210:
 200:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 201:../../os/rt/src/chvt.c **** 
 202:../../os/rt/src/chvt.c **** /**
 203:../../os/rt/src/chvt.c ****  * @brief   Enqueues a virtual timer in a virtual timers list.
 204:../../os/rt/src/chvt.c ****  */
 205:../../os/rt/src/chvt.c **** static void vt_enqueue(virtual_timers_list_t *vtlp,
 494               		.loc 1 205 0
 495               		.cfi_startproc
 496               	.LVL40:
 497 0000 8F92      		push r8
 498               	.LCFI22:
 499               		.cfi_def_cfa_offset 3
 500               		.cfi_offset 8, -2
 501 0002 9F92      		push r9
 502               	.LCFI23:
 503               		.cfi_def_cfa_offset 4
 504               		.cfi_offset 9, -3
 505 0004 AF92      		push r10
 506               	.LCFI24:
 507               		.cfi_def_cfa_offset 5
 508               		.cfi_offset 10, -4
 509 0006 BF92      		push r11
 510               	.LCFI25:
 511               		.cfi_def_cfa_offset 6
 512               		.cfi_offset 11, -5
 513 0008 CF92      		push r12
 514               	.LCFI26:
 515               		.cfi_def_cfa_offset 7
 516               		.cfi_offset 12, -6
 517 000a DF92      		push r13
 518               	.LCFI27:
 519               		.cfi_def_cfa_offset 8
 520               		.cfi_offset 13, -7
 521 000c EF92      		push r14
 522               	.LCFI28:
 523               		.cfi_def_cfa_offset 9
 524               		.cfi_offset 14, -8
 525 000e FF92      		push r15
 526               	.LCFI29:
 527               		.cfi_def_cfa_offset 10
 528               		.cfi_offset 15, -9
 529 0010 CF93      		push r28
 530               	.LCFI30:
 531               		.cfi_def_cfa_offset 11
 532               		.cfi_offset 28, -10
 533 0012 DF93      		push r29
 534               	.LCFI31:
 535               		.cfi_def_cfa_offset 12
 536               		.cfi_offset 29, -11
 537               	/* prologue: function */
 538               	/* frame size = 0 */
 539               	/* stack size = 10 */
 540               	.L__stack_usage = 10
 541 0014 EC01      		movw r28,r24
 542 0016 4A01      		movw r8,r20
 543 0018 5B01      		movw r10,r22
 544               	.LVL41:
 545               	.LBB270:
 546               	.LBB271:
 547               	.LBB272:
 548               	.LBB273:
 549               		.loc 4 113 0
 550 001a 0E94 0000 		call stGetCounter
 551               	.LVL42:
 552               	.LBE273:
 553               	.LBE272:
 554               	.LBE271:
 555               	.LBB274:
 556               	.LBB275:
 443:../../os/rt/include/chlists.h **** }
 557               		.loc 2 443 0
 558 001e E091 0000 		lds r30,ch0+7
 559 0022 F091 0000 		lds r31,ch0+7+1
 560               	.LVL43:
 561               	.LBE275:
 562               	.LBE274:
 206:../../os/rt/src/chvt.c ****                        virtual_timer_t *vtp,
 207:../../os/rt/src/chvt.c ****                        sysinterval_t delay) {
 208:../../os/rt/src/chvt.c ****   sysinterval_t delta;
 209:../../os/rt/src/chvt.c **** 
 210:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 211:../../os/rt/src/chvt.c ****   {
 212:../../os/rt/src/chvt.c ****     sysinterval_t nowdelta;
 213:../../os/rt/src/chvt.c ****     systime_t now = chVTGetSystemTimeX();
 214:../../os/rt/src/chvt.c **** 
 215:../../os/rt/src/chvt.c ****     /* Special case where the timers list is empty.*/
 216:../../os/rt/src/chvt.c ****     if (ch_dlist_isempty(&vtlp->dlist)) {
 563               		.loc 1 216 0
 564 0026 20E0      		ldi r18,hi8(ch0+7)
 565 0028 E030      		cpi r30,lo8(ch0+7)
 566 002a F207      		cpc r31,r18
 567 002c 01F4      		brne .+2
 568 002e 00C0      		rjmp .L26
 569               	.LVL44:
 570               	.LBB276:
 571               	.LBB277:
 572               		.loc 3 465 0
 573 0030 2091 0000 		lds r18,ch0+15
 574 0034 3091 0000 		lds r19,ch0+15+1
 575 0038 AC01      		movw r20,r24
 576 003a 421B      		sub r20,r18
 577 003c 530B      		sbc r21,r19
 578 003e 70E0      		ldi r23,0
 579 0040 60E0      		ldi r22,0
 580               	.LVL45:
 581               	.LBE277:
 582               	.LBE276:
 217:../../os/rt/src/chvt.c **** 
 218:../../os/rt/src/chvt.c ****       vt_insert_first(vtlp, vtp, now, delay);
 219:../../os/rt/src/chvt.c **** 
 220:../../os/rt/src/chvt.c ****       return;
 221:../../os/rt/src/chvt.c ****     }
 222:../../os/rt/src/chvt.c **** 
 223:../../os/rt/src/chvt.c ****     /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 224:../../os/rt/src/chvt.c ****        becomes lower than 'deltanow'.*/
 225:../../os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(vtlp->lasttime, now);
 226:../../os/rt/src/chvt.c ****     delta    = nowdelta + delay;
 583               		.loc 1 226 0
 584 0042 7501      		movw r14,r10
 585 0044 6401      		movw r12,r8
 586 0046 C40E      		add r12,r20
 587 0048 D51E      		adc r13,r21
 588 004a E61E      		adc r14,r22
 589 004c F71E      		adc r15,r23
 590               	.LVL46:
 227:../../os/rt/src/chvt.c **** 
 228:../../os/rt/src/chvt.c ****     /* Scenario where a very large delay exceeded the numeric range, the
 229:../../os/rt/src/chvt.c ****        delta is shortened to make it fit the numeric range, the timer
 230:../../os/rt/src/chvt.c ****        will be triggered "deltanow" cycles earlier.*/
 231:../../os/rt/src/chvt.c ****     if (delta < nowdelta) {
 591               		.loc 1 231 0
 592 004e C416      		cp r12,r20
 593 0050 D506      		cpc r13,r21
 594 0052 E606      		cpc r14,r22
 595 0054 F706      		cpc r15,r23
 596 0056 00F4      		brsh .+2
 597 0058 00C0      		rjmp .L27
 598               	.LVL47:
 599               	.L20:
 232:../../os/rt/src/chvt.c ****       delta = delay;
 233:../../os/rt/src/chvt.c ****     }
 234:../../os/rt/src/chvt.c **** 
 235:../../os/rt/src/chvt.c ****     /* Checking if this timer would become the first in the delta list, this
 236:../../os/rt/src/chvt.c ****        requires changing the current alarm setting.*/
 237:../../os/rt/src/chvt.c ****     if (delta < vtlp->dlist.next->delta) {
 600               		.loc 1 237 0
 601 005a 4481      		ldd r20,Z+4
 602 005c 5581      		ldd r21,Z+5
 603 005e 6681      		ldd r22,Z+6
 604 0060 7781      		ldd r23,Z+7
 605 0062 C416      		cp r12,r20
 606 0064 D506      		cpc r13,r21
 607 0066 E606      		cpc r14,r22
 608 0068 F706      		cpc r15,r23
 609 006a 00F4      		brsh .+2
 610 006c 00C0      		rjmp .L28
 611               	.L21:
 612               	.LVL48:
 613               	.LBE270:
 614               	.LBB278:
 615               	.LBB279:
 505:../../os/rt/include/chlists.h **** }
 506:../../os/rt/include/chlists.h **** 
 507:../../os/rt/include/chlists.h **** /**
 508:../../os/rt/include/chlists.h ****  * @brief   Inserts an element before another header element.
 509:../../os/rt/include/chlists.h ****  *
 510:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header element
 511:../../os/rt/include/chlists.h ****  * @param[in] dlp       element to be inserted before the header element
 512:../../os/rt/include/chlists.h ****  * @param[in] delta     delta of the element to be inserted
 513:../../os/rt/include/chlists.h ****  *
 514:../../os/rt/include/chlists.h ****  * @notapi
 515:../../os/rt/include/chlists.h ****  */
 516:../../os/rt/include/chlists.h **** static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
 517:../../os/rt/include/chlists.h ****                                           ch_delta_list_t *dlp,
 518:../../os/rt/include/chlists.h ****                                           sysinterval_t delta) {
 519:../../os/rt/include/chlists.h **** 
 520:../../os/rt/include/chlists.h ****   dlp->delta      = delta;
 521:../../os/rt/include/chlists.h ****   dlp->next       = dlhp;
 522:../../os/rt/include/chlists.h ****   dlp->prev       = dlp->next->prev;
 523:../../os/rt/include/chlists.h ****   dlp->prev->next = dlp;
 524:../../os/rt/include/chlists.h ****   dlhp->prev      = dlp;
 525:../../os/rt/include/chlists.h **** }
 526:../../os/rt/include/chlists.h **** 
 527:../../os/rt/include/chlists.h **** /**
 528:../../os/rt/include/chlists.h ****  * @brief   Inserts an element in a delta list.
 529:../../os/rt/include/chlists.h ****  *
 530:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header element
 531:../../os/rt/include/chlists.h ****  * @param[in] dlep      element to be inserted before the header element
 532:../../os/rt/include/chlists.h ****  * @param[in] delta     delta of the element to be inserted
 533:../../os/rt/include/chlists.h ****  *
 534:../../os/rt/include/chlists.h ****  * @notapi
 535:../../os/rt/include/chlists.h ****  */
 536:../../os/rt/include/chlists.h **** static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
 537:../../os/rt/include/chlists.h ****                                    ch_delta_list_t *dlep,
 538:../../os/rt/include/chlists.h ****                                    sysinterval_t delta) {
 539:../../os/rt/include/chlists.h ****   ch_delta_list_t *dlp;
 540:../../os/rt/include/chlists.h **** 
 541:../../os/rt/include/chlists.h ****   /* The delta list is scanned in order to find the correct position for
 542:../../os/rt/include/chlists.h ****      this element. */
 543:../../os/rt/include/chlists.h ****   dlp = dlhp->next;
 544:../../os/rt/include/chlists.h ****   while (likely(dlp->delta < delta)) {
 616               		.loc 2 544 0
 617 006e 4C15      		cp r20,r12
 618 0070 5D05      		cpc r21,r13
 619 0072 6E05      		cpc r22,r14
 620 0074 7F05      		cpc r23,r15
 621 0076 00F4      		brsh .L22
 622               	.LVL49:
 623               	.L23:
 545:../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 546:../../os/rt/include/chlists.h ****     chDbgAssert(dlp != dlep, "element already in list");
 547:../../os/rt/include/chlists.h **** 
 548:../../os/rt/include/chlists.h ****     delta -= dlp->delta;
 624               		.loc 2 548 0
 625 0078 C41A      		sub r12,r20
 626 007a D50A      		sbc r13,r21
 627 007c E60A      		sbc r14,r22
 628 007e F70A      		sbc r15,r23
 629               	.LVL50:
 549:../../os/rt/include/chlists.h ****     dlp = dlp->next;
 630               		.loc 2 549 0
 631 0080 0190      		ld __tmp_reg__,Z+
 632 0082 F081      		ld r31,Z
 633 0084 E02D      		mov r30,__tmp_reg__
 634               	.LVL51:
 544:../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 635               		.loc 2 544 0
 636 0086 4481      		ldd r20,Z+4
 637 0088 5581      		ldd r21,Z+5
 638 008a 6681      		ldd r22,Z+6
 639 008c 7781      		ldd r23,Z+7
 640 008e 4C15      		cp r20,r12
 641 0090 5D05      		cpc r21,r13
 642 0092 6E05      		cpc r22,r14
 643 0094 7F05      		cpc r23,r15
 644 0096 00F0      		brlo .L23
 645               	.LVL52:
 646               	.L22:
 647               	.LBB280:
 648               	.LBB281:
 520:../../os/rt/include/chlists.h ****   dlp->next       = dlhp;
 649               		.loc 2 520 0
 650 0098 CC82      		std Y+4,r12
 651 009a DD82      		std Y+5,r13
 652 009c EE82      		std Y+6,r14
 653 009e FF82      		std Y+7,r15
 521:../../os/rt/include/chlists.h ****   dlp->prev       = dlp->next->prev;
 654               		.loc 2 521 0
 655 00a0 F983      		std Y+1,r31
 656 00a2 E883      		st Y,r30
 522:../../os/rt/include/chlists.h ****   dlp->prev->next = dlp;
 657               		.loc 2 522 0
 658 00a4 A281      		ldd r26,Z+2
 659 00a6 B381      		ldd r27,Z+3
 660 00a8 BB83      		std Y+3,r27
 661 00aa AA83      		std Y+2,r26
 523:../../os/rt/include/chlists.h ****   dlhp->prev      = dlp;
 662               		.loc 2 523 0
 663 00ac CD93      		st X+,r28
 664 00ae DC93      		st X,r29
 524:../../os/rt/include/chlists.h **** }
 665               		.loc 2 524 0
 666 00b0 D383      		std Z+3,r29
 667 00b2 C283      		std Z+2,r28
 668               	.LVL53:
 669               	.LBE281:
 670               	.LBE280:
 550:../../os/rt/include/chlists.h ****   }
 551:../../os/rt/include/chlists.h **** 
 552:../../os/rt/include/chlists.h ****   /* The timer is inserted in the delta list.*/
 553:../../os/rt/include/chlists.h ****   ch_dlist_insert_before(dlp, dlep, delta);
 554:../../os/rt/include/chlists.h **** 
 555:../../os/rt/include/chlists.h ****   /* Adjusting delta for the following element.*/
 556:../../os/rt/include/chlists.h ****   dlp->delta -= delta;
 671               		.loc 2 556 0
 672 00b4 8481      		ldd r24,Z+4
 673 00b6 9581      		ldd r25,Z+5
 674 00b8 A681      		ldd r26,Z+6
 675 00ba B781      		ldd r27,Z+7
 676 00bc 8C19      		sub r24,r12
 677 00be 9D09      		sbc r25,r13
 678 00c0 AE09      		sbc r26,r14
 679 00c2 BF09      		sbc r27,r15
 680 00c4 8483      		std Z+4,r24
 681 00c6 9583      		std Z+5,r25
 682 00c8 A683      		std Z+6,r26
 683 00ca B783      		std Z+7,r27
 557:../../os/rt/include/chlists.h **** 
 558:../../os/rt/include/chlists.h ****   /* Special case when the inserted element is in last position in the list,
 559:../../os/rt/include/chlists.h ****      the value in the header must be restored, just doing it is faster than
 560:../../os/rt/include/chlists.h ****      checking then doing.*/
 561:../../os/rt/include/chlists.h ****   dlhp->delta = (sysinterval_t)-1;
 684               		.loc 2 561 0
 685 00cc 8FEF      		ldi r24,lo8(-1)
 686 00ce 9FEF      		ldi r25,lo8(-1)
 687 00d0 DC01      		movw r26,r24
 688 00d2 8093 0000 		sts ch0+11,r24
 689 00d6 9093 0000 		sts ch0+11+1,r25
 690 00da A093 0000 		sts ch0+11+2,r26
 691 00de B093 0000 		sts ch0+11+3,r27
 692               	/* epilogue start */
 693               	.LBE279:
 694               	.LBE278:
 238:../../os/rt/src/chvt.c **** 
 239:../../os/rt/src/chvt.c ****       vt_set_alarm(now, delay);
 240:../../os/rt/src/chvt.c ****     }
 241:../../os/rt/src/chvt.c ****   }
 242:../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA == 0 */
 243:../../os/rt/src/chvt.c **** 
 244:../../os/rt/src/chvt.c ****   /* Delta is initially equal to the specified delay.*/
 245:../../os/rt/src/chvt.c ****   delta = delay;
 246:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA == 0 */
 247:../../os/rt/src/chvt.c **** 
 248:../../os/rt/src/chvt.c ****   ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 249:../../os/rt/src/chvt.c **** }
 695               		.loc 1 249 0
 696 00e2 DF91      		pop r29
 697 00e4 CF91      		pop r28
 698               	.LVL54:
 699 00e6 FF90      		pop r15
 700 00e8 EF90      		pop r14
 701 00ea DF90      		pop r13
 702 00ec CF90      		pop r12
 703               	.LVL55:
 704 00ee BF90      		pop r11
 705 00f0 AF90      		pop r10
 706 00f2 9F90      		pop r9
 707 00f4 8F90      		pop r8
 708 00f6 0895      		ret
 709               	.LVL56:
 710               	.L27:
 711               	.LBB282:
 232:../../os/rt/src/chvt.c ****     }
 712               		.loc 1 232 0
 713 00f8 7501      		movw r14,r10
 714 00fa 6401      		movw r12,r8
 715               	.LVL57:
 716 00fc 00C0      		rjmp .L20
 717               	.LVL58:
 718               	.L28:
 239:../../os/rt/src/chvt.c ****     }
 719               		.loc 1 239 0
 720 00fe B501      		movw r22,r10
 721 0100 A401      		movw r20,r8
 722 0102 0E94 0000 		call vt_set_alarm
 723               	.LVL59:
 724 0106 E091 0000 		lds r30,ch0+7
 725 010a F091 0000 		lds r31,ch0+7+1
 726 010e 4481      		ldd r20,Z+4
 727 0110 5581      		ldd r21,Z+5
 728 0112 6681      		ldd r22,Z+6
 729 0114 7781      		ldd r23,Z+7
 730 0116 00C0      		rjmp .L21
 731               	.LVL60:
 732               	.L26:
 218:../../os/rt/src/chvt.c **** 
 733               		.loc 1 218 0
 734 0118 A501      		movw r20,r10
 735 011a 9401      		movw r18,r8
 736 011c BC01      		movw r22,r24
 737 011e CE01      		movw r24,r28
 738               	/* epilogue start */
 739               	.LBE282:
 740               		.loc 1 249 0
 741 0120 DF91      		pop r29
 742 0122 CF91      		pop r28
 743               	.LVL61:
 744 0124 FF90      		pop r15
 745 0126 EF90      		pop r14
 746 0128 DF90      		pop r13
 747 012a CF90      		pop r12
 748 012c BF90      		pop r11
 749 012e AF90      		pop r10
 750 0130 9F90      		pop r9
 751 0132 8F90      		pop r8
 752               	.LBB283:
 218:../../os/rt/src/chvt.c **** 
 753               		.loc 1 218 0
 754 0134 0C94 0000 		jmp vt_insert_first.constprop.5
 755               	.LVL62:
 756               	.LBE283:
 757               		.cfi_endproc
 758               	.LFE210:
 760               		.section	.text.chVTDoSetI,"ax",@progbits
 761               	.global	chVTDoSetI
 763               	chVTDoSetI:
 764               	.LFB198:
 250:../../os/rt/src/chvt.c **** 
 251:../../os/rt/src/chvt.c **** /*===========================================================================*/
 252:../../os/rt/src/chvt.c **** /* Module exported functions.                                                */
 253:../../os/rt/src/chvt.c **** /*===========================================================================*/
 254:../../os/rt/src/chvt.c **** 
 255:../../os/rt/src/chvt.c **** /**
 256:../../os/rt/src/chvt.c ****  * @brief   Enables a one-shot virtual timer.
 257:../../os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
 258:../../os/rt/src/chvt.c ****  *          specified as parameter.
 259:../../os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
 260:../../os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
 261:../../os/rt/src/chvt.c ****  *
 262:../../os/rt/src/chvt.c ****  * @param[out] vtp      pointer to a @p virtual_timer_t structure
 263:../../os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 264:../../os/rt/src/chvt.c ****  *                      special values are handled as follow:
 265:../../os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 266:../../os/rt/src/chvt.c ****  *                        normal time specification.
 267:../../os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 268:../../os/rt/src/chvt.c ****  *                      .
 269:../../os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
 270:../../os/rt/src/chvt.c ****  *                      callback the timer is disabled and the structure can
 271:../../os/rt/src/chvt.c ****  *                      be disposed or reused.
 272:../../os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
 273:../../os/rt/src/chvt.c ****  *                      function
 274:../../os/rt/src/chvt.c ****  *
 275:../../os/rt/src/chvt.c ****  * @iclass
 276:../../os/rt/src/chvt.c ****  */
 277:../../os/rt/src/chvt.c **** void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
 278:../../os/rt/src/chvt.c ****                 vtfunc_t vtfunc, void *par) {
 765               		.loc 1 278 0
 766               		.cfi_startproc
 767               	.LVL63:
 768 0000 0F93      		push r16
 769               	.LCFI32:
 770               		.cfi_def_cfa_offset 3
 771               		.cfi_offset 16, -2
 772 0002 1F93      		push r17
 773               	.LCFI33:
 774               		.cfi_def_cfa_offset 4
 775               		.cfi_offset 17, -3
 776               	/* prologue: function */
 777               	/* frame size = 0 */
 778               	/* stack size = 2 */
 779               	.L__stack_usage = 2
 780               	.LVL64:
 279:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 280:../../os/rt/src/chvt.c **** 
 281:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 282:../../os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 283:../../os/rt/src/chvt.c **** 
 284:../../os/rt/src/chvt.c ****   /* Timer initialization.*/
 285:../../os/rt/src/chvt.c ****   vtp->par     = par;
 781               		.loc 1 285 0
 782 0004 FC01      		movw r30,r24
 783 0006 1387      		std Z+11,r17
 784 0008 0287      		std Z+10,r16
 286:../../os/rt/src/chvt.c ****   vtp->func    = vtfunc;
 785               		.loc 1 286 0
 786 000a 3187      		std Z+9,r19
 787 000c 2087      		std Z+8,r18
 287:../../os/rt/src/chvt.c ****   vtp->reload  = (sysinterval_t)0;
 788               		.loc 1 287 0
 789 000e 1486      		std Z+12,__zero_reg__
 790 0010 1586      		std Z+13,__zero_reg__
 791 0012 1686      		std Z+14,__zero_reg__
 792 0014 1786      		std Z+15,__zero_reg__
 793               	/* epilogue start */
 288:../../os/rt/src/chvt.c **** 
 289:../../os/rt/src/chvt.c ****   /* Inserting the timer in the delta list.*/
 290:../../os/rt/src/chvt.c ****   vt_enqueue(vtlp, vtp, delay);
 291:../../os/rt/src/chvt.c **** }
 794               		.loc 1 291 0
 795 0016 1F91      		pop r17
 796 0018 0F91      		pop r16
 797               	.LVL65:
 290:../../os/rt/src/chvt.c **** }
 798               		.loc 1 290 0
 799 001a 0C94 0000 		jmp vt_enqueue.constprop.4
 800               	.LVL66:
 801               		.cfi_endproc
 802               	.LFE198:
 804               		.section	.text.chVTDoSetContinuousI,"ax",@progbits
 805               	.global	chVTDoSetContinuousI
 807               	chVTDoSetContinuousI:
 808               	.LFB199:
 292:../../os/rt/src/chvt.c **** 
 293:../../os/rt/src/chvt.c **** /**
 294:../../os/rt/src/chvt.c ****  * @brief   Enables a continuous virtual timer.
 295:../../os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
 296:../../os/rt/src/chvt.c ****  *          specified as parameter.
 297:../../os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
 298:../../os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
 299:../../os/rt/src/chvt.c ****  *
 300:../../os/rt/src/chvt.c ****  * @param[out] vtp      pointer to a @p virtual_timer_t structure
 301:../../os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 302:../../os/rt/src/chvt.c ****  *                      special values are handled as follow:
 303:../../os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 304:../../os/rt/src/chvt.c ****  *                        normal time specification.
 305:../../os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 306:../../os/rt/src/chvt.c ****  *                      .
 307:../../os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
 308:../../os/rt/src/chvt.c ****  *                      callback the timer is restarted.
 309:../../os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
 310:../../os/rt/src/chvt.c ****  *                      function
 311:../../os/rt/src/chvt.c ****  *
 312:../../os/rt/src/chvt.c ****  * @iclass
 313:../../os/rt/src/chvt.c ****  */
 314:../../os/rt/src/chvt.c **** void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
 315:../../os/rt/src/chvt.c ****                           vtfunc_t vtfunc, void *par) {
 809               		.loc 1 315 0
 810               		.cfi_startproc
 811               	.LVL67:
 812 0000 0F93      		push r16
 813               	.LCFI34:
 814               		.cfi_def_cfa_offset 3
 815               		.cfi_offset 16, -2
 816 0002 1F93      		push r17
 817               	.LCFI35:
 818               		.cfi_def_cfa_offset 4
 819               		.cfi_offset 17, -3
 820               	/* prologue: function */
 821               	/* frame size = 0 */
 822               	/* stack size = 2 */
 823               	.L__stack_usage = 2
 824               	.LVL68:
 316:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 317:../../os/rt/src/chvt.c **** 
 318:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 319:../../os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 320:../../os/rt/src/chvt.c **** 
 321:../../os/rt/src/chvt.c ****   /* Timer initialization.*/
 322:../../os/rt/src/chvt.c ****   vtp->par     = par;
 825               		.loc 1 322 0
 826 0004 FC01      		movw r30,r24
 827 0006 1387      		std Z+11,r17
 828 0008 0287      		std Z+10,r16
 323:../../os/rt/src/chvt.c ****   vtp->func    = vtfunc;
 829               		.loc 1 323 0
 830 000a 3187      		std Z+9,r19
 831 000c 2087      		std Z+8,r18
 324:../../os/rt/src/chvt.c ****   vtp->reload  = delay;
 832               		.loc 1 324 0
 833 000e 4487      		std Z+12,r20
 834 0010 5587      		std Z+13,r21
 835 0012 6687      		std Z+14,r22
 836 0014 7787      		std Z+15,r23
 837               	/* epilogue start */
 325:../../os/rt/src/chvt.c **** 
 326:../../os/rt/src/chvt.c ****   /* Inserting the timer in the delta list.*/
 327:../../os/rt/src/chvt.c ****   vt_enqueue(vtlp, vtp, delay);
 328:../../os/rt/src/chvt.c **** }
 838               		.loc 1 328 0
 839 0016 1F91      		pop r17
 840 0018 0F91      		pop r16
 841               	.LVL69:
 327:../../os/rt/src/chvt.c **** }
 842               		.loc 1 327 0
 843 001a 0C94 0000 		jmp vt_enqueue.constprop.4
 844               	.LVL70:
 845               		.cfi_endproc
 846               	.LFE199:
 848               		.section	.text.chVTDoResetI,"ax",@progbits
 849               	.global	chVTDoResetI
 851               	chVTDoResetI:
 852               	.LFB200:
 329:../../os/rt/src/chvt.c **** 
 330:../../os/rt/src/chvt.c **** /**
 331:../../os/rt/src/chvt.c ****  * @brief   Disables a Virtual Timer.
 332:../../os/rt/src/chvt.c ****  * @pre     The timer must be in armed state before calling this function.
 333:../../os/rt/src/chvt.c ****  *
 334:../../os/rt/src/chvt.c ****  * @param[in] vtp       pointer to a @p virtual_timer_t structure
 335:../../os/rt/src/chvt.c ****  *
 336:../../os/rt/src/chvt.c ****  * @iclass
 337:../../os/rt/src/chvt.c ****  */
 338:../../os/rt/src/chvt.c **** void chVTDoResetI(virtual_timer_t *vtp) {
 853               		.loc 1 338 0
 854               		.cfi_startproc
 855               	.LVL71:
 856 0000 0F93      		push r16
 857               	.LCFI36:
 858               		.cfi_def_cfa_offset 3
 859               		.cfi_offset 16, -2
 860 0002 1F93      		push r17
 861               	.LCFI37:
 862               		.cfi_def_cfa_offset 4
 863               		.cfi_offset 17, -3
 864 0004 CF93      		push r28
 865               	.LCFI38:
 866               		.cfi_def_cfa_offset 5
 867               		.cfi_offset 28, -4
 868 0006 DF93      		push r29
 869               	.LCFI39:
 870               		.cfi_def_cfa_offset 6
 871               		.cfi_offset 29, -5
 872               	/* prologue: function */
 873               	/* frame size = 0 */
 874               	/* stack size = 4 */
 875               	.L__stack_usage = 4
 876 0008 FC01      		movw r30,r24
 877               	.LVL72:
 878 000a A081      		ld r26,Z
 879 000c B181      		ldd r27,Z+1
 339:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 340:../../os/rt/src/chvt.c **** 
 341:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 342:../../os/rt/src/chvt.c ****   chDbgCheck(vtp != NULL);
 343:../../os/rt/src/chvt.c ****   chDbgAssert(chVTIsArmedI(vtp), "timer not armed");
 344:../../os/rt/src/chvt.c **** 
 345:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 346:../../os/rt/src/chvt.c **** 
 347:../../os/rt/src/chvt.c ****   /* The delta of the timer is added to the next timer.*/
 348:../../os/rt/src/chvt.c ****   vtp->dlist.next->delta += vtp->dlist.delta;
 349:../../os/rt/src/chvt.c **** 
 350:../../os/rt/src/chvt.c ****  /* Removing the element from the delta list, marking it as not armed.*/
 351:../../os/rt/src/chvt.c ****   (void) ch_dlist_dequeue(&vtp->dlist);
 352:../../os/rt/src/chvt.c ****   vtp->dlist.next = NULL;
 353:../../os/rt/src/chvt.c **** 
 354:../../os/rt/src/chvt.c ****   /* The above code changes the value in the header when the removed element
 355:../../os/rt/src/chvt.c ****      is the last of the list, restoring it.*/
 356:../../os/rt/src/chvt.c ****   vtlp->dlist.delta = (sysinterval_t)-1;
 357:../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 358:../../os/rt/src/chvt.c ****   systime_t now;
 359:../../os/rt/src/chvt.c ****   sysinterval_t nowdelta, delta;
 360:../../os/rt/src/chvt.c **** 
 361:../../os/rt/src/chvt.c ****   /* If the timer is not the first of the list then it is simply unlinked
 362:../../os/rt/src/chvt.c ****      else the operation is more complex.*/
 363:../../os/rt/src/chvt.c ****   if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 880               		.loc 1 363 0
 881 000e 8091 0000 		lds r24,ch0+7
 882 0012 9091 0000 		lds r25,ch0+7+1
 883               	.LVL73:
 884 0016 E817      		cp r30,r24
 885 0018 F907      		cpc r31,r25
 886 001a 01F0      		breq .L32
 887               	.LVL74:
 888               	.LBB284:
 889               	.LBB285:
 562:../../os/rt/include/chlists.h **** }
 563:../../os/rt/include/chlists.h **** 
 564:../../os/rt/include/chlists.h **** /**
 565:../../os/rt/include/chlists.h ****  * @brief   Dequeues an element from the delta list.
 566:../../os/rt/include/chlists.h ****  *
 567:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 568:../../os/rt/include/chlists.h ****  *
 569:../../os/rt/include/chlists.h ****  * @notapi
 570:../../os/rt/include/chlists.h ****  */
 571:../../os/rt/include/chlists.h **** static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
 572:../../os/rt/include/chlists.h ****   ch_delta_list_t *dlp = dlhp->next;
 573:../../os/rt/include/chlists.h **** 
 574:../../os/rt/include/chlists.h ****   dlhp->next       = dlp->next;
 575:../../os/rt/include/chlists.h ****   dlhp->next->prev = dlhp;
 576:../../os/rt/include/chlists.h **** 
 577:../../os/rt/include/chlists.h ****   return dlp;
 578:../../os/rt/include/chlists.h **** }
 579:../../os/rt/include/chlists.h **** 
 580:../../os/rt/include/chlists.h **** /**
 581:../../os/rt/include/chlists.h ****  * @brief   Dequeues an element from the delta list.
 582:../../os/rt/include/chlists.h ****  *
 583:../../os/rt/include/chlists.h ****  * @param[in] dlp       pointer to the delta list element
 584:../../os/rt/include/chlists.h ****  *
 585:../../os/rt/include/chlists.h ****  * @notapi
 586:../../os/rt/include/chlists.h ****  */
 587:../../os/rt/include/chlists.h **** static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
 588:../../os/rt/include/chlists.h **** 
 589:../../os/rt/include/chlists.h ****   dlp->prev->next = dlp->next;
 890               		.loc 2 589 0
 891 001c C281      		ldd r28,Z+2
 892 001e D381      		ldd r29,Z+3
 893 0020 B983      		std Y+1,r27
 894 0022 A883      		st Y,r26
 590:../../os/rt/include/chlists.h ****   dlp->next->prev = dlp->prev;
 895               		.loc 2 590 0
 896 0024 A081      		ld r26,Z
 897 0026 B181      		ldd r27,Z+1
 898 0028 1396      		adiw r26,2+1
 899 002a DC93      		st X,r29
 900 002c CE93      		st -X,r28
 901 002e 1297      		sbiw r26,2
 902               	.LVL75:
 903               	.LBE285:
 904               	.LBE284:
 364:../../os/rt/src/chvt.c **** 
 365:../../os/rt/src/chvt.c ****     /* Removing the element from the delta list.*/
 366:../../os/rt/src/chvt.c ****     (void) ch_dlist_dequeue(&vtp->dlist);
 367:../../os/rt/src/chvt.c **** 
 368:../../os/rt/src/chvt.c ****     /* Adding delta to the next element, if it is not the last one.*/
 369:../../os/rt/src/chvt.c ****     vtp->dlist.next->delta += vtp->dlist.delta;
 905               		.loc 1 369 0
 906 0030 1496      		adiw r26,4
 907 0032 4D91      		ld r20,X+
 908 0034 5D91      		ld r21,X+
 909 0036 6D91      		ld r22,X+
 910 0038 7C91      		ld r23,X
 911 003a 1797      		sbiw r26,4+3
 912 003c 0481      		ldd r16,Z+4
 913 003e 1581      		ldd r17,Z+5
 914 0040 2681      		ldd r18,Z+6
 915 0042 3781      		ldd r19,Z+7
 916 0044 400F      		add r20,r16
 917 0046 511F      		adc r21,r17
 918 0048 621F      		adc r22,r18
 919 004a 731F      		adc r23,r19
 920 004c 1496      		adiw r26,4
 921 004e 4D93      		st X+,r20
 922 0050 5D93      		st X+,r21
 923 0052 6D93      		st X+,r22
 924 0054 7C93      		st X,r23
 925 0056 1797      		sbiw r26,4+3
 370:../../os/rt/src/chvt.c **** 
 371:../../os/rt/src/chvt.c ****     /* Marking timer as not armed.*/
 372:../../os/rt/src/chvt.c ****     vtp->dlist.next = NULL;
 926               		.loc 1 372 0
 927 0058 1182      		std Z+1,__zero_reg__
 928 005a 1082      		st Z,__zero_reg__
 373:../../os/rt/src/chvt.c **** 
 374:../../os/rt/src/chvt.c ****     /* Special case when the removed element from the last position in the list,
 375:../../os/rt/src/chvt.c ****        the value in the header must be restored, just doing it is faster than
 376:../../os/rt/src/chvt.c ****        checking then doing.*/
 377:../../os/rt/src/chvt.c ****     vtlp->dlist.delta = (sysinterval_t)-1;
 929               		.loc 1 377 0
 930 005c 8FEF      		ldi r24,lo8(-1)
 931 005e 9FEF      		ldi r25,lo8(-1)
 932 0060 DC01      		movw r26,r24
 933 0062 8093 0000 		sts ch0+11,r24
 934 0066 9093 0000 		sts ch0+11+1,r25
 935 006a A093 0000 		sts ch0+11+2,r26
 936 006e B093 0000 		sts ch0+11+3,r27
 937               	.LVL76:
 938               	.L31:
 939               	/* epilogue start */
 378:../../os/rt/src/chvt.c **** 
 379:../../os/rt/src/chvt.c ****     return;
 380:../../os/rt/src/chvt.c ****   }
 381:../../os/rt/src/chvt.c **** 
 382:../../os/rt/src/chvt.c ****   /* Removing the first timer from the list, marking it as not armed.*/
 383:../../os/rt/src/chvt.c ****   ch_dlist_remove_first(&vtlp->dlist);
 384:../../os/rt/src/chvt.c ****   vtp->dlist.next = NULL;
 385:../../os/rt/src/chvt.c **** 
 386:../../os/rt/src/chvt.c ****   /* If the list become empty then the alarm timer is stopped and done.*/
 387:../../os/rt/src/chvt.c ****   if (ch_dlist_isempty(&vtlp->dlist)) {
 388:../../os/rt/src/chvt.c **** 
 389:../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 390:../../os/rt/src/chvt.c **** 
 391:../../os/rt/src/chvt.c ****     return;
 392:../../os/rt/src/chvt.c ****   }
 393:../../os/rt/src/chvt.c **** 
 394:../../os/rt/src/chvt.c ****   /* The delta of the removed timer is added to the new first timer.*/
 395:../../os/rt/src/chvt.c ****   vtlp->dlist.next->delta += vtp->dlist.delta;
 396:../../os/rt/src/chvt.c **** 
 397:../../os/rt/src/chvt.c ****   /* Distance in ticks between the last alarm event and current time.*/
 398:../../os/rt/src/chvt.c ****   now = chVTGetSystemTimeX();
 399:../../os/rt/src/chvt.c ****   nowdelta = chTimeDiffX(vtlp->lasttime, now);
 400:../../os/rt/src/chvt.c **** 
 401:../../os/rt/src/chvt.c ****   /* If the current time surpassed the time of the next element in list
 402:../../os/rt/src/chvt.c ****      then the event interrupt is already pending, just return.*/
 403:../../os/rt/src/chvt.c ****   if (nowdelta >= vtlp->dlist.next->delta) {
 404:../../os/rt/src/chvt.c ****     return;
 405:../../os/rt/src/chvt.c ****   }
 406:../../os/rt/src/chvt.c **** 
 407:../../os/rt/src/chvt.c ****   /* Distance from the next scheduled event and now.*/
 408:../../os/rt/src/chvt.c ****   delta = vtlp->dlist.next->delta - nowdelta;
 409:../../os/rt/src/chvt.c **** 
 410:../../os/rt/src/chvt.c ****   /* Setting up the alarm.*/
 411:../../os/rt/src/chvt.c ****   vt_set_alarm(now, delta);
 412:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 413:../../os/rt/src/chvt.c **** }
 940               		.loc 1 413 0
 941 0072 DF91      		pop r29
 942 0074 CF91      		pop r28
 943 0076 1F91      		pop r17
 944 0078 0F91      		pop r16
 945 007a 0895      		ret
 946               	.LVL77:
 947               	.L32:
 948               	.LBB286:
 949               	.LBB287:
 574:../../os/rt/include/chlists.h ****   dlhp->next->prev = dlhp;
 950               		.loc 2 574 0
 951 007c B093 0000 		sts ch0+7+1,r27
 952 0080 A093 0000 		sts ch0+7,r26
 575:../../os/rt/include/chlists.h **** 
 953               		.loc 2 575 0
 954 0084 80E0      		ldi r24,lo8(ch0+7)
 955 0086 90E0      		ldi r25,hi8(ch0+7)
 956               	.LVL78:
 957 0088 1396      		adiw r26,2+1
 958 008a 9C93      		st X,r25
 959 008c 8E93      		st -X,r24
 960 008e 1297      		sbiw r26,2
 961               	.LVL79:
 962               	.LBE287:
 963               	.LBE286:
 384:../../os/rt/src/chvt.c **** 
 964               		.loc 1 384 0
 965 0090 1182      		std Z+1,__zero_reg__
 966 0092 1082      		st Z,__zero_reg__
 967               	.LVL80:
 968               	.LBB288:
 969               	.LBB289:
 443:../../os/rt/include/chlists.h **** }
 970               		.loc 2 443 0
 971 0094 A091 0000 		lds r26,ch0+7
 972 0098 B091 0000 		lds r27,ch0+7+1
 973               	.LVL81:
 974               	.LBE289:
 975               	.LBE288:
 387:../../os/rt/src/chvt.c **** 
 976               		.loc 1 387 0
 977 009c A817      		cp r26,r24
 978 009e B907      		cpc r27,r25
 979               	.LVL82:
 980 00a0 01F0      		breq .L35
 395:../../os/rt/src/chvt.c **** 
 981               		.loc 1 395 0
 982 00a2 1496      		adiw r26,4
 983 00a4 4D91      		ld r20,X+
 984 00a6 5D91      		ld r21,X+
 985 00a8 6D91      		ld r22,X+
 986 00aa 7C91      		ld r23,X
 987 00ac 1797      		sbiw r26,4+3
 988 00ae 0481      		ldd r16,Z+4
 989 00b0 1581      		ldd r17,Z+5
 990 00b2 2681      		ldd r18,Z+6
 991 00b4 3781      		ldd r19,Z+7
 992 00b6 400F      		add r20,r16
 993 00b8 511F      		adc r21,r17
 994 00ba 621F      		adc r22,r18
 995 00bc 731F      		adc r23,r19
 996 00be 1496      		adiw r26,4
 997 00c0 4D93      		st X+,r20
 998 00c2 5D93      		st X+,r21
 999 00c4 6D93      		st X+,r22
 1000 00c6 7C93      		st X,r23
 1001 00c8 1797      		sbiw r26,4+3
 1002               	.LBB290:
 1003               	.LBB291:
 1004               	.LBB292:
 1005               		.loc 4 113 0
 1006 00ca 0E94 0000 		call stGetCounter
 1007               	.LVL83:
 1008               	.LBE292:
 1009               	.LBE291:
 1010               	.LBE290:
 1011               	.LBB293:
 1012               	.LBB294:
 1013               		.loc 3 465 0
 1014 00ce 2091 0000 		lds r18,ch0+15
 1015 00d2 3091 0000 		lds r19,ch0+15+1
 1016 00d6 8C01      		movw r16,r24
 1017 00d8 021B      		sub r16,r18
 1018 00da 130B      		sbc r17,r19
 1019 00dc 30E0      		ldi r19,0
 1020 00de 20E0      		ldi r18,0
 1021               	.LVL84:
 1022               	.LBE294:
 1023               	.LBE293:
 403:../../os/rt/src/chvt.c ****     return;
 1024               		.loc 1 403 0
 1025 00e0 E091 0000 		lds r30,ch0+7
 1026 00e4 F091 0000 		lds r31,ch0+7+1
 1027 00e8 4481      		ldd r20,Z+4
 1028 00ea 5581      		ldd r21,Z+5
 1029 00ec 6681      		ldd r22,Z+6
 1030 00ee 7781      		ldd r23,Z+7
 1031 00f0 0417      		cp r16,r20
 1032 00f2 1507      		cpc r17,r21
 1033 00f4 2607      		cpc r18,r22
 1034 00f6 3707      		cpc r19,r23
 1035 00f8 00F0      		brlo .+2
 1036 00fa 00C0      		rjmp .L31
 1037               	.LVL85:
 408:../../os/rt/src/chvt.c **** 
 1038               		.loc 1 408 0
 1039 00fc 401B      		sub r20,r16
 1040 00fe 510B      		sbc r21,r17
 1041 0100 620B      		sbc r22,r18
 1042 0102 730B      		sbc r23,r19
 1043               	.LVL86:
 1044               	/* epilogue start */
 1045               		.loc 1 413 0
 1046 0104 DF91      		pop r29
 1047 0106 CF91      		pop r28
 1048 0108 1F91      		pop r17
 1049 010a 0F91      		pop r16
 411:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 1050               		.loc 1 411 0
 1051 010c 0C94 0000 		jmp vt_set_alarm
 1052               	.LVL87:
 1053               	.L35:
 1054               	/* epilogue start */
 1055               		.loc 1 413 0
 1056 0110 DF91      		pop r29
 1057 0112 CF91      		pop r28
 1058 0114 1F91      		pop r17
 1059 0116 0F91      		pop r16
 1060               	.LBB295:
 1061               	.LBB296:
  89:../../os/hal/osal/rt-nil/chcore_timer.h **** }
 1062               		.loc 4 89 0
 1063 0118 0C94 0000 		jmp stStopAlarm
 1064               	.LVL88:
 1065               	.LBE296:
 1066               	.LBE295:
 1067               		.cfi_endproc
 1068               	.LFE200:
 1070               		.section	.text.chVTGetRemainingIntervalI,"ax",@progbits
 1071               	.global	chVTGetRemainingIntervalI
 1073               	chVTGetRemainingIntervalI:
 1074               	.LFB201:
 414:../../os/rt/src/chvt.c **** 
 415:../../os/rt/src/chvt.c **** /**
 416:../../os/rt/src/chvt.c ****  * @brief   Returns the remaining time interval before next timer trigger.
 417:../../os/rt/src/chvt.c ****  * @note    This function can be called while the timer is active.
 418:../../os/rt/src/chvt.c ****  *
 419:../../os/rt/src/chvt.c ****  * @param[in] vtp       pointer to a @p virtual_timer_t structure
 420:../../os/rt/src/chvt.c ****  * @return              The remaining time interval.
 421:../../os/rt/src/chvt.c ****  *
 422:../../os/rt/src/chvt.c ****  * @iclass
 423:../../os/rt/src/chvt.c ****  */
 424:../../os/rt/src/chvt.c **** sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp) {
 1075               		.loc 1 424 0
 1076               		.cfi_startproc
 1077               	.LVL89:
 1078 0000 CF92      		push r12
 1079               	.LCFI40:
 1080               		.cfi_def_cfa_offset 3
 1081               		.cfi_offset 12, -2
 1082 0002 DF92      		push r13
 1083               	.LCFI41:
 1084               		.cfi_def_cfa_offset 4
 1085               		.cfi_offset 13, -3
 1086 0004 EF92      		push r14
 1087               	.LCFI42:
 1088               		.cfi_def_cfa_offset 5
 1089               		.cfi_offset 14, -4
 1090 0006 FF92      		push r15
 1091               	.LCFI43:
 1092               		.cfi_def_cfa_offset 6
 1093               		.cfi_offset 15, -5
 1094               	/* prologue: function */
 1095               	/* frame size = 0 */
 1096               	/* stack size = 4 */
 1097               	.L__stack_usage = 4
 1098               	.LVL90:
 425:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 426:../../os/rt/src/chvt.c ****   sysinterval_t delta;
 427:../../os/rt/src/chvt.c ****   ch_delta_list_t *dlp;
 428:../../os/rt/src/chvt.c **** 
 429:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 430:../../os/rt/src/chvt.c **** 
 431:../../os/rt/src/chvt.c ****   delta = (sysinterval_t)0;
 432:../../os/rt/src/chvt.c ****   dlp = vtlp->dlist.next;
 1099               		.loc 1 432 0
 1100 0008 E091 0000 		lds r30,ch0+7
 1101 000c F091 0000 		lds r31,ch0+7+1
 1102               	.LVL91:
 431:../../os/rt/src/chvt.c ****   dlp = vtlp->dlist.next;
 1103               		.loc 1 431 0
 1104 0010 C12C      		mov r12,__zero_reg__
 1105 0012 D12C      		mov r13,__zero_reg__
 1106 0014 7601      		movw r14,r12
 1107 0016 00C0      		rjmp .L39
 1108               	.LVL92:
 1109               	.L37:
 433:../../os/rt/src/chvt.c ****   do {
 434:../../os/rt/src/chvt.c ****     delta += dlp->delta;
 435:../../os/rt/src/chvt.c ****     if (dlp == &vtp->dlist) {
 436:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 437:../../os/rt/src/chvt.c ****       systime_t now = chVTGetSystemTimeX();
 438:../../os/rt/src/chvt.c ****       sysinterval_t nowdelta = chTimeDiffX(vtlp->lasttime, now);
 439:../../os/rt/src/chvt.c ****       if (nowdelta > delta) {
 440:../../os/rt/src/chvt.c ****         return (sysinterval_t)0;
 441:../../os/rt/src/chvt.c ****       }
 442:../../os/rt/src/chvt.c ****       return delta - nowdelta;
 443:../../os/rt/src/chvt.c **** #else
 444:../../os/rt/src/chvt.c ****       return delta;
 445:../../os/rt/src/chvt.c **** #endif
 446:../../os/rt/src/chvt.c ****     }
 447:../../os/rt/src/chvt.c ****     dlp = dlp->next;
 1110               		.loc 1 447 0
 1111 0018 0190      		ld __tmp_reg__,Z+
 1112 001a F081      		ld r31,Z
 1113 001c E02D      		mov r30,__tmp_reg__
 1114               	.LVL93:
 448:../../os/rt/src/chvt.c ****   } while (dlp != &vtlp->dlist);
 1115               		.loc 1 448 0
 1116 001e 30E0      		ldi r19,hi8(ch0+7)
 1117 0020 E030      		cpi r30,lo8(ch0+7)
 1118 0022 F307      		cpc r31,r19
 1119 0024 01F0      		breq .L42
 1120               	.LVL94:
 1121               	.L39:
 434:../../os/rt/src/chvt.c ****     if (dlp == &vtp->dlist) {
 1122               		.loc 1 434 0
 1123 0026 4481      		ldd r20,Z+4
 1124 0028 5581      		ldd r21,Z+5
 1125 002a 6681      		ldd r22,Z+6
 1126 002c 7781      		ldd r23,Z+7
 1127 002e C40E      		add r12,r20
 1128 0030 D51E      		adc r13,r21
 1129 0032 E61E      		adc r14,r22
 1130 0034 F71E      		adc r15,r23
 1131               	.LVL95:
 435:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 1132               		.loc 1 435 0
 1133 0036 E817      		cp r30,r24
 1134 0038 F907      		cpc r31,r25
 1135 003a 01F4      		brne .L37
 1136               	.LBB297:
 1137               	.LBB298:
 1138               	.LBB299:
 1139               	.LBB300:
 1140               		.loc 4 113 0
 1141 003c 0E94 0000 		call stGetCounter
 1142               	.LVL96:
 1143               	.LBE300:
 1144               	.LBE299:
 1145               	.LBE298:
 1146               	.LBB301:
 1147               	.LBB302:
 1148               		.loc 3 465 0
 1149 0040 2091 0000 		lds r18,ch0+15
 1150 0044 3091 0000 		lds r19,ch0+15+1
 1151 0048 821B      		sub r24,r18
 1152 004a 930B      		sbc r25,r19
 1153 004c B0E0      		ldi r27,0
 1154 004e A0E0      		ldi r26,0
 1155               	.LVL97:
 1156               	.LBE302:
 1157               	.LBE301:
 439:../../os/rt/src/chvt.c ****         return (sysinterval_t)0;
 1158               		.loc 1 439 0
 1159 0050 C816      		cp r12,r24
 1160 0052 D906      		cpc r13,r25
 1161 0054 EA06      		cpc r14,r26
 1162 0056 FB06      		cpc r15,r27
 1163 0058 00F0      		brlo .L40
 442:../../os/rt/src/chvt.c **** #else
 1164               		.loc 1 442 0
 1165 005a A701      		movw r20,r14
 1166 005c 9601      		movw r18,r12
 1167 005e 281B      		sub r18,r24
 1168 0060 390B      		sbc r19,r25
 1169 0062 4A0B      		sbc r20,r26
 1170 0064 5B0B      		sbc r21,r27
 1171 0066 CA01      		movw r24,r20
 1172 0068 B901      		movw r22,r18
 1173               	/* epilogue start */
 1174               	.LBE297:
 449:../../os/rt/src/chvt.c **** 
 450:../../os/rt/src/chvt.c ****   chDbgAssert(false, "timer not in list");
 451:../../os/rt/src/chvt.c **** 
 452:../../os/rt/src/chvt.c ****   return (sysinterval_t)-1;
 453:../../os/rt/src/chvt.c **** }
 1175               		.loc 1 453 0
 1176 006a FF90      		pop r15
 1177 006c EF90      		pop r14
 1178 006e DF90      		pop r13
 1179 0070 CF90      		pop r12
 1180               	.LVL98:
 1181 0072 0895      		ret
 1182               	.LVL99:
 1183               	.L40:
 1184               	.LBB303:
 440:../../os/rt/src/chvt.c ****       }
 1185               		.loc 1 440 0
 1186 0074 60E0      		ldi r22,0
 1187 0076 70E0      		ldi r23,0
 1188 0078 CB01      		movw r24,r22
 1189               	/* epilogue start */
 1190               	.LBE303:
 1191               		.loc 1 453 0
 1192 007a FF90      		pop r15
 1193 007c EF90      		pop r14
 1194 007e DF90      		pop r13
 1195 0080 CF90      		pop r12
 1196               	.LVL100:
 1197 0082 0895      		ret
 1198               	.LVL101:
 1199               	.L42:
 452:../../os/rt/src/chvt.c **** }
 1200               		.loc 1 452 0
 1201 0084 6FEF      		ldi r22,lo8(-1)
 1202 0086 7FEF      		ldi r23,lo8(-1)
 1203 0088 CB01      		movw r24,r22
 1204               	/* epilogue start */
 1205               		.loc 1 453 0
 1206 008a FF90      		pop r15
 1207 008c EF90      		pop r14
 1208 008e DF90      		pop r13
 1209 0090 CF90      		pop r12
 1210               	.LVL102:
 1211 0092 0895      		ret
 1212               		.cfi_endproc
 1213               	.LFE201:
 1215               		.section	.text.chVTDoTickI,"ax",@progbits
 1216               	.global	chVTDoTickI
 1218               	chVTDoTickI:
 1219               	.LFB202:
 454:../../os/rt/src/chvt.c **** 
 455:../../os/rt/src/chvt.c **** /**
 456:../../os/rt/src/chvt.c ****  * @brief   Virtual timers ticker.
 457:../../os/rt/src/chvt.c ****  * @note    The system lock is released before entering the callback and
 458:../../os/rt/src/chvt.c ****  *          re-acquired immediately after. It is callback's responsibility
 459:../../os/rt/src/chvt.c ****  *          to acquire the lock if needed. This is done in order to reduce
 460:../../os/rt/src/chvt.c ****  *          interrupts jitter when many timers are in use.
 461:../../os/rt/src/chvt.c ****  *
 462:../../os/rt/src/chvt.c ****  * @iclass
 463:../../os/rt/src/chvt.c ****  */
 464:../../os/rt/src/chvt.c **** void chVTDoTickI(void) {
 1220               		.loc 1 464 0
 1221               		.cfi_startproc
 1222 0000 4F92      		push r4
 1223               	.LCFI44:
 1224               		.cfi_def_cfa_offset 3
 1225               		.cfi_offset 4, -2
 1226 0002 5F92      		push r5
 1227               	.LCFI45:
 1228               		.cfi_def_cfa_offset 4
 1229               		.cfi_offset 5, -3
 1230 0004 6F92      		push r6
 1231               	.LCFI46:
 1232               		.cfi_def_cfa_offset 5
 1233               		.cfi_offset 6, -4
 1234 0006 7F92      		push r7
 1235               	.LCFI47:
 1236               		.cfi_def_cfa_offset 6
 1237               		.cfi_offset 7, -5
 1238 0008 8F92      		push r8
 1239               	.LCFI48:
 1240               		.cfi_def_cfa_offset 7
 1241               		.cfi_offset 8, -6
 1242 000a 9F92      		push r9
 1243               	.LCFI49:
 1244               		.cfi_def_cfa_offset 8
 1245               		.cfi_offset 9, -7
 1246 000c AF92      		push r10
 1247               	.LCFI50:
 1248               		.cfi_def_cfa_offset 9
 1249               		.cfi_offset 10, -8
 1250 000e BF92      		push r11
 1251               	.LCFI51:
 1252               		.cfi_def_cfa_offset 10
 1253               		.cfi_offset 11, -9
 1254 0010 CF92      		push r12
 1255               	.LCFI52:
 1256               		.cfi_def_cfa_offset 11
 1257               		.cfi_offset 12, -10
 1258 0012 DF92      		push r13
 1259               	.LCFI53:
 1260               		.cfi_def_cfa_offset 12
 1261               		.cfi_offset 13, -11
 1262 0014 EF92      		push r14
 1263               	.LCFI54:
 1264               		.cfi_def_cfa_offset 13
 1265               		.cfi_offset 14, -12
 1266 0016 FF92      		push r15
 1267               	.LCFI55:
 1268               		.cfi_def_cfa_offset 14
 1269               		.cfi_offset 15, -13
 1270 0018 0F93      		push r16
 1271               	.LCFI56:
 1272               		.cfi_def_cfa_offset 15
 1273               		.cfi_offset 16, -14
 1274 001a 1F93      		push r17
 1275               	.LCFI57:
 1276               		.cfi_def_cfa_offset 16
 1277               		.cfi_offset 17, -15
 1278 001c CF93      		push r28
 1279               	.LCFI58:
 1280               		.cfi_def_cfa_offset 17
 1281               		.cfi_offset 28, -16
 1282 001e DF93      		push r29
 1283               	.LCFI59:
 1284               		.cfi_def_cfa_offset 18
 1285               		.cfi_offset 29, -17
 1286               	/* prologue: function */
 1287               	/* frame size = 0 */
 1288               	/* stack size = 16 */
 1289               	.L__stack_usage = 16
 1290               	.LVL103:
 1291               	.LBB304:
 1292               	.LBB305:
 1293               	.LBB306:
 1294               	.LBB307:
 561:../../os/rt/include/chlists.h **** }
 1295               		.loc 2 561 0
 1296 0020 CC24      		clr r12
 1297 0022 CA94      		dec r12
 1298 0024 DC2C      		mov r13,r12
 1299 0026 7601      		movw r14,r12
 1300 0028 00C0      		rjmp .L46
 1301               	.LVL104:
 1302               	.L45:
 1303               	.LBE307:
 1304               	.LBE306:
 1305               	.LBE305:
 465:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 466:../../os/rt/src/chvt.c **** 
 467:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 468:../../os/rt/src/chvt.c **** 
 469:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 470:../../os/rt/src/chvt.c ****   vtlp->systime++;
 471:../../os/rt/src/chvt.c ****   if (ch_dlist_notempty(&vtlp->dlist)) {
 472:../../os/rt/src/chvt.c ****     /* The list is not empty, processing elements on top.*/
 473:../../os/rt/src/chvt.c ****     --vtlp->dlist.next->delta;
 474:../../os/rt/src/chvt.c ****     while (vtlp->dlist.next->delta == (sysinterval_t)0) {
 475:../../os/rt/src/chvt.c ****       virtual_timer_t *vtp;
 476:../../os/rt/src/chvt.c **** 
 477:../../os/rt/src/chvt.c ****       /* Triggered timer.*/
 478:../../os/rt/src/chvt.c ****       vtp = (virtual_timer_t *)vtlp->dlist.next;
 479:../../os/rt/src/chvt.c **** 
 480:../../os/rt/src/chvt.c ****       /* Removing the element from the delta list, marking it as not armed.*/
 481:../../os/rt/src/chvt.c ****       (void) ch_dlist_dequeue(&vtp->dlist);
 482:../../os/rt/src/chvt.c ****       vtp->dlist.next = NULL;
 483:../../os/rt/src/chvt.c **** 
 484:../../os/rt/src/chvt.c ****       chSysUnlockFromISR();
 485:../../os/rt/src/chvt.c ****       vtp->func(vtp, vtp->par);
 486:../../os/rt/src/chvt.c ****       chSysLockFromISR();
 487:../../os/rt/src/chvt.c **** 
 488:../../os/rt/src/chvt.c ****       /* If a reload is defined the timer needs to be restarted.*/
 489:../../os/rt/src/chvt.c ****       if (vtp->reload > (sysinterval_t)0) {
 490:../../os/rt/src/chvt.c ****         ch_dlist_insert(&vtlp->dlist, &vtp->dlist, vtp->reload);
 491:../../os/rt/src/chvt.c ****       }
 492:../../os/rt/src/chvt.c ****     }
 493:../../os/rt/src/chvt.c ****   }
 494:../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 495:../../os/rt/src/chvt.c ****   virtual_timer_t *vtp;
 496:../../os/rt/src/chvt.c ****   sysinterval_t nowdelta;
 497:../../os/rt/src/chvt.c ****   systime_t now;
 498:../../os/rt/src/chvt.c **** 
 499:../../os/rt/src/chvt.c ****   /* Looping through timers consuming all timers with deltas lower or equal
 500:../../os/rt/src/chvt.c ****      than the interval between "now" and "lasttime".*/
 501:../../os/rt/src/chvt.c ****   while (true) {
 502:../../os/rt/src/chvt.c ****     systime_t lasttime;
 503:../../os/rt/src/chvt.c **** 
 504:../../os/rt/src/chvt.c ****     /* First timer in the delta list.*/
 505:../../os/rt/src/chvt.c ****     vtp = (virtual_timer_t *)vtlp->dlist.next;
 506:../../os/rt/src/chvt.c **** 
 507:../../os/rt/src/chvt.c ****     /* Delta between current time and last execution time.*/
 508:../../os/rt/src/chvt.c ****     now = chVTGetSystemTimeX();
 509:../../os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(vtlp->lasttime, now);
 510:../../os/rt/src/chvt.c **** 
 511:../../os/rt/src/chvt.c ****     /* Loop break condition.
 512:../../os/rt/src/chvt.c ****        Note that the list scan is limited by the delta list header having
 513:../../os/rt/src/chvt.c ****        "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
 514:../../os/rt/src/chvt.c ****        deltas*/
 515:../../os/rt/src/chvt.c ****     if (nowdelta < vtp->dlist.delta) {
 516:../../os/rt/src/chvt.c ****       break;
 517:../../os/rt/src/chvt.c ****     }
 518:../../os/rt/src/chvt.c **** 
 519:../../os/rt/src/chvt.c ****     /* Last time deadline is updated to the next timer's time.*/
 520:../../os/rt/src/chvt.c ****     lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 521:../../os/rt/src/chvt.c ****     vtlp->lasttime = lasttime;
 522:../../os/rt/src/chvt.c **** 
 523:../../os/rt/src/chvt.c ****     /* Removing the timer from the list, marking it as not armed.*/
 524:../../os/rt/src/chvt.c ****     (void) ch_dlist_dequeue(&vtp->dlist);
 525:../../os/rt/src/chvt.c ****     vtp->dlist.next = NULL;
 526:../../os/rt/src/chvt.c **** 
 527:../../os/rt/src/chvt.c ****     /* If the list becomes empty then the alarm is disabled.*/
 528:../../os/rt/src/chvt.c ****     if (ch_dlist_isempty(&vtlp->dlist)) {
 529:../../os/rt/src/chvt.c ****       port_timer_stop_alarm();
 530:../../os/rt/src/chvt.c ****     }
 531:../../os/rt/src/chvt.c **** 
 532:../../os/rt/src/chvt.c ****     /* The callback is invoked outside the kernel critical section, it
 533:../../os/rt/src/chvt.c ****        is re-entered on the callback return. Note that "lasttime" can be
 534:../../os/rt/src/chvt.c ****        modified within the callback if some timer function is called.*/
 535:../../os/rt/src/chvt.c ****     chSysUnlockFromISR();
 536:../../os/rt/src/chvt.c **** 
 537:../../os/rt/src/chvt.c ****     vtp->func(vtp, vtp->par);
 1306               		.loc 1 537 0
 1307 002a 6A85      		ldd r22,Y+10
 1308 002c 7B85      		ldd r23,Y+11
 1309 002e E885      		ldd r30,Y+8
 1310 0030 F985      		ldd r31,Y+9
 1311 0032 CE01      		movw r24,r28
 1312 0034 0995      		icall
 1313               	.LVL105:
 538:../../os/rt/src/chvt.c **** 
 539:../../os/rt/src/chvt.c ****     chSysLockFromISR();
 540:../../os/rt/src/chvt.c **** 
 541:../../os/rt/src/chvt.c ****     /* If a reload is defined the timer needs to be restarted.*/
 542:../../os/rt/src/chvt.c ****     if (unlikely(vtp->reload > (sysinterval_t)0)) {
 1314               		.loc 1 542 0
 1315 0036 8C85      		ldd r24,Y+12
 1316 0038 9D85      		ldd r25,Y+13
 1317 003a AE85      		ldd r26,Y+14
 1318 003c BF85      		ldd r27,Y+15
 1319 003e 892B      		or r24,r25
 1320 0040 8A2B      		or r24,r26
 1321 0042 8B2B      		or r24,r27
 1322 0044 01F0      		breq .+2
 1323 0046 00C0      		rjmp .L58
 1324               	.LVL106:
 1325               	.L46:
 505:../../os/rt/src/chvt.c **** 
 1326               		.loc 1 505 0
 1327 0048 C091 0000 		lds r28,ch0+7
 1328 004c D091 0000 		lds r29,ch0+7+1
 1329               	.LVL107:
 1330               	.LBB321:
 1331               	.LBB322:
 1332               	.LBB323:
 1333               		.loc 4 113 0
 1334 0050 0E94 0000 		call stGetCounter
 1335               	.LVL108:
 1336               	.LBE323:
 1337               	.LBE322:
 1338               	.LBE321:
 509:../../os/rt/src/chvt.c **** 
 1339               		.loc 1 509 0
 1340 0054 0091 0000 		lds r16,ch0+15
 1341 0058 1091 0000 		lds r17,ch0+15+1
 1342               	.LVL109:
 1343               	.LBB324:
 1344               	.LBB325:
 1345               		.loc 3 465 0
 1346 005c 4C01      		movw r8,r24
 1347 005e 801A      		sub r8,r16
 1348 0060 910A      		sbc r9,r17
 1349 0062 B12C      		mov r11,__zero_reg__
 1350 0064 A12C      		mov r10,__zero_reg__
 1351               	.LVL110:
 1352               	.LBE325:
 1353               	.LBE324:
 515:../../os/rt/src/chvt.c ****       break;
 1354               		.loc 1 515 0
 1355 0066 4C81      		ldd r20,Y+4
 1356 0068 5D81      		ldd r21,Y+5
 1357 006a 6E81      		ldd r22,Y+6
 1358 006c 7F81      		ldd r23,Y+7
 1359 006e 8416      		cp r8,r20
 1360 0070 9506      		cpc r9,r21
 1361 0072 A606      		cpc r10,r22
 1362 0074 B706      		cpc r11,r23
 1363 0076 00F0      		brlo .L44
 1364               	.LVL111:
 1365               	.LBB326:
 1366               	.LBB327:
 449:../../os/rt/include/chtime.h **** }
 1367               		.loc 3 449 0
 1368 0078 040F      		add r16,r20
 1369 007a 151F      		adc r17,r21
 1370               	.LVL112:
 1371               	.LBE327:
 1372               	.LBE326:
 521:../../os/rt/src/chvt.c **** 
 1373               		.loc 1 521 0
 1374 007c 1093 0000 		sts ch0+15+1,r17
 1375 0080 0093 0000 		sts ch0+15,r16
 1376               	.LVL113:
 1377               	.LBB328:
 1378               	.LBB329:
 589:../../os/rt/include/chlists.h ****   dlp->next->prev = dlp->prev;
 1379               		.loc 2 589 0
 1380 0084 EA81      		ldd r30,Y+2
 1381 0086 FB81      		ldd r31,Y+3
 1382 0088 8881      		ld r24,Y
 1383 008a 9981      		ldd r25,Y+1
 1384 008c 9183      		std Z+1,r25
 1385 008e 8083      		st Z,r24
 1386               		.loc 2 590 0
 1387 0090 A881      		ld r26,Y
 1388 0092 B981      		ldd r27,Y+1
 1389 0094 1396      		adiw r26,2+1
 1390 0096 FC93      		st X,r31
 1391 0098 EE93      		st -X,r30
 1392 009a 1297      		sbiw r26,2
 1393               	.LVL114:
 1394               	.LBE329:
 1395               	.LBE328:
 525:../../os/rt/src/chvt.c **** 
 1396               		.loc 1 525 0
 1397 009c 1982      		std Y+1,__zero_reg__
 1398 009e 1882      		st Y,__zero_reg__
 528:../../os/rt/src/chvt.c ****       port_timer_stop_alarm();
 1399               		.loc 1 528 0
 1400 00a0 8091 0000 		lds r24,ch0+7
 1401 00a4 9091 0000 		lds r25,ch0+7+1
 1402 00a8 8050      		subi r24,lo8(ch0+7)
 1403 00aa 9040      		sbci r25,hi8(ch0+7)
 1404 00ac 01F0      		breq .+2
 1405 00ae 00C0      		rjmp .L45
 1406               	.LBB330:
 1407               	.LBB331:
  89:../../os/hal/osal/rt-nil/chcore_timer.h **** }
 1408               		.loc 4 89 0
 1409 00b0 0E94 0000 		call stStopAlarm
 1410               	.LVL115:
 1411 00b4 00C0      		rjmp .L45
 1412               	.L44:
 1413               	.LBE331:
 1414               	.LBE330:
 1415               	.LBE304:
 543:../../os/rt/src/chvt.c ****       sysinterval_t delta, delay;
 544:../../os/rt/src/chvt.c **** 
 545:../../os/rt/src/chvt.c ****       /* Refreshing the now delta after spending time in the callback for
 546:../../os/rt/src/chvt.c ****          a more accurate detection of too fast reloads.*/
 547:../../os/rt/src/chvt.c ****       now = chVTGetSystemTimeX();
 548:../../os/rt/src/chvt.c ****       nowdelta = chTimeDiffX(lasttime, now);
 549:../../os/rt/src/chvt.c **** 
 550:../../os/rt/src/chvt.c **** #if !defined(CH_VT_RFCU_DISABLED)
 551:../../os/rt/src/chvt.c ****       /* Checking if the required reload is feasible.*/
 552:../../os/rt/src/chvt.c ****       if (nowdelta > vtp->reload) {
 553:../../os/rt/src/chvt.c ****         /* System time is already past the deadline, logging the fault and
 554:../../os/rt/src/chvt.c ****            proceeding with a minimum delay.*/
 555:../../os/rt/src/chvt.c **** 
 556:../../os/rt/src/chvt.c ****         chDbgAssert(false, "skipped deadline");
 557:../../os/rt/src/chvt.c ****         chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
 558:../../os/rt/src/chvt.c **** 
 559:../../os/rt/src/chvt.c ****         delay = (sysinterval_t)0;
 560:../../os/rt/src/chvt.c ****       }
 561:../../os/rt/src/chvt.c ****       else {
 562:../../os/rt/src/chvt.c ****         /* Enqueuing the timer again using the calculated delta.*/
 563:../../os/rt/src/chvt.c ****         delay = vtp->reload - nowdelta;
 564:../../os/rt/src/chvt.c ****       }
 565:../../os/rt/src/chvt.c **** #else
 566:../../os/rt/src/chvt.c ****       /* Assertions as fallback.*/
 567:../../os/rt/src/chvt.c ****       chDbgAssert(nowdelta <= vtp->reload, "skipped deadline");
 568:../../os/rt/src/chvt.c **** 
 569:../../os/rt/src/chvt.c ****       /* Enqueuing the timer again using the calculated delta.*/
 570:../../os/rt/src/chvt.c ****       delay = vtp->reload - nowdelta;
 571:../../os/rt/src/chvt.c **** #endif
 572:../../os/rt/src/chvt.c **** 
 573:../../os/rt/src/chvt.c ****       /* Special case where the timers list is empty.*/
 574:../../os/rt/src/chvt.c ****       if (ch_dlist_isempty(&vtlp->dlist)) {
 575:../../os/rt/src/chvt.c **** 
 576:../../os/rt/src/chvt.c ****         vt_insert_first(vtlp, vtp, now, delay);
 577:../../os/rt/src/chvt.c **** 
 578:../../os/rt/src/chvt.c ****         return;
 579:../../os/rt/src/chvt.c ****       }
 580:../../os/rt/src/chvt.c **** 
 581:../../os/rt/src/chvt.c ****       /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 582:../../os/rt/src/chvt.c ****          becomes lower than 'nowdelta'. In that case the delta is shortened
 583:../../os/rt/src/chvt.c ****          to make it fit the numeric range and the timer will be triggered
 584:../../os/rt/src/chvt.c ****          "nowdelta" cycles earlier.*/
 585:../../os/rt/src/chvt.c ****       delta = nowdelta + delay;
 586:../../os/rt/src/chvt.c ****       if (delta < nowdelta) {
 587:../../os/rt/src/chvt.c ****         delta = delay;
 588:../../os/rt/src/chvt.c ****       }
 589:../../os/rt/src/chvt.c **** 
 590:../../os/rt/src/chvt.c ****       /* Insert into delta list. */
 591:../../os/rt/src/chvt.c ****       ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 592:../../os/rt/src/chvt.c ****     }
 593:../../os/rt/src/chvt.c ****   }
 594:../../os/rt/src/chvt.c **** 
 595:../../os/rt/src/chvt.c ****   /* If the list is empty, nothing else to do.*/
 596:../../os/rt/src/chvt.c ****   if (ch_dlist_isempty(&vtlp->dlist)) {
 1416               		.loc 1 596 0
 1417 00b6 2091 0000 		lds r18,ch0+7
 1418 00ba 3091 0000 		lds r19,ch0+7+1
 1419 00be 2050      		subi r18,lo8(ch0+7)
 1420 00c0 3040      		sbci r19,hi8(ch0+7)
 1421 00c2 01F4      		brne .+2
 1422 00c4 00C0      		rjmp .L43
 597:../../os/rt/src/chvt.c ****     return;
 598:../../os/rt/src/chvt.c ****   }
 599:../../os/rt/src/chvt.c **** 
 600:../../os/rt/src/chvt.c ****   /* The "unprocessed nowdelta" time slice is added to "last time"
 601:../../os/rt/src/chvt.c ****      and subtracted to next timer's delta.*/
 602:../../os/rt/src/chvt.c ****   vtlp->lasttime += nowdelta;
 1423               		.loc 1 602 0
 1424 00c6 9093 0000 		sts ch0+15+1,r25
 1425 00ca 8093 0000 		sts ch0+15,r24
 603:../../os/rt/src/chvt.c ****   vtp->dlist.delta -= nowdelta;
 1426               		.loc 1 603 0
 1427 00ce 4819      		sub r20,r8
 1428 00d0 5909      		sbc r21,r9
 1429 00d2 6A09      		sbc r22,r10
 1430 00d4 7B09      		sbc r23,r11
 1431 00d6 4C83      		std Y+4,r20
 1432 00d8 5D83      		std Y+5,r21
 1433 00da 6E83      		std Y+6,r22
 1434 00dc 7F83      		std Y+7,r23
 1435               	/* epilogue start */
 604:../../os/rt/src/chvt.c **** 
 605:../../os/rt/src/chvt.c ****   /* Update alarm time to next timer.*/
 606:../../os/rt/src/chvt.c ****   vt_set_alarm(now, vtp->dlist.delta);
 607:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 608:../../os/rt/src/chvt.c **** }
 1436               		.loc 1 608 0
 1437 00de DF91      		pop r29
 1438 00e0 CF91      		pop r28
 1439               	.LVL116:
 1440 00e2 1F91      		pop r17
 1441 00e4 0F91      		pop r16
 1442 00e6 FF90      		pop r15
 1443 00e8 EF90      		pop r14
 1444 00ea DF90      		pop r13
 1445 00ec CF90      		pop r12
 1446 00ee BF90      		pop r11
 1447 00f0 AF90      		pop r10
 1448 00f2 9F90      		pop r9
 1449 00f4 8F90      		pop r8
 1450 00f6 7F90      		pop r7
 1451 00f8 6F90      		pop r6
 1452 00fa 5F90      		pop r5
 1453 00fc 4F90      		pop r4
 606:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 1454               		.loc 1 606 0
 1455 00fe 0C94 0000 		jmp vt_set_alarm
 1456               	.LVL117:
 1457               	.L58:
 1458               	.LBB335:
 1459               	.LBB332:
 1460               	.LBB311:
 1461               	.LBB312:
 1462               	.LBB313:
 1463               		.loc 4 113 0
 1464 0102 0E94 0000 		call stGetCounter
 1465               	.LVL118:
 1466 0106 5C01      		movw r10,r24
 1467               	.LVL119:
 1468               	.LBE313:
 1469               	.LBE312:
 1470               	.LBE311:
 1471               	.LBB314:
 1472               	.LBB315:
 1473               		.loc 3 465 0
 1474 0108 2C01      		movw r4,r24
 1475 010a 401A      		sub r4,r16
 1476 010c 510A      		sbc r5,r17
 1477 010e 712C      		mov r7,__zero_reg__
 1478 0110 612C      		mov r6,__zero_reg__
 1479               	.LVL120:
 1480               	.LBE315:
 1481               	.LBE314:
 552:../../os/rt/src/chvt.c ****         /* System time is already past the deadline, logging the fault and
 1482               		.loc 1 552 0
 1483 0112 8C85      		ldd r24,Y+12
 1484 0114 9D85      		ldd r25,Y+13
 1485 0116 AE85      		ldd r26,Y+14
 1486 0118 BF85      		ldd r27,Y+15
 1487 011a 8415      		cp r24,r4
 1488 011c 9505      		cpc r25,r5
 1489 011e A605      		cpc r26,r6
 1490 0120 B705      		cpc r27,r7
 1491 0122 00F4      		brsh .+2
 1492 0124 00C0      		rjmp .L59
 1493               	.LVL121:
 1494               	.LBB316:
 1495               	.LBB317:
 443:../../os/rt/include/chlists.h **** }
 1496               		.loc 2 443 0
 1497 0126 0091 0000 		lds r16,ch0+7
 1498 012a 1091 0000 		lds r17,ch0+7+1
 1499               	.LVL122:
 1500               	.LBE317:
 1501               	.LBE316:
 574:../../os/rt/src/chvt.c **** 
 1502               		.loc 1 574 0
 1503 012e E0E0      		ldi r30,hi8(ch0+7)
 1504 0130 0030      		cpi r16,lo8(ch0+7)
 1505 0132 1E07      		cpc r17,r30
 1506 0134 01F4      		brne .+2
 1507 0136 00C0      		rjmp .L60
 1508               	.LVL123:
 1509               	.L49:
 1510               	.LBB319:
 1511               	.LBB310:
 544:../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 1512               		.loc 2 544 0
 1513 0138 F801      		movw r30,r16
 1514 013a 4481      		ldd r20,Z+4
 1515 013c 5581      		ldd r21,Z+5
 1516 013e 6681      		ldd r22,Z+6
 1517 0140 7781      		ldd r23,Z+7
 1518 0142 4817      		cp r20,r24
 1519 0144 5907      		cpc r21,r25
 1520 0146 6A07      		cpc r22,r26
 1521 0148 7B07      		cpc r23,r27
 1522 014a 00F4      		brsh .L50
 1523               	.LVL124:
 1524               	.L51:
 548:../../os/rt/include/chlists.h ****     dlp = dlp->next;
 1525               		.loc 2 548 0
 1526 014c 841B      		sub r24,r20
 1527 014e 950B      		sbc r25,r21
 1528 0150 A60B      		sbc r26,r22
 1529 0152 B70B      		sbc r27,r23
 1530               	.LVL125:
 549:../../os/rt/include/chlists.h ****   }
 1531               		.loc 2 549 0
 1532 0154 F801      		movw r30,r16
 1533 0156 0081      		ld r16,Z
 1534 0158 1181      		ldd r17,Z+1
 1535               	.LVL126:
 544:../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 1536               		.loc 2 544 0
 1537 015a F801      		movw r30,r16
 1538 015c 4481      		ldd r20,Z+4
 1539 015e 5581      		ldd r21,Z+5
 1540 0160 6681      		ldd r22,Z+6
 1541 0162 7781      		ldd r23,Z+7
 1542 0164 4817      		cp r20,r24
 1543 0166 5907      		cpc r21,r25
 1544 0168 6A07      		cpc r22,r26
 1545 016a 7B07      		cpc r23,r27
 1546 016c 00F0      		brlo .L51
 1547               	.L50:
 1548               	.LVL127:
 1549               	.LBB308:
 1550               	.LBB309:
 520:../../os/rt/include/chlists.h ****   dlp->next       = dlhp;
 1551               		.loc 2 520 0
 1552 016e 8C83      		std Y+4,r24
 1553 0170 9D83      		std Y+5,r25
 1554 0172 AE83      		std Y+6,r26
 1555 0174 BF83      		std Y+7,r27
 521:../../os/rt/include/chlists.h ****   dlp->prev       = dlp->next->prev;
 1556               		.loc 2 521 0
 1557 0176 1983      		std Y+1,r17
 1558 0178 0883      		st Y,r16
 522:../../os/rt/include/chlists.h ****   dlp->prev->next = dlp;
 1559               		.loc 2 522 0
 1560 017a F801      		movw r30,r16
 1561 017c 2281      		ldd r18,Z+2
 1562 017e 3381      		ldd r19,Z+3
 1563 0180 3B83      		std Y+3,r19
 1564 0182 2A83      		std Y+2,r18
 523:../../os/rt/include/chlists.h ****   dlhp->prev      = dlp;
 1565               		.loc 2 523 0
 1566 0184 F901      		movw r30,r18
 1567 0186 D183      		std Z+1,r29
 1568 0188 C083      		st Z,r28
 524:../../os/rt/include/chlists.h **** }
 1569               		.loc 2 524 0
 1570 018a F801      		movw r30,r16
 1571 018c D383      		std Z+3,r29
 1572 018e C283      		std Z+2,r28
 1573               	.LVL128:
 1574               	.LBE309:
 1575               	.LBE308:
 556:../../os/rt/include/chlists.h **** 
 1576               		.loc 2 556 0
 1577 0190 4481      		ldd r20,Z+4
 1578 0192 5581      		ldd r21,Z+5
 1579 0194 6681      		ldd r22,Z+6
 1580 0196 7781      		ldd r23,Z+7
 1581 0198 481B      		sub r20,r24
 1582 019a 590B      		sbc r21,r25
 1583 019c 6A0B      		sbc r22,r26
 1584 019e 7B0B      		sbc r23,r27
 1585 01a0 4483      		std Z+4,r20
 1586 01a2 5583      		std Z+5,r21
 1587 01a4 6683      		std Z+6,r22
 1588 01a6 7783      		std Z+7,r23
 561:../../os/rt/include/chlists.h **** }
 1589               		.loc 2 561 0
 1590 01a8 C092 0000 		sts ch0+11,r12
 1591 01ac D092 0000 		sts ch0+11+1,r13
 1592 01b0 E092 0000 		sts ch0+11+2,r14
 1593 01b4 F092 0000 		sts ch0+11+3,r15
 1594 01b8 00C0      		rjmp .L46
 1595               	.LVL129:
 1596               	.L43:
 1597               	/* epilogue start */
 1598               	.LBE310:
 1599               	.LBE319:
 1600               	.LBE332:
 1601               	.LBE335:
 1602               		.loc 1 608 0
 1603 01ba DF91      		pop r29
 1604 01bc CF91      		pop r28
 1605               	.LVL130:
 1606 01be 1F91      		pop r17
 1607 01c0 0F91      		pop r16
 1608 01c2 FF90      		pop r15
 1609 01c4 EF90      		pop r14
 1610 01c6 DF90      		pop r13
 1611 01c8 CF90      		pop r12
 1612 01ca BF90      		pop r11
 1613 01cc AF90      		pop r10
 1614 01ce 9F90      		pop r9
 1615 01d0 8F90      		pop r8
 1616 01d2 7F90      		pop r7
 1617 01d4 6F90      		pop r6
 1618 01d6 5F90      		pop r5
 1619 01d8 4F90      		pop r4
 1620 01da 0895      		ret
 1621               	.LVL131:
 1622               	.L59:
 1623               	.LBB336:
 1624               	.LBB333:
 557:../../os/rt/src/chvt.c **** 
 1625               		.loc 1 557 0
 1626 01dc 62E0      		ldi r22,lo8(2)
 1627 01de 70E0      		ldi r23,0
 1628 01e0 80E0      		ldi r24,0
 1629 01e2 90E0      		ldi r25,0
 1630 01e4 0E94 0000 		call chRFCUCollectFaultsI
 1631               	.LVL132:
 1632               	.LBB320:
 1633               	.LBB318:
 443:../../os/rt/include/chlists.h **** }
 1634               		.loc 2 443 0
 1635 01e8 0091 0000 		lds r16,ch0+7
 1636 01ec 1091 0000 		lds r17,ch0+7+1
 1637               	.LVL133:
 1638               	.LBE318:
 1639               	.LBE320:
 574:../../os/rt/src/chvt.c **** 
 1640               		.loc 1 574 0
 1641 01f0 80E0      		ldi r24,hi8(ch0+7)
 1642 01f2 0030      		cpi r16,lo8(ch0+7)
 1643 01f4 1807      		cpc r17,r24
 1644 01f6 01F0      		breq .L54
 1645 01f8 D301      		movw r26,r6
 1646 01fa C201      		movw r24,r4
 1647 01fc 00C0      		rjmp .L49
 1648               	.LVL134:
 1649               	.L60:
 563:../../os/rt/src/chvt.c ****       }
 1650               		.loc 1 563 0
 1651 01fe 9C01      		movw r18,r24
 1652 0200 AD01      		movw r20,r26
 1653 0202 2419      		sub r18,r4
 1654 0204 3509      		sbc r19,r5
 1655 0206 4609      		sbc r20,r6
 1656 0208 5709      		sbc r21,r7
 1657               	.LVL135:
 1658               	.L48:
 576:../../os/rt/src/chvt.c **** 
 1659               		.loc 1 576 0
 1660 020a B501      		movw r22,r10
 1661 020c CE01      		movw r24,r28
 1662               	/* epilogue start */
 1663               	.LBE333:
 1664               	.LBE336:
 1665               		.loc 1 608 0
 1666 020e DF91      		pop r29
 1667 0210 CF91      		pop r28
 1668               	.LVL136:
 1669 0212 1F91      		pop r17
 1670 0214 0F91      		pop r16
 1671 0216 FF90      		pop r15
 1672 0218 EF90      		pop r14
 1673 021a DF90      		pop r13
 1674 021c CF90      		pop r12
 1675 021e BF90      		pop r11
 1676 0220 AF90      		pop r10
 1677 0222 9F90      		pop r9
 1678 0224 8F90      		pop r8
 1679 0226 7F90      		pop r7
 1680 0228 6F90      		pop r6
 1681 022a 5F90      		pop r5
 1682 022c 4F90      		pop r4
 1683               	.LBB337:
 1684               	.LBB334:
 576:../../os/rt/src/chvt.c **** 
 1685               		.loc 1 576 0
 1686 022e 0C94 0000 		jmp vt_insert_first.constprop.5
 1687               	.LVL137:
 1688               	.L54:
 559:../../os/rt/src/chvt.c ****       }
 1689               		.loc 1 559 0
 1690 0232 20E0      		ldi r18,0
 1691 0234 30E0      		ldi r19,0
 1692 0236 A901      		movw r20,r18
 1693 0238 00C0      		rjmp .L48
 1694               	.LBE334:
 1695               	.LBE337:
 1696               		.cfi_endproc
 1697               	.LFE202:
 1699               		.section	.text.chVTGetTimeStampI,"ax",@progbits
 1700               	.global	chVTGetTimeStampI
 1702               	chVTGetTimeStampI:
 1703               	.LFB203:
 609:../../os/rt/src/chvt.c **** 
 610:../../os/rt/src/chvt.c **** #if (CH_CFG_USE_TIMESTAMP == TRUE) || defined(__DOXYGEN__)
 611:../../os/rt/src/chvt.c **** /**
 612:../../os/rt/src/chvt.c ****  * @brief   Generates a monotonic time stamp.
 613:../../os/rt/src/chvt.c ****  * @details This function generates a monotonic time stamp synchronized with
 614:../../os/rt/src/chvt.c ****  *          the system time. The time stamp has the same resolution of
 615:../../os/rt/src/chvt.c ****  *          system time.
 616:../../os/rt/src/chvt.c ****  * @note    There is an assumption, this function must be called at
 617:../../os/rt/src/chvt.c ****  *          least once before the system time wraps back to zero or
 618:../../os/rt/src/chvt.c ****  *          synchronization is lost. You may use a periodic virtual timer with
 619:../../os/rt/src/chvt.c ****  *          a very large interval in order to keep time stamps synchronized
 620:../../os/rt/src/chvt.c ****  *          by calling this function.
 621:../../os/rt/src/chvt.c ****  *
 622:../../os/rt/src/chvt.c ****  * @return              The time stamp.
 623:../../os/rt/src/chvt.c ****  *
 624:../../os/rt/src/chvt.c ****  * @iclass
 625:../../os/rt/src/chvt.c ****  */
 626:../../os/rt/src/chvt.c **** systimestamp_t chVTGetTimeStampI(void) {
 1704               		.loc 1 626 0
 1705               		.cfi_startproc
 1706 0000 2F92      		push r2
 1707               	.LCFI60:
 1708               		.cfi_def_cfa_offset 3
 1709               		.cfi_offset 2, -2
 1710 0002 3F92      		push r3
 1711               	.LCFI61:
 1712               		.cfi_def_cfa_offset 4
 1713               		.cfi_offset 3, -3
 1714 0004 4F92      		push r4
 1715               	.LCFI62:
 1716               		.cfi_def_cfa_offset 5
 1717               		.cfi_offset 4, -4
 1718 0006 5F92      		push r5
 1719               	.LCFI63:
 1720               		.cfi_def_cfa_offset 6
 1721               		.cfi_offset 5, -5
 1722 0008 6F92      		push r6
 1723               	.LCFI64:
 1724               		.cfi_def_cfa_offset 7
 1725               		.cfi_offset 6, -6
 1726 000a 7F92      		push r7
 1727               	.LCFI65:
 1728               		.cfi_def_cfa_offset 8
 1729               		.cfi_offset 7, -7
 1730 000c 8F92      		push r8
 1731               	.LCFI66:
 1732               		.cfi_def_cfa_offset 9
 1733               		.cfi_offset 8, -8
 1734 000e 9F92      		push r9
 1735               	.LCFI67:
 1736               		.cfi_def_cfa_offset 10
 1737               		.cfi_offset 9, -9
 1738 0010 AF92      		push r10
 1739               	.LCFI68:
 1740               		.cfi_def_cfa_offset 11
 1741               		.cfi_offset 10, -10
 1742 0012 BF92      		push r11
 1743               	.LCFI69:
 1744               		.cfi_def_cfa_offset 12
 1745               		.cfi_offset 11, -11
 1746 0014 CF92      		push r12
 1747               	.LCFI70:
 1748               		.cfi_def_cfa_offset 13
 1749               		.cfi_offset 12, -12
 1750 0016 DF92      		push r13
 1751               	.LCFI71:
 1752               		.cfi_def_cfa_offset 14
 1753               		.cfi_offset 13, -13
 1754 0018 EF92      		push r14
 1755               	.LCFI72:
 1756               		.cfi_def_cfa_offset 15
 1757               		.cfi_offset 14, -14
 1758 001a FF92      		push r15
 1759               	.LCFI73:
 1760               		.cfi_def_cfa_offset 16
 1761               		.cfi_offset 15, -15
 1762 001c 0F93      		push r16
 1763               	.LCFI74:
 1764               		.cfi_def_cfa_offset 17
 1765               		.cfi_offset 16, -16
 1766 001e 1F93      		push r17
 1767               	.LCFI75:
 1768               		.cfi_def_cfa_offset 18
 1769               		.cfi_offset 17, -17
 1770               	/* prologue: function */
 1771               	/* frame size = 0 */
 1772               	/* stack size = 16 */
 1773               	.L__stack_usage = 16
 1774               	.LVL138:
 1775               	.LBB338:
 1776               	.LBB339:
 1777               	.LBB340:
 1778               		.loc 4 113 0
 1779 0020 0E94 0000 		call stGetCounter
 1780               	.LVL139:
 1781               	.LBE340:
 1782               	.LBE339:
 1783               	.LBE338:
 627:../../os/rt/src/chvt.c ****   os_instance_t * oip = currcore;
 628:../../os/rt/src/chvt.c ****   systimestamp_t last, stamp;
 629:../../os/rt/src/chvt.c ****   systime_t now;
 630:../../os/rt/src/chvt.c **** 
 631:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 632:../../os/rt/src/chvt.c **** 
 633:../../os/rt/src/chvt.c ****   /* Current system time.*/
 634:../../os/rt/src/chvt.c ****   now = chVTGetSystemTimeX();
 635:../../os/rt/src/chvt.c **** 
 636:../../os/rt/src/chvt.c ****   /* Last time stamp generated.*/
 637:../../os/rt/src/chvt.c ****   last = oip->vtlist.laststamp;
 1784               		.loc 1 637 0
 1785 0024 E0E0      		ldi r30,lo8(ch0)
 1786 0026 F0E0      		ldi r31,hi8(ch0)
 1787 0028 2188      		ldd r2,Z+17
 1788 002a 3288      		ldd r3,Z+18
 1789 002c 4388      		ldd r4,Z+19
 1790 002e 5488      		ldd r5,Z+20
 1791 0030 6588      		ldd r6,Z+21
 1792 0032 7688      		ldd r7,Z+22
 1793 0034 8788      		ldd r8,Z+23
 1794 0036 908C      		ldd r9,Z+24
 1795               	.LVL140:
 1796               	.LBB341:
 1797               	.LBB342:
 1798               		.loc 3 465 0
 1799 0038 8219      		sub r24,r2
 1800 003a 9309      		sbc r25,r3
 1801               	.LBE342:
 1802               	.LBE341:
 638:../../os/rt/src/chvt.c **** 
 639:../../os/rt/src/chvt.c ****   /* Interval between the last time stamp and current time used for a new
 640:../../os/rt/src/chvt.c ****      time stamp. Note that this fails if the interval is larger than a
 641:../../os/rt/src/chvt.c ****      systime_t type.*/
 642:../../os/rt/src/chvt.c ****   stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 1803               		.loc 1 642 0
 1804 003c 9C01      		movw r18,r24
 1805 003e 40E0      		ldi r20,0
 1806 0040 50E0      		ldi r21,0
 1807 0042 60E0      		ldi r22,0
 1808 0044 70E0      		ldi r23,0
 1809 0046 80E0      		ldi r24,0
 1810 0048 90E0      		ldi r25,0
 1811 004a 5101      		movw r10,r2
 1812 004c 6201      		movw r12,r4
 1813 004e 7301      		movw r14,r6
 1814 0050 8401      		movw r16,r8
 1815 0052 0E94 0000 		call __adddi3
 1816               	.LVL141:
 643:../../os/rt/src/chvt.c **** 
 644:../../os/rt/src/chvt.c ****   chDbgAssert(oip->vtlist.laststamp <= stamp, "wrapped");
 645:../../os/rt/src/chvt.c **** 
 646:../../os/rt/src/chvt.c ****   /* Storing the new stamp.*/
 647:../../os/rt/src/chvt.c ****   oip->vtlist.laststamp = stamp;
 1817               		.loc 1 647 0
 1818 0056 218B      		std Z+17,r18
 1819 0058 328B      		std Z+18,r19
 1820 005a 438B      		std Z+19,r20
 1821 005c 548B      		std Z+20,r21
 1822 005e 658B      		std Z+21,r22
 1823 0060 768B      		std Z+22,r23
 1824 0062 878B      		std Z+23,r24
 1825 0064 908F      		std Z+24,r25
 1826               	/* epilogue start */
 648:../../os/rt/src/chvt.c **** 
 649:../../os/rt/src/chvt.c ****   return stamp;
 650:../../os/rt/src/chvt.c **** }
 1827               		.loc 1 650 0
 1828 0066 1F91      		pop r17
 1829 0068 0F91      		pop r16
 1830 006a FF90      		pop r15
 1831 006c EF90      		pop r14
 1832 006e DF90      		pop r13
 1833 0070 CF90      		pop r12
 1834 0072 BF90      		pop r11
 1835 0074 AF90      		pop r10
 1836 0076 9F90      		pop r9
 1837 0078 8F90      		pop r8
 1838 007a 7F90      		pop r7
 1839 007c 6F90      		pop r6
 1840 007e 5F90      		pop r5
 1841 0080 4F90      		pop r4
 1842 0082 3F90      		pop r3
 1843 0084 2F90      		pop r2
 1844               	.LVL142:
 1845 0086 0895      		ret
 1846               		.cfi_endproc
 1847               	.LFE203:
 1849               		.section	.text.chVTResetTimeStampI,"ax",@progbits
 1850               	.global	chVTResetTimeStampI
 1852               	chVTResetTimeStampI:
 1853               	.LFB204:
 651:../../os/rt/src/chvt.c **** 
 652:../../os/rt/src/chvt.c **** /**
 653:../../os/rt/src/chvt.c ****  * @brief   Resets and re-synchronizes the time stamps monotonic counter.
 654:../../os/rt/src/chvt.c ****  *
 655:../../os/rt/src/chvt.c ****  * @iclass
 656:../../os/rt/src/chvt.c ****  */
 657:../../os/rt/src/chvt.c **** void chVTResetTimeStampI(void) {
 1854               		.loc 1 657 0
 1855               		.cfi_startproc
 1856 0000 0F93      		push r16
 1857               	.LCFI76:
 1858               		.cfi_def_cfa_offset 3
 1859               		.cfi_offset 16, -2
 1860 0002 1F93      		push r17
 1861               	.LCFI77:
 1862               		.cfi_def_cfa_offset 4
 1863               		.cfi_offset 17, -3
 1864               	/* prologue: function */
 1865               	/* frame size = 0 */
 1866               	/* stack size = 2 */
 1867               	.L__stack_usage = 2
 1868               	.LBB343:
 1869               	.LBB344:
 1870               	.LBB345:
 1871               		.loc 4 113 0
 1872 0004 0E94 0000 		call stGetCounter
 1873               	.LVL143:
 1874               	.LBE345:
 1875               	.LBE344:
 1876               	.LBE343:
 658:../../os/rt/src/chvt.c **** 
 659:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 660:../../os/rt/src/chvt.c **** 
 661:../../os/rt/src/chvt.c ****   currcore->vtlist.laststamp = (systimestamp_t)chVTGetSystemTimeX();
 1877               		.loc 1 661 0
 1878 0008 8C01      		movw r16,r24
 1879 000a E0E0      		ldi r30,lo8(ch0)
 1880 000c F0E0      		ldi r31,hi8(ch0)
 1881 000e 818B      		std Z+17,r24
 1882 0010 128B      		std Z+18,r17
 1883 0012 138A      		std Z+19,__zero_reg__
 1884 0014 148A      		std Z+20,__zero_reg__
 1885 0016 158A      		std Z+21,__zero_reg__
 1886 0018 168A      		std Z+22,__zero_reg__
 1887 001a 178A      		std Z+23,__zero_reg__
 1888 001c 108E      		std Z+24,__zero_reg__
 1889               	/* epilogue start */
 662:../../os/rt/src/chvt.c **** }
 1890               		.loc 1 662 0
 1891 001e 1F91      		pop r17
 1892 0020 0F91      		pop r16
 1893 0022 0895      		ret
 1894               		.cfi_endproc
 1895               	.LFE204:
 1897               		.text
 1898               	.Letext0:
 1899               		.file 5 "/usr/lib/avr/include/stdint.h"
 1900               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1901               		.file 7 "../../os/rt/include/chearly.h"
 1902               		.file 8 "../../os/rt/include/chobjects.h"
 1903               		.file 9 "../../os/rt/include/chrfcu.h"
 1904               		.file 10 "../../os/rt/include/chdebug.h"
 1905               		.file 11 "../../os/common/ports/AVR/chcore.h"
 1906               		.file 12 "../../os/rt/include/chsem.h"
 1907               		.file 13 "../../os/rt/include/chmtx.h"
 1908               		.file 14 "../../os/rt/include/chsys.h"
 1909               		.file 15 "../../os/rt/include/chregistry.h"
 1910               		.file 16 "../../os/oslib/include/chmemcore.h"
 1911               		.file 17 "../../os/rt/include/chvt.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chvt.c
     /tmp/ccxAvcSQ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxAvcSQ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxAvcSQ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxAvcSQ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxAvcSQ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxAvcSQ.s:12     .text.vt_insert_first.constprop.5:0000000000000000 vt_insert_first.constprop.5
     /tmp/ccxAvcSQ.s:286    .text.vt_set_alarm:0000000000000000 vt_set_alarm
     /tmp/ccxAvcSQ.s:492    .text.vt_enqueue.constprop.4:0000000000000000 vt_enqueue.constprop.4
     /tmp/ccxAvcSQ.s:763    .text.chVTDoSetI:0000000000000000 chVTDoSetI
     /tmp/ccxAvcSQ.s:807    .text.chVTDoSetContinuousI:0000000000000000 chVTDoSetContinuousI
     /tmp/ccxAvcSQ.s:851    .text.chVTDoResetI:0000000000000000 chVTDoResetI
     /tmp/ccxAvcSQ.s:1073   .text.chVTGetRemainingIntervalI:0000000000000000 chVTGetRemainingIntervalI
     /tmp/ccxAvcSQ.s:1218   .text.chVTDoTickI:0000000000000000 chVTDoTickI
     /tmp/ccxAvcSQ.s:1702   .text.chVTGetTimeStampI:0000000000000000 chVTGetTimeStampI
     /tmp/ccxAvcSQ.s:1852   .text.chVTResetTimeStampI:0000000000000000 chVTResetTimeStampI

UNDEFINED SYMBOLS
ch0
stStartAlarm
stSetAlarm
stGetCounter
chRFCUCollectFaultsI
stStopAlarm
__adddi3
