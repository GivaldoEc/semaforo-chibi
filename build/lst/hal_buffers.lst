   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ibqObjectInit,"ax",@progbits
  11               	.global	ibqObjectInit
  13               	ibqObjectInit:
  14               	.LFB243:
  15               		.file 1 "../../os/hal/src/hal_buffers.c"
   1:../../os/hal/src/hal_buffers.c **** /*
   2:../../os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/src/hal_buffers.c **** 
   4:../../os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:../../os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:../../os/hal/src/hal_buffers.c **** 
   8:../../os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/src/hal_buffers.c **** 
  10:../../os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:../../os/hal/src/hal_buffers.c ****     limitations under the License.
  15:../../os/hal/src/hal_buffers.c **** */
  16:../../os/hal/src/hal_buffers.c **** 
  17:../../os/hal/src/hal_buffers.c **** /**
  18:../../os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:../../os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:../../os/hal/src/hal_buffers.c ****  *
  21:../../os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:../../os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:../../os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:../../os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:../../os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:../../os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:../../os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:../../os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:../../os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:../../os/hal/src/hal_buffers.c ****  *            thread side and the reader is the ISR side.
  32:../../os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:../../os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:../../os/hal/src/hal_buffers.c ****  *            together.
  35:../../os/hal/src/hal_buffers.c ****  *          .
  36:../../os/hal/src/hal_buffers.c ****  * @{
  37:../../os/hal/src/hal_buffers.c ****  */
  38:../../os/hal/src/hal_buffers.c **** 
  39:../../os/hal/src/hal_buffers.c **** #include <string.h>
  40:../../os/hal/src/hal_buffers.c **** 
  41:../../os/hal/src/hal_buffers.c **** #include "hal.h"
  42:../../os/hal/src/hal_buffers.c **** 
  43:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:../../os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:../../os/hal/src/hal_buffers.c **** 
  47:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:../../os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:../../os/hal/src/hal_buffers.c **** 
  51:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:../../os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:../../os/hal/src/hal_buffers.c **** 
  55:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:../../os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:../../os/hal/src/hal_buffers.c **** 
  59:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:../../os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:../../os/hal/src/hal_buffers.c **** 
  63:../../os/hal/src/hal_buffers.c **** /**
  64:../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:../../os/hal/src/hal_buffers.c ****  *
  66:../../os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
  68:../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  69:../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  70:../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  71:../../os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  72:../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  73:../../os/hal/src/hal_buffers.c ****  *
  74:../../os/hal/src/hal_buffers.c ****  * @init
  75:../../os/hal/src/hal_buffers.c ****  */
  76:../../os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
  77:../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t infy, void *link) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c FC01      		movw r30,r24
  48               	.LVL1:
  49               	.LBB204:
  50               	.LBB205:
  51               	.LBB206:
  52               	.LBB207:
  53               	.LBB208:
  54               		.file 2 "../../os/rt/include/chlists.h"
   1:../../os/rt/include/chlists.h **** /*
   2:../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chlists.h **** 
   5:../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chlists.h **** 
   7:../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chlists.h **** 
  11:../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chlists.h **** 
  16:../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chlists.h **** */
  19:../../os/rt/include/chlists.h **** 
  20:../../os/rt/include/chlists.h **** /**
  21:../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../os/rt/include/chlists.h ****  *
  24:../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../os/rt/include/chlists.h ****  * @{
  26:../../os/rt/include/chlists.h ****  */
  27:../../os/rt/include/chlists.h **** 
  28:../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../os/rt/include/chlists.h **** 
  31:../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../os/rt/include/chlists.h **** 
  35:../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../os/rt/include/chlists.h **** 
  39:../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../os/rt/include/chlists.h **** 
  43:../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../os/rt/include/chlists.h **** 
  47:../../os/rt/include/chlists.h **** /**
  48:../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../os/rt/include/chlists.h ****  */
  50:../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../os/rt/include/chlists.h **** 
  52:../../os/rt/include/chlists.h **** /**
  53:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../os/rt/include/chlists.h ****  *          and element.
  55:../../os/rt/include/chlists.h ****  */
  56:../../os/rt/include/chlists.h **** struct ch_list {
  57:../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../os/rt/include/chlists.h **** };
  59:../../os/rt/include/chlists.h **** 
  60:../../os/rt/include/chlists.h **** /**
  61:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../os/rt/include/chlists.h ****  */
  63:../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../os/rt/include/chlists.h **** 
  65:../../os/rt/include/chlists.h **** /**
  66:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../os/rt/include/chlists.h ****  *          and element.
  68:../../os/rt/include/chlists.h ****  */
  69:../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../os/rt/include/chlists.h **** };
  73:../../os/rt/include/chlists.h **** 
  74:../../os/rt/include/chlists.h **** /**
  75:../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../os/rt/include/chlists.h ****  *          header and element.
  77:../../os/rt/include/chlists.h ****  */
  78:../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../os/rt/include/chlists.h **** 
  80:../../os/rt/include/chlists.h **** /**
  81:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../os/rt/include/chlists.h ****  */
  85:../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../os/rt/include/chlists.h **** };
  90:../../os/rt/include/chlists.h **** 
  91:../../os/rt/include/chlists.h **** /**
  92:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../os/rt/include/chlists.h ****  *          header and element.
  94:../../os/rt/include/chlists.h ****  */
  95:../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../os/rt/include/chlists.h **** 
  97:../../os/rt/include/chlists.h **** /**
  98:../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../os/rt/include/chlists.h ****  */
 100:../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../os/rt/include/chlists.h **** };
 105:../../os/rt/include/chlists.h **** 
 106:../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../os/rt/include/chlists.h **** 
 110:../../os/rt/include/chlists.h **** /**
 111:../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../os/rt/include/chlists.h ****  *
 115:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../os/rt/include/chlists.h ****  */
 117:../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../os/rt/include/chlists.h **** 
 119:../../os/rt/include/chlists.h **** /**
 120:../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../os/rt/include/chlists.h ****  *
 124:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../os/rt/include/chlists.h ****  */
 126:../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../os/rt/include/chlists.h ****     ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../os/rt/include/chlists.h **** 
 129:../../os/rt/include/chlists.h **** /*===========================================================================*/
 130:../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 131:../../os/rt/include/chlists.h **** /*===========================================================================*/
 132:../../os/rt/include/chlists.h **** 
 133:../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 134:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 135:../../os/rt/include/chlists.h **** extern "C" {
 136:../../os/rt/include/chlists.h **** #endif
 137:../../os/rt/include/chlists.h **** 
 138:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 139:../../os/rt/include/chlists.h **** }
 140:../../os/rt/include/chlists.h **** #endif
 141:../../os/rt/include/chlists.h **** 
 142:../../os/rt/include/chlists.h **** /*===========================================================================*/
 143:../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 144:../../os/rt/include/chlists.h **** /*===========================================================================*/
 145:../../os/rt/include/chlists.h **** 
 146:../../os/rt/include/chlists.h **** /**
 147:../../os/rt/include/chlists.h ****  * @brief   List initialization.
 148:../../os/rt/include/chlists.h ****  *
 149:../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 150:../../os/rt/include/chlists.h ****  *
 151:../../os/rt/include/chlists.h ****  * @notapi
 152:../../os/rt/include/chlists.h ****  */
 153:../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 154:../../os/rt/include/chlists.h **** 
 155:../../os/rt/include/chlists.h ****   lp->next = lp;
 156:../../os/rt/include/chlists.h **** }
 157:../../os/rt/include/chlists.h **** 
 158:../../os/rt/include/chlists.h **** /**
 159:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 160:../../os/rt/include/chlists.h ****  *
 161:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 162:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 163:../../os/rt/include/chlists.h ****  *
 164:../../os/rt/include/chlists.h ****  * @notapi
 165:../../os/rt/include/chlists.h ****  */
 166:../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 167:../../os/rt/include/chlists.h **** 
 168:../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 169:../../os/rt/include/chlists.h **** }
 170:../../os/rt/include/chlists.h **** 
 171:../../os/rt/include/chlists.h **** /**
 172:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 173:../../os/rt/include/chlists.h ****  *
 174:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 175:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 176:../../os/rt/include/chlists.h ****  *
 177:../../os/rt/include/chlists.h ****  * @notapi
 178:../../os/rt/include/chlists.h ****  */
 179:../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 180:../../os/rt/include/chlists.h **** 
 181:../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 182:../../os/rt/include/chlists.h **** }
 183:../../os/rt/include/chlists.h **** 
 184:../../os/rt/include/chlists.h **** /**
 185:../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 186:../../os/rt/include/chlists.h ****  *
 187:../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 188:../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 189:../../os/rt/include/chlists.h ****  *
 190:../../os/rt/include/chlists.h ****  * @notapi
 191:../../os/rt/include/chlists.h ****  */
 192:../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 193:../../os/rt/include/chlists.h **** 
 194:../../os/rt/include/chlists.h ****   p->next = lp->next;
 195:../../os/rt/include/chlists.h ****   lp->next = p;
 196:../../os/rt/include/chlists.h **** }
 197:../../os/rt/include/chlists.h **** 
 198:../../os/rt/include/chlists.h **** /**
 199:../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 200:../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 201:../../os/rt/include/chlists.h ****  *
 202:../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 203:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 204:../../os/rt/include/chlists.h ****  *
 205:../../os/rt/include/chlists.h ****  * @notapi
 206:../../os/rt/include/chlists.h ****  */
 207:../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 208:../../os/rt/include/chlists.h **** 
 209:../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 210:../../os/rt/include/chlists.h ****   lp->next = p->next;
 211:../../os/rt/include/chlists.h **** 
 212:../../os/rt/include/chlists.h ****   return p;
 213:../../os/rt/include/chlists.h **** }
 214:../../os/rt/include/chlists.h **** 
 215:../../os/rt/include/chlists.h **** /**
 216:../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 217:../../os/rt/include/chlists.h ****  *
 218:../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 219:../../os/rt/include/chlists.h ****  *
 220:../../os/rt/include/chlists.h ****  * @notapi
 221:../../os/rt/include/chlists.h ****  */
 222:../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 223:../../os/rt/include/chlists.h **** 
 224:../../os/rt/include/chlists.h ****   qp->next = qp;
  55               		.loc 2 224 0
  56 000e 9183      		std Z+1,r25
  57 0010 8083      		st Z,r24
 225:../../os/rt/include/chlists.h ****   qp->prev = qp;
  58               		.loc 2 225 0
  59 0012 9383      		std Z+3,r25
  60 0014 8283      		std Z+2,r24
  61               	.LVL2:
  62               	.LBE208:
  63               	.LBE207:
  64               	.LBE206:
  65               	.LBE205:
  66               	.LBE204:
  78:../../os/hal/src/hal_buffers.c **** 
  79:../../os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:../../os/hal/src/hal_buffers.c **** 
  81:../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:../../os/hal/src/hal_buffers.c ****   ibqp->suspended = suspended;
  67               		.loc 1 82 0
  68 0016 6483      		std Z+4,r22
  83:../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
  69               		.loc 1 83 0
  70 0018 1682      		std Z+6,__zero_reg__
  71 001a 1582      		std Z+5,__zero_reg__
  84:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  72               		.loc 1 84 0
  73 001c 5287      		std Z+10,r21
  74 001e 4187      		std Z+9,r20
  85:../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = bp;
  75               		.loc 1 85 0
  76 0020 5087      		std Z+8,r21
  77 0022 4783      		std Z+7,r20
  86:../../os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  78               		.loc 1 86 0
  79 0024 2E5F      		subi r18,-2
  80 0026 3F4F      		sbci r19,-1
  81               	.LVL3:
  82 0028 209F      		mul r18,r16
  83 002a C001      		movw r24,r0
  84 002c 219F      		mul r18,r17
  85 002e 900D      		add r25,r0
  86 0030 309F      		mul r19,r16
  87 0032 900D      		add r25,r0
  88 0034 1124      		clr r1
  89               	.LVL4:
  90 0036 840F      		add r24,r20
  91 0038 951F      		adc r25,r21
  92 003a 9487      		std Z+12,r25
  93 003c 8387      		std Z+11,r24
  87:../../os/hal/src/hal_buffers.c ****   ibqp->bsize     = size + sizeof (size_t);
  94               		.loc 1 87 0
  95 003e 3687      		std Z+14,r19
  96 0040 2587      		std Z+13,r18
  88:../../os/hal/src/hal_buffers.c ****   ibqp->bn        = n;
  97               		.loc 1 88 0
  98 0042 108B      		std Z+16,r17
  99 0044 0787      		std Z+15,r16
  89:../../os/hal/src/hal_buffers.c ****   ibqp->buffers   = bp;
 100               		.loc 1 89 0
 101 0046 528B      		std Z+18,r21
 102 0048 418B      		std Z+17,r20
  90:../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 103               		.loc 1 90 0
 104 004a 148A      		std Z+20,__zero_reg__
 105 004c 138A      		std Z+19,__zero_reg__
  91:../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 106               		.loc 1 91 0
 107 004e 168A      		std Z+22,__zero_reg__
 108 0050 158A      		std Z+21,__zero_reg__
  92:../../os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
 109               		.loc 1 92 0
 110 0052 F08E      		std Z+24,r15
 111 0054 E78A      		std Z+23,r14
  93:../../os/hal/src/hal_buffers.c ****   ibqp->link      = link;
 112               		.loc 1 93 0
 113 0056 D28E      		std Z+26,r13
 114 0058 C18E      		std Z+25,r12
 115               	/* epilogue start */
  94:../../os/hal/src/hal_buffers.c **** }
 116               		.loc 1 94 0
 117 005a 1F91      		pop r17
 118 005c 0F91      		pop r16
 119               	.LVL5:
 120 005e FF90      		pop r15
 121 0060 EF90      		pop r14
 122               	.LVL6:
 123 0062 DF90      		pop r13
 124 0064 CF90      		pop r12
 125               	.LVL7:
 126 0066 0895      		ret
 127               		.cfi_endproc
 128               	.LFE243:
 130               		.section	.text.ibqResetI,"ax",@progbits
 131               	.global	ibqResetI
 133               	ibqResetI:
 134               	.LFB244:
  95:../../os/hal/src/hal_buffers.c **** 
  96:../../os/hal/src/hal_buffers.c **** /**
  97:../../os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  98:../../os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  99:../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 100:../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 101:../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 102:../../os/hal/src/hal_buffers.c ****  *
 103:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 104:../../os/hal/src/hal_buffers.c ****  *
 105:../../os/hal/src/hal_buffers.c ****  * @iclass
 106:../../os/hal/src/hal_buffers.c ****  */
 107:../../os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 135               		.loc 1 107 0
 136               		.cfi_startproc
 137               	.LVL8:
 138               	/* prologue: function */
 139               	/* frame size = 0 */
 140               	/* stack size = 0 */
 141               	.L__stack_usage = 0
 142 0000 FC01      		movw r30,r24
 108:../../os/hal/src/hal_buffers.c **** 
 109:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 110:../../os/hal/src/hal_buffers.c **** 
 111:../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
 143               		.loc 1 111 0
 144 0002 1682      		std Z+6,__zero_reg__
 145 0004 1582      		std Z+5,__zero_reg__
 112:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 146               		.loc 1 112 0
 147 0006 8189      		ldd r24,Z+17
 148 0008 9289      		ldd r25,Z+18
 149               	.LVL9:
 150 000a 9287      		std Z+10,r25
 151 000c 8187      		std Z+9,r24
 113:../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = ibqp->buffers;
 152               		.loc 1 113 0
 153 000e 9087      		std Z+8,r25
 154 0010 8783      		std Z+7,r24
 114:../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 155               		.loc 1 114 0
 156 0012 148A      		std Z+20,__zero_reg__
 157 0014 138A      		std Z+19,__zero_reg__
 115:../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 158               		.loc 1 115 0
 159 0016 168A      		std Z+22,__zero_reg__
 160 0018 158A      		std Z+21,__zero_reg__
 161               	.LVL10:
 162               	.LBB209:
 163               	.LBB210:
 164               		.file 3 "../../os/hal/osal/rt-nil/osal.h"
   1:../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/osal.h **** 
   4:../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/osal.h **** 
   8:../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/osal.h **** 
  10:../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/osal.h **** */
  16:../../os/hal/osal/rt-nil/osal.h **** 
  17:../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../os/hal/osal/rt-nil/osal.h **** 
  25:../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../os/hal/osal/rt-nil/osal.h **** 
  28:../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../os/hal/osal/rt-nil/osal.h **** 
  32:../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../os/hal/osal/rt-nil/osal.h **** 
  34:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/osal.h **** 
  38:../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../os/hal/osal/rt-nil/osal.h **** 
  46:../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../os/hal/osal/rt-nil/osal.h **** 
  50:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../os/hal/osal/rt-nil/osal.h **** 
  54:../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../os/hal/osal/rt-nil/osal.h **** 
  65:../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../os/hal/osal/rt-nil/osal.h **** 
  75:../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../os/hal/osal/rt-nil/osal.h **** 
  84:../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../os/hal/osal/rt-nil/osal.h **** 
  93:../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../os/hal/osal/rt-nil/osal.h **** 
  98:../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../os/hal/osal/rt-nil/osal.h **** 
 108:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../os/hal/osal/rt-nil/osal.h **** 
 112:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../os/hal/osal/rt-nil/osal.h **** 
 116:../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../os/hal/osal/rt-nil/osal.h **** 
 122:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../os/hal/osal/rt-nil/osal.h **** 
 127:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../os/hal/osal/rt-nil/osal.h **** 
 131:../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../os/hal/osal/rt-nil/osal.h **** 
 138:../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../os/hal/osal/rt-nil/osal.h **** 
 145:../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../os/hal/osal/rt-nil/osal.h **** 
 152:../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../os/hal/osal/rt-nil/osal.h **** 
 159:../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../os/hal/osal/rt-nil/osal.h **** 
 168:../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../os/hal/osal/rt-nil/osal.h **** 
 175:../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../os/hal/osal/rt-nil/osal.h **** 
 182:../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../os/hal/osal/rt-nil/osal.h **** 
 189:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../os/hal/osal/rt-nil/osal.h **** 
 200:../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../os/hal/osal/rt-nil/osal.h **** 
 207:../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../os/hal/osal/rt-nil/osal.h **** };
 220:../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../os/hal/osal/rt-nil/osal.h **** 
 222:../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../os/hal/osal/rt-nil/osal.h **** 
 234:../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../os/hal/osal/rt-nil/osal.h **** 
 247:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../os/hal/osal/rt-nil/osal.h **** 
 251:../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../os/hal/osal/rt-nil/osal.h **** 
 271:../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../os/hal/osal/rt-nil/osal.h **** 
 283:../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../os/hal/osal/rt-nil/osal.h **** 
 289:../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../os/hal/osal/rt-nil/osal.h **** 
 296:../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../os/hal/osal/rt-nil/osal.h **** 
 305:../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../os/hal/osal/rt-nil/osal.h **** 
 311:../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../os/hal/osal/rt-nil/osal.h **** 
 317:../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../os/hal/osal/rt-nil/osal.h **** 
 326:../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../os/hal/osal/rt-nil/osal.h **** 
 345:../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../os/hal/osal/rt-nil/osal.h **** 
 360:../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../os/hal/osal/rt-nil/osal.h **** 
 375:../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../os/hal/osal/rt-nil/osal.h **** 
 390:../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../os/hal/osal/rt-nil/osal.h **** 
 405:../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../os/hal/osal/rt-nil/osal.h **** 
 421:../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../os/hal/osal/rt-nil/osal.h **** 
 438:../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../os/hal/osal/rt-nil/osal.h **** 
 452:../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../os/hal/osal/rt-nil/osal.h **** 
 467:../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../os/hal/osal/rt-nil/osal.h **** 
 483:../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../os/hal/osal/rt-nil/osal.h **** 
 496:../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../os/hal/osal/rt-nil/osal.h **** 
 510:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../os/hal/osal/rt-nil/osal.h **** 
 514:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../os/hal/osal/rt-nil/osal.h **** 
 518:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../os/hal/osal/rt-nil/osal.h **** }
 520:../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../os/hal/osal/rt-nil/osal.h **** 
 522:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../os/hal/osal/rt-nil/osal.h **** 
 526:../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../os/hal/osal/rt-nil/osal.h **** 
 533:../../os/hal/osal/rt-nil/osal.h **** }
 534:../../os/hal/osal/rt-nil/osal.h **** 
 535:../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../os/hal/osal/rt-nil/osal.h **** 
 544:../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../os/hal/osal/rt-nil/osal.h **** }
 546:../../os/hal/osal/rt-nil/osal.h **** 
 547:../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../os/hal/osal/rt-nil/osal.h **** 
 554:../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../os/hal/osal/rt-nil/osal.h **** }
 556:../../os/hal/osal/rt-nil/osal.h **** 
 557:../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../os/hal/osal/rt-nil/osal.h **** 
 564:../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../os/hal/osal/rt-nil/osal.h **** }
 566:../../os/hal/osal/rt-nil/osal.h **** 
 567:../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../os/hal/osal/rt-nil/osal.h **** 
 575:../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../os/hal/osal/rt-nil/osal.h **** }
 577:../../os/hal/osal/rt-nil/osal.h **** 
 578:../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../os/hal/osal/rt-nil/osal.h **** 
 586:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../os/hal/osal/rt-nil/osal.h **** }
 588:../../os/hal/osal/rt-nil/osal.h **** 
 589:../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../os/hal/osal/rt-nil/osal.h **** 
 597:../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../os/hal/osal/rt-nil/osal.h **** }
 599:../../os/hal/osal/rt-nil/osal.h **** 
 600:../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../os/hal/osal/rt-nil/osal.h **** 
 608:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../os/hal/osal/rt-nil/osal.h **** }
 610:../../os/hal/osal/rt-nil/osal.h **** 
 611:../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../os/hal/osal/rt-nil/osal.h **** 
 626:../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../os/hal/osal/rt-nil/osal.h **** }
 628:../../os/hal/osal/rt-nil/osal.h **** 
 629:../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../os/hal/osal/rt-nil/osal.h **** 
 640:../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../os/hal/osal/rt-nil/osal.h **** }
 642:../../os/hal/osal/rt-nil/osal.h **** 
 643:../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../os/hal/osal/rt-nil/osal.h **** 
 655:../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../os/hal/osal/rt-nil/osal.h **** }
 657:../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../os/hal/osal/rt-nil/osal.h **** 
 659:../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../os/hal/osal/rt-nil/osal.h **** 
 667:../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../os/hal/osal/rt-nil/osal.h **** }
 669:../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../os/hal/osal/rt-nil/osal.h **** 
 671:../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../os/hal/osal/rt-nil/osal.h **** 
 682:../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 683:../../os/hal/osal/rt-nil/osal.h **** }
 684:../../os/hal/osal/rt-nil/osal.h **** 
 685:../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../os/hal/osal/rt-nil/osal.h **** 
 700:../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../os/hal/osal/rt-nil/osal.h **** }
 702:../../os/hal/osal/rt-nil/osal.h **** 
 703:../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../os/hal/osal/rt-nil/osal.h **** 
 715:../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../os/hal/osal/rt-nil/osal.h **** }
 717:../../os/hal/osal/rt-nil/osal.h **** 
 718:../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../os/hal/osal/rt-nil/osal.h **** 
 729:../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../os/hal/osal/rt-nil/osal.h **** }
 731:../../os/hal/osal/rt-nil/osal.h **** 
 732:../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../os/hal/osal/rt-nil/osal.h **** 
 750:../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../os/hal/osal/rt-nil/osal.h **** }
 752:../../os/hal/osal/rt-nil/osal.h **** 
 753:../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../os/hal/osal/rt-nil/osal.h **** 
 767:../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../os/hal/osal/rt-nil/osal.h **** }
 769:../../os/hal/osal/rt-nil/osal.h **** 
 770:../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 783:../../os/hal/osal/rt-nil/osal.h **** 
 784:../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
 785:../../os/hal/osal/rt-nil/osal.h **** }
 786:../../os/hal/osal/rt-nil/osal.h **** 
 787:../../os/hal/osal/rt-nil/osal.h **** /**
 788:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 789:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 790:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 791:../../os/hal/osal/rt-nil/osal.h ****  *
 792:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 793:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 794:../../os/hal/osal/rt-nil/osal.h ****  *
 795:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 796:../../os/hal/osal/rt-nil/osal.h ****  */
 797:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 798:../../os/hal/osal/rt-nil/osal.h **** 
 799:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800:../../os/hal/osal/rt-nil/osal.h **** }
 801:../../os/hal/osal/rt-nil/osal.h **** 
 802:../../os/hal/osal/rt-nil/osal.h **** /**
 803:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 804:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 805:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 806:../../os/hal/osal/rt-nil/osal.h ****  *
 807:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 808:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 809:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 810:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 811:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 812:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 813:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 814:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 815:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 816:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 817:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 818:../../os/hal/osal/rt-nil/osal.h ****  *
 819:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 820:../../os/hal/osal/rt-nil/osal.h ****  */
 821:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 822:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 823:../../os/hal/osal/rt-nil/osal.h **** 
 824:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 825:../../os/hal/osal/rt-nil/osal.h **** }
 826:../../os/hal/osal/rt-nil/osal.h **** 
 827:../../os/hal/osal/rt-nil/osal.h **** /**
 828:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 829:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 830:../../os/hal/osal/rt-nil/osal.h ****  *          ISR context.
 831:../../os/hal/osal/rt-nil/osal.h ****  *
 832:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 833:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 834:../../os/hal/osal/rt-nil/osal.h ****  *
 835:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 836:../../os/hal/osal/rt-nil/osal.h ****  */
 837:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 838:../../os/hal/osal/rt-nil/osal.h **** 
 839:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeI(trp, msg);
 840:../../os/hal/osal/rt-nil/osal.h **** }
 841:../../os/hal/osal/rt-nil/osal.h **** 
 842:../../os/hal/osal/rt-nil/osal.h **** /**
 843:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 844:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 845:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 846:../../os/hal/osal/rt-nil/osal.h ****  *
 847:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 848:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 849:../../os/hal/osal/rt-nil/osal.h ****  *
 850:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 851:../../os/hal/osal/rt-nil/osal.h ****  */
 852:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 853:../../os/hal/osal/rt-nil/osal.h **** 
 854:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeS(trp, msg);
 855:../../os/hal/osal/rt-nil/osal.h **** }
 856:../../os/hal/osal/rt-nil/osal.h **** 
 857:../../os/hal/osal/rt-nil/osal.h **** /**
 858:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes a threads queue object.
 859:../../os/hal/osal/rt-nil/osal.h ****  *
 860:../../os/hal/osal/rt-nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 861:../../os/hal/osal/rt-nil/osal.h ****  *
 862:../../os/hal/osal/rt-nil/osal.h ****  * @init
 863:../../os/hal/osal/rt-nil/osal.h ****  */
 864:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 865:../../os/hal/osal/rt-nil/osal.h **** 
 866:../../os/hal/osal/rt-nil/osal.h ****   chThdQueueObjectInit(tqp);
 867:../../os/hal/osal/rt-nil/osal.h **** }
 868:../../os/hal/osal/rt-nil/osal.h **** 
 869:../../os/hal/osal/rt-nil/osal.h **** /**
 870:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enqueues the caller thread.
 871:../../os/hal/osal/rt-nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 872:../../os/hal/osal/rt-nil/osal.h ****  *          dequeued or the specified timeouts expires.
 873:../../os/hal/osal/rt-nil/osal.h ****  *
 874:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 875:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 876:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 877:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 878:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 879:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 880:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 881:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 882:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 883:../../os/hal/osal/rt-nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 884:../../os/hal/osal/rt-nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 885:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 886:../../os/hal/osal/rt-nil/osal.h ****  *                      specified timeout or if the function has been
 887:../../os/hal/osal/rt-nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 888:../../os/hal/osal/rt-nil/osal.h ****  *                      specification.
 889:../../os/hal/osal/rt-nil/osal.h ****  *
 890:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 891:../../os/hal/osal/rt-nil/osal.h ****  */
 892:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 893:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 894:../../os/hal/osal/rt-nil/osal.h **** 
 895:../../os/hal/osal/rt-nil/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 896:../../os/hal/osal/rt-nil/osal.h **** }
 897:../../os/hal/osal/rt-nil/osal.h **** 
 898:../../os/hal/osal/rt-nil/osal.h **** /**
 899:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 900:../../os/hal/osal/rt-nil/osal.h ****  *
 901:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 902:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 903:../../os/hal/osal/rt-nil/osal.h ****  *
 904:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 905:../../os/hal/osal/rt-nil/osal.h ****  */
 906:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 907:../../os/hal/osal/rt-nil/osal.h **** 
 908:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueNextI(tqp, msg);
 909:../../os/hal/osal/rt-nil/osal.h **** }
 910:../../os/hal/osal/rt-nil/osal.h **** 
 911:../../os/hal/osal/rt-nil/osal.h **** /**
 912:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 913:../../os/hal/osal/rt-nil/osal.h ****  *
 914:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 915:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 916:../../os/hal/osal/rt-nil/osal.h ****  *
 917:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 918:../../os/hal/osal/rt-nil/osal.h ****  */
 919:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 920:../../os/hal/osal/rt-nil/osal.h **** 
 921:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueAllI(tqp, msg);
 165               		.loc 3 921 0
 166 001a 6EEF      		ldi r22,lo8(-2)
 167 001c 7FEF      		ldi r23,lo8(-1)
 168 001e CF01      		movw r24,r30
 169 0020 0C94 0000 		jmp chThdDequeueAllI
 170               	.LVL11:
 171               	.LBE210:
 172               	.LBE209:
 173               		.cfi_endproc
 174               	.LFE244:
 176               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 177               	.global	ibqGetEmptyBufferI
 179               	ibqGetEmptyBufferI:
 180               	.LFB245:
 116:../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 117:../../os/hal/src/hal_buffers.c **** }
 118:../../os/hal/src/hal_buffers.c **** 
 119:../../os/hal/src/hal_buffers.c **** /**
 120:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 121:../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 122:../../os/hal/src/hal_buffers.c ****  *
 123:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 124:../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 125:../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 126:../../os/hal/src/hal_buffers.c ****  *
 127:../../os/hal/src/hal_buffers.c ****  * @iclass
 128:../../os/hal/src/hal_buffers.c ****  */
 129:../../os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 181               		.loc 1 129 0
 182               		.cfi_startproc
 183               	.LVL12:
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 186               	/* stack size = 0 */
 187               	.L__stack_usage = 0
 188 0000 FC01      		movw r30,r24
 130:../../os/hal/src/hal_buffers.c **** 
 131:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 132:../../os/hal/src/hal_buffers.c **** 
 133:../../os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 189               		.loc 1 133 0
 190 0002 2781      		ldd r18,Z+7
 191 0004 3085      		ldd r19,Z+8
 192 0006 8185      		ldd r24,Z+9
 193 0008 9285      		ldd r25,Z+10
 194               	.LVL13:
 195 000a 2817      		cp r18,r24
 196 000c 3907      		cpc r19,r25
 197 000e 01F0      		breq .L10
 198               	.L5:
 134:../../os/hal/src/hal_buffers.c ****     return NULL;
 135:../../os/hal/src/hal_buffers.c ****   }
 136:../../os/hal/src/hal_buffers.c **** 
 137:../../os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 199               		.loc 1 137 0
 200 0010 C901      		movw r24,r18
 201 0012 0296      		adiw r24,2
 202               	/* epilogue start */
 138:../../os/hal/src/hal_buffers.c **** }
 203               		.loc 1 138 0
 204 0014 0895      		ret
 205               	.L10:
 133:../../os/hal/src/hal_buffers.c ****     return NULL;
 206               		.loc 1 133 0 discriminator 1
 207 0016 8581      		ldd r24,Z+5
 208 0018 9681      		ldd r25,Z+6
 209 001a 892B      		or r24,r25
 210 001c 01F0      		breq .L5
 134:../../os/hal/src/hal_buffers.c ****     return NULL;
 211               		.loc 1 134 0
 212 001e 90E0      		ldi r25,0
 213 0020 80E0      		ldi r24,0
 214 0022 0895      		ret
 215               		.cfi_endproc
 216               	.LFE245:
 218               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 219               	.global	ibqPostFullBufferI
 221               	ibqPostFullBufferI:
 222               	.LFB246:
 139:../../os/hal/src/hal_buffers.c **** 
 140:../../os/hal/src/hal_buffers.c **** /**
 141:../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 142:../../os/hal/src/hal_buffers.c ****  *
 143:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 144:../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 145:../../os/hal/src/hal_buffers.c ****  *
 146:../../os/hal/src/hal_buffers.c ****  * @iclass
 147:../../os/hal/src/hal_buffers.c ****  */
 148:../../os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 223               		.loc 1 148 0
 224               		.cfi_startproc
 225               	.LVL14:
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
 230 0000 FC01      		movw r30,r24
 149:../../os/hal/src/hal_buffers.c **** 
 150:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 151:../../os/hal/src/hal_buffers.c **** 
 152:../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 153:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 154:../../os/hal/src/hal_buffers.c **** 
 155:../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 156:../../os/hal/src/hal_buffers.c ****   *((size_t *)(void *)ibqp->bwrptr) = size;
 231               		.loc 1 156 0
 232 0002 A781      		ldd r26,Z+7
 233 0004 B085      		ldd r27,Z+8
 234 0006 1196      		adiw r26,1
 235 0008 7C93      		st X,r23
 236 000a 6E93      		st -X,r22
 157:../../os/hal/src/hal_buffers.c **** 
 158:../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 159:../../os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 237               		.loc 1 159 0
 238 000c 8581      		ldd r24,Z+5
 239 000e 9681      		ldd r25,Z+6
 240               	.LVL15:
 241 0010 0196      		adiw r24,1
 242 0012 9683      		std Z+6,r25
 243 0014 8583      		std Z+5,r24
 160:../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 244               		.loc 1 160 0
 245 0016 8585      		ldd r24,Z+13
 246 0018 9685      		ldd r25,Z+14
 247 001a 8A0F      		add r24,r26
 248 001c 9B1F      		adc r25,r27
 249 001e 9087      		std Z+8,r25
 250 0020 8783      		std Z+7,r24
 161:../../os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 251               		.loc 1 161 0
 252 0022 2385      		ldd r18,Z+11
 253 0024 3485      		ldd r19,Z+12
 254 0026 8217      		cp r24,r18
 255 0028 9307      		cpc r25,r19
 256 002a 00F0      		brlo .L12
 162:../../os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 257               		.loc 1 162 0
 258 002c 8189      		ldd r24,Z+17
 259 002e 9289      		ldd r25,Z+18
 260 0030 9087      		std Z+8,r25
 261 0032 8783      		std Z+7,r24
 262               	.L12:
 263               	.LVL16:
 264               	.LBB211:
 265               	.LBB212:
 908:../../os/hal/osal/rt-nil/osal.h **** }
 266               		.loc 3 908 0
 267 0034 70E0      		ldi r23,0
 268 0036 60E0      		ldi r22,0
 269               	.LVL17:
 270 0038 CF01      		movw r24,r30
 271 003a 0C94 0000 		jmp chThdDequeueNextI
 272               	.LVL18:
 273               	.LBE212:
 274               	.LBE211:
 275               		.cfi_endproc
 276               	.LFE246:
 278               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 279               	.global	ibqGetFullBufferTimeoutS
 281               	ibqGetFullBufferTimeoutS:
 282               	.LFB248:
 163:../../os/hal/src/hal_buffers.c ****   }
 164:../../os/hal/src/hal_buffers.c **** 
 165:../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 166:../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 167:../../os/hal/src/hal_buffers.c **** }
 168:../../os/hal/src/hal_buffers.c **** 
 169:../../os/hal/src/hal_buffers.c **** /**
 170:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 171:../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 172:../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 173:../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 174:../../os/hal/src/hal_buffers.c ****  *          is empty.
 175:../../os/hal/src/hal_buffers.c ****  *
 176:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 177:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 178:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 179:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 180:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 181:../../os/hal/src/hal_buffers.c ****  *                      .
 182:../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 183:../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 184:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 185:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 186:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 187:../../os/hal/src/hal_buffers.c ****  *
 188:../../os/hal/src/hal_buffers.c ****  * @api
 189:../../os/hal/src/hal_buffers.c ****  */
 190:../../os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 191:../../os/hal/src/hal_buffers.c ****                               sysinterval_t timeout) {
 192:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 193:../../os/hal/src/hal_buffers.c **** 
 194:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 195:../../os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 196:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 197:../../os/hal/src/hal_buffers.c **** 
 198:../../os/hal/src/hal_buffers.c ****   return msg;
 199:../../os/hal/src/hal_buffers.c **** }
 200:../../os/hal/src/hal_buffers.c **** 
 201:../../os/hal/src/hal_buffers.c ****   /**
 202:../../os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 203:../../os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 204:../../os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 205:../../os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 206:../../os/hal/src/hal_buffers.c ****    *          is empty.
 207:../../os/hal/src/hal_buffers.c ****    *
 208:../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 209:../../os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 210:../../os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 211:../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 212:../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 213:../../os/hal/src/hal_buffers.c ****    *                      .
 214:../../os/hal/src/hal_buffers.c ****    * @return              The operation status.
 215:../../os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 216:../../os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 217:../../os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset or has been put in
 218:../../os/hal/src/hal_buffers.c ****    *                      suspended state.
 219:../../os/hal/src/hal_buffers.c ****    *
 220:../../os/hal/src/hal_buffers.c ****    * @sclass
 221:../../os/hal/src/hal_buffers.c ****    */
 222:../../os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 223:../../os/hal/src/hal_buffers.c ****                                  sysinterval_t timeout) {
 283               		.loc 1 223 0
 284               		.cfi_startproc
 285               	.LVL19:
 286 0000 CF92      		push r12
 287               	.LCFI6:
 288               		.cfi_def_cfa_offset 3
 289               		.cfi_offset 12, -2
 290 0002 DF92      		push r13
 291               	.LCFI7:
 292               		.cfi_def_cfa_offset 4
 293               		.cfi_offset 13, -3
 294 0004 EF92      		push r14
 295               	.LCFI8:
 296               		.cfi_def_cfa_offset 5
 297               		.cfi_offset 14, -4
 298 0006 FF92      		push r15
 299               	.LCFI9:
 300               		.cfi_def_cfa_offset 6
 301               		.cfi_offset 15, -5
 302 0008 CF93      		push r28
 303               	.LCFI10:
 304               		.cfi_def_cfa_offset 7
 305               		.cfi_offset 28, -6
 306 000a DF93      		push r29
 307               	.LCFI11:
 308               		.cfi_def_cfa_offset 8
 309               		.cfi_offset 29, -7
 310               	/* prologue: function */
 311               	/* frame size = 0 */
 312               	/* stack size = 6 */
 313               	.L__stack_usage = 6
 314 000c EC01      		movw r28,r24
 315 000e 6A01      		movw r12,r20
 316 0010 7B01      		movw r14,r22
 224:../../os/hal/src/hal_buffers.c **** 
 225:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 226:../../os/hal/src/hal_buffers.c **** 
 227:../../os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 317               		.loc 1 227 0
 318 0012 00C0      		rjmp .L14
 319               	.LVL20:
 320               	.L16:
 321               	.LBB221:
 228:../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 322               		.loc 1 228 0
 323 0014 8C81      		ldd r24,Y+4
 324 0016 8111      		cpse r24,__zero_reg__
 325 0018 00C0      		rjmp .L17
 326               	.LVL21:
 327               	.LBB222:
 328               	.LBB223:
 895:../../os/hal/osal/rt-nil/osal.h **** }
 329               		.loc 3 895 0
 330 001a B701      		movw r22,r14
 331 001c A601      		movw r20,r12
 332 001e CE01      		movw r24,r28
 333 0020 0E94 0000 		call chThdEnqueueTimeoutS
 334               	.LVL22:
 335               	.LBE223:
 336               	.LBE222:
 229:../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 230:../../os/hal/src/hal_buffers.c ****     }
 231:../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 232:../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 337               		.loc 1 232 0
 338 0024 97FD      		sbrc r25,7
 339 0026 00C0      		rjmp .L13
 340               	.L14:
 341               	.LBE221:
 227:../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 342               		.loc 1 227 0
 343 0028 8D81      		ldd r24,Y+5
 344 002a 9E81      		ldd r25,Y+6
 345 002c 892B      		or r24,r25
 346 002e 01F0      		breq .L16
 347               	.LVL23:
 348               	.LBB224:
 349               	.LBB225:
 233:../../os/hal/src/hal_buffers.c ****        return msg;
 234:../../os/hal/src/hal_buffers.c ****     }
 235:../../os/hal/src/hal_buffers.c ****   }
 236:../../os/hal/src/hal_buffers.c **** 
 237:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 238:../../os/hal/src/hal_buffers.c **** 
 239:../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 240:../../os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 350               		.loc 1 240 0
 351 0030 E985      		ldd r30,Y+9
 352 0032 FA85      		ldd r31,Y+10
 353 0034 CF01      		movw r24,r30
 354 0036 0296      		adiw r24,2
 355 0038 9C8B      		std Y+20,r25
 356 003a 8B8B      		std Y+19,r24
 241:../../os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)(void *)ibqp->brdptr);
 357               		.loc 1 241 0
 358 003c 2081      		ld r18,Z
 359 003e 3181      		ldd r19,Z+1
 360 0040 820F      		add r24,r18
 361 0042 931F      		adc r25,r19
 362 0044 9E8B      		std Y+22,r25
 363 0046 8D8B      		std Y+21,r24
 364               	.LVL24:
 365 0048 90E0      		ldi r25,0
 366 004a 80E0      		ldi r24,0
 367               	.L13:
 368               	/* epilogue start */
 369               	.LBE225:
 370               	.LBE224:
 242:../../os/hal/src/hal_buffers.c **** 
 243:../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 244:../../os/hal/src/hal_buffers.c **** }
 371               		.loc 1 244 0
 372 004c DF91      		pop r29
 373 004e CF91      		pop r28
 374               	.LVL25:
 375 0050 FF90      		pop r15
 376 0052 EF90      		pop r14
 377 0054 DF90      		pop r13
 378 0056 CF90      		pop r12
 379 0058 0895      		ret
 380               	.LVL26:
 381               	.L17:
 382               	.LBB226:
 229:../../os/hal/src/hal_buffers.c ****     }
 383               		.loc 1 229 0
 384 005a 8EEF      		ldi r24,lo8(-2)
 385 005c 9FEF      		ldi r25,lo8(-1)
 386               	/* epilogue start */
 387               	.LBE226:
 388               		.loc 1 244 0
 389 005e DF91      		pop r29
 390 0060 CF91      		pop r28
 391               	.LVL27:
 392 0062 FF90      		pop r15
 393 0064 EF90      		pop r14
 394 0066 DF90      		pop r13
 395 0068 CF90      		pop r12
 396 006a 0895      		ret
 397               		.cfi_endproc
 398               	.LFE248:
 400               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 401               	.global	ibqGetFullBufferTimeout
 403               	ibqGetFullBufferTimeout:
 404               	.LFB247:
 191:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 405               		.loc 1 191 0
 406               		.cfi_startproc
 407               	.LVL28:
 408               	/* prologue: function */
 409               	/* frame size = 0 */
 410               	/* stack size = 0 */
 411               	.L__stack_usage = 0
 412               	.LBB227:
 413               	.LBB228:
 414               	.LBB229:
 415               	.LBB230:
 416               		.file 4 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 417               		.loc 4 430 0
 418               	/* #APP */
 419               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 420 0000 F894      		cli
 421               	 ;  0 "" 2
 422               	/* #NOAPP */
 423               	.LBE230:
 424               	.LBE229:
 425               	.LBE228:
 426               	.LBE227:
 195:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 427               		.loc 1 195 0
 428 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 429               	.LVL29:
 430               	.LBB231:
 431               	.LBB232:
 432               	.LBB233:
 433               	.LBB234:
 434               	.LBB235:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 435               		.loc 4 440 0
 436               	/* #APP */
 437               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 438 0006 7894      		sei
 439               	 ;  0 "" 2
 440               	/* epilogue start */
 441               	/* #NOAPP */
 442               	.LBE235:
 443               	.LBE234:
 444               	.LBE233:
 445               	.LBE232:
 446               	.LBE231:
 199:../../os/hal/src/hal_buffers.c **** 
 447               		.loc 1 199 0
 448 0008 0895      		ret
 449               		.cfi_endproc
 450               	.LFE247:
 452               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 453               	.global	ibqReleaseEmptyBuffer
 455               	ibqReleaseEmptyBuffer:
 456               	.LFB249:
 245:../../os/hal/src/hal_buffers.c **** 
 246:../../os/hal/src/hal_buffers.c **** /**
 247:../../os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 248:../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 249:../../os/hal/src/hal_buffers.c ****  *
 250:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 251:../../os/hal/src/hal_buffers.c ****  *
 252:../../os/hal/src/hal_buffers.c ****  * @api
 253:../../os/hal/src/hal_buffers.c ****  */
 254:../../os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 457               		.loc 1 254 0
 458               		.cfi_startproc
 459               	.LVL30:
 460               	/* prologue: function */
 461               	/* frame size = 0 */
 462               	/* stack size = 0 */
 463               	.L__stack_usage = 0
 464 0000 DC01      		movw r26,r24
 465               	.LBB236:
 466               	.LBB237:
 467               	.LBB238:
 468               	.LBB239:
 430:../../os/common/ports/AVR/chcore.h **** }
 469               		.loc 4 430 0
 470               	/* #APP */
 471               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 472 0002 F894      		cli
 473               	 ;  0 "" 2
 474               	.LVL31:
 475               	/* #NOAPP */
 476               	.LBE239:
 477               	.LBE238:
 478               	.LBE237:
 479               	.LBE236:
 480               	.LBB240:
 481               	.LBB241:
 255:../../os/hal/src/hal_buffers.c **** 
 256:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 257:../../os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 258:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 259:../../os/hal/src/hal_buffers.c **** }
 260:../../os/hal/src/hal_buffers.c **** 
 261:../../os/hal/src/hal_buffers.c ****   /**
 262:../../os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 263:../../os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 264:../../os/hal/src/hal_buffers.c ****    *
 265:../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 266:../../os/hal/src/hal_buffers.c ****    *
 267:../../os/hal/src/hal_buffers.c ****    * @sclass
 268:../../os/hal/src/hal_buffers.c ****    */
 269:../../os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 270:../../os/hal/src/hal_buffers.c **** 
 271:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 272:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 273:../../os/hal/src/hal_buffers.c **** 
 274:../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 275:../../os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 482               		.loc 1 275 0
 483 0004 1596      		adiw r26,5
 484 0006 8D91      		ld r24,X+
 485 0008 9C91      		ld r25,X
 486 000a 1697      		sbiw r26,5+1
 487               	.LVL32:
 488 000c 0197      		sbiw r24,1
 489 000e 1696      		adiw r26,5+1
 490 0010 9C93      		st X,r25
 491 0012 8E93      		st -X,r24
 492 0014 1597      		sbiw r26,5
 276:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 493               		.loc 1 276 0
 494 0016 1996      		adiw r26,9
 495 0018 8D91      		ld r24,X+
 496 001a 9C91      		ld r25,X
 497 001c 1A97      		sbiw r26,9+1
 498 001e 1D96      		adiw r26,13
 499 0020 2D91      		ld r18,X+
 500 0022 3C91      		ld r19,X
 501 0024 1E97      		sbiw r26,13+1
 502 0026 820F      		add r24,r18
 503 0028 931F      		adc r25,r19
 504 002a 1A96      		adiw r26,9+1
 505 002c 9C93      		st X,r25
 506 002e 8E93      		st -X,r24
 507 0030 1997      		sbiw r26,9
 277:../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 508               		.loc 1 277 0
 509 0032 1B96      		adiw r26,11
 510 0034 2D91      		ld r18,X+
 511 0036 3C91      		ld r19,X
 512 0038 1C97      		sbiw r26,11+1
 513 003a 8217      		cp r24,r18
 514 003c 9307      		cpc r25,r19
 515 003e 00F0      		brlo .L20
 278:../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 516               		.loc 1 278 0
 517 0040 5196      		adiw r26,17
 518 0042 8D91      		ld r24,X+
 519 0044 9C91      		ld r25,X
 520 0046 5297      		sbiw r26,17+1
 521 0048 1A96      		adiw r26,9+1
 522 004a 9C93      		st X,r25
 523 004c 8E93      		st -X,r24
 524 004e 1997      		sbiw r26,9
 525               	.L20:
 279:../../os/hal/src/hal_buffers.c ****   }
 280:../../os/hal/src/hal_buffers.c **** 
 281:../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 282:../../os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 526               		.loc 1 282 0
 527 0050 5496      		adiw r26,19+1
 528 0052 1C92      		st X,__zero_reg__
 529 0054 1E92      		st -X,__zero_reg__
 530 0056 5397      		sbiw r26,19
 283:../../os/hal/src/hal_buffers.c **** 
 284:../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 285:../../os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 531               		.loc 1 285 0
 532 0058 5796      		adiw r26,23
 533 005a ED91      		ld r30,X+
 534 005c FC91      		ld r31,X
 535 005e 5897      		sbiw r26,23+1
 536 0060 3097      		sbiw r30,0
 537 0062 01F0      		breq .L21
 538 0064 CD01      		movw r24,r26
 286:../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 539               		.loc 1 286 0
 540 0066 0995      		icall
 541               	.LVL33:
 542               	.L21:
 543               	.LBE241:
 544               	.LBE240:
 545               	.LBB242:
 546               	.LBB243:
 547               	.LBB244:
 548               	.LBB245:
 549               	.LBB246:
 550               		.loc 4 440 0
 551               	/* #APP */
 552               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 553 0068 7894      		sei
 554               	 ;  0 "" 2
 555               	/* epilogue start */
 556               	/* #NOAPP */
 557               	.LBE246:
 558               	.LBE245:
 559               	.LBE244:
 560               	.LBE243:
 561               	.LBE242:
 259:../../os/hal/src/hal_buffers.c **** 
 562               		.loc 1 259 0
 563 006a 0895      		ret
 564               		.cfi_endproc
 565               	.LFE249:
 567               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 568               	.global	ibqReleaseEmptyBufferS
 570               	ibqReleaseEmptyBufferS:
 571               	.LFB250:
 269:../../os/hal/src/hal_buffers.c **** 
 572               		.loc 1 269 0
 573               		.cfi_startproc
 574               	.LVL34:
 575               	/* prologue: function */
 576               	/* frame size = 0 */
 577               	/* stack size = 0 */
 578               	.L__stack_usage = 0
 579 0000 DC01      		movw r26,r24
 275:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 580               		.loc 1 275 0
 581 0002 1596      		adiw r26,5
 582 0004 8D91      		ld r24,X+
 583 0006 9C91      		ld r25,X
 584 0008 1697      		sbiw r26,5+1
 585               	.LVL35:
 586 000a 0197      		sbiw r24,1
 587 000c 1696      		adiw r26,5+1
 588 000e 9C93      		st X,r25
 589 0010 8E93      		st -X,r24
 590 0012 1597      		sbiw r26,5
 276:../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 591               		.loc 1 276 0
 592 0014 1996      		adiw r26,9
 593 0016 8D91      		ld r24,X+
 594 0018 9C91      		ld r25,X
 595 001a 1A97      		sbiw r26,9+1
 596 001c 1D96      		adiw r26,13
 597 001e 2D91      		ld r18,X+
 598 0020 3C91      		ld r19,X
 599 0022 1E97      		sbiw r26,13+1
 600 0024 820F      		add r24,r18
 601 0026 931F      		adc r25,r19
 602 0028 1A96      		adiw r26,9+1
 603 002a 9C93      		st X,r25
 604 002c 8E93      		st -X,r24
 605 002e 1997      		sbiw r26,9
 277:../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 606               		.loc 1 277 0
 607 0030 1B96      		adiw r26,11
 608 0032 2D91      		ld r18,X+
 609 0034 3C91      		ld r19,X
 610 0036 1C97      		sbiw r26,11+1
 611 0038 8217      		cp r24,r18
 612 003a 9307      		cpc r25,r19
 613 003c 00F0      		brlo .L26
 278:../../os/hal/src/hal_buffers.c ****   }
 614               		.loc 1 278 0
 615 003e 5196      		adiw r26,17
 616 0040 8D91      		ld r24,X+
 617 0042 9C91      		ld r25,X
 618 0044 5297      		sbiw r26,17+1
 619 0046 1A96      		adiw r26,9+1
 620 0048 9C93      		st X,r25
 621 004a 8E93      		st -X,r24
 622 004c 1997      		sbiw r26,9
 623               	.L26:
 282:../../os/hal/src/hal_buffers.c **** 
 624               		.loc 1 282 0
 625 004e 5496      		adiw r26,19+1
 626 0050 1C92      		st X,__zero_reg__
 627 0052 1E92      		st -X,__zero_reg__
 628 0054 5397      		sbiw r26,19
 285:../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 629               		.loc 1 285 0
 630 0056 5796      		adiw r26,23
 631 0058 ED91      		ld r30,X+
 632 005a FC91      		ld r31,X
 633 005c 5897      		sbiw r26,23+1
 634 005e 3097      		sbiw r30,0
 635 0060 01F0      		breq .L25
 636               		.loc 1 286 0
 637 0062 CD01      		movw r24,r26
 638 0064 0994      		ijmp
 639               	.LVL36:
 640               	.L25:
 641               	/* epilogue start */
 287:../../os/hal/src/hal_buffers.c ****   }
 288:../../os/hal/src/hal_buffers.c **** }
 642               		.loc 1 288 0
 643 0066 0895      		ret
 644               		.cfi_endproc
 645               	.LFE250:
 647               		.section	.text.ibqGetTimeout,"ax",@progbits
 648               	.global	ibqGetTimeout
 650               	ibqGetTimeout:
 651               	.LFB251:
 289:../../os/hal/src/hal_buffers.c **** 
 290:../../os/hal/src/hal_buffers.c **** /**
 291:../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 292:../../os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 293:../../os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 294:../../os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 295:../../os/hal/src/hal_buffers.c ****  *
 296:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 297:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 298:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 299:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 300:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 301:../../os/hal/src/hal_buffers.c ****  *                      .
 302:../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 303:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 304:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 305:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 306:../../os/hal/src/hal_buffers.c ****  *
 307:../../os/hal/src/hal_buffers.c ****  * @api
 308:../../os/hal/src/hal_buffers.c ****  */
 309:../../os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 652               		.loc 1 309 0
 653               		.cfi_startproc
 654               	.LVL37:
 655 0000 0F93      		push r16
 656               	.LCFI12:
 657               		.cfi_def_cfa_offset 3
 658               		.cfi_offset 16, -2
 659 0002 1F93      		push r17
 660               	.LCFI13:
 661               		.cfi_def_cfa_offset 4
 662               		.cfi_offset 17, -3
 663 0004 CF93      		push r28
 664               	.LCFI14:
 665               		.cfi_def_cfa_offset 5
 666               		.cfi_offset 28, -4
 667 0006 DF93      		push r29
 668               	.LCFI15:
 669               		.cfi_def_cfa_offset 6
 670               		.cfi_offset 29, -5
 671               	/* prologue: function */
 672               	/* frame size = 0 */
 673               	/* stack size = 4 */
 674               	.L__stack_usage = 4
 675 0008 EC01      		movw r28,r24
 676               	.LBB247:
 677               	.LBB248:
 678               	.LBB249:
 679               	.LBB250:
 430:../../os/common/ports/AVR/chcore.h **** }
 680               		.loc 4 430 0
 681               	/* #APP */
 682               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 683 000a F894      		cli
 684               	 ;  0 "" 2
 685               	/* #NOAPP */
 686               	.LBE250:
 687               	.LBE249:
 688               	.LBE248:
 689               	.LBE247:
 310:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 311:../../os/hal/src/hal_buffers.c **** 
 312:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 313:../../os/hal/src/hal_buffers.c **** 
 314:../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 315:../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 690               		.loc 1 315 0
 691 000c EB89      		ldd r30,Y+19
 692 000e FC89      		ldd r31,Y+20
 693 0010 3097      		sbiw r30,0
 694 0012 01F0      		breq .L39
 695               	.LVL38:
 696               	.L29:
 316:../../os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 317:../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 318:../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 319:../../os/hal/src/hal_buffers.c ****       return msg;
 320:../../os/hal/src/hal_buffers.c ****     }
 321:../../os/hal/src/hal_buffers.c ****   }
 322:../../os/hal/src/hal_buffers.c **** 
 323:../../os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 324:../../os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 697               		.loc 1 324 0
 698 0014 0191      		ld r16,Z+
 699 0016 10E0      		ldi r17,0
 700               	.LVL39:
 325:../../os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 701               		.loc 1 325 0
 702 0018 FC8B      		std Y+20,r31
 703 001a EB8B      		std Y+19,r30
 326:../../os/hal/src/hal_buffers.c **** 
 327:../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 328:../../os/hal/src/hal_buffers.c ****      empty in the queue.*/
 329:../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 704               		.loc 1 329 0
 705 001c 8D89      		ldd r24,Y+21
 706 001e 9E89      		ldd r25,Y+22
 707 0020 E817      		cp r30,r24
 708 0022 F907      		cpc r31,r25
 709 0024 00F0      		brlo .L33
 710               	.LVL40:
 711               	.LBB251:
 712               	.LBB252:
 275:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 713               		.loc 1 275 0
 714 0026 8D81      		ldd r24,Y+5
 715 0028 9E81      		ldd r25,Y+6
 716 002a 0197      		sbiw r24,1
 717 002c 9E83      		std Y+6,r25
 718 002e 8D83      		std Y+5,r24
 276:../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 719               		.loc 1 276 0
 720 0030 8985      		ldd r24,Y+9
 721 0032 9A85      		ldd r25,Y+10
 722 0034 2D85      		ldd r18,Y+13
 723 0036 3E85      		ldd r19,Y+14
 724 0038 820F      		add r24,r18
 725 003a 931F      		adc r25,r19
 726 003c 9A87      		std Y+10,r25
 727 003e 8987      		std Y+9,r24
 277:../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 728               		.loc 1 277 0
 729 0040 2B85      		ldd r18,Y+11
 730 0042 3C85      		ldd r19,Y+12
 731 0044 8217      		cp r24,r18
 732 0046 9307      		cpc r25,r19
 733 0048 00F0      		brlo .L34
 278:../../os/hal/src/hal_buffers.c ****   }
 734               		.loc 1 278 0
 735 004a 8989      		ldd r24,Y+17
 736 004c 9A89      		ldd r25,Y+18
 737 004e 9A87      		std Y+10,r25
 738 0050 8987      		std Y+9,r24
 739               	.L34:
 282:../../os/hal/src/hal_buffers.c **** 
 740               		.loc 1 282 0
 741 0052 1C8A      		std Y+20,__zero_reg__
 742 0054 1B8A      		std Y+19,__zero_reg__
 285:../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 743               		.loc 1 285 0
 744 0056 EF89      		ldd r30,Y+23
 745 0058 F88D      		ldd r31,Y+24
 746 005a 3097      		sbiw r30,0
 747 005c 01F0      		breq .L33
 286:../../os/hal/src/hal_buffers.c ****   }
 748               		.loc 1 286 0
 749 005e CE01      		movw r24,r28
 750 0060 0995      		icall
 751               	.LVL41:
 752               	.L33:
 753               	.LBE252:
 754               	.LBE251:
 755               	.LBB253:
 756               	.LBB254:
 757               	.LBB255:
 758               	.LBB256:
 759               	.LBB257:
 760               		.loc 4 440 0
 761               	/* #APP */
 762               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 763 0062 7894      		sei
 764               	 ;  0 "" 2
 765               	/* #NOAPP */
 766               	.LBE257:
 767               	.LBE256:
 768               	.LBE255:
 769               	.LBE254:
 770               	.LBE253:
 330:../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 331:../../os/hal/src/hal_buffers.c ****   }
 332:../../os/hal/src/hal_buffers.c **** 
 333:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 334:../../os/hal/src/hal_buffers.c ****   return msg;
 335:../../os/hal/src/hal_buffers.c **** }
 771               		.loc 1 335 0
 772 0064 C801      		movw r24,r16
 773               	/* epilogue start */
 774 0066 DF91      		pop r29
 775 0068 CF91      		pop r28
 776               	.LVL42:
 777 006a 1F91      		pop r17
 778 006c 0F91      		pop r16
 779               	.LVL43:
 780 006e 0895      		ret
 781               	.LVL44:
 782               	.L39:
 316:../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 783               		.loc 1 316 0
 784 0070 0E94 0000 		call ibqGetFullBufferTimeoutS
 785               	.LVL45:
 786 0074 8C01      		movw r16,r24
 787               	.LVL46:
 317:../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 788               		.loc 1 317 0
 789 0076 892B      		or r24,r25
 790 0078 01F4      		brne .L33
 791 007a EB89      		ldd r30,Y+19
 792 007c FC89      		ldd r31,Y+20
 793 007e 00C0      		rjmp .L29
 794               		.cfi_endproc
 795               	.LFE251:
 797               		.section	.text.ibqReadTimeout,"ax",@progbits
 798               	.global	ibqReadTimeout
 800               	ibqReadTimeout:
 801               	.LFB252:
 336:../../os/hal/src/hal_buffers.c **** 
 337:../../os/hal/src/hal_buffers.c **** /**
 338:../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 339:../../os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 340:../../os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 341:../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 342:../../os/hal/src/hal_buffers.c ****  *          been reset.
 343:../../os/hal/src/hal_buffers.c ****  *
 344:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 345:../../os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 346:../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 347:../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 348:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 349:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 350:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 351:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 352:../../os/hal/src/hal_buffers.c ****  *                      .
 353:../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 354:../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 355:../../os/hal/src/hal_buffers.c ****  *
 356:../../os/hal/src/hal_buffers.c ****  * @api
 357:../../os/hal/src/hal_buffers.c ****  */
 358:../../os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 359:../../os/hal/src/hal_buffers.c ****                       size_t n, sysinterval_t timeout) {
 802               		.loc 1 359 0
 803               		.cfi_startproc
 804               	.LVL47:
 805 0000 4F92      		push r4
 806               	.LCFI16:
 807               		.cfi_def_cfa_offset 3
 808               		.cfi_offset 4, -2
 809 0002 5F92      		push r5
 810               	.LCFI17:
 811               		.cfi_def_cfa_offset 4
 812               		.cfi_offset 5, -3
 813 0004 6F92      		push r6
 814               	.LCFI18:
 815               		.cfi_def_cfa_offset 5
 816               		.cfi_offset 6, -4
 817 0006 7F92      		push r7
 818               	.LCFI19:
 819               		.cfi_def_cfa_offset 6
 820               		.cfi_offset 7, -5
 821 0008 AF92      		push r10
 822               	.LCFI20:
 823               		.cfi_def_cfa_offset 7
 824               		.cfi_offset 10, -6
 825 000a BF92      		push r11
 826               	.LCFI21:
 827               		.cfi_def_cfa_offset 8
 828               		.cfi_offset 11, -7
 829 000c CF92      		push r12
 830               	.LCFI22:
 831               		.cfi_def_cfa_offset 9
 832               		.cfi_offset 12, -8
 833 000e DF92      		push r13
 834               	.LCFI23:
 835               		.cfi_def_cfa_offset 10
 836               		.cfi_offset 13, -9
 837 0010 EF92      		push r14
 838               	.LCFI24:
 839               		.cfi_def_cfa_offset 11
 840               		.cfi_offset 14, -10
 841 0012 FF92      		push r15
 842               	.LCFI25:
 843               		.cfi_def_cfa_offset 12
 844               		.cfi_offset 15, -11
 845 0014 0F93      		push r16
 846               	.LCFI26:
 847               		.cfi_def_cfa_offset 13
 848               		.cfi_offset 16, -12
 849 0016 1F93      		push r17
 850               	.LCFI27:
 851               		.cfi_def_cfa_offset 14
 852               		.cfi_offset 17, -13
 853 0018 CF93      		push r28
 854               	.LCFI28:
 855               		.cfi_def_cfa_offset 15
 856               		.cfi_offset 28, -14
 857 001a DF93      		push r29
 858               	.LCFI29:
 859               		.cfi_def_cfa_offset 16
 860               		.cfi_offset 29, -15
 861               	/* prologue: function */
 862               	/* frame size = 0 */
 863               	/* stack size = 14 */
 864               	.L__stack_usage = 14
 865 001c EC01      		movw r28,r24
 866 001e 6B01      		movw r12,r22
 867 0020 5A01      		movw r10,r20
 868 0022 2801      		movw r4,r16
 869 0024 3901      		movw r6,r18
 870               	.LVL48:
 871               	.LBB258:
 872               	.LBB259:
 873               	.LBB260:
 874               	.LBB261:
 430:../../os/common/ports/AVR/chcore.h **** }
 875               		.loc 4 430 0
 876               	/* #APP */
 877               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 878 0026 F894      		cli
 879               	 ;  0 "" 2
 880               	/* #NOAPP */
 881               	.LBE261:
 882               	.LBE260:
 883               	.LBE259:
 884               	.LBE258:
 360:../../os/hal/src/hal_buffers.c ****   size_t r = 0;
 885               		.loc 1 360 0
 886 0028 F12C      		mov r15,__zero_reg__
 887 002a E12C      		mov r14,__zero_reg__
 888 002c 00C0      		rjmp .L51
 889               	.LVL49:
 890               	.L56:
 891               	.LBB262:
 361:../../os/hal/src/hal_buffers.c **** 
 362:../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 363:../../os/hal/src/hal_buffers.c **** 
 364:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 365:../../os/hal/src/hal_buffers.c **** 
 366:../../os/hal/src/hal_buffers.c ****   while (true) {
 367:../../os/hal/src/hal_buffers.c ****     size_t size;
 368:../../os/hal/src/hal_buffers.c **** 
 369:../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 370:../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 371:../../os/hal/src/hal_buffers.c ****       msg_t msg;
 372:../../os/hal/src/hal_buffers.c **** 
 373:../../os/hal/src/hal_buffers.c ****       /* Getting a data buffer using the specified timeout.*/
 374:../../os/hal/src/hal_buffers.c ****       msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 375:../../os/hal/src/hal_buffers.c **** 
 376:../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 377:../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 378:../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 379:../../os/hal/src/hal_buffers.c ****         return r;
 380:../../os/hal/src/hal_buffers.c ****       }
 381:../../os/hal/src/hal_buffers.c ****     }
 382:../../os/hal/src/hal_buffers.c **** 
 383:../../os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 384:../../os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 385:../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 386:../../os/hal/src/hal_buffers.c ****       size = n - r;
 387:../../os/hal/src/hal_buffers.c ****     }
 388:../../os/hal/src/hal_buffers.c **** 
 389:../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 390:../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 391:../../os/hal/src/hal_buffers.c ****     if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 392:../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 393:../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 892               		.loc 1 393 0
 893 002e 80E4      		ldi r24,lo8(64)
 894 0030 FB01      		movw r30,r22
 895 0032 D601      		movw r26,r12
 896               		0:
 897 0034 0190      		ld r0,Z+
 898 0036 0D92      		st X+,r0
 899 0038 8A95      		dec r24
 900 003a 01F4      		brne 0b
 394:../../os/hal/src/hal_buffers.c ****       bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 901               		.loc 1 394 0
 902 003c 20E4      		ldi r18,64
 903 003e C20E      		add r12,r18
 904 0040 D11C      		adc r13,__zero_reg__
 905               	.LVL50:
 395:../../os/hal/src/hal_buffers.c ****       ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 906               		.loc 1 395 0
 907 0042 8B89      		ldd r24,Y+19
 908 0044 9C89      		ldd r25,Y+20
 909 0046 805C      		subi r24,-64
 910 0048 9F4F      		sbci r25,-1
 911 004a 9C8B      		std Y+20,r25
 912 004c 8B8B      		std Y+19,r24
 396:../../os/hal/src/hal_buffers.c ****       r         += (size_t)BUFFERS_CHUNKS_SIZE;
 913               		.loc 1 396 0
 914 004e 20E4      		ldi r18,64
 915 0050 E20E      		add r14,r18
 916 0052 F11C      		adc r15,__zero_reg__
 917               	.LVL51:
 918               	.L46:
 397:../../os/hal/src/hal_buffers.c ****     }
 398:../../os/hal/src/hal_buffers.c ****     else {
 399:../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 400:../../os/hal/src/hal_buffers.c ****       bp        += size;
 401:../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 402:../../os/hal/src/hal_buffers.c ****       r         += size;
 403:../../os/hal/src/hal_buffers.c ****     }
 404:../../os/hal/src/hal_buffers.c **** 
 405:../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 406:../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 919               		.loc 1 406 0
 920 0054 2D89      		ldd r18,Y+21
 921 0056 3E89      		ldd r19,Y+22
 922 0058 8217      		cp r24,r18
 923 005a 9307      		cpc r25,r19
 924 005c 00F0      		brlo .L48
 925               	.LVL52:
 926               	.LBB263:
 927               	.LBB264:
 275:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 928               		.loc 1 275 0
 929 005e 8D81      		ldd r24,Y+5
 930 0060 9E81      		ldd r25,Y+6
 931 0062 0197      		sbiw r24,1
 932 0064 9E83      		std Y+6,r25
 933 0066 8D83      		std Y+5,r24
 276:../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 934               		.loc 1 276 0
 935 0068 8985      		ldd r24,Y+9
 936 006a 9A85      		ldd r25,Y+10
 937 006c 2D85      		ldd r18,Y+13
 938 006e 3E85      		ldd r19,Y+14
 939 0070 820F      		add r24,r18
 940 0072 931F      		adc r25,r19
 941 0074 9A87      		std Y+10,r25
 942 0076 8987      		std Y+9,r24
 277:../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 943               		.loc 1 277 0
 944 0078 2B85      		ldd r18,Y+11
 945 007a 3C85      		ldd r19,Y+12
 946 007c 8217      		cp r24,r18
 947 007e 9307      		cpc r25,r19
 948 0080 00F0      		brlo .L49
 278:../../os/hal/src/hal_buffers.c ****   }
 949               		.loc 1 278 0
 950 0082 8989      		ldd r24,Y+17
 951 0084 9A89      		ldd r25,Y+18
 952 0086 9A87      		std Y+10,r25
 953 0088 8987      		std Y+9,r24
 954               	.L49:
 282:../../os/hal/src/hal_buffers.c **** 
 955               		.loc 1 282 0
 956 008a 1C8A      		std Y+20,__zero_reg__
 957 008c 1B8A      		std Y+19,__zero_reg__
 285:../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 958               		.loc 1 285 0
 959 008e EF89      		ldd r30,Y+23
 960 0090 F88D      		ldd r31,Y+24
 961 0092 3097      		sbiw r30,0
 962 0094 01F0      		breq .L48
 286:../../os/hal/src/hal_buffers.c ****   }
 963               		.loc 1 286 0
 964 0096 CE01      		movw r24,r28
 965 0098 0995      		icall
 966               	.LVL53:
 967               	.L48:
 968               	.LBE264:
 969               	.LBE263:
 970               	.LBB265:
 971               	.LBB266:
 972               	.LBB267:
 973               	.LBB268:
 974               	.LBB269:
 975               		.loc 4 440 0
 976               	/* #APP */
 977               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 978 009a 7894      		sei
 979               	 ;  0 "" 2
 980               	/* #NOAPP */
 981               	.LBE269:
 982               	.LBE268:
 983               	.LBE267:
 984               	.LBE266:
 985               	.LBE265:
 407:../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 408:../../os/hal/src/hal_buffers.c ****     }
 409:../../os/hal/src/hal_buffers.c **** 
 410:../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 411:../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 412:../../os/hal/src/hal_buffers.c ****     if (r >= n) {
 986               		.loc 1 412 0
 987 009c EA14      		cp r14,r10
 988 009e FB04      		cpc r15,r11
 989 00a0 00F4      		brsh .L40
 990               	.LBB270:
 991               	.LBB271:
 992               	.LBB272:
 993               	.LBB273:
 430:../../os/common/ports/AVR/chcore.h **** }
 994               		.loc 4 430 0
 995               	/* #APP */
 996               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 997 00a2 F894      		cli
 998               	 ;  0 "" 2
 999               	.LVL54:
 1000               	/* #NOAPP */
 1001               	.L51:
 1002               	.LBE273:
 1003               	.LBE272:
 1004               	.LBE271:
 1005               	.LBE270:
 370:../../os/hal/src/hal_buffers.c ****       msg_t msg;
 1006               		.loc 1 370 0
 1007 00a4 6B89      		ldd r22,Y+19
 1008 00a6 7C89      		ldd r23,Y+20
 1009 00a8 6115      		cp r22,__zero_reg__
 1010 00aa 7105      		cpc r23,__zero_reg__
 1011 00ac 01F0      		breq .L55
 1012               	.L41:
 384:../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 1013               		.loc 1 384 0
 1014 00ae 8D89      		ldd r24,Y+21
 1015 00b0 9E89      		ldd r25,Y+22
 1016 00b2 861B      		sub r24,r22
 1017 00b4 970B      		sbc r25,r23
 1018               	.LVL55:
 1019 00b6 8501      		movw r16,r10
 1020 00b8 0E19      		sub r16,r14
 1021 00ba 1F09      		sbc r17,r15
 1022 00bc 8017      		cp r24,r16
 1023 00be 9107      		cpc r25,r17
 1024 00c0 00F4      		brsh .L44
 1025 00c2 8C01      		movw r16,r24
 1026               	.L44:
 1027               	.LVL56:
 391:../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 1028               		.loc 1 391 0
 1029 00c4 0134      		cpi r16,65
 1030 00c6 1105      		cpc r17,__zero_reg__
 1031 00c8 00F0      		brlo .+2
 1032 00ca 00C0      		rjmp .L56
 399:../../os/hal/src/hal_buffers.c ****       bp        += size;
 1033               		.loc 1 399 0
 1034 00cc A801      		movw r20,r16
 1035 00ce C601      		movw r24,r12
 1036 00d0 0E94 0000 		call memcpy
 1037               	.LVL57:
 400:../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 1038               		.loc 1 400 0
 1039 00d4 C00E      		add r12,r16
 1040 00d6 D11E      		adc r13,r17
 1041               	.LVL58:
 401:../../os/hal/src/hal_buffers.c ****       r         += size;
 1042               		.loc 1 401 0
 1043 00d8 8B89      		ldd r24,Y+19
 1044 00da 9C89      		ldd r25,Y+20
 1045 00dc 800F      		add r24,r16
 1046 00de 911F      		adc r25,r17
 1047 00e0 9C8B      		std Y+20,r25
 1048 00e2 8B8B      		std Y+19,r24
 402:../../os/hal/src/hal_buffers.c ****     }
 1049               		.loc 1 402 0
 1050 00e4 E00E      		add r14,r16
 1051 00e6 F11E      		adc r15,r17
 1052               	.LVL59:
 1053 00e8 00C0      		rjmp .L46
 1054               	.LVL60:
 1055               	.L55:
 1056               	.LBB274:
 374:../../os/hal/src/hal_buffers.c **** 
 1057               		.loc 1 374 0
 1058 00ea B301      		movw r22,r6
 1059 00ec A201      		movw r20,r4
 1060 00ee CE01      		movw r24,r28
 1061 00f0 0E94 0000 		call ibqGetFullBufferTimeoutS
 1062               	.LVL61:
 377:../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1063               		.loc 1 377 0
 1064 00f4 892B      		or r24,r25
 1065 00f6 01F4      		brne .L42
 1066 00f8 6B89      		ldd r22,Y+19
 1067 00fa 7C89      		ldd r23,Y+20
 1068 00fc 00C0      		rjmp .L41
 1069               	.L42:
 1070               	.LBB275:
 1071               	.LBB276:
 1072               	.LBB277:
 1073               	.LBB278:
 1074               	.LBB279:
 1075               		.loc 4 440 0
 1076               	/* #APP */
 1077               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1078 00fe 7894      		sei
 1079               	 ;  0 "" 2
 1080               	.LVL62:
 1081               	/* #NOAPP */
 1082               	.L40:
 1083               	.LBE279:
 1084               	.LBE278:
 1085               	.LBE277:
 1086               	.LBE276:
 1087               	.LBE275:
 1088               	.LBE274:
 1089               	.LBE262:
 413:../../os/hal/src/hal_buffers.c ****       return r;
 414:../../os/hal/src/hal_buffers.c ****     }
 415:../../os/hal/src/hal_buffers.c ****     osalSysLock();
 416:../../os/hal/src/hal_buffers.c ****   }
 417:../../os/hal/src/hal_buffers.c **** }
 1090               		.loc 1 417 0
 1091 0100 C701      		movw r24,r14
 1092               	/* epilogue start */
 1093 0102 DF91      		pop r29
 1094 0104 CF91      		pop r28
 1095               	.LVL63:
 1096 0106 1F91      		pop r17
 1097 0108 0F91      		pop r16
 1098 010a FF90      		pop r15
 1099 010c EF90      		pop r14
 1100               	.LVL64:
 1101 010e DF90      		pop r13
 1102 0110 CF90      		pop r12
 1103               	.LVL65:
 1104 0112 BF90      		pop r11
 1105 0114 AF90      		pop r10
 1106               	.LVL66:
 1107 0116 7F90      		pop r7
 1108 0118 6F90      		pop r6
 1109 011a 5F90      		pop r5
 1110 011c 4F90      		pop r4
 1111 011e 0895      		ret
 1112               		.cfi_endproc
 1113               	.LFE252:
 1115               		.section	.text.obqObjectInit,"ax",@progbits
 1116               	.global	obqObjectInit
 1118               	obqObjectInit:
 1119               	.LFB253:
 418:../../os/hal/src/hal_buffers.c **** 
 419:../../os/hal/src/hal_buffers.c **** /**
 420:../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 421:../../os/hal/src/hal_buffers.c ****  *
 422:../../os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 423:../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
 424:../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 425:../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 426:../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 427:../../os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 428:../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 429:../../os/hal/src/hal_buffers.c ****  *
 430:../../os/hal/src/hal_buffers.c ****  * @init
 431:../../os/hal/src/hal_buffers.c ****  */
 432:../../os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
 433:../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t onfy, void *link) {
 1120               		.loc 1 433 0
 1121               		.cfi_startproc
 1122               	.LVL67:
 1123 0000 CF92      		push r12
 1124               	.LCFI30:
 1125               		.cfi_def_cfa_offset 3
 1126               		.cfi_offset 12, -2
 1127 0002 DF92      		push r13
 1128               	.LCFI31:
 1129               		.cfi_def_cfa_offset 4
 1130               		.cfi_offset 13, -3
 1131 0004 EF92      		push r14
 1132               	.LCFI32:
 1133               		.cfi_def_cfa_offset 5
 1134               		.cfi_offset 14, -4
 1135 0006 FF92      		push r15
 1136               	.LCFI33:
 1137               		.cfi_def_cfa_offset 6
 1138               		.cfi_offset 15, -5
 1139 0008 0F93      		push r16
 1140               	.LCFI34:
 1141               		.cfi_def_cfa_offset 7
 1142               		.cfi_offset 16, -6
 1143 000a 1F93      		push r17
 1144               	.LCFI35:
 1145               		.cfi_def_cfa_offset 8
 1146               		.cfi_offset 17, -7
 1147               	/* prologue: function */
 1148               	/* frame size = 0 */
 1149               	/* stack size = 6 */
 1150               	.L__stack_usage = 6
 1151 000c FC01      		movw r30,r24
 1152               	.LVL68:
 1153               	.LBB280:
 1154               	.LBB281:
 1155               	.LBB282:
 1156               	.LBB283:
 1157               	.LBB284:
 224:../../os/rt/include/chlists.h ****   qp->prev = qp;
 1158               		.loc 2 224 0
 1159 000e 9183      		std Z+1,r25
 1160 0010 8083      		st Z,r24
 1161               		.loc 2 225 0
 1162 0012 9383      		std Z+3,r25
 1163 0014 8283      		std Z+2,r24
 1164               	.LVL69:
 1165               	.LBE284:
 1166               	.LBE283:
 1167               	.LBE282:
 1168               	.LBE281:
 1169               	.LBE280:
 434:../../os/hal/src/hal_buffers.c **** 
 435:../../os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 436:../../os/hal/src/hal_buffers.c **** 
 437:../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 438:../../os/hal/src/hal_buffers.c ****   obqp->suspended = suspended;
 1170               		.loc 1 438 0
 1171 0016 6483      		std Z+4,r22
 439:../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = n;
 1172               		.loc 1 439 0
 1173 0018 1683      		std Z+6,r17
 1174 001a 0583      		std Z+5,r16
 440:../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 1175               		.loc 1 440 0
 1176 001c 5287      		std Z+10,r21
 1177 001e 4187      		std Z+9,r20
 441:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = bp;
 1178               		.loc 1 441 0
 1179 0020 5087      		std Z+8,r21
 1180 0022 4783      		std Z+7,r20
 442:../../os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 1181               		.loc 1 442 0
 1182 0024 2E5F      		subi r18,-2
 1183 0026 3F4F      		sbci r19,-1
 1184               	.LVL70:
 1185 0028 209F      		mul r18,r16
 1186 002a C001      		movw r24,r0
 1187 002c 219F      		mul r18,r17
 1188 002e 900D      		add r25,r0
 1189 0030 309F      		mul r19,r16
 1190 0032 900D      		add r25,r0
 1191 0034 1124      		clr r1
 1192               	.LVL71:
 1193 0036 840F      		add r24,r20
 1194 0038 951F      		adc r25,r21
 1195 003a 9487      		std Z+12,r25
 1196 003c 8387      		std Z+11,r24
 443:../../os/hal/src/hal_buffers.c ****   obqp->bsize     = size + sizeof (size_t);
 1197               		.loc 1 443 0
 1198 003e 3687      		std Z+14,r19
 1199 0040 2587      		std Z+13,r18
 444:../../os/hal/src/hal_buffers.c ****   obqp->bn        = n;
 1200               		.loc 1 444 0
 1201 0042 108B      		std Z+16,r17
 1202 0044 0787      		std Z+15,r16
 445:../../os/hal/src/hal_buffers.c ****   obqp->buffers   = bp;
 1203               		.loc 1 445 0
 1204 0046 528B      		std Z+18,r21
 1205 0048 418B      		std Z+17,r20
 446:../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1206               		.loc 1 446 0
 1207 004a 148A      		std Z+20,__zero_reg__
 1208 004c 138A      		std Z+19,__zero_reg__
 447:../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1209               		.loc 1 447 0
 1210 004e 168A      		std Z+22,__zero_reg__
 1211 0050 158A      		std Z+21,__zero_reg__
 448:../../os/hal/src/hal_buffers.c ****   obqp->notify    = onfy;
 1212               		.loc 1 448 0
 1213 0052 F08E      		std Z+24,r15
 1214 0054 E78A      		std Z+23,r14
 449:../../os/hal/src/hal_buffers.c ****   obqp->link      = link;
 1215               		.loc 1 449 0
 1216 0056 D28E      		std Z+26,r13
 1217 0058 C18E      		std Z+25,r12
 1218               	/* epilogue start */
 450:../../os/hal/src/hal_buffers.c **** }
 1219               		.loc 1 450 0
 1220 005a 1F91      		pop r17
 1221 005c 0F91      		pop r16
 1222               	.LVL72:
 1223 005e FF90      		pop r15
 1224 0060 EF90      		pop r14
 1225               	.LVL73:
 1226 0062 DF90      		pop r13
 1227 0064 CF90      		pop r12
 1228               	.LVL74:
 1229 0066 0895      		ret
 1230               		.cfi_endproc
 1231               	.LFE253:
 1233               		.section	.text.obqResetI,"ax",@progbits
 1234               	.global	obqResetI
 1236               	obqResetI:
 1237               	.LFB254:
 451:../../os/hal/src/hal_buffers.c **** 
 452:../../os/hal/src/hal_buffers.c **** /**
 453:../../os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 454:../../os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 455:../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 456:../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 457:../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 458:../../os/hal/src/hal_buffers.c ****  *
 459:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 460:../../os/hal/src/hal_buffers.c ****  *
 461:../../os/hal/src/hal_buffers.c ****  * @iclass
 462:../../os/hal/src/hal_buffers.c ****  */
 463:../../os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1238               		.loc 1 463 0
 1239               		.cfi_startproc
 1240               	.LVL75:
 1241               	/* prologue: function */
 1242               	/* frame size = 0 */
 1243               	/* stack size = 0 */
 1244               	.L__stack_usage = 0
 1245 0000 FC01      		movw r30,r24
 464:../../os/hal/src/hal_buffers.c **** 
 465:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 466:../../os/hal/src/hal_buffers.c **** 
 467:../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = bqSizeX(obqp);
 1246               		.loc 1 467 0
 1247 0002 8785      		ldd r24,Z+15
 1248 0004 9089      		ldd r25,Z+16
 1249               	.LVL76:
 1250 0006 9683      		std Z+6,r25
 1251 0008 8583      		std Z+5,r24
 468:../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = obqp->buffers;
 1252               		.loc 1 468 0
 1253 000a 8189      		ldd r24,Z+17
 1254 000c 9289      		ldd r25,Z+18
 1255 000e 9287      		std Z+10,r25
 1256 0010 8187      		std Z+9,r24
 469:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = obqp->buffers;
 1257               		.loc 1 469 0
 1258 0012 9087      		std Z+8,r25
 1259 0014 8783      		std Z+7,r24
 470:../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1260               		.loc 1 470 0
 1261 0016 148A      		std Z+20,__zero_reg__
 1262 0018 138A      		std Z+19,__zero_reg__
 471:../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1263               		.loc 1 471 0
 1264 001a 168A      		std Z+22,__zero_reg__
 1265 001c 158A      		std Z+21,__zero_reg__
 1266               	.LVL77:
 1267               	.LBB285:
 1268               	.LBB286:
 1269               		.loc 3 921 0
 1270 001e 6EEF      		ldi r22,lo8(-2)
 1271 0020 7FEF      		ldi r23,lo8(-1)
 1272 0022 CF01      		movw r24,r30
 1273 0024 0C94 0000 		jmp chThdDequeueAllI
 1274               	.LVL78:
 1275               	.LBE286:
 1276               	.LBE285:
 1277               		.cfi_endproc
 1278               	.LFE254:
 1280               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1281               	.global	obqGetFullBufferI
 1283               	obqGetFullBufferI:
 1284               	.LFB255:
 472:../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 473:../../os/hal/src/hal_buffers.c **** }
 474:../../os/hal/src/hal_buffers.c **** 
 475:../../os/hal/src/hal_buffers.c **** /**
 476:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 477:../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 478:../../os/hal/src/hal_buffers.c ****  *
 479:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 480:../../os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 481:../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 482:../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 483:../../os/hal/src/hal_buffers.c ****  *
 484:../../os/hal/src/hal_buffers.c ****  * @iclass
 485:../../os/hal/src/hal_buffers.c ****  */
 486:../../os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 487:../../os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1285               		.loc 1 487 0
 1286               		.cfi_startproc
 1287               	.LVL79:
 1288               	/* prologue: function */
 1289               	/* frame size = 0 */
 1290               	/* stack size = 0 */
 1291               	.L__stack_usage = 0
 1292 0000 FC01      		movw r30,r24
 488:../../os/hal/src/hal_buffers.c **** 
 489:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 490:../../os/hal/src/hal_buffers.c **** 
 491:../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1293               		.loc 1 491 0
 1294 0002 2185      		ldd r18,Z+9
 1295 0004 3285      		ldd r19,Z+10
 1296 0006 8781      		ldd r24,Z+7
 1297 0008 9085      		ldd r25,Z+8
 1298               	.LVL80:
 1299 000a 8217      		cp r24,r18
 1300 000c 9307      		cpc r25,r19
 1301 000e 01F0      		breq .L65
 1302               	.L60:
 492:../../os/hal/src/hal_buffers.c ****     return NULL;
 493:../../os/hal/src/hal_buffers.c ****   }
 494:../../os/hal/src/hal_buffers.c **** 
 495:../../os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 496:../../os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)(void *)obqp->brdptr);
 1303               		.loc 1 496 0
 1304 0010 F901      		movw r30,r18
 1305               	.LVL81:
 1306 0012 2191      		ld r18,Z+
 1307 0014 3191      		ld r19,Z+
 1308 0016 CF01      		movw r24,r30
 1309 0018 FB01      		movw r30,r22
 1310 001a 3183      		std Z+1,r19
 1311 001c 2083      		st Z,r18
 1312               	/* epilogue start */
 497:../../os/hal/src/hal_buffers.c **** 
 498:../../os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 499:../../os/hal/src/hal_buffers.c **** }
 1313               		.loc 1 499 0
 1314 001e 0895      		ret
 1315               	.LVL82:
 1316               	.L65:
 491:../../os/hal/src/hal_buffers.c ****     return NULL;
 1317               		.loc 1 491 0 discriminator 1
 1318 0020 8581      		ldd r24,Z+5
 1319 0022 9681      		ldd r25,Z+6
 1320 0024 892B      		or r24,r25
 1321 0026 01F0      		breq .L60
 492:../../os/hal/src/hal_buffers.c ****     return NULL;
 1322               		.loc 1 492 0
 1323 0028 90E0      		ldi r25,0
 1324 002a 80E0      		ldi r24,0
 1325 002c 0895      		ret
 1326               		.cfi_endproc
 1327               	.LFE255:
 1329               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1330               	.global	obqReleaseEmptyBufferI
 1332               	obqReleaseEmptyBufferI:
 1333               	.LFB256:
 500:../../os/hal/src/hal_buffers.c **** 
 501:../../os/hal/src/hal_buffers.c **** /**
 502:../../os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 503:../../os/hal/src/hal_buffers.c ****  *
 504:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 505:../../os/hal/src/hal_buffers.c ****  *
 506:../../os/hal/src/hal_buffers.c ****  * @iclass
 507:../../os/hal/src/hal_buffers.c ****  */
 508:../../os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1334               		.loc 1 508 0
 1335               		.cfi_startproc
 1336               	.LVL83:
 1337               	/* prologue: function */
 1338               	/* frame size = 0 */
 1339               	/* stack size = 0 */
 1340               	.L__stack_usage = 0
 1341 0000 FC01      		movw r30,r24
 509:../../os/hal/src/hal_buffers.c **** 
 510:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 511:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 512:../../os/hal/src/hal_buffers.c **** 
 513:../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 514:../../os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1342               		.loc 1 514 0
 1343 0002 8581      		ldd r24,Z+5
 1344 0004 9681      		ldd r25,Z+6
 1345               	.LVL84:
 1346 0006 0196      		adiw r24,1
 1347 0008 9683      		std Z+6,r25
 1348 000a 8583      		std Z+5,r24
 515:../../os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1349               		.loc 1 515 0
 1350 000c 8185      		ldd r24,Z+9
 1351 000e 9285      		ldd r25,Z+10
 1352 0010 2585      		ldd r18,Z+13
 1353 0012 3685      		ldd r19,Z+14
 1354 0014 820F      		add r24,r18
 1355 0016 931F      		adc r25,r19
 1356 0018 9287      		std Z+10,r25
 1357 001a 8187      		std Z+9,r24
 516:../../os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1358               		.loc 1 516 0
 1359 001c 2385      		ldd r18,Z+11
 1360 001e 3485      		ldd r19,Z+12
 1361 0020 8217      		cp r24,r18
 1362 0022 9307      		cpc r25,r19
 1363 0024 00F0      		brlo .L67
 517:../../os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1364               		.loc 1 517 0
 1365 0026 8189      		ldd r24,Z+17
 1366 0028 9289      		ldd r25,Z+18
 1367 002a 9287      		std Z+10,r25
 1368 002c 8187      		std Z+9,r24
 1369               	.L67:
 1370               	.LVL85:
 1371               	.LBB287:
 1372               	.LBB288:
 908:../../os/hal/osal/rt-nil/osal.h **** }
 1373               		.loc 3 908 0
 1374 002e 70E0      		ldi r23,0
 1375 0030 60E0      		ldi r22,0
 1376 0032 CF01      		movw r24,r30
 1377 0034 0C94 0000 		jmp chThdDequeueNextI
 1378               	.LVL86:
 1379               	.LBE288:
 1380               	.LBE287:
 1381               		.cfi_endproc
 1382               	.LFE256:
 1384               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1385               	.global	obqGetEmptyBufferTimeoutS
 1387               	obqGetEmptyBufferTimeoutS:
 1388               	.LFB258:
 518:../../os/hal/src/hal_buffers.c ****   }
 519:../../os/hal/src/hal_buffers.c **** 
 520:../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 521:../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 522:../../os/hal/src/hal_buffers.c **** }
 523:../../os/hal/src/hal_buffers.c **** 
 524:../../os/hal/src/hal_buffers.c **** /**
 525:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 526:../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 527:../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 528:../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 529:../../os/hal/src/hal_buffers.c ****  *          is empty.
 530:../../os/hal/src/hal_buffers.c ****  *
 531:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 532:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 533:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 534:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 535:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 536:../../os/hal/src/hal_buffers.c ****  *                      .
 537:../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 538:../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 539:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 540:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 541:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 542:../../os/hal/src/hal_buffers.c ****  *
 543:../../os/hal/src/hal_buffers.c ****  * @api
 544:../../os/hal/src/hal_buffers.c ****  */
 545:../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 546:../../os/hal/src/hal_buffers.c ****                                sysinterval_t timeout) {
 547:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 548:../../os/hal/src/hal_buffers.c **** 
 549:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 550:../../os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 551:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 552:../../os/hal/src/hal_buffers.c **** 
 553:../../os/hal/src/hal_buffers.c ****   return msg;
 554:../../os/hal/src/hal_buffers.c **** }
 555:../../os/hal/src/hal_buffers.c **** 
 556:../../os/hal/src/hal_buffers.c **** /**
 557:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 558:../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 559:../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 560:../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 561:../../os/hal/src/hal_buffers.c ****  *          is empty.
 562:../../os/hal/src/hal_buffers.c ****  *
 563:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 564:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 565:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 566:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 567:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 568:../../os/hal/src/hal_buffers.c ****  *                      .
 569:../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 570:../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 571:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 572:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 573:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 574:../../os/hal/src/hal_buffers.c ****  *
 575:../../os/hal/src/hal_buffers.c ****  * @sclass
 576:../../os/hal/src/hal_buffers.c ****  */
 577:../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 578:../../os/hal/src/hal_buffers.c ****                                 sysinterval_t timeout) {
 1389               		.loc 1 578 0
 1390               		.cfi_startproc
 1391               	.LVL87:
 1392 0000 CF92      		push r12
 1393               	.LCFI36:
 1394               		.cfi_def_cfa_offset 3
 1395               		.cfi_offset 12, -2
 1396 0002 DF92      		push r13
 1397               	.LCFI37:
 1398               		.cfi_def_cfa_offset 4
 1399               		.cfi_offset 13, -3
 1400 0004 EF92      		push r14
 1401               	.LCFI38:
 1402               		.cfi_def_cfa_offset 5
 1403               		.cfi_offset 14, -4
 1404 0006 FF92      		push r15
 1405               	.LCFI39:
 1406               		.cfi_def_cfa_offset 6
 1407               		.cfi_offset 15, -5
 1408 0008 CF93      		push r28
 1409               	.LCFI40:
 1410               		.cfi_def_cfa_offset 7
 1411               		.cfi_offset 28, -6
 1412 000a DF93      		push r29
 1413               	.LCFI41:
 1414               		.cfi_def_cfa_offset 8
 1415               		.cfi_offset 29, -7
 1416               	/* prologue: function */
 1417               	/* frame size = 0 */
 1418               	/* stack size = 6 */
 1419               	.L__stack_usage = 6
 1420 000c EC01      		movw r28,r24
 1421 000e 6A01      		movw r12,r20
 1422 0010 7B01      		movw r14,r22
 579:../../os/hal/src/hal_buffers.c **** 
 580:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 581:../../os/hal/src/hal_buffers.c **** 
 582:../../os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1423               		.loc 1 582 0
 1424 0012 00C0      		rjmp .L69
 1425               	.LVL88:
 1426               	.L71:
 1427               	.LBB297:
 583:../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1428               		.loc 1 583 0
 1429 0014 8C81      		ldd r24,Y+4
 1430 0016 8111      		cpse r24,__zero_reg__
 1431 0018 00C0      		rjmp .L72
 1432               	.LVL89:
 1433               	.LBB298:
 1434               	.LBB299:
 895:../../os/hal/osal/rt-nil/osal.h **** }
 1435               		.loc 3 895 0
 1436 001a B701      		movw r22,r14
 1437 001c A601      		movw r20,r12
 1438 001e CE01      		movw r24,r28
 1439 0020 0E94 0000 		call chThdEnqueueTimeoutS
 1440               	.LVL90:
 1441               	.LBE299:
 1442               	.LBE298:
 584:../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 585:../../os/hal/src/hal_buffers.c ****     }
 586:../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 587:../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1443               		.loc 1 587 0
 1444 0024 97FD      		sbrc r25,7
 1445 0026 00C0      		rjmp .L68
 1446               	.L69:
 1447               	.LBE297:
 582:../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1448               		.loc 1 582 0
 1449 0028 8D81      		ldd r24,Y+5
 1450 002a 9E81      		ldd r25,Y+6
 1451 002c 892B      		or r24,r25
 1452 002e 01F0      		breq .L71
 1453               	.LVL91:
 1454               	.LBB300:
 1455               	.LBB301:
 588:../../os/hal/src/hal_buffers.c ****       return msg;
 589:../../os/hal/src/hal_buffers.c ****     }
 590:../../os/hal/src/hal_buffers.c ****   }
 591:../../os/hal/src/hal_buffers.c **** 
 592:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 593:../../os/hal/src/hal_buffers.c **** 
 594:../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 595:../../os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1456               		.loc 1 595 0
 1457 0030 8F81      		ldd r24,Y+7
 1458 0032 9885      		ldd r25,Y+8
 1459 0034 9C01      		movw r18,r24
 1460 0036 2E5F      		subi r18,-2
 1461 0038 3F4F      		sbci r19,-1
 1462 003a 3C8B      		std Y+20,r19
 1463 003c 2B8B      		std Y+19,r18
 596:../../os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1464               		.loc 1 596 0
 1465 003e 2D85      		ldd r18,Y+13
 1466 0040 3E85      		ldd r19,Y+14
 1467 0042 820F      		add r24,r18
 1468 0044 931F      		adc r25,r19
 1469 0046 9E8B      		std Y+22,r25
 1470 0048 8D8B      		std Y+21,r24
 1471               	.LVL92:
 1472 004a 90E0      		ldi r25,0
 1473 004c 80E0      		ldi r24,0
 1474               	.L68:
 1475               	/* epilogue start */
 1476               	.LBE301:
 1477               	.LBE300:
 597:../../os/hal/src/hal_buffers.c **** 
 598:../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 599:../../os/hal/src/hal_buffers.c **** }
 1478               		.loc 1 599 0
 1479 004e DF91      		pop r29
 1480 0050 CF91      		pop r28
 1481               	.LVL93:
 1482 0052 FF90      		pop r15
 1483 0054 EF90      		pop r14
 1484 0056 DF90      		pop r13
 1485 0058 CF90      		pop r12
 1486 005a 0895      		ret
 1487               	.LVL94:
 1488               	.L72:
 1489               	.LBB302:
 584:../../os/hal/src/hal_buffers.c ****     }
 1490               		.loc 1 584 0
 1491 005c 8EEF      		ldi r24,lo8(-2)
 1492 005e 9FEF      		ldi r25,lo8(-1)
 1493               	/* epilogue start */
 1494               	.LBE302:
 1495               		.loc 1 599 0
 1496 0060 DF91      		pop r29
 1497 0062 CF91      		pop r28
 1498               	.LVL95:
 1499 0064 FF90      		pop r15
 1500 0066 EF90      		pop r14
 1501 0068 DF90      		pop r13
 1502 006a CF90      		pop r12
 1503 006c 0895      		ret
 1504               		.cfi_endproc
 1505               	.LFE258:
 1507               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1508               	.global	obqGetEmptyBufferTimeout
 1510               	obqGetEmptyBufferTimeout:
 1511               	.LFB257:
 546:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 1512               		.loc 1 546 0
 1513               		.cfi_startproc
 1514               	.LVL96:
 1515               	/* prologue: function */
 1516               	/* frame size = 0 */
 1517               	/* stack size = 0 */
 1518               	.L__stack_usage = 0
 1519               	.LBB303:
 1520               	.LBB304:
 1521               	.LBB305:
 1522               	.LBB306:
 430:../../os/common/ports/AVR/chcore.h **** }
 1523               		.loc 4 430 0
 1524               	/* #APP */
 1525               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1526 0000 F894      		cli
 1527               	 ;  0 "" 2
 1528               	/* #NOAPP */
 1529               	.LBE306:
 1530               	.LBE305:
 1531               	.LBE304:
 1532               	.LBE303:
 550:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1533               		.loc 1 550 0
 1534 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1535               	.LVL97:
 1536               	.LBB307:
 1537               	.LBB308:
 1538               	.LBB309:
 1539               	.LBB310:
 1540               	.LBB311:
 1541               		.loc 4 440 0
 1542               	/* #APP */
 1543               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1544 0006 7894      		sei
 1545               	 ;  0 "" 2
 1546               	/* epilogue start */
 1547               	/* #NOAPP */
 1548               	.LBE311:
 1549               	.LBE310:
 1550               	.LBE309:
 1551               	.LBE308:
 1552               	.LBE307:
 554:../../os/hal/src/hal_buffers.c **** 
 1553               		.loc 1 554 0
 1554 0008 0895      		ret
 1555               		.cfi_endproc
 1556               	.LFE257:
 1558               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1559               	.global	obqPostFullBuffer
 1561               	obqPostFullBuffer:
 1562               	.LFB259:
 600:../../os/hal/src/hal_buffers.c **** 
 601:../../os/hal/src/hal_buffers.c **** /**
 602:../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 603:../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 604:../../os/hal/src/hal_buffers.c ****  *
 605:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 606:../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 607:../../os/hal/src/hal_buffers.c ****  *
 608:../../os/hal/src/hal_buffers.c ****  * @api
 609:../../os/hal/src/hal_buffers.c ****  */
 610:../../os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 1563               		.loc 1 610 0
 1564               		.cfi_startproc
 1565               	.LVL98:
 1566               	/* prologue: function */
 1567               	/* frame size = 0 */
 1568               	/* stack size = 0 */
 1569               	.L__stack_usage = 0
 1570 0000 DC01      		movw r26,r24
 1571               	.LBB312:
 1572               	.LBB313:
 1573               	.LBB314:
 1574               	.LBB315:
 430:../../os/common/ports/AVR/chcore.h **** }
 1575               		.loc 4 430 0
 1576               	/* #APP */
 1577               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1578 0002 F894      		cli
 1579               	 ;  0 "" 2
 1580               	.LVL99:
 1581               	/* #NOAPP */
 1582               	.LBE315:
 1583               	.LBE314:
 1584               	.LBE313:
 1585               	.LBE312:
 1586               	.LBB316:
 1587               	.LBB317:
 611:../../os/hal/src/hal_buffers.c **** 
 612:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 613:../../os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 614:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 615:../../os/hal/src/hal_buffers.c **** }
 616:../../os/hal/src/hal_buffers.c **** 
 617:../../os/hal/src/hal_buffers.c **** /**
 618:../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 619:../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 620:../../os/hal/src/hal_buffers.c ****  *
 621:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 622:../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 623:../../os/hal/src/hal_buffers.c ****  *
 624:../../os/hal/src/hal_buffers.c ****  * @sclass
 625:../../os/hal/src/hal_buffers.c ****  */
 626:../../os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 627:../../os/hal/src/hal_buffers.c **** 
 628:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 629:../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 630:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 631:../../os/hal/src/hal_buffers.c **** 
 632:../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 633:../../os/hal/src/hal_buffers.c ****   *((size_t *)(void *)obqp->bwrptr) = size;
 1588               		.loc 1 633 0
 1589 0004 1796      		adiw r26,7
 1590 0006 ED91      		ld r30,X+
 1591 0008 FC91      		ld r31,X
 1592 000a 1897      		sbiw r26,7+1
 1593 000c 7183      		std Z+1,r23
 1594 000e 6083      		st Z,r22
 634:../../os/hal/src/hal_buffers.c **** 
 635:../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 636:../../os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1595               		.loc 1 636 0
 1596 0010 1596      		adiw r26,5
 1597 0012 8D91      		ld r24,X+
 1598 0014 9C91      		ld r25,X
 1599 0016 1697      		sbiw r26,5+1
 1600               	.LVL100:
 1601 0018 0197      		sbiw r24,1
 1602 001a 1696      		adiw r26,5+1
 1603 001c 9C93      		st X,r25
 1604 001e 8E93      		st -X,r24
 1605 0020 1597      		sbiw r26,5
 637:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1606               		.loc 1 637 0
 1607 0022 1D96      		adiw r26,13
 1608 0024 8D91      		ld r24,X+
 1609 0026 9C91      		ld r25,X
 1610 0028 1E97      		sbiw r26,13+1
 1611 002a 8E0F      		add r24,r30
 1612 002c 9F1F      		adc r25,r31
 1613 002e 1896      		adiw r26,7+1
 1614 0030 9C93      		st X,r25
 1615 0032 8E93      		st -X,r24
 1616 0034 1797      		sbiw r26,7
 638:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1617               		.loc 1 638 0
 1618 0036 1B96      		adiw r26,11
 1619 0038 2D91      		ld r18,X+
 1620 003a 3C91      		ld r19,X
 1621 003c 1C97      		sbiw r26,11+1
 1622 003e 8217      		cp r24,r18
 1623 0040 9307      		cpc r25,r19
 1624 0042 00F0      		brlo .L75
 639:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1625               		.loc 1 639 0
 1626 0044 5196      		adiw r26,17
 1627 0046 8D91      		ld r24,X+
 1628 0048 9C91      		ld r25,X
 1629 004a 5297      		sbiw r26,17+1
 1630 004c 1896      		adiw r26,7+1
 1631 004e 9C93      		st X,r25
 1632 0050 8E93      		st -X,r24
 1633 0052 1797      		sbiw r26,7
 1634               	.L75:
 640:../../os/hal/src/hal_buffers.c ****   }
 641:../../os/hal/src/hal_buffers.c **** 
 642:../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 643:../../os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1635               		.loc 1 643 0
 1636 0054 5496      		adiw r26,19+1
 1637 0056 1C92      		st X,__zero_reg__
 1638 0058 1E92      		st -X,__zero_reg__
 1639 005a 5397      		sbiw r26,19
 644:../../os/hal/src/hal_buffers.c **** 
 645:../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 646:../../os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1640               		.loc 1 646 0
 1641 005c 5796      		adiw r26,23
 1642 005e ED91      		ld r30,X+
 1643 0060 FC91      		ld r31,X
 1644 0062 5897      		sbiw r26,23+1
 1645 0064 3097      		sbiw r30,0
 1646 0066 01F0      		breq .L76
 1647 0068 CD01      		movw r24,r26
 647:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1648               		.loc 1 647 0
 1649 006a 0995      		icall
 1650               	.LVL101:
 1651               	.L76:
 1652               	.LBE317:
 1653               	.LBE316:
 1654               	.LBB318:
 1655               	.LBB319:
 1656               	.LBB320:
 1657               	.LBB321:
 1658               	.LBB322:
 1659               		.loc 4 440 0
 1660               	/* #APP */
 1661               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1662 006c 7894      		sei
 1663               	 ;  0 "" 2
 1664               	/* epilogue start */
 1665               	/* #NOAPP */
 1666               	.LBE322:
 1667               	.LBE321:
 1668               	.LBE320:
 1669               	.LBE319:
 1670               	.LBE318:
 615:../../os/hal/src/hal_buffers.c **** 
 1671               		.loc 1 615 0
 1672 006e 0895      		ret
 1673               		.cfi_endproc
 1674               	.LFE259:
 1676               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1677               	.global	obqPostFullBufferS
 1679               	obqPostFullBufferS:
 1680               	.LFB260:
 626:../../os/hal/src/hal_buffers.c **** 
 1681               		.loc 1 626 0
 1682               		.cfi_startproc
 1683               	.LVL102:
 1684               	/* prologue: function */
 1685               	/* frame size = 0 */
 1686               	/* stack size = 0 */
 1687               	.L__stack_usage = 0
 1688 0000 DC01      		movw r26,r24
 633:../../os/hal/src/hal_buffers.c **** 
 1689               		.loc 1 633 0
 1690 0002 1796      		adiw r26,7
 1691 0004 ED91      		ld r30,X+
 1692 0006 FC91      		ld r31,X
 1693 0008 1897      		sbiw r26,7+1
 1694 000a 7183      		std Z+1,r23
 1695 000c 6083      		st Z,r22
 636:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1696               		.loc 1 636 0
 1697 000e 1596      		adiw r26,5
 1698 0010 8D91      		ld r24,X+
 1699 0012 9C91      		ld r25,X
 1700 0014 1697      		sbiw r26,5+1
 1701               	.LVL103:
 1702 0016 0197      		sbiw r24,1
 1703 0018 1696      		adiw r26,5+1
 1704 001a 9C93      		st X,r25
 1705 001c 8E93      		st -X,r24
 1706 001e 1597      		sbiw r26,5
 637:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1707               		.loc 1 637 0
 1708 0020 1D96      		adiw r26,13
 1709 0022 8D91      		ld r24,X+
 1710 0024 9C91      		ld r25,X
 1711 0026 1E97      		sbiw r26,13+1
 1712 0028 8E0F      		add r24,r30
 1713 002a 9F1F      		adc r25,r31
 1714 002c 1896      		adiw r26,7+1
 1715 002e 9C93      		st X,r25
 1716 0030 8E93      		st -X,r24
 1717 0032 1797      		sbiw r26,7
 638:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1718               		.loc 1 638 0
 1719 0034 1B96      		adiw r26,11
 1720 0036 2D91      		ld r18,X+
 1721 0038 3C91      		ld r19,X
 1722 003a 1C97      		sbiw r26,11+1
 1723 003c 8217      		cp r24,r18
 1724 003e 9307      		cpc r25,r19
 1725 0040 00F0      		brlo .L81
 639:../../os/hal/src/hal_buffers.c ****   }
 1726               		.loc 1 639 0
 1727 0042 5196      		adiw r26,17
 1728 0044 8D91      		ld r24,X+
 1729 0046 9C91      		ld r25,X
 1730 0048 5297      		sbiw r26,17+1
 1731 004a 1896      		adiw r26,7+1
 1732 004c 9C93      		st X,r25
 1733 004e 8E93      		st -X,r24
 1734 0050 1797      		sbiw r26,7
 1735               	.L81:
 643:../../os/hal/src/hal_buffers.c **** 
 1736               		.loc 1 643 0
 1737 0052 5496      		adiw r26,19+1
 1738 0054 1C92      		st X,__zero_reg__
 1739 0056 1E92      		st -X,__zero_reg__
 1740 0058 5397      		sbiw r26,19
 646:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1741               		.loc 1 646 0
 1742 005a 5796      		adiw r26,23
 1743 005c ED91      		ld r30,X+
 1744 005e FC91      		ld r31,X
 1745 0060 5897      		sbiw r26,23+1
 1746 0062 3097      		sbiw r30,0
 1747 0064 01F0      		breq .L80
 1748               		.loc 1 647 0
 1749 0066 CD01      		movw r24,r26
 1750 0068 0994      		ijmp
 1751               	.LVL104:
 1752               	.L80:
 1753               	/* epilogue start */
 648:../../os/hal/src/hal_buffers.c ****   }
 649:../../os/hal/src/hal_buffers.c **** }
 1754               		.loc 1 649 0
 1755 006a 0895      		ret
 1756               		.cfi_endproc
 1757               	.LFE260:
 1759               		.section	.text.obqPutTimeout,"ax",@progbits
 1760               	.global	obqPutTimeout
 1762               	obqPutTimeout:
 1763               	.LFB261:
 650:../../os/hal/src/hal_buffers.c **** 
 651:../../os/hal/src/hal_buffers.c **** /**
 652:../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 653:../../os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 654:../../os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 655:../../os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 656:../../os/hal/src/hal_buffers.c ****  *
 657:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 658:../../os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 659:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 660:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 661:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 662:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 663:../../os/hal/src/hal_buffers.c ****  *                      .
 664:../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 665:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 666:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 667:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 668:../../os/hal/src/hal_buffers.c ****  *
 669:../../os/hal/src/hal_buffers.c ****  * @api
 670:../../os/hal/src/hal_buffers.c ****  */
 671:../../os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 672:../../os/hal/src/hal_buffers.c ****                     sysinterval_t timeout) {
 1764               		.loc 1 672 0
 1765               		.cfi_startproc
 1766               	.LVL105:
 1767 0000 1F93      		push r17
 1768               	.LCFI42:
 1769               		.cfi_def_cfa_offset 3
 1770               		.cfi_offset 17, -2
 1771 0002 CF93      		push r28
 1772               	.LCFI43:
 1773               		.cfi_def_cfa_offset 4
 1774               		.cfi_offset 28, -3
 1775 0004 DF93      		push r29
 1776               	.LCFI44:
 1777               		.cfi_def_cfa_offset 5
 1778               		.cfi_offset 29, -4
 1779               	/* prologue: function */
 1780               	/* frame size = 0 */
 1781               	/* stack size = 3 */
 1782               	.L__stack_usage = 3
 1783 0006 EC01      		movw r28,r24
 1784 0008 162F      		mov r17,r22
 1785               	.LBB323:
 1786               	.LBB324:
 1787               	.LBB325:
 1788               	.LBB326:
 430:../../os/common/ports/AVR/chcore.h **** }
 1789               		.loc 4 430 0
 1790               	/* #APP */
 1791               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1792 000a F894      		cli
 1793               	 ;  0 "" 2
 1794               	/* #NOAPP */
 1795               	.LBE326:
 1796               	.LBE325:
 1797               	.LBE324:
 1798               	.LBE323:
 673:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 674:../../os/hal/src/hal_buffers.c **** 
 675:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 676:../../os/hal/src/hal_buffers.c **** 
 677:../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 678:../../os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1799               		.loc 1 678 0
 1800 000c EB89      		ldd r30,Y+19
 1801 000e FC89      		ldd r31,Y+20
 1802 0010 3097      		sbiw r30,0
 1803 0012 01F0      		breq .L94
 1804               	.LVL106:
 1805               	.L84:
 679:../../os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 680:../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 681:../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 682:../../os/hal/src/hal_buffers.c ****       return msg;
 683:../../os/hal/src/hal_buffers.c ****     }
 684:../../os/hal/src/hal_buffers.c ****   }
 685:../../os/hal/src/hal_buffers.c **** 
 686:../../os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 687:../../os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1806               		.loc 1 687 0
 1807 0014 1083      		st Z,r17
 688:../../os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1808               		.loc 1 688 0
 1809 0016 8B89      		ldd r24,Y+19
 1810 0018 9C89      		ldd r25,Y+20
 1811 001a 0196      		adiw r24,1
 1812 001c 9C8B      		std Y+20,r25
 1813 001e 8B8B      		std Y+19,r24
 689:../../os/hal/src/hal_buffers.c **** 
 690:../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 691:../../os/hal/src/hal_buffers.c ****      full in the queue.*/
 692:../../os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1814               		.loc 1 692 0
 1815 0020 2D89      		ldd r18,Y+21
 1816 0022 3E89      		ldd r19,Y+22
 1817 0024 8217      		cp r24,r18
 1818 0026 9307      		cpc r25,r19
 1819 0028 00F0      		brlo .L88
 1820               	.LVL107:
 1821               	.LBB327:
 1822               	.LBB328:
 633:../../os/hal/src/hal_buffers.c **** 
 1823               		.loc 1 633 0
 1824 002a EF81      		ldd r30,Y+7
 1825 002c F885      		ldd r31,Y+8
 1826               	.LBE328:
 1827               	.LBE327:
 693:../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1828               		.loc 1 693 0
 1829 002e 8D85      		ldd r24,Y+13
 1830 0030 9E85      		ldd r25,Y+14
 1831 0032 0297      		sbiw r24,2
 1832               	.LVL108:
 1833               	.LBB330:
 1834               	.LBB329:
 633:../../os/hal/src/hal_buffers.c **** 
 1835               		.loc 1 633 0
 1836 0034 9183      		std Z+1,r25
 1837 0036 8083      		st Z,r24
 636:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1838               		.loc 1 636 0
 1839 0038 8D81      		ldd r24,Y+5
 1840 003a 9E81      		ldd r25,Y+6
 1841               	.LVL109:
 1842 003c 0197      		sbiw r24,1
 1843 003e 9E83      		std Y+6,r25
 1844 0040 8D83      		std Y+5,r24
 1845               	.LVL110:
 637:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1846               		.loc 1 637 0
 1847 0042 8D85      		ldd r24,Y+13
 1848 0044 9E85      		ldd r25,Y+14
 1849 0046 8E0F      		add r24,r30
 1850 0048 9F1F      		adc r25,r31
 1851 004a 9887      		std Y+8,r25
 1852 004c 8F83      		std Y+7,r24
 638:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1853               		.loc 1 638 0
 1854 004e 2B85      		ldd r18,Y+11
 1855 0050 3C85      		ldd r19,Y+12
 1856 0052 8217      		cp r24,r18
 1857 0054 9307      		cpc r25,r19
 1858 0056 00F0      		brlo .L89
 639:../../os/hal/src/hal_buffers.c ****   }
 1859               		.loc 1 639 0
 1860 0058 8989      		ldd r24,Y+17
 1861 005a 9A89      		ldd r25,Y+18
 1862 005c 9887      		std Y+8,r25
 1863 005e 8F83      		std Y+7,r24
 1864               	.L89:
 643:../../os/hal/src/hal_buffers.c **** 
 1865               		.loc 1 643 0
 1866 0060 1C8A      		std Y+20,__zero_reg__
 1867 0062 1B8A      		std Y+19,__zero_reg__
 646:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1868               		.loc 1 646 0
 1869 0064 EF89      		ldd r30,Y+23
 1870 0066 F88D      		ldd r31,Y+24
 1871 0068 3097      		sbiw r30,0
 1872 006a 01F0      		breq .L88
 647:../../os/hal/src/hal_buffers.c ****   }
 1873               		.loc 1 647 0
 1874 006c CE01      		movw r24,r28
 1875 006e 0995      		icall
 1876               	.LVL111:
 1877               	.L88:
 1878               	.LBE329:
 1879               	.LBE330:
 1880               	.LBB331:
 1881               	.LBB332:
 1882               	.LBB333:
 1883               	.LBB334:
 1884               	.LBB335:
 1885               		.loc 4 440 0
 1886               	/* #APP */
 1887               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1888 0070 7894      		sei
 1889               	 ;  0 "" 2
 1890               	/* #NOAPP */
 1891               	.LBE335:
 1892               	.LBE334:
 1893               	.LBE333:
 1894               	.LBE332:
 1895               	.LBE331:
 694:../../os/hal/src/hal_buffers.c ****   }
 695:../../os/hal/src/hal_buffers.c **** 
 696:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 697:../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 1896               		.loc 1 697 0
 1897 0072 90E0      		ldi r25,0
 1898 0074 80E0      		ldi r24,0
 1899               	.L83:
 1900               	/* epilogue start */
 698:../../os/hal/src/hal_buffers.c **** }
 1901               		.loc 1 698 0
 1902 0076 DF91      		pop r29
 1903 0078 CF91      		pop r28
 1904               	.LVL112:
 1905 007a 1F91      		pop r17
 1906               	.LVL113:
 1907 007c 0895      		ret
 1908               	.LVL114:
 1909               	.L94:
 679:../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1910               		.loc 1 679 0
 1911 007e BA01      		movw r22,r20
 1912 0080 A901      		movw r20,r18
 1913 0082 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1914               	.LVL115:
 680:../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1915               		.loc 1 680 0
 1916 0086 0097      		sbiw r24,0
 1917 0088 01F4      		brne .L85
 1918 008a EB89      		ldd r30,Y+19
 1919 008c FC89      		ldd r31,Y+20
 1920 008e 00C0      		rjmp .L84
 1921               	.L85:
 1922               	.LBB336:
 1923               	.LBB337:
 1924               	.LBB338:
 1925               	.LBB339:
 1926               	.LBB340:
 1927               		.loc 4 440 0
 1928               	/* #APP */
 1929               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1930 0090 7894      		sei
 1931               	 ;  0 "" 2
 1932               	/* #NOAPP */
 1933               	.LBE340:
 1934               	.LBE339:
 1935               	.LBE338:
 1936               	.LBE337:
 1937               	.LBE336:
 682:../../os/hal/src/hal_buffers.c ****     }
 1938               		.loc 1 682 0
 1939 0092 00C0      		rjmp .L83
 1940               		.cfi_endproc
 1941               	.LFE261:
 1943               		.section	.text.obqWriteTimeout,"ax",@progbits
 1944               	.global	obqWriteTimeout
 1946               	obqWriteTimeout:
 1947               	.LFB262:
 699:../../os/hal/src/hal_buffers.c **** 
 700:../../os/hal/src/hal_buffers.c **** /**
 701:../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 702:../../os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 703:../../os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 704:../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 705:../../os/hal/src/hal_buffers.c ****  *          been reset.
 706:../../os/hal/src/hal_buffers.c ****  *
 707:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 708:../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 709:../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 710:../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 711:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 712:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 713:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 714:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 715:../../os/hal/src/hal_buffers.c ****  *                      .
 716:../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 717:../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 718:../../os/hal/src/hal_buffers.c ****  *
 719:../../os/hal/src/hal_buffers.c ****  * @api
 720:../../os/hal/src/hal_buffers.c ****  */
 721:../../os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 722:../../os/hal/src/hal_buffers.c ****                        size_t n, sysinterval_t timeout) {
 1948               		.loc 1 722 0
 1949               		.cfi_startproc
 1950               	.LVL116:
 1951 0000 4F92      		push r4
 1952               	.LCFI45:
 1953               		.cfi_def_cfa_offset 3
 1954               		.cfi_offset 4, -2
 1955 0002 5F92      		push r5
 1956               	.LCFI46:
 1957               		.cfi_def_cfa_offset 4
 1958               		.cfi_offset 5, -3
 1959 0004 6F92      		push r6
 1960               	.LCFI47:
 1961               		.cfi_def_cfa_offset 5
 1962               		.cfi_offset 6, -4
 1963 0006 7F92      		push r7
 1964               	.LCFI48:
 1965               		.cfi_def_cfa_offset 6
 1966               		.cfi_offset 7, -5
 1967 0008 AF92      		push r10
 1968               	.LCFI49:
 1969               		.cfi_def_cfa_offset 7
 1970               		.cfi_offset 10, -6
 1971 000a BF92      		push r11
 1972               	.LCFI50:
 1973               		.cfi_def_cfa_offset 8
 1974               		.cfi_offset 11, -7
 1975 000c CF92      		push r12
 1976               	.LCFI51:
 1977               		.cfi_def_cfa_offset 9
 1978               		.cfi_offset 12, -8
 1979 000e DF92      		push r13
 1980               	.LCFI52:
 1981               		.cfi_def_cfa_offset 10
 1982               		.cfi_offset 13, -9
 1983 0010 EF92      		push r14
 1984               	.LCFI53:
 1985               		.cfi_def_cfa_offset 11
 1986               		.cfi_offset 14, -10
 1987 0012 FF92      		push r15
 1988               	.LCFI54:
 1989               		.cfi_def_cfa_offset 12
 1990               		.cfi_offset 15, -11
 1991 0014 0F93      		push r16
 1992               	.LCFI55:
 1993               		.cfi_def_cfa_offset 13
 1994               		.cfi_offset 16, -12
 1995 0016 1F93      		push r17
 1996               	.LCFI56:
 1997               		.cfi_def_cfa_offset 14
 1998               		.cfi_offset 17, -13
 1999 0018 CF93      		push r28
 2000               	.LCFI57:
 2001               		.cfi_def_cfa_offset 15
 2002               		.cfi_offset 28, -14
 2003 001a DF93      		push r29
 2004               	.LCFI58:
 2005               		.cfi_def_cfa_offset 16
 2006               		.cfi_offset 29, -15
 2007               	/* prologue: function */
 2008               	/* frame size = 0 */
 2009               	/* stack size = 14 */
 2010               	.L__stack_usage = 14
 2011 001c EC01      		movw r28,r24
 2012 001e 6B01      		movw r12,r22
 2013 0020 5A01      		movw r10,r20
 2014 0022 2801      		movw r4,r16
 2015 0024 3901      		movw r6,r18
 2016               	.LVL117:
 2017               	.LBB341:
 2018               	.LBB342:
 2019               	.LBB343:
 2020               	.LBB344:
 430:../../os/common/ports/AVR/chcore.h **** }
 2021               		.loc 4 430 0
 2022               	/* #APP */
 2023               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2024 0026 F894      		cli
 2025               	 ;  0 "" 2
 2026               	/* #NOAPP */
 2027               	.LBE344:
 2028               	.LBE343:
 2029               	.LBE342:
 2030               	.LBE341:
 723:../../os/hal/src/hal_buffers.c ****   size_t w = 0;
 2031               		.loc 1 723 0
 2032 0028 F12C      		mov r15,__zero_reg__
 2033 002a E12C      		mov r14,__zero_reg__
 2034 002c 00C0      		rjmp .L106
 2035               	.LVL118:
 2036               	.L111:
 2037               	.LBB345:
 724:../../os/hal/src/hal_buffers.c **** 
 725:../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 726:../../os/hal/src/hal_buffers.c **** 
 727:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 728:../../os/hal/src/hal_buffers.c **** 
 729:../../os/hal/src/hal_buffers.c ****   while (true) {
 730:../../os/hal/src/hal_buffers.c ****     size_t size;
 731:../../os/hal/src/hal_buffers.c **** 
 732:../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 733:../../os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 734:../../os/hal/src/hal_buffers.c ****       msg_t msg;
 735:../../os/hal/src/hal_buffers.c **** 
 736:../../os/hal/src/hal_buffers.c ****       /* Getting an empty buffer using the specified timeout.*/
 737:../../os/hal/src/hal_buffers.c ****       msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 738:../../os/hal/src/hal_buffers.c **** 
 739:../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 740:../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 741:../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 742:../../os/hal/src/hal_buffers.c ****         return w;
 743:../../os/hal/src/hal_buffers.c ****       }
 744:../../os/hal/src/hal_buffers.c ****     }
 745:../../os/hal/src/hal_buffers.c **** 
 746:../../os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 747:../../os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 748:../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 749:../../os/hal/src/hal_buffers.c ****       size = n - w;
 750:../../os/hal/src/hal_buffers.c ****     }
 751:../../os/hal/src/hal_buffers.c **** 
 752:../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 753:../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 754:../../os/hal/src/hal_buffers.c ****     if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 755:../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 756:../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 2038               		.loc 1 756 0
 2039 002e 20E4      		ldi r18,lo8(64)
 2040 0030 F601      		movw r30,r12
 2041 0032 DC01      		movw r26,r24
 2042               		0:
 2043 0034 0190      		ld r0,Z+
 2044 0036 0D92      		st X+,r0
 2045 0038 2A95      		dec r18
 2046 003a 01F4      		brne 0b
 757:../../os/hal/src/hal_buffers.c ****       bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 2047               		.loc 1 757 0
 2048 003c 20E4      		ldi r18,64
 2049 003e C20E      		add r12,r18
 2050 0040 D11C      		adc r13,__zero_reg__
 2051               	.LVL119:
 758:../../os/hal/src/hal_buffers.c ****       obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 2052               		.loc 1 758 0
 2053 0042 8B89      		ldd r24,Y+19
 2054 0044 9C89      		ldd r25,Y+20
 2055 0046 805C      		subi r24,-64
 2056 0048 9F4F      		sbci r25,-1
 2057 004a 9C8B      		std Y+20,r25
 2058 004c 8B8B      		std Y+19,r24
 759:../../os/hal/src/hal_buffers.c ****       w         += (size_t)BUFFERS_CHUNKS_SIZE;
 2059               		.loc 1 759 0
 2060 004e 20E4      		ldi r18,64
 2061 0050 E20E      		add r14,r18
 2062 0052 F11C      		adc r15,__zero_reg__
 2063               	.LVL120:
 2064               	.L101:
 760:../../os/hal/src/hal_buffers.c ****     }
 761:../../os/hal/src/hal_buffers.c ****     else {
 762:../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 763:../../os/hal/src/hal_buffers.c ****       bp        += size;
 764:../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 765:../../os/hal/src/hal_buffers.c ****       w         += size;
 766:../../os/hal/src/hal_buffers.c ****     }
 767:../../os/hal/src/hal_buffers.c **** 
 768:../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 769:../../os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 2065               		.loc 1 769 0
 2066 0054 2D89      		ldd r18,Y+21
 2067 0056 3E89      		ldd r19,Y+22
 2068 0058 8217      		cp r24,r18
 2069 005a 9307      		cpc r25,r19
 2070 005c 00F0      		brlo .L103
 2071               	.LVL121:
 2072               	.LBB346:
 2073               	.LBB347:
 633:../../os/hal/src/hal_buffers.c **** 
 2074               		.loc 1 633 0
 2075 005e EF81      		ldd r30,Y+7
 2076 0060 F885      		ldd r31,Y+8
 2077               	.LBE347:
 2078               	.LBE346:
 770:../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 2079               		.loc 1 770 0
 2080 0062 8D85      		ldd r24,Y+13
 2081 0064 9E85      		ldd r25,Y+14
 2082 0066 0297      		sbiw r24,2
 2083               	.LVL122:
 2084               	.LBB349:
 2085               	.LBB348:
 633:../../os/hal/src/hal_buffers.c **** 
 2086               		.loc 1 633 0
 2087 0068 9183      		std Z+1,r25
 2088 006a 8083      		st Z,r24
 636:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2089               		.loc 1 636 0
 2090 006c 8D81      		ldd r24,Y+5
 2091 006e 9E81      		ldd r25,Y+6
 2092               	.LVL123:
 2093 0070 0197      		sbiw r24,1
 2094 0072 9E83      		std Y+6,r25
 2095 0074 8D83      		std Y+5,r24
 2096               	.LVL124:
 637:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2097               		.loc 1 637 0
 2098 0076 8D85      		ldd r24,Y+13
 2099 0078 9E85      		ldd r25,Y+14
 2100 007a 8E0F      		add r24,r30
 2101 007c 9F1F      		adc r25,r31
 2102 007e 9887      		std Y+8,r25
 2103 0080 8F83      		std Y+7,r24
 638:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2104               		.loc 1 638 0
 2105 0082 2B85      		ldd r18,Y+11
 2106 0084 3C85      		ldd r19,Y+12
 2107 0086 8217      		cp r24,r18
 2108 0088 9307      		cpc r25,r19
 2109 008a 00F0      		brlo .L104
 639:../../os/hal/src/hal_buffers.c ****   }
 2110               		.loc 1 639 0
 2111 008c 8989      		ldd r24,Y+17
 2112 008e 9A89      		ldd r25,Y+18
 2113 0090 9887      		std Y+8,r25
 2114 0092 8F83      		std Y+7,r24
 2115               	.L104:
 643:../../os/hal/src/hal_buffers.c **** 
 2116               		.loc 1 643 0
 2117 0094 1C8A      		std Y+20,__zero_reg__
 2118 0096 1B8A      		std Y+19,__zero_reg__
 646:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2119               		.loc 1 646 0
 2120 0098 EF89      		ldd r30,Y+23
 2121 009a F88D      		ldd r31,Y+24
 2122 009c 3097      		sbiw r30,0
 2123 009e 01F0      		breq .L103
 647:../../os/hal/src/hal_buffers.c ****   }
 2124               		.loc 1 647 0
 2125 00a0 CE01      		movw r24,r28
 2126 00a2 0995      		icall
 2127               	.LVL125:
 2128               	.L103:
 2129               	.LBE348:
 2130               	.LBE349:
 2131               	.LBB350:
 2132               	.LBB351:
 2133               	.LBB352:
 2134               	.LBB353:
 2135               	.LBB354:
 2136               		.loc 4 440 0
 2137               	/* #APP */
 2138               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2139 00a4 7894      		sei
 2140               	 ;  0 "" 2
 2141               	/* #NOAPP */
 2142               	.LBE354:
 2143               	.LBE353:
 2144               	.LBE352:
 2145               	.LBE351:
 2146               	.LBE350:
 771:../../os/hal/src/hal_buffers.c ****     }
 772:../../os/hal/src/hal_buffers.c **** 
 773:../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 774:../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 775:../../os/hal/src/hal_buffers.c ****     if (w >= n) {
 2147               		.loc 1 775 0
 2148 00a6 EA14      		cp r14,r10
 2149 00a8 FB04      		cpc r15,r11
 2150 00aa 00F4      		brsh .L95
 2151               	.LBB355:
 2152               	.LBB356:
 2153               	.LBB357:
 2154               	.LBB358:
 430:../../os/common/ports/AVR/chcore.h **** }
 2155               		.loc 4 430 0
 2156               	/* #APP */
 2157               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2158 00ac F894      		cli
 2159               	 ;  0 "" 2
 2160               	.LVL126:
 2161               	/* #NOAPP */
 2162               	.L106:
 2163               	.LBE358:
 2164               	.LBE357:
 2165               	.LBE356:
 2166               	.LBE355:
 733:../../os/hal/src/hal_buffers.c ****       msg_t msg;
 2167               		.loc 1 733 0
 2168 00ae 8B89      		ldd r24,Y+19
 2169 00b0 9C89      		ldd r25,Y+20
 2170 00b2 0097      		sbiw r24,0
 2171 00b4 01F0      		breq .L110
 2172               	.L96:
 747:../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 2173               		.loc 1 747 0
 2174 00b6 2D89      		ldd r18,Y+21
 2175 00b8 3E89      		ldd r19,Y+22
 2176 00ba 281B      		sub r18,r24
 2177 00bc 390B      		sbc r19,r25
 2178               	.LVL127:
 2179 00be 8501      		movw r16,r10
 2180 00c0 0E19      		sub r16,r14
 2181 00c2 1F09      		sbc r17,r15
 2182 00c4 2017      		cp r18,r16
 2183 00c6 3107      		cpc r19,r17
 2184 00c8 00F4      		brsh .L99
 2185 00ca 8901      		movw r16,r18
 2186               	.L99:
 2187               	.LVL128:
 754:../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 2188               		.loc 1 754 0
 2189 00cc 0134      		cpi r16,65
 2190 00ce 1105      		cpc r17,__zero_reg__
 2191 00d0 00F0      		brlo .+2
 2192 00d2 00C0      		rjmp .L111
 762:../../os/hal/src/hal_buffers.c ****       bp        += size;
 2193               		.loc 1 762 0
 2194 00d4 A801      		movw r20,r16
 2195 00d6 B601      		movw r22,r12
 2196 00d8 0E94 0000 		call memcpy
 2197               	.LVL129:
 763:../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 2198               		.loc 1 763 0
 2199 00dc C00E      		add r12,r16
 2200 00de D11E      		adc r13,r17
 2201               	.LVL130:
 764:../../os/hal/src/hal_buffers.c ****       w         += size;
 2202               		.loc 1 764 0
 2203 00e0 8B89      		ldd r24,Y+19
 2204 00e2 9C89      		ldd r25,Y+20
 2205 00e4 800F      		add r24,r16
 2206 00e6 911F      		adc r25,r17
 2207 00e8 9C8B      		std Y+20,r25
 2208 00ea 8B8B      		std Y+19,r24
 765:../../os/hal/src/hal_buffers.c ****     }
 2209               		.loc 1 765 0
 2210 00ec E00E      		add r14,r16
 2211 00ee F11E      		adc r15,r17
 2212               	.LVL131:
 2213 00f0 00C0      		rjmp .L101
 2214               	.LVL132:
 2215               	.L110:
 2216               	.LBB359:
 737:../../os/hal/src/hal_buffers.c **** 
 2217               		.loc 1 737 0
 2218 00f2 B301      		movw r22,r6
 2219 00f4 A201      		movw r20,r4
 2220 00f6 CE01      		movw r24,r28
 2221 00f8 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2222               	.LVL133:
 740:../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2223               		.loc 1 740 0
 2224 00fc 892B      		or r24,r25
 2225 00fe 01F4      		brne .L97
 2226 0100 8B89      		ldd r24,Y+19
 2227 0102 9C89      		ldd r25,Y+20
 2228               	.LVL134:
 2229 0104 00C0      		rjmp .L96
 2230               	.LVL135:
 2231               	.L97:
 2232               	.LBB360:
 2233               	.LBB361:
 2234               	.LBB362:
 2235               	.LBB363:
 2236               	.LBB364:
 2237               		.loc 4 440 0
 2238               	/* #APP */
 2239               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2240 0106 7894      		sei
 2241               	 ;  0 "" 2
 2242               	.LVL136:
 2243               	/* #NOAPP */
 2244               	.L95:
 2245               	.LBE364:
 2246               	.LBE363:
 2247               	.LBE362:
 2248               	.LBE361:
 2249               	.LBE360:
 2250               	.LBE359:
 2251               	.LBE345:
 776:../../os/hal/src/hal_buffers.c ****       return w;
 777:../../os/hal/src/hal_buffers.c ****     }
 778:../../os/hal/src/hal_buffers.c ****     osalSysLock();
 779:../../os/hal/src/hal_buffers.c ****   }
 780:../../os/hal/src/hal_buffers.c **** }
 2252               		.loc 1 780 0
 2253 0108 C701      		movw r24,r14
 2254               	/* epilogue start */
 2255 010a DF91      		pop r29
 2256 010c CF91      		pop r28
 2257               	.LVL137:
 2258 010e 1F91      		pop r17
 2259 0110 0F91      		pop r16
 2260 0112 FF90      		pop r15
 2261 0114 EF90      		pop r14
 2262               	.LVL138:
 2263 0116 DF90      		pop r13
 2264 0118 CF90      		pop r12
 2265               	.LVL139:
 2266 011a BF90      		pop r11
 2267 011c AF90      		pop r10
 2268               	.LVL140:
 2269 011e 7F90      		pop r7
 2270 0120 6F90      		pop r6
 2271 0122 5F90      		pop r5
 2272 0124 4F90      		pop r4
 2273 0126 0895      		ret
 2274               		.cfi_endproc
 2275               	.LFE262:
 2277               		.section	.text.obqTryFlushI,"ax",@progbits
 2278               	.global	obqTryFlushI
 2280               	obqTryFlushI:
 2281               	.LFB263:
 781:../../os/hal/src/hal_buffers.c **** 
 782:../../os/hal/src/hal_buffers.c **** /**
 783:../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 784:../../os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 785:../../os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 786:../../os/hal/src/hal_buffers.c ****  *          returned instead.
 787:../../os/hal/src/hal_buffers.c ****  *
 788:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 789:../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 790:../../os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 791:../../os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 792:../../os/hal/src/hal_buffers.c ****  *
 793:../../os/hal/src/hal_buffers.c ****  * @iclass
 794:../../os/hal/src/hal_buffers.c ****  */
 795:../../os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2282               		.loc 1 795 0
 2283               		.cfi_startproc
 2284               	.LVL141:
 2285               	/* prologue: function */
 2286               	/* frame size = 0 */
 2287               	/* stack size = 0 */
 2288               	.L__stack_usage = 0
 2289 0000 FC01      		movw r30,r24
 796:../../os/hal/src/hal_buffers.c **** 
 797:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 798:../../os/hal/src/hal_buffers.c **** 
 799:../../os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 800:../../os/hal/src/hal_buffers.c ****      it is not being written.*/
 801:../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2290               		.loc 1 801 0
 2291 0002 A781      		ldd r26,Z+7
 2292 0004 B085      		ldd r27,Z+8
 2293 0006 8185      		ldd r24,Z+9
 2294 0008 9285      		ldd r25,Z+10
 2295               	.LVL142:
 2296 000a A817      		cp r26,r24
 2297 000c B907      		cpc r27,r25
 2298 000e 01F0      		breq .L120
 2299               	.L119:
 802:../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 803:../../os/hal/src/hal_buffers.c **** 
 804:../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 805:../../os/hal/src/hal_buffers.c **** 
 806:../../os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 807:../../os/hal/src/hal_buffers.c ****       *((size_t *)(void *)obqp->bwrptr) = size;
 808:../../os/hal/src/hal_buffers.c **** 
 809:../../os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 810:../../os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 811:../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 812:../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 813:../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 814:../../os/hal/src/hal_buffers.c ****       }
 815:../../os/hal/src/hal_buffers.c **** 
 816:../../os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 817:../../os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 818:../../os/hal/src/hal_buffers.c **** 
 819:../../os/hal/src/hal_buffers.c ****       return true;
 820:../../os/hal/src/hal_buffers.c ****     }
 821:../../os/hal/src/hal_buffers.c ****   }
 822:../../os/hal/src/hal_buffers.c ****   return false;
 2300               		.loc 1 822 0
 2301 0010 80E0      		ldi r24,0
 2302               	/* epilogue start */
 823:../../os/hal/src/hal_buffers.c **** }
 2303               		.loc 1 823 0
 2304 0012 0895      		ret
 2305               	.L120:
 801:../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2306               		.loc 1 801 0 discriminator 1
 2307 0014 8581      		ldd r24,Z+5
 2308 0016 9681      		ldd r25,Z+6
 2309 0018 892B      		or r24,r25
 2310 001a 01F0      		breq .L119
 801:../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2311               		.loc 1 801 0 is_stmt 0
 2312 001c 8389      		ldd r24,Z+19
 2313 001e 9489      		ldd r25,Z+20
 2314 0020 0097      		sbiw r24,0
 2315 0022 01F0      		breq .L119
 2316               	.LBB365:
 802:../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2317               		.loc 1 802 0 is_stmt 1
 2318 0024 0297      		sbiw r24,2
 2319 0026 8A1B      		sub r24,r26
 2320 0028 9B0B      		sbc r25,r27
 2321               	.LVL143:
 804:../../os/hal/src/hal_buffers.c **** 
 2322               		.loc 1 804 0
 2323 002a 01F0      		breq .L119
 807:../../os/hal/src/hal_buffers.c **** 
 2324               		.loc 1 807 0
 2325 002c 1196      		adiw r26,1
 2326 002e 9C93      		st X,r25
 2327 0030 8E93      		st -X,r24
 810:../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2328               		.loc 1 810 0
 2329 0032 8581      		ldd r24,Z+5
 2330 0034 9681      		ldd r25,Z+6
 2331               	.LVL144:
 2332 0036 0197      		sbiw r24,1
 2333 0038 9683      		std Z+6,r25
 2334 003a 8583      		std Z+5,r24
 2335               	.LVL145:
 811:../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2336               		.loc 1 811 0
 2337 003c 8585      		ldd r24,Z+13
 2338 003e 9685      		ldd r25,Z+14
 2339 0040 A80F      		add r26,r24
 2340 0042 B91F      		adc r27,r25
 2341               	.LVL146:
 2342 0044 B087      		std Z+8,r27
 2343 0046 A783      		std Z+7,r26
 2344               	.LVL147:
 812:../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2345               		.loc 1 812 0
 2346 0048 8385      		ldd r24,Z+11
 2347 004a 9485      		ldd r25,Z+12
 2348 004c A817      		cp r26,r24
 2349 004e B907      		cpc r27,r25
 2350 0050 00F0      		brlo .L115
 813:../../os/hal/src/hal_buffers.c ****       }
 2351               		.loc 1 813 0
 2352 0052 8189      		ldd r24,Z+17
 2353 0054 9289      		ldd r25,Z+18
 2354 0056 9087      		std Z+8,r25
 2355 0058 8783      		std Z+7,r24
 2356               	.L115:
 817:../../os/hal/src/hal_buffers.c **** 
 2357               		.loc 1 817 0
 2358 005a 148A      		std Z+20,__zero_reg__
 2359 005c 138A      		std Z+19,__zero_reg__
 819:../../os/hal/src/hal_buffers.c ****     }
 2360               		.loc 1 819 0
 2361 005e 81E0      		ldi r24,lo8(1)
 2362 0060 0895      		ret
 2363               	.LBE365:
 2364               		.cfi_endproc
 2365               	.LFE263:
 2367               		.section	.text.obqFlush,"ax",@progbits
 2368               	.global	obqFlush
 2370               	obqFlush:
 2371               	.LFB264:
 824:../../os/hal/src/hal_buffers.c **** 
 825:../../os/hal/src/hal_buffers.c **** /**
 826:../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 827:../../os/hal/src/hal_buffers.c ****  *
 828:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 829:../../os/hal/src/hal_buffers.c ****  *
 830:../../os/hal/src/hal_buffers.c ****  * @api
 831:../../os/hal/src/hal_buffers.c ****  */
 832:../../os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2372               		.loc 1 832 0
 2373               		.cfi_startproc
 2374               	.LVL148:
 2375               	/* prologue: function */
 2376               	/* frame size = 0 */
 2377               	/* stack size = 0 */
 2378               	.L__stack_usage = 0
 2379 0000 DC01      		movw r26,r24
 2380               	.LBB366:
 2381               	.LBB367:
 2382               	.LBB368:
 2383               	.LBB369:
 430:../../os/common/ports/AVR/chcore.h **** }
 2384               		.loc 4 430 0
 2385               	/* #APP */
 2386               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2387 0002 F894      		cli
 2388               	 ;  0 "" 2
 2389               	/* #NOAPP */
 2390               	.LBE369:
 2391               	.LBE368:
 2392               	.LBE367:
 2393               	.LBE366:
 833:../../os/hal/src/hal_buffers.c **** 
 834:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 835:../../os/hal/src/hal_buffers.c **** 
 836:../../os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 837:../../os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2394               		.loc 1 837 0
 2395 0004 5396      		adiw r26,19
 2396 0006 8D91      		ld r24,X+
 2397 0008 9C91      		ld r25,X
 2398 000a 5497      		sbiw r26,19+1
 2399               	.LVL149:
 2400 000c 0097      		sbiw r24,0
 2401 000e 01F0      		breq .L123
 2402               	.LBB370:
 838:../../os/hal/src/hal_buffers.c ****     size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 2403               		.loc 1 838 0
 2404 0010 1796      		adiw r26,7
 2405 0012 ED91      		ld r30,X+
 2406 0014 FC91      		ld r31,X
 2407 0016 1897      		sbiw r26,7+1
 2408 0018 0297      		sbiw r24,2
 2409 001a 8E1B      		sub r24,r30
 2410 001c 9F0B      		sbc r25,r31
 2411               	.LVL150:
 839:../../os/hal/src/hal_buffers.c **** 
 840:../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2412               		.loc 1 840 0
 2413 001e 01F0      		breq .L123
 2414               	.LVL151:
 2415               	.LBB371:
 2416               	.LBB372:
 633:../../os/hal/src/hal_buffers.c **** 
 2417               		.loc 1 633 0
 2418 0020 9183      		std Z+1,r25
 2419 0022 8083      		st Z,r24
 636:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2420               		.loc 1 636 0
 2421 0024 1596      		adiw r26,5
 2422 0026 8D91      		ld r24,X+
 2423 0028 9C91      		ld r25,X
 2424 002a 1697      		sbiw r26,5+1
 2425               	.LVL152:
 2426 002c 0197      		sbiw r24,1
 2427 002e 1696      		adiw r26,5+1
 2428 0030 9C93      		st X,r25
 2429 0032 8E93      		st -X,r24
 2430 0034 1597      		sbiw r26,5
 2431               	.LVL153:
 637:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2432               		.loc 1 637 0
 2433 0036 1D96      		adiw r26,13
 2434 0038 8D91      		ld r24,X+
 2435 003a 9C91      		ld r25,X
 2436 003c 1E97      		sbiw r26,13+1
 2437 003e E80F      		add r30,r24
 2438 0040 F91F      		adc r31,r25
 2439               	.LVL154:
 2440 0042 1896      		adiw r26,7+1
 2441 0044 FC93      		st X,r31
 2442 0046 EE93      		st -X,r30
 2443 0048 1797      		sbiw r26,7
 2444               	.LVL155:
 638:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2445               		.loc 1 638 0
 2446 004a 1B96      		adiw r26,11
 2447 004c 8D91      		ld r24,X+
 2448 004e 9C91      		ld r25,X
 2449 0050 1C97      		sbiw r26,11+1
 2450 0052 E817      		cp r30,r24
 2451 0054 F907      		cpc r31,r25
 2452 0056 00F4      		brsh .L132
 2453               	.L125:
 643:../../os/hal/src/hal_buffers.c **** 
 2454               		.loc 1 643 0
 2455 0058 5496      		adiw r26,19+1
 2456 005a 1C92      		st X,__zero_reg__
 2457 005c 1E92      		st -X,__zero_reg__
 2458 005e 5397      		sbiw r26,19
 646:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2459               		.loc 1 646 0
 2460 0060 5796      		adiw r26,23
 2461 0062 ED91      		ld r30,X+
 2462 0064 FC91      		ld r31,X
 2463 0066 5897      		sbiw r26,23+1
 2464 0068 3097      		sbiw r30,0
 2465 006a 01F0      		breq .L123
 2466 006c CD01      		movw r24,r26
 647:../../os/hal/src/hal_buffers.c ****   }
 2467               		.loc 1 647 0
 2468 006e 0995      		icall
 2469               	.LVL156:
 2470               	.L123:
 2471               	.LBE372:
 2472               	.LBE371:
 2473               	.LBE370:
 2474               	.LBB375:
 2475               	.LBB376:
 2476               	.LBB377:
 2477               	.LBB378:
 2478               	.LBB379:
 2479               		.loc 4 440 0
 2480               	/* #APP */
 2481               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2482 0070 7894      		sei
 2483               	 ;  0 "" 2
 2484               	/* epilogue start */
 2485               	/* #NOAPP */
 2486               	.LBE379:
 2487               	.LBE378:
 2488               	.LBE377:
 2489               	.LBE376:
 2490               	.LBE375:
 841:../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, size);
 842:../../os/hal/src/hal_buffers.c ****     }
 843:../../os/hal/src/hal_buffers.c ****   }
 844:../../os/hal/src/hal_buffers.c **** 
 845:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 846:../../os/hal/src/hal_buffers.c **** }
 2491               		.loc 1 846 0
 2492 0072 0895      		ret
 2493               	.LVL157:
 2494               	.L132:
 2495               	.LBB380:
 2496               	.LBB374:
 2497               	.LBB373:
 639:../../os/hal/src/hal_buffers.c ****   }
 2498               		.loc 1 639 0
 2499 0074 5196      		adiw r26,17
 2500 0076 8D91      		ld r24,X+
 2501 0078 9C91      		ld r25,X
 2502 007a 5297      		sbiw r26,17+1
 2503 007c 1896      		adiw r26,7+1
 2504 007e 9C93      		st X,r25
 2505 0080 8E93      		st -X,r24
 2506 0082 1797      		sbiw r26,7
 2507 0084 00C0      		rjmp .L125
 2508               	.LBE373:
 2509               	.LBE374:
 2510               	.LBE380:
 2511               		.cfi_endproc
 2512               	.LFE264:
 2514               		.text
 2515               	.Letext0:
 2516               		.file 5 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 2517               		.file 6 "/usr/lib/avr/include/stdint.h"
 2518               		.file 7 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2519               		.file 8 "../../os/rt/include/chearly.h"
 2520               		.file 9 "../../os/rt/include/chobjects.h"
 2521               		.file 10 "../../os/rt/include/chrfcu.h"
 2522               		.file 11 "../../os/rt/include/chdebug.h"
 2523               		.file 12 "../../os/rt/include/chtime.h"
 2524               		.file 13 "../../os/rt/include/chsem.h"
 2525               		.file 14 "../../os/rt/include/chmtx.h"
 2526               		.file 15 "../../os/rt/include/chsys.h"
 2527               		.file 16 "../../os/rt/include/chregistry.h"
 2528               		.file 17 "../../os/rt/include/chevents.h"
 2529               		.file 18 "../../os/oslib/include/chmemcore.h"
 2530               		.file 19 "../../os/hal/include/hal_buffers.h"
 2531               		.file 20 "../../os/hal/include/hal_queues.h"
 2532               		.file 21 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 2533               		.file 22 "../../os/hal/include/hal_serial.h"
 2534               		.file 23 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 2535               		.file 24 "../../os/rt/include/chthreads.h"
 2536               		.file 25 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_buffers.c
     /tmp/cc4eHGfA.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc4eHGfA.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc4eHGfA.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc4eHGfA.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc4eHGfA.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc4eHGfA.s:13     .text.ibqObjectInit:0000000000000000 ibqObjectInit
     /tmp/cc4eHGfA.s:133    .text.ibqResetI:0000000000000000 ibqResetI
     /tmp/cc4eHGfA.s:179    .text.ibqGetEmptyBufferI:0000000000000000 ibqGetEmptyBufferI
     /tmp/cc4eHGfA.s:221    .text.ibqPostFullBufferI:0000000000000000 ibqPostFullBufferI
     /tmp/cc4eHGfA.s:281    .text.ibqGetFullBufferTimeoutS:0000000000000000 ibqGetFullBufferTimeoutS
     /tmp/cc4eHGfA.s:403    .text.ibqGetFullBufferTimeout:0000000000000000 ibqGetFullBufferTimeout
     /tmp/cc4eHGfA.s:455    .text.ibqReleaseEmptyBuffer:0000000000000000 ibqReleaseEmptyBuffer
     /tmp/cc4eHGfA.s:570    .text.ibqReleaseEmptyBufferS:0000000000000000 ibqReleaseEmptyBufferS
     /tmp/cc4eHGfA.s:650    .text.ibqGetTimeout:0000000000000000 ibqGetTimeout
     /tmp/cc4eHGfA.s:800    .text.ibqReadTimeout:0000000000000000 ibqReadTimeout
     /tmp/cc4eHGfA.s:1118   .text.obqObjectInit:0000000000000000 obqObjectInit
     /tmp/cc4eHGfA.s:1236   .text.obqResetI:0000000000000000 obqResetI
     /tmp/cc4eHGfA.s:1283   .text.obqGetFullBufferI:0000000000000000 obqGetFullBufferI
     /tmp/cc4eHGfA.s:1332   .text.obqReleaseEmptyBufferI:0000000000000000 obqReleaseEmptyBufferI
     /tmp/cc4eHGfA.s:1387   .text.obqGetEmptyBufferTimeoutS:0000000000000000 obqGetEmptyBufferTimeoutS
     /tmp/cc4eHGfA.s:1510   .text.obqGetEmptyBufferTimeout:0000000000000000 obqGetEmptyBufferTimeout
     /tmp/cc4eHGfA.s:1561   .text.obqPostFullBuffer:0000000000000000 obqPostFullBuffer
     /tmp/cc4eHGfA.s:1679   .text.obqPostFullBufferS:0000000000000000 obqPostFullBufferS
     /tmp/cc4eHGfA.s:1762   .text.obqPutTimeout:0000000000000000 obqPutTimeout
     /tmp/cc4eHGfA.s:1946   .text.obqWriteTimeout:0000000000000000 obqWriteTimeout
     /tmp/cc4eHGfA.s:2280   .text.obqTryFlushI:0000000000000000 obqTryFlushI
     /tmp/cc4eHGfA.s:2370   .text.obqFlush:0000000000000000 obqFlush

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
memcpy
