   1               		.file	"hal_queues.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.iq_read,"ax",@progbits
  12               	iq_read:
  13               	.LFB243:
  14               		.file 1 "../../os/hal/src/hal_queues.c"
   1:../../os/hal/src/hal_queues.c **** /*
   2:../../os/hal/src/hal_queues.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/src/hal_queues.c **** 
   4:../../os/hal/src/hal_queues.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/src/hal_queues.c ****     you may not use this file except in compliance with the License.
   6:../../os/hal/src/hal_queues.c ****     You may obtain a copy of the License at
   7:../../os/hal/src/hal_queues.c **** 
   8:../../os/hal/src/hal_queues.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/src/hal_queues.c **** 
  10:../../os/hal/src/hal_queues.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/src/hal_queues.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/src/hal_queues.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/src/hal_queues.c ****     See the License for the specific language governing permissions and
  14:../../os/hal/src/hal_queues.c ****     limitations under the License.
  15:../../os/hal/src/hal_queues.c **** */
  16:../../os/hal/src/hal_queues.c **** 
  17:../../os/hal/src/hal_queues.c **** /**
  18:../../os/hal/src/hal_queues.c ****  * @file    hal_queues.c
  19:../../os/hal/src/hal_queues.c ****  * @brief   I/O Queues code.
  20:../../os/hal/src/hal_queues.c ****  *
  21:../../os/hal/src/hal_queues.c ****  * @addtogroup HAL_QUEUES
  22:../../os/hal/src/hal_queues.c ****  * @details Queues are mostly used in serial-like device drivers.
  23:../../os/hal/src/hal_queues.c ****  *          Serial device drivers are usually designed to have a lower side
  24:../../os/hal/src/hal_queues.c ****  *          (lower driver, it is usually an interrupt service routine) and an
  25:../../os/hal/src/hal_queues.c ****  *          upper side (upper driver, accessed by the application threads).<br>
  26:../../os/hal/src/hal_queues.c ****  *          There are several kind of queues:<br>
  27:../../os/hal/src/hal_queues.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  28:../../os/hal/src/hal_queues.c ****  *            lower side and the reader is the upper side.
  29:../../os/hal/src/hal_queues.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  30:../../os/hal/src/hal_queues.c ****  *            upper side and the reader is the lower side.
  31:../../os/hal/src/hal_queues.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  32:../../os/hal/src/hal_queues.c ****  *            are implemented by pairing an input queue and an output queue
  33:../../os/hal/src/hal_queues.c ****  *            together.
  34:../../os/hal/src/hal_queues.c ****  *          .
  35:../../os/hal/src/hal_queues.c ****  * @{
  36:../../os/hal/src/hal_queues.c ****  */
  37:../../os/hal/src/hal_queues.c **** 
  38:../../os/hal/src/hal_queues.c **** #include <string.h>
  39:../../os/hal/src/hal_queues.c **** 
  40:../../os/hal/src/hal_queues.c **** #include "hal.h"
  41:../../os/hal/src/hal_queues.c **** 
  42:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
  43:../../os/hal/src/hal_queues.c **** /* Driver local definitions.                                                 */
  44:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
  45:../../os/hal/src/hal_queues.c **** 
  46:../../os/hal/src/hal_queues.c **** /**
  47:../../os/hal/src/hal_queues.c ****  * @brief   Non-blocking input queue read.
  48:../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
  49:../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
  50:../../os/hal/src/hal_queues.c ****  *          transferred or when the input queue has been emptied.
  51:../../os/hal/src/hal_queues.c ****  *
  52:../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  53:../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
  54:../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
  55:../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
  56:../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
  57:../../os/hal/src/hal_queues.c ****  *
  58:../../os/hal/src/hal_queues.c ****  * @notapi
  59:../../os/hal/src/hal_queues.c ****  */
  60:../../os/hal/src/hal_queues.c **** static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
  15               		.loc 1 60 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 AF92      		push r10
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 10, -2
  22 0002 BF92      		push r11
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 11, -3
  26 0004 CF92      		push r12
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 12, -4
  30 0006 DF92      		push r13
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 13, -5
  34 0008 EF92      		push r14
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 14, -6
  38 000a FF92      		push r15
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 15, -7
  42 000c 0F93      		push r16
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 16, -8
  46 000e 1F93      		push r17
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 17, -9
  50 0010 CF93      		push r28
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 28, -10
  54 0012 DF93      		push r29
  55               	.LCFI9:
  56               		.cfi_def_cfa_offset 12
  57               		.cfi_offset 29, -11
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 10 */
  61               	.L__stack_usage = 10
  62 0014 EC01      		movw r28,r24
  63 0016 6B01      		movw r12,r22
  64 0018 8A01      		movw r16,r20
  61:../../os/hal/src/hal_queues.c ****   size_t s1, s2;
  62:../../os/hal/src/hal_queues.c **** 
  63:../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
  64:../../os/hal/src/hal_queues.c **** 
  65:../../os/hal/src/hal_queues.c ****   /* Number of bytes that can be read in a single atomic operation.*/
  66:../../os/hal/src/hal_queues.c ****   if (n > iqGetFullI(iqp)) {
  65               		.loc 1 66 0
  66 001a 8C81      		ldd r24,Y+4
  67 001c 9D81      		ldd r25,Y+5
  68               	.LVL1:
  69 001e 8417      		cp r24,r20
  70 0020 9507      		cpc r25,r21
  71 0022 00F4      		brsh .L2
  67:../../os/hal/src/hal_queues.c ****     n = iqGetFullI(iqp);
  72               		.loc 1 67 0
  73 0024 0C81      		ldd r16,Y+4
  74 0026 1D81      		ldd r17,Y+5
  75               	.LVL2:
  76               	.L2:
  68:../../os/hal/src/hal_queues.c ****   }
  69:../../os/hal/src/hal_queues.c **** 
  70:../../os/hal/src/hal_queues.c ****   /* Number of bytes before buffer limit.*/
  71:../../os/hal/src/hal_queues.c ****   /*lint -save -e9033 [10.8] Checked to be safe.*/
  72:../../os/hal/src/hal_queues.c ****   s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  77               		.loc 1 72 0
  78 0028 6C85      		ldd r22,Y+12
  79 002a 7D85      		ldd r23,Y+13
  80               	.LVL3:
  81 002c E884      		ldd r14,Y+8
  82 002e F984      		ldd r15,Y+9
  83 0030 E61A      		sub r14,r22
  84 0032 F70A      		sbc r15,r23
  85               	.LVL4:
  73:../../os/hal/src/hal_queues.c ****   /*lint -restore*/
  74:../../os/hal/src/hal_queues.c ****   if (n < s1) {
  86               		.loc 1 74 0
  87 0034 0E15      		cp r16,r14
  88 0036 1F05      		cpc r17,r15
  89 0038 00F0      		brlo .L7
  75:../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  76:../../os/hal/src/hal_queues.c ****     iqp->q_rdptr += n;
  77:../../os/hal/src/hal_queues.c ****   }
  78:../../os/hal/src/hal_queues.c ****   else if (n > s1) {
  90               		.loc 1 78 0
  91 003a E016      		cp r14,r16
  92 003c F106      		cpc r15,r17
  93 003e 00F0      		brlo .L8
  79:../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  80:../../os/hal/src/hal_queues.c ****     bp += s1;
  81:../../os/hal/src/hal_queues.c ****     s2 = n - s1;
  82:../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_buffer, s2);
  83:../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer + s2;
  84:../../os/hal/src/hal_queues.c ****   }
  85:../../os/hal/src/hal_queues.c ****   else {
  86:../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  94               		.loc 1 86 0
  95 0040 A801      		movw r20,r16
  96 0042 C601      		movw r24,r12
  97 0044 0E94 0000 		call memcpy
  98               	.LVL5:
  87:../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
  99               		.loc 1 87 0
 100 0048 8E81      		ldd r24,Y+6
 101 004a 9F81      		ldd r25,Y+7
 102 004c 9D87      		std Y+13,r25
 103 004e 8C87      		std Y+12,r24
 104               	.LVL6:
 105               	.L4:
  88:../../os/hal/src/hal_queues.c ****   }
  89:../../os/hal/src/hal_queues.c **** 
  90:../../os/hal/src/hal_queues.c ****   iqp->q_counter -= n;
 106               		.loc 1 90 0
 107 0050 8C81      		ldd r24,Y+4
 108 0052 9D81      		ldd r25,Y+5
 109 0054 801B      		sub r24,r16
 110 0056 910B      		sbc r25,r17
 111 0058 9D83      		std Y+5,r25
 112 005a 8C83      		std Y+4,r24
  91:../../os/hal/src/hal_queues.c ****   return n;
  92:../../os/hal/src/hal_queues.c **** }
 113               		.loc 1 92 0
 114 005c C801      		movw r24,r16
 115               	/* epilogue start */
 116 005e DF91      		pop r29
 117 0060 CF91      		pop r28
 118               	.LVL7:
 119 0062 1F91      		pop r17
 120 0064 0F91      		pop r16
 121               	.LVL8:
 122 0066 FF90      		pop r15
 123 0068 EF90      		pop r14
 124               	.LVL9:
 125 006a DF90      		pop r13
 126 006c CF90      		pop r12
 127 006e BF90      		pop r11
 128 0070 AF90      		pop r10
 129 0072 0895      		ret
 130               	.LVL10:
 131               	.L8:
  79:../../os/hal/src/hal_queues.c ****     bp += s1;
 132               		.loc 1 79 0
 133 0074 A701      		movw r20,r14
 134 0076 C601      		movw r24,r12
 135 0078 0E94 0000 		call memcpy
 136               	.LVL11:
  81:../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 137               		.loc 1 81 0
 138 007c 5801      		movw r10,r16
 139 007e AE18      		sub r10,r14
 140 0080 BF08      		sbc r11,r15
 141               	.LVL12:
  82:../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer + s2;
 142               		.loc 1 82 0
 143 0082 6E81      		ldd r22,Y+6
 144 0084 7F81      		ldd r23,Y+7
 145 0086 A501      		movw r20,r10
 146 0088 C601      		movw r24,r12
 147 008a 8E0D      		add r24,r14
 148 008c 9F1D      		adc r25,r15
 149               	.LVL13:
 150 008e 0E94 0000 		call memcpy
 151               	.LVL14:
  83:../../os/hal/src/hal_queues.c ****   }
 152               		.loc 1 83 0
 153 0092 4E81      		ldd r20,Y+6
 154 0094 5F81      		ldd r21,Y+7
 155 0096 4A0D      		add r20,r10
 156 0098 5B1D      		adc r21,r11
 157 009a 5D87      		std Y+13,r21
 158 009c 4C87      		std Y+12,r20
 159 009e 00C0      		rjmp .L4
 160               	.LVL15:
 161               	.L7:
  75:../../os/hal/src/hal_queues.c ****     iqp->q_rdptr += n;
 162               		.loc 1 75 0
 163 00a0 A801      		movw r20,r16
 164 00a2 C601      		movw r24,r12
 165 00a4 0E94 0000 		call memcpy
 166               	.LVL16:
  76:../../os/hal/src/hal_queues.c ****   }
 167               		.loc 1 76 0
 168 00a8 8C85      		ldd r24,Y+12
 169 00aa 9D85      		ldd r25,Y+13
 170 00ac 800F      		add r24,r16
 171 00ae 911F      		adc r25,r17
 172 00b0 9D87      		std Y+13,r25
 173 00b2 8C87      		std Y+12,r24
 174 00b4 00C0      		rjmp .L4
 175               		.cfi_endproc
 176               	.LFE243:
 178               		.section	.text.oq_write,"ax",@progbits
 180               	oq_write:
 181               	.LFB244:
  93:../../os/hal/src/hal_queues.c **** 
  94:../../os/hal/src/hal_queues.c **** /**
  95:../../os/hal/src/hal_queues.c ****  * @brief   Non-blocking output queue write.
  96:../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
  97:../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
  98:../../os/hal/src/hal_queues.c ****  *          transferred or when the output queue has been filled.
  99:../../os/hal/src/hal_queues.c ****  *
 100:../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 101:../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 102:../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 103:../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 104:../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 105:../../os/hal/src/hal_queues.c ****  *
 106:../../os/hal/src/hal_queues.c ****  * @notapi
 107:../../os/hal/src/hal_queues.c ****  */
 108:../../os/hal/src/hal_queues.c **** static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 182               		.loc 1 108 0
 183               		.cfi_startproc
 184               	.LVL17:
 185 0000 AF92      		push r10
 186               	.LCFI10:
 187               		.cfi_def_cfa_offset 3
 188               		.cfi_offset 10, -2
 189 0002 BF92      		push r11
 190               	.LCFI11:
 191               		.cfi_def_cfa_offset 4
 192               		.cfi_offset 11, -3
 193 0004 CF92      		push r12
 194               	.LCFI12:
 195               		.cfi_def_cfa_offset 5
 196               		.cfi_offset 12, -4
 197 0006 DF92      		push r13
 198               	.LCFI13:
 199               		.cfi_def_cfa_offset 6
 200               		.cfi_offset 13, -5
 201 0008 EF92      		push r14
 202               	.LCFI14:
 203               		.cfi_def_cfa_offset 7
 204               		.cfi_offset 14, -6
 205 000a FF92      		push r15
 206               	.LCFI15:
 207               		.cfi_def_cfa_offset 8
 208               		.cfi_offset 15, -7
 209 000c 0F93      		push r16
 210               	.LCFI16:
 211               		.cfi_def_cfa_offset 9
 212               		.cfi_offset 16, -8
 213 000e 1F93      		push r17
 214               	.LCFI17:
 215               		.cfi_def_cfa_offset 10
 216               		.cfi_offset 17, -9
 217 0010 CF93      		push r28
 218               	.LCFI18:
 219               		.cfi_def_cfa_offset 11
 220               		.cfi_offset 28, -10
 221 0012 DF93      		push r29
 222               	.LCFI19:
 223               		.cfi_def_cfa_offset 12
 224               		.cfi_offset 29, -11
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 10 */
 228               	.L__stack_usage = 10
 229 0014 EC01      		movw r28,r24
 230 0016 6B01      		movw r12,r22
 231 0018 8A01      		movw r16,r20
 109:../../os/hal/src/hal_queues.c ****   size_t s1, s2;
 110:../../os/hal/src/hal_queues.c **** 
 111:../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 112:../../os/hal/src/hal_queues.c **** 
 113:../../os/hal/src/hal_queues.c ****   /* Number of bytes that can be written in a single atomic operation.*/
 114:../../os/hal/src/hal_queues.c ****   if (n > oqGetEmptyI(oqp)) {
 232               		.loc 1 114 0
 233 001a 8C81      		ldd r24,Y+4
 234 001c 9D81      		ldd r25,Y+5
 235               	.LVL18:
 236 001e 8417      		cp r24,r20
 237 0020 9507      		cpc r25,r21
 238 0022 00F4      		brsh .L10
 115:../../os/hal/src/hal_queues.c ****     n = oqGetEmptyI(oqp);
 239               		.loc 1 115 0
 240 0024 0C81      		ldd r16,Y+4
 241 0026 1D81      		ldd r17,Y+5
 242               	.LVL19:
 243               	.L10:
 116:../../os/hal/src/hal_queues.c ****   }
 117:../../os/hal/src/hal_queues.c **** 
 118:../../os/hal/src/hal_queues.c ****   /* Number of bytes before buffer limit.*/
 119:../../os/hal/src/hal_queues.c ****   /*lint -save -e9033 [10.8] Checked to be safe.*/
 120:../../os/hal/src/hal_queues.c ****   s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 244               		.loc 1 120 0
 245 0028 8A85      		ldd r24,Y+10
 246 002a 9B85      		ldd r25,Y+11
 247 002c E884      		ldd r14,Y+8
 248 002e F984      		ldd r15,Y+9
 249 0030 E81A      		sub r14,r24
 250 0032 F90A      		sbc r15,r25
 251               	.LVL20:
 121:../../os/hal/src/hal_queues.c ****   /*lint -restore*/
 122:../../os/hal/src/hal_queues.c ****   if (n < s1) {
 252               		.loc 1 122 0
 253 0034 0E15      		cp r16,r14
 254 0036 1F05      		cpc r17,r15
 255 0038 00F0      		brlo .L14
 123:../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 124:../../os/hal/src/hal_queues.c ****     oqp->q_wrptr += n;
 125:../../os/hal/src/hal_queues.c ****   }
 126:../../os/hal/src/hal_queues.c ****   else if (n > s1) {
 256               		.loc 1 126 0
 257 003a E016      		cp r14,r16
 258 003c F106      		cpc r15,r17
 259 003e 00F0      		brlo .L15
 127:../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 128:../../os/hal/src/hal_queues.c ****     bp += s1;
 129:../../os/hal/src/hal_queues.c ****     s2 = n - s1;
 130:../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 131:../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer + s2;
 132:../../os/hal/src/hal_queues.c ****   }
 133:../../os/hal/src/hal_queues.c ****   else {
 134:../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 260               		.loc 1 134 0
 261 0040 A801      		movw r20,r16
 262 0042 B601      		movw r22,r12
 263               	.LVL21:
 264 0044 0E94 0000 		call memcpy
 265               	.LVL22:
 135:../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 266               		.loc 1 135 0
 267 0048 8E81      		ldd r24,Y+6
 268 004a 9F81      		ldd r25,Y+7
 269 004c 9B87      		std Y+11,r25
 270 004e 8A87      		std Y+10,r24
 271               	.LVL23:
 272               	.L12:
 136:../../os/hal/src/hal_queues.c ****   }
 137:../../os/hal/src/hal_queues.c **** 
 138:../../os/hal/src/hal_queues.c ****   oqp->q_counter -= n;
 273               		.loc 1 138 0
 274 0050 8C81      		ldd r24,Y+4
 275 0052 9D81      		ldd r25,Y+5
 276 0054 801B      		sub r24,r16
 277 0056 910B      		sbc r25,r17
 278 0058 9D83      		std Y+5,r25
 279 005a 8C83      		std Y+4,r24
 139:../../os/hal/src/hal_queues.c ****   return n;
 140:../../os/hal/src/hal_queues.c **** }
 280               		.loc 1 140 0
 281 005c C801      		movw r24,r16
 282               	/* epilogue start */
 283 005e DF91      		pop r29
 284 0060 CF91      		pop r28
 285               	.LVL24:
 286 0062 1F91      		pop r17
 287 0064 0F91      		pop r16
 288               	.LVL25:
 289 0066 FF90      		pop r15
 290 0068 EF90      		pop r14
 291               	.LVL26:
 292 006a DF90      		pop r13
 293 006c CF90      		pop r12
 294 006e BF90      		pop r11
 295 0070 AF90      		pop r10
 296 0072 0895      		ret
 297               	.LVL27:
 298               	.L15:
 127:../../os/hal/src/hal_queues.c ****     bp += s1;
 299               		.loc 1 127 0
 300 0074 A701      		movw r20,r14
 301 0076 B601      		movw r22,r12
 302 0078 0E94 0000 		call memcpy
 303               	.LVL28:
 129:../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 304               		.loc 1 129 0
 305 007c 5801      		movw r10,r16
 306 007e AE18      		sub r10,r14
 307 0080 BF08      		sbc r11,r15
 308               	.LVL29:
 128:../../os/hal/src/hal_queues.c ****     s2 = n - s1;
 309               		.loc 1 128 0
 310 0082 B601      		movw r22,r12
 311 0084 6E0D      		add r22,r14
 312 0086 7F1D      		adc r23,r15
 313               	.LVL30:
 130:../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer + s2;
 314               		.loc 1 130 0
 315 0088 A501      		movw r20,r10
 316 008a 8E81      		ldd r24,Y+6
 317 008c 9F81      		ldd r25,Y+7
 318 008e 0E94 0000 		call memcpy
 319               	.LVL31:
 131:../../os/hal/src/hal_queues.c ****   }
 320               		.loc 1 131 0
 321 0092 4E81      		ldd r20,Y+6
 322 0094 5F81      		ldd r21,Y+7
 323 0096 4A0D      		add r20,r10
 324 0098 5B1D      		adc r21,r11
 325 009a 5B87      		std Y+11,r21
 326 009c 4A87      		std Y+10,r20
 327 009e 00C0      		rjmp .L12
 328               	.LVL32:
 329               	.L14:
 123:../../os/hal/src/hal_queues.c ****     oqp->q_wrptr += n;
 330               		.loc 1 123 0
 331 00a0 A801      		movw r20,r16
 332 00a2 B601      		movw r22,r12
 333 00a4 0E94 0000 		call memcpy
 334               	.LVL33:
 124:../../os/hal/src/hal_queues.c ****   }
 335               		.loc 1 124 0
 336 00a8 8A85      		ldd r24,Y+10
 337 00aa 9B85      		ldd r25,Y+11
 338 00ac 800F      		add r24,r16
 339 00ae 911F      		adc r25,r17
 340 00b0 9B87      		std Y+11,r25
 341 00b2 8A87      		std Y+10,r24
 342 00b4 00C0      		rjmp .L12
 343               		.cfi_endproc
 344               	.LFE244:
 346               		.section	.text.iqObjectInit,"ax",@progbits
 347               	.global	iqObjectInit
 349               	iqObjectInit:
 350               	.LFB245:
 141:../../os/hal/src/hal_queues.c **** 
 142:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 143:../../os/hal/src/hal_queues.c **** /* Driver exported variables.                                                */
 144:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 145:../../os/hal/src/hal_queues.c **** 
 146:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 147:../../os/hal/src/hal_queues.c **** /* Driver local variables and types.                                         */
 148:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 149:../../os/hal/src/hal_queues.c **** 
 150:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 151:../../os/hal/src/hal_queues.c **** /* Driver local functions.                                                   */
 152:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 153:../../os/hal/src/hal_queues.c **** 
 154:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 155:../../os/hal/src/hal_queues.c **** /* Driver interrupt handlers.                                                */
 156:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 157:../../os/hal/src/hal_queues.c **** 
 158:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 159:../../os/hal/src/hal_queues.c **** /* Driver exported functions.                                                */
 160:../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 161:../../os/hal/src/hal_queues.c **** 
 162:../../os/hal/src/hal_queues.c **** /**
 163:../../os/hal/src/hal_queues.c ****  * @brief   Initializes an input queue.
 164:../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 165:../../os/hal/src/hal_queues.c ****  *          the bytes contained in the queue.
 166:../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 167:../../os/hal/src/hal_queues.c ****  *
 168:../../os/hal/src/hal_queues.c ****  * @param[out] iqp      pointer to an @p input_queue_t structure
 169:../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 170:../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 171:../../os/hal/src/hal_queues.c ****  * @param[in] infy      pointer to a callback function that is invoked when
 172:../../os/hal/src/hal_queues.c ****  *                      data is read from the queue. The value can be @p NULL.
 173:../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 174:../../os/hal/src/hal_queues.c ****  *
 175:../../os/hal/src/hal_queues.c ****  * @init
 176:../../os/hal/src/hal_queues.c ****  */
 177:../../os/hal/src/hal_queues.c **** void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
 178:../../os/hal/src/hal_queues.c ****                   qnotify_t infy, void *link) {
 351               		.loc 1 178 0
 352               		.cfi_startproc
 353               	.LVL34:
 354 0000 0F93      		push r16
 355               	.LCFI20:
 356               		.cfi_def_cfa_offset 3
 357               		.cfi_offset 16, -2
 358 0002 1F93      		push r17
 359               	.LCFI21:
 360               		.cfi_def_cfa_offset 4
 361               		.cfi_offset 17, -3
 362               	/* prologue: function */
 363               	/* frame size = 0 */
 364               	/* stack size = 2 */
 365               	.L__stack_usage = 2
 366 0004 FC01      		movw r30,r24
 367               	.LVL35:
 368               	.LBB133:
 369               	.LBB134:
 370               	.LBB135:
 371               	.LBB136:
 372               	.LBB137:
 373               		.file 2 "../../os/rt/include/chlists.h"
   1:../../os/rt/include/chlists.h **** /*
   2:../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chlists.h **** 
   5:../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chlists.h **** 
   7:../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chlists.h **** 
  11:../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chlists.h **** 
  16:../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chlists.h **** */
  19:../../os/rt/include/chlists.h **** 
  20:../../os/rt/include/chlists.h **** /**
  21:../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../os/rt/include/chlists.h ****  *
  24:../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../os/rt/include/chlists.h ****  * @{
  26:../../os/rt/include/chlists.h ****  */
  27:../../os/rt/include/chlists.h **** 
  28:../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../os/rt/include/chlists.h **** 
  31:../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../os/rt/include/chlists.h **** 
  35:../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../os/rt/include/chlists.h **** 
  39:../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../os/rt/include/chlists.h **** 
  43:../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../os/rt/include/chlists.h **** 
  47:../../os/rt/include/chlists.h **** /**
  48:../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../os/rt/include/chlists.h ****  */
  50:../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../os/rt/include/chlists.h **** 
  52:../../os/rt/include/chlists.h **** /**
  53:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../os/rt/include/chlists.h ****  *          and element.
  55:../../os/rt/include/chlists.h ****  */
  56:../../os/rt/include/chlists.h **** struct ch_list {
  57:../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../os/rt/include/chlists.h **** };
  59:../../os/rt/include/chlists.h **** 
  60:../../os/rt/include/chlists.h **** /**
  61:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../os/rt/include/chlists.h ****  */
  63:../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../os/rt/include/chlists.h **** 
  65:../../os/rt/include/chlists.h **** /**
  66:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../os/rt/include/chlists.h ****  *          and element.
  68:../../os/rt/include/chlists.h ****  */
  69:../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../os/rt/include/chlists.h **** };
  73:../../os/rt/include/chlists.h **** 
  74:../../os/rt/include/chlists.h **** /**
  75:../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../os/rt/include/chlists.h ****  *          header and element.
  77:../../os/rt/include/chlists.h ****  */
  78:../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../os/rt/include/chlists.h **** 
  80:../../os/rt/include/chlists.h **** /**
  81:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../os/rt/include/chlists.h ****  */
  85:../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../os/rt/include/chlists.h **** };
  90:../../os/rt/include/chlists.h **** 
  91:../../os/rt/include/chlists.h **** /**
  92:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../os/rt/include/chlists.h ****  *          header and element.
  94:../../os/rt/include/chlists.h ****  */
  95:../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../os/rt/include/chlists.h **** 
  97:../../os/rt/include/chlists.h **** /**
  98:../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../os/rt/include/chlists.h ****  */
 100:../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../os/rt/include/chlists.h **** };
 105:../../os/rt/include/chlists.h **** 
 106:../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../os/rt/include/chlists.h **** 
 110:../../os/rt/include/chlists.h **** /**
 111:../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../os/rt/include/chlists.h ****  *
 115:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../os/rt/include/chlists.h ****  */
 117:../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../os/rt/include/chlists.h **** 
 119:../../os/rt/include/chlists.h **** /**
 120:../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../os/rt/include/chlists.h ****  *
 124:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../os/rt/include/chlists.h ****  */
 126:../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../os/rt/include/chlists.h ****     ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../os/rt/include/chlists.h **** 
 129:../../os/rt/include/chlists.h **** /*===========================================================================*/
 130:../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 131:../../os/rt/include/chlists.h **** /*===========================================================================*/
 132:../../os/rt/include/chlists.h **** 
 133:../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 134:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 135:../../os/rt/include/chlists.h **** extern "C" {
 136:../../os/rt/include/chlists.h **** #endif
 137:../../os/rt/include/chlists.h **** 
 138:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 139:../../os/rt/include/chlists.h **** }
 140:../../os/rt/include/chlists.h **** #endif
 141:../../os/rt/include/chlists.h **** 
 142:../../os/rt/include/chlists.h **** /*===========================================================================*/
 143:../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 144:../../os/rt/include/chlists.h **** /*===========================================================================*/
 145:../../os/rt/include/chlists.h **** 
 146:../../os/rt/include/chlists.h **** /**
 147:../../os/rt/include/chlists.h ****  * @brief   List initialization.
 148:../../os/rt/include/chlists.h ****  *
 149:../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 150:../../os/rt/include/chlists.h ****  *
 151:../../os/rt/include/chlists.h ****  * @notapi
 152:../../os/rt/include/chlists.h ****  */
 153:../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 154:../../os/rt/include/chlists.h **** 
 155:../../os/rt/include/chlists.h ****   lp->next = lp;
 156:../../os/rt/include/chlists.h **** }
 157:../../os/rt/include/chlists.h **** 
 158:../../os/rt/include/chlists.h **** /**
 159:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 160:../../os/rt/include/chlists.h ****  *
 161:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 162:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 163:../../os/rt/include/chlists.h ****  *
 164:../../os/rt/include/chlists.h ****  * @notapi
 165:../../os/rt/include/chlists.h ****  */
 166:../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 167:../../os/rt/include/chlists.h **** 
 168:../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 169:../../os/rt/include/chlists.h **** }
 170:../../os/rt/include/chlists.h **** 
 171:../../os/rt/include/chlists.h **** /**
 172:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 173:../../os/rt/include/chlists.h ****  *
 174:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 175:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 176:../../os/rt/include/chlists.h ****  *
 177:../../os/rt/include/chlists.h ****  * @notapi
 178:../../os/rt/include/chlists.h ****  */
 179:../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 180:../../os/rt/include/chlists.h **** 
 181:../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 182:../../os/rt/include/chlists.h **** }
 183:../../os/rt/include/chlists.h **** 
 184:../../os/rt/include/chlists.h **** /**
 185:../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 186:../../os/rt/include/chlists.h ****  *
 187:../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 188:../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 189:../../os/rt/include/chlists.h ****  *
 190:../../os/rt/include/chlists.h ****  * @notapi
 191:../../os/rt/include/chlists.h ****  */
 192:../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 193:../../os/rt/include/chlists.h **** 
 194:../../os/rt/include/chlists.h ****   p->next = lp->next;
 195:../../os/rt/include/chlists.h ****   lp->next = p;
 196:../../os/rt/include/chlists.h **** }
 197:../../os/rt/include/chlists.h **** 
 198:../../os/rt/include/chlists.h **** /**
 199:../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 200:../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 201:../../os/rt/include/chlists.h ****  *
 202:../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 203:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 204:../../os/rt/include/chlists.h ****  *
 205:../../os/rt/include/chlists.h ****  * @notapi
 206:../../os/rt/include/chlists.h ****  */
 207:../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 208:../../os/rt/include/chlists.h **** 
 209:../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 210:../../os/rt/include/chlists.h ****   lp->next = p->next;
 211:../../os/rt/include/chlists.h **** 
 212:../../os/rt/include/chlists.h ****   return p;
 213:../../os/rt/include/chlists.h **** }
 214:../../os/rt/include/chlists.h **** 
 215:../../os/rt/include/chlists.h **** /**
 216:../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 217:../../os/rt/include/chlists.h ****  *
 218:../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 219:../../os/rt/include/chlists.h ****  *
 220:../../os/rt/include/chlists.h ****  * @notapi
 221:../../os/rt/include/chlists.h ****  */
 222:../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 223:../../os/rt/include/chlists.h **** 
 224:../../os/rt/include/chlists.h ****   qp->next = qp;
 374               		.loc 2 224 0
 375 0006 9183      		std Z+1,r25
 376 0008 8083      		st Z,r24
 225:../../os/rt/include/chlists.h ****   qp->prev = qp;
 377               		.loc 2 225 0
 378 000a 9383      		std Z+3,r25
 379 000c 8283      		std Z+2,r24
 380               	.LVL36:
 381               	.LBE137:
 382               	.LBE136:
 383               	.LBE135:
 384               	.LBE134:
 385               	.LBE133:
 179:../../os/hal/src/hal_queues.c **** 
 180:../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&iqp->q_waiting);
 181:../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
 386               		.loc 1 181 0
 387 000e 1582      		std Z+5,__zero_reg__
 388 0010 1482      		std Z+4,__zero_reg__
 182:../../os/hal/src/hal_queues.c ****   iqp->q_buffer  = bp;
 389               		.loc 1 182 0
 390 0012 7783      		std Z+7,r23
 391 0014 6683      		std Z+6,r22
 183:../../os/hal/src/hal_queues.c ****   iqp->q_rdptr   = bp;
 392               		.loc 1 183 0
 393 0016 7587      		std Z+13,r23
 394 0018 6487      		std Z+12,r22
 184:../../os/hal/src/hal_queues.c ****   iqp->q_wrptr   = bp;
 395               		.loc 1 184 0
 396 001a 7387      		std Z+11,r23
 397 001c 6287      		std Z+10,r22
 185:../../os/hal/src/hal_queues.c ****   iqp->q_top     = bp + size;
 398               		.loc 1 185 0
 399 001e 640F      		add r22,r20
 400 0020 751F      		adc r23,r21
 401               	.LVL37:
 402 0022 7187      		std Z+9,r23
 403 0024 6087      		std Z+8,r22
 186:../../os/hal/src/hal_queues.c ****   iqp->q_notify  = infy;
 404               		.loc 1 186 0
 405 0026 3787      		std Z+15,r19
 406 0028 2687      		std Z+14,r18
 187:../../os/hal/src/hal_queues.c ****   iqp->q_link    = link;
 407               		.loc 1 187 0
 408 002a 118B      		std Z+17,r17
 409 002c 008B      		std Z+16,r16
 410               	/* epilogue start */
 188:../../os/hal/src/hal_queues.c **** }
 411               		.loc 1 188 0
 412 002e 1F91      		pop r17
 413 0030 0F91      		pop r16
 414               	.LVL38:
 415 0032 0895      		ret
 416               		.cfi_endproc
 417               	.LFE245:
 419               		.section	.text.iqResetI,"ax",@progbits
 420               	.global	iqResetI
 422               	iqResetI:
 423               	.LFB246:
 189:../../os/hal/src/hal_queues.c **** 
 190:../../os/hal/src/hal_queues.c **** /**
 191:../../os/hal/src/hal_queues.c ****  * @brief   Resets an input queue.
 192:../../os/hal/src/hal_queues.c ****  * @details All the data in the input queue is erased and lost, any waiting
 193:../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 194:../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 195:../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 196:../../os/hal/src/hal_queues.c ****  *
 197:../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 198:../../os/hal/src/hal_queues.c ****  *
 199:../../os/hal/src/hal_queues.c ****  * @iclass
 200:../../os/hal/src/hal_queues.c ****  */
 201:../../os/hal/src/hal_queues.c **** void iqResetI(input_queue_t *iqp) {
 424               		.loc 1 201 0
 425               		.cfi_startproc
 426               	.LVL39:
 427               	/* prologue: function */
 428               	/* frame size = 0 */
 429               	/* stack size = 0 */
 430               	.L__stack_usage = 0
 202:../../os/hal/src/hal_queues.c **** 
 203:../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 204:../../os/hal/src/hal_queues.c **** 
 205:../../os/hal/src/hal_queues.c ****   iqp->q_rdptr = iqp->q_buffer;
 431               		.loc 1 205 0
 432 0000 FC01      		movw r30,r24
 433 0002 2681      		ldd r18,Z+6
 434 0004 3781      		ldd r19,Z+7
 435 0006 3587      		std Z+13,r19
 436 0008 2487      		std Z+12,r18
 206:../../os/hal/src/hal_queues.c ****   iqp->q_wrptr = iqp->q_buffer;
 437               		.loc 1 206 0
 438 000a 3387      		std Z+11,r19
 439 000c 2287      		std Z+10,r18
 207:../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
 440               		.loc 1 207 0
 441 000e 1582      		std Z+5,__zero_reg__
 442 0010 1482      		std Z+4,__zero_reg__
 443               	.LVL40:
 444               	.LBB138:
 445               	.LBB139:
 446               		.file 3 "../../os/hal/osal/rt-nil/osal.h"
   1:../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/osal.h **** 
   4:../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/osal.h **** 
   8:../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/osal.h **** 
  10:../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/osal.h **** */
  16:../../os/hal/osal/rt-nil/osal.h **** 
  17:../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../os/hal/osal/rt-nil/osal.h **** 
  25:../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../os/hal/osal/rt-nil/osal.h **** 
  28:../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../os/hal/osal/rt-nil/osal.h **** 
  32:../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../os/hal/osal/rt-nil/osal.h **** 
  34:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/osal.h **** 
  38:../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../os/hal/osal/rt-nil/osal.h **** 
  46:../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../os/hal/osal/rt-nil/osal.h **** 
  50:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../os/hal/osal/rt-nil/osal.h **** 
  54:../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../os/hal/osal/rt-nil/osal.h **** 
  65:../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../os/hal/osal/rt-nil/osal.h **** 
  75:../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../os/hal/osal/rt-nil/osal.h **** 
  84:../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../os/hal/osal/rt-nil/osal.h **** 
  93:../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../os/hal/osal/rt-nil/osal.h **** 
  98:../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../os/hal/osal/rt-nil/osal.h **** 
 108:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../os/hal/osal/rt-nil/osal.h **** 
 112:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../os/hal/osal/rt-nil/osal.h **** 
 116:../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../os/hal/osal/rt-nil/osal.h **** 
 122:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../os/hal/osal/rt-nil/osal.h **** 
 127:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../os/hal/osal/rt-nil/osal.h **** 
 131:../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../os/hal/osal/rt-nil/osal.h **** 
 138:../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../os/hal/osal/rt-nil/osal.h **** 
 145:../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../os/hal/osal/rt-nil/osal.h **** 
 152:../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../os/hal/osal/rt-nil/osal.h **** 
 159:../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../os/hal/osal/rt-nil/osal.h **** 
 168:../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../os/hal/osal/rt-nil/osal.h **** 
 175:../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../os/hal/osal/rt-nil/osal.h **** 
 182:../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../os/hal/osal/rt-nil/osal.h **** 
 189:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../os/hal/osal/rt-nil/osal.h **** 
 200:../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../os/hal/osal/rt-nil/osal.h **** 
 207:../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../os/hal/osal/rt-nil/osal.h **** };
 220:../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../os/hal/osal/rt-nil/osal.h **** 
 222:../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../os/hal/osal/rt-nil/osal.h **** 
 234:../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../os/hal/osal/rt-nil/osal.h **** 
 247:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../os/hal/osal/rt-nil/osal.h **** 
 251:../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../os/hal/osal/rt-nil/osal.h **** 
 271:../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../os/hal/osal/rt-nil/osal.h **** 
 283:../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../os/hal/osal/rt-nil/osal.h **** 
 289:../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../os/hal/osal/rt-nil/osal.h **** 
 296:../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../os/hal/osal/rt-nil/osal.h **** 
 305:../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../os/hal/osal/rt-nil/osal.h **** 
 311:../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../os/hal/osal/rt-nil/osal.h **** 
 317:../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../os/hal/osal/rt-nil/osal.h **** 
 326:../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../os/hal/osal/rt-nil/osal.h **** 
 345:../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../os/hal/osal/rt-nil/osal.h **** 
 360:../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../os/hal/osal/rt-nil/osal.h **** 
 375:../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../os/hal/osal/rt-nil/osal.h **** 
 390:../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../os/hal/osal/rt-nil/osal.h **** 
 405:../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../os/hal/osal/rt-nil/osal.h **** 
 421:../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../os/hal/osal/rt-nil/osal.h **** 
 438:../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../os/hal/osal/rt-nil/osal.h **** 
 452:../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../os/hal/osal/rt-nil/osal.h **** 
 467:../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../os/hal/osal/rt-nil/osal.h **** 
 483:../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../os/hal/osal/rt-nil/osal.h **** 
 496:../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../os/hal/osal/rt-nil/osal.h **** 
 510:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../os/hal/osal/rt-nil/osal.h **** 
 514:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../os/hal/osal/rt-nil/osal.h **** 
 518:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../os/hal/osal/rt-nil/osal.h **** }
 520:../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../os/hal/osal/rt-nil/osal.h **** 
 522:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../os/hal/osal/rt-nil/osal.h **** 
 526:../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../os/hal/osal/rt-nil/osal.h **** 
 533:../../os/hal/osal/rt-nil/osal.h **** }
 534:../../os/hal/osal/rt-nil/osal.h **** 
 535:../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../os/hal/osal/rt-nil/osal.h **** 
 544:../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../os/hal/osal/rt-nil/osal.h **** }
 546:../../os/hal/osal/rt-nil/osal.h **** 
 547:../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../os/hal/osal/rt-nil/osal.h **** 
 554:../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../os/hal/osal/rt-nil/osal.h **** }
 556:../../os/hal/osal/rt-nil/osal.h **** 
 557:../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../os/hal/osal/rt-nil/osal.h **** 
 564:../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../os/hal/osal/rt-nil/osal.h **** }
 566:../../os/hal/osal/rt-nil/osal.h **** 
 567:../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../os/hal/osal/rt-nil/osal.h **** 
 575:../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../os/hal/osal/rt-nil/osal.h **** }
 577:../../os/hal/osal/rt-nil/osal.h **** 
 578:../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../os/hal/osal/rt-nil/osal.h **** 
 586:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../os/hal/osal/rt-nil/osal.h **** }
 588:../../os/hal/osal/rt-nil/osal.h **** 
 589:../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../os/hal/osal/rt-nil/osal.h **** 
 597:../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../os/hal/osal/rt-nil/osal.h **** }
 599:../../os/hal/osal/rt-nil/osal.h **** 
 600:../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../os/hal/osal/rt-nil/osal.h **** 
 608:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../os/hal/osal/rt-nil/osal.h **** }
 610:../../os/hal/osal/rt-nil/osal.h **** 
 611:../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../os/hal/osal/rt-nil/osal.h **** 
 626:../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../os/hal/osal/rt-nil/osal.h **** }
 628:../../os/hal/osal/rt-nil/osal.h **** 
 629:../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../os/hal/osal/rt-nil/osal.h **** 
 640:../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../os/hal/osal/rt-nil/osal.h **** }
 642:../../os/hal/osal/rt-nil/osal.h **** 
 643:../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../os/hal/osal/rt-nil/osal.h **** 
 655:../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../os/hal/osal/rt-nil/osal.h **** }
 657:../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../os/hal/osal/rt-nil/osal.h **** 
 659:../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../os/hal/osal/rt-nil/osal.h **** 
 667:../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../os/hal/osal/rt-nil/osal.h **** }
 669:../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../os/hal/osal/rt-nil/osal.h **** 
 671:../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../os/hal/osal/rt-nil/osal.h **** 
 682:../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 683:../../os/hal/osal/rt-nil/osal.h **** }
 684:../../os/hal/osal/rt-nil/osal.h **** 
 685:../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../os/hal/osal/rt-nil/osal.h **** 
 700:../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../os/hal/osal/rt-nil/osal.h **** }
 702:../../os/hal/osal/rt-nil/osal.h **** 
 703:../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../os/hal/osal/rt-nil/osal.h **** 
 715:../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../os/hal/osal/rt-nil/osal.h **** }
 717:../../os/hal/osal/rt-nil/osal.h **** 
 718:../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../os/hal/osal/rt-nil/osal.h **** 
 729:../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../os/hal/osal/rt-nil/osal.h **** }
 731:../../os/hal/osal/rt-nil/osal.h **** 
 732:../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../os/hal/osal/rt-nil/osal.h **** 
 750:../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../os/hal/osal/rt-nil/osal.h **** }
 752:../../os/hal/osal/rt-nil/osal.h **** 
 753:../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../os/hal/osal/rt-nil/osal.h **** 
 767:../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../os/hal/osal/rt-nil/osal.h **** }
 769:../../os/hal/osal/rt-nil/osal.h **** 
 770:../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 783:../../os/hal/osal/rt-nil/osal.h **** 
 784:../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
 785:../../os/hal/osal/rt-nil/osal.h **** }
 786:../../os/hal/osal/rt-nil/osal.h **** 
 787:../../os/hal/osal/rt-nil/osal.h **** /**
 788:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 789:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 790:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 791:../../os/hal/osal/rt-nil/osal.h ****  *
 792:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 793:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 794:../../os/hal/osal/rt-nil/osal.h ****  *
 795:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 796:../../os/hal/osal/rt-nil/osal.h ****  */
 797:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 798:../../os/hal/osal/rt-nil/osal.h **** 
 799:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800:../../os/hal/osal/rt-nil/osal.h **** }
 801:../../os/hal/osal/rt-nil/osal.h **** 
 802:../../os/hal/osal/rt-nil/osal.h **** /**
 803:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 804:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 805:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 806:../../os/hal/osal/rt-nil/osal.h ****  *
 807:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 808:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 809:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 810:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 811:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 812:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 813:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 814:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 815:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 816:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 817:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 818:../../os/hal/osal/rt-nil/osal.h ****  *
 819:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 820:../../os/hal/osal/rt-nil/osal.h ****  */
 821:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 822:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 823:../../os/hal/osal/rt-nil/osal.h **** 
 824:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 825:../../os/hal/osal/rt-nil/osal.h **** }
 826:../../os/hal/osal/rt-nil/osal.h **** 
 827:../../os/hal/osal/rt-nil/osal.h **** /**
 828:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 829:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 830:../../os/hal/osal/rt-nil/osal.h ****  *          ISR context.
 831:../../os/hal/osal/rt-nil/osal.h ****  *
 832:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 833:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 834:../../os/hal/osal/rt-nil/osal.h ****  *
 835:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 836:../../os/hal/osal/rt-nil/osal.h ****  */
 837:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 838:../../os/hal/osal/rt-nil/osal.h **** 
 839:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeI(trp, msg);
 840:../../os/hal/osal/rt-nil/osal.h **** }
 841:../../os/hal/osal/rt-nil/osal.h **** 
 842:../../os/hal/osal/rt-nil/osal.h **** /**
 843:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 844:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 845:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 846:../../os/hal/osal/rt-nil/osal.h ****  *
 847:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 848:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 849:../../os/hal/osal/rt-nil/osal.h ****  *
 850:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 851:../../os/hal/osal/rt-nil/osal.h ****  */
 852:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 853:../../os/hal/osal/rt-nil/osal.h **** 
 854:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeS(trp, msg);
 855:../../os/hal/osal/rt-nil/osal.h **** }
 856:../../os/hal/osal/rt-nil/osal.h **** 
 857:../../os/hal/osal/rt-nil/osal.h **** /**
 858:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes a threads queue object.
 859:../../os/hal/osal/rt-nil/osal.h ****  *
 860:../../os/hal/osal/rt-nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 861:../../os/hal/osal/rt-nil/osal.h ****  *
 862:../../os/hal/osal/rt-nil/osal.h ****  * @init
 863:../../os/hal/osal/rt-nil/osal.h ****  */
 864:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 865:../../os/hal/osal/rt-nil/osal.h **** 
 866:../../os/hal/osal/rt-nil/osal.h ****   chThdQueueObjectInit(tqp);
 867:../../os/hal/osal/rt-nil/osal.h **** }
 868:../../os/hal/osal/rt-nil/osal.h **** 
 869:../../os/hal/osal/rt-nil/osal.h **** /**
 870:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enqueues the caller thread.
 871:../../os/hal/osal/rt-nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 872:../../os/hal/osal/rt-nil/osal.h ****  *          dequeued or the specified timeouts expires.
 873:../../os/hal/osal/rt-nil/osal.h ****  *
 874:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 875:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 876:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 877:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 878:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 879:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 880:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 881:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 882:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 883:../../os/hal/osal/rt-nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 884:../../os/hal/osal/rt-nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 885:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 886:../../os/hal/osal/rt-nil/osal.h ****  *                      specified timeout or if the function has been
 887:../../os/hal/osal/rt-nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 888:../../os/hal/osal/rt-nil/osal.h ****  *                      specification.
 889:../../os/hal/osal/rt-nil/osal.h ****  *
 890:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 891:../../os/hal/osal/rt-nil/osal.h ****  */
 892:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 893:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 894:../../os/hal/osal/rt-nil/osal.h **** 
 895:../../os/hal/osal/rt-nil/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 896:../../os/hal/osal/rt-nil/osal.h **** }
 897:../../os/hal/osal/rt-nil/osal.h **** 
 898:../../os/hal/osal/rt-nil/osal.h **** /**
 899:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 900:../../os/hal/osal/rt-nil/osal.h ****  *
 901:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 902:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 903:../../os/hal/osal/rt-nil/osal.h ****  *
 904:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 905:../../os/hal/osal/rt-nil/osal.h ****  */
 906:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 907:../../os/hal/osal/rt-nil/osal.h **** 
 908:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueNextI(tqp, msg);
 909:../../os/hal/osal/rt-nil/osal.h **** }
 910:../../os/hal/osal/rt-nil/osal.h **** 
 911:../../os/hal/osal/rt-nil/osal.h **** /**
 912:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 913:../../os/hal/osal/rt-nil/osal.h ****  *
 914:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 915:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 916:../../os/hal/osal/rt-nil/osal.h ****  *
 917:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 918:../../os/hal/osal/rt-nil/osal.h ****  */
 919:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 920:../../os/hal/osal/rt-nil/osal.h **** 
 921:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueAllI(tqp, msg);
 447               		.loc 3 921 0
 448 0012 6EEF      		ldi r22,lo8(-2)
 449 0014 7FEF      		ldi r23,lo8(-1)
 450 0016 0C94 0000 		jmp chThdDequeueAllI
 451               	.LVL41:
 452               	.LBE139:
 453               	.LBE138:
 454               		.cfi_endproc
 455               	.LFE246:
 457               		.section	.text.iqPutI,"ax",@progbits
 458               	.global	iqPutI
 460               	iqPutI:
 461               	.LFB247:
 208:../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&iqp->q_waiting, MSG_RESET);
 209:../../os/hal/src/hal_queues.c **** }
 210:../../os/hal/src/hal_queues.c **** 
 211:../../os/hal/src/hal_queues.c **** /**
 212:../../os/hal/src/hal_queues.c ****  * @brief   Input queue write.
 213:../../os/hal/src/hal_queues.c ****  * @details A byte value is written into the low end of an input queue. The
 214:../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 215:../../os/hal/src/hal_queues.c ****  *
 216:../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 217:../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 218:../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 219:../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation has been completed with success.
 220:../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full.
 221:../../os/hal/src/hal_queues.c ****  *
 222:../../os/hal/src/hal_queues.c ****  * @iclass
 223:../../os/hal/src/hal_queues.c ****  */
 224:../../os/hal/src/hal_queues.c **** msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 462               		.loc 1 224 0
 463               		.cfi_startproc
 464               	.LVL42:
 465               	/* prologue: function */
 466               	/* frame size = 0 */
 467               	/* stack size = 0 */
 468               	.L__stack_usage = 0
 469 0000 FC01      		movw r30,r24
 225:../../os/hal/src/hal_queues.c **** 
 226:../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 227:../../os/hal/src/hal_queues.c **** 
 228:../../os/hal/src/hal_queues.c ****   /* Queue space check.*/
 229:../../os/hal/src/hal_queues.c ****   if (!iqIsFullI(iqp)) {
 470               		.loc 1 229 0
 471 0002 A285      		ldd r26,Z+10
 472 0004 B385      		ldd r27,Z+11
 473 0006 8485      		ldd r24,Z+12
 474 0008 9585      		ldd r25,Z+13
 475               	.LVL43:
 476 000a A817      		cp r26,r24
 477 000c B907      		cpc r27,r25
 478 000e 01F0      		breq .L24
 479               	.L19:
 230:../../os/hal/src/hal_queues.c ****     iqp->q_counter++;
 480               		.loc 1 230 0
 481 0010 8481      		ldd r24,Z+4
 482 0012 9581      		ldd r25,Z+5
 483 0014 0196      		adiw r24,1
 484 0016 9583      		std Z+5,r25
 485 0018 8483      		std Z+4,r24
 231:../../os/hal/src/hal_queues.c ****     *iqp->q_wrptr++ = b;
 486               		.loc 1 231 0
 487 001a CD01      		movw r24,r26
 488 001c 0196      		adiw r24,1
 489 001e 9387      		std Z+11,r25
 490 0020 8287      		std Z+10,r24
 491 0022 6C93      		st X,r22
 232:../../os/hal/src/hal_queues.c ****     if (iqp->q_wrptr >= iqp->q_top) {
 492               		.loc 1 232 0
 493 0024 2285      		ldd r18,Z+10
 494 0026 3385      		ldd r19,Z+11
 495 0028 8085      		ldd r24,Z+8
 496 002a 9185      		ldd r25,Z+9
 497 002c 2817      		cp r18,r24
 498 002e 3907      		cpc r19,r25
 499 0030 00F0      		brlo .L22
 233:../../os/hal/src/hal_queues.c ****       iqp->q_wrptr = iqp->q_buffer;
 500               		.loc 1 233 0
 501 0032 8681      		ldd r24,Z+6
 502 0034 9781      		ldd r25,Z+7
 503 0036 9387      		std Z+11,r25
 504 0038 8287      		std Z+10,r24
 505               	.L22:
 506 003a CF01      		movw r24,r30
 507               	.LVL44:
 508               	.LBB140:
 509               	.LBB141:
 908:../../os/hal/osal/rt-nil/osal.h **** }
 510               		.loc 3 908 0
 511 003c 70E0      		ldi r23,0
 512 003e 60E0      		ldi r22,0
 513               	.LVL45:
 514 0040 0E94 0000 		call chThdDequeueNextI
 515               	.LVL46:
 516               	.LBE141:
 517               	.LBE140:
 234:../../os/hal/src/hal_queues.c ****     }
 235:../../os/hal/src/hal_queues.c **** 
 236:../../os/hal/src/hal_queues.c ****     osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 237:../../os/hal/src/hal_queues.c **** 
 238:../../os/hal/src/hal_queues.c ****     return MSG_OK;
 518               		.loc 1 238 0
 519 0044 90E0      		ldi r25,0
 520 0046 80E0      		ldi r24,0
 521 0048 0895      		ret
 522               	.LVL47:
 523               	.L24:
 229:../../os/hal/src/hal_queues.c ****     iqp->q_counter++;
 524               		.loc 1 229 0 discriminator 1
 525 004a 8481      		ldd r24,Z+4
 526 004c 9581      		ldd r25,Z+5
 527 004e 892B      		or r24,r25
 528 0050 01F0      		breq .L19
 239:../../os/hal/src/hal_queues.c ****   }
 240:../../os/hal/src/hal_queues.c **** 
 241:../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 529               		.loc 1 241 0
 530 0052 8FEF      		ldi r24,lo8(-1)
 531 0054 9FEF      		ldi r25,lo8(-1)
 532               	/* epilogue start */
 242:../../os/hal/src/hal_queues.c **** }
 533               		.loc 1 242 0
 534 0056 0895      		ret
 535               		.cfi_endproc
 536               	.LFE247:
 538               		.section	.text.iqGetI,"ax",@progbits
 539               	.global	iqGetI
 541               	iqGetI:
 542               	.LFB248:
 243:../../os/hal/src/hal_queues.c **** 
 244:../../os/hal/src/hal_queues.c **** /**
 245:../../os/hal/src/hal_queues.c ****  * @brief   Input queue non-blocking read.
 246:../../os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. The
 247:../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 248:../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 249:../../os/hal/src/hal_queues.c ****  *          queue.
 250:../../os/hal/src/hal_queues.c ****  *
 251:../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 252:../../os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 253:../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 254:../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 255:../../os/hal/src/hal_queues.c ****  *
 256:../../os/hal/src/hal_queues.c ****  * @iclass
 257:../../os/hal/src/hal_queues.c ****  */
 258:../../os/hal/src/hal_queues.c **** msg_t iqGetI(input_queue_t *iqp) {
 543               		.loc 1 258 0
 544               		.cfi_startproc
 545               	.LVL48:
 546 0000 CF93      		push r28
 547               	.LCFI22:
 548               		.cfi_def_cfa_offset 3
 549               		.cfi_offset 28, -2
 550               	/* prologue: function */
 551               	/* frame size = 0 */
 552               	/* stack size = 1 */
 553               	.L__stack_usage = 1
 554 0002 DC01      		movw r26,r24
 259:../../os/hal/src/hal_queues.c **** 
 260:../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 261:../../os/hal/src/hal_queues.c **** 
 262:../../os/hal/src/hal_queues.c ****   /* Queue data check.*/
 263:../../os/hal/src/hal_queues.c ****   if (!iqIsEmptyI(iqp)) {
 555               		.loc 1 263 0
 556 0004 1496      		adiw r26,4
 557 0006 8D91      		ld r24,X+
 558 0008 9C91      		ld r25,X
 559 000a 1597      		sbiw r26,4+1
 560               	.LVL49:
 561 000c 892B      		or r24,r25
 562 000e 01F0      		breq .L29
 563               	.LBB142:
 264:../../os/hal/src/hal_queues.c ****     uint8_t b;
 265:../../os/hal/src/hal_queues.c **** 
 266:../../os/hal/src/hal_queues.c ****     /* Getting the character from the queue.*/
 267:../../os/hal/src/hal_queues.c ****     iqp->q_counter--;
 564               		.loc 1 267 0
 565 0010 1496      		adiw r26,4
 566 0012 8D91      		ld r24,X+
 567 0014 9C91      		ld r25,X
 568 0016 1597      		sbiw r26,4+1
 569 0018 0197      		sbiw r24,1
 570 001a 1596      		adiw r26,4+1
 571 001c 9C93      		st X,r25
 572 001e 8E93      		st -X,r24
 573 0020 1497      		sbiw r26,4
 268:../../os/hal/src/hal_queues.c ****     b = *iqp->q_rdptr++;
 574               		.loc 1 268 0
 575 0022 1C96      		adiw r26,12
 576 0024 ED91      		ld r30,X+
 577 0026 FC91      		ld r31,X
 578 0028 1D97      		sbiw r26,12+1
 579 002a CF01      		movw r24,r30
 580 002c 0196      		adiw r24,1
 581 002e 1D96      		adiw r26,12+1
 582 0030 9C93      		st X,r25
 583 0032 8E93      		st -X,r24
 584 0034 1C97      		sbiw r26,12
 585 0036 C081      		ld r28,Z
 586               	.LVL50:
 269:../../os/hal/src/hal_queues.c ****     if (iqp->q_rdptr >= iqp->q_top) {
 587               		.loc 1 269 0
 588 0038 1896      		adiw r26,8
 589 003a 2D91      		ld r18,X+
 590 003c 3C91      		ld r19,X
 591 003e 1997      		sbiw r26,8+1
 592 0040 8217      		cp r24,r18
 593 0042 9307      		cpc r25,r19
 594 0044 00F4      		brsh .L33
 595               	.L27:
 270:../../os/hal/src/hal_queues.c ****       iqp->q_rdptr = iqp->q_buffer;
 271:../../os/hal/src/hal_queues.c ****     }
 272:../../os/hal/src/hal_queues.c **** 
 273:../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one slot available.*/
 274:../../os/hal/src/hal_queues.c ****     if (iqp->q_notify != NULL) {
 596               		.loc 1 274 0
 597 0046 1E96      		adiw r26,14
 598 0048 ED91      		ld r30,X+
 599 004a FC91      		ld r31,X
 600 004c 1F97      		sbiw r26,14+1
 601 004e 3097      		sbiw r30,0
 602 0050 01F0      		breq .L28
 603 0052 CD01      		movw r24,r26
 275:../../os/hal/src/hal_queues.c ****       iqp->q_notify(iqp);
 604               		.loc 1 275 0
 605 0054 0995      		icall
 606               	.LVL51:
 607               	.L28:
 276:../../os/hal/src/hal_queues.c ****     }
 277:../../os/hal/src/hal_queues.c **** 
 278:../../os/hal/src/hal_queues.c ****     return (msg_t)b;
 608               		.loc 1 278 0
 609 0056 8C2F      		mov r24,r28
 610 0058 90E0      		ldi r25,0
 611               	.LVL52:
 612               	.L25:
 613               	/* epilogue start */
 614               	.LBE142:
 279:../../os/hal/src/hal_queues.c ****   }
 280:../../os/hal/src/hal_queues.c **** 
 281:../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 282:../../os/hal/src/hal_queues.c **** }
 615               		.loc 1 282 0
 616 005a CF91      		pop r28
 617 005c 0895      		ret
 618               	.LVL53:
 619               	.L33:
 620               	.LBB143:
 270:../../os/hal/src/hal_queues.c ****     }
 621               		.loc 1 270 0
 622 005e 1696      		adiw r26,6
 623 0060 8D91      		ld r24,X+
 624 0062 9C91      		ld r25,X
 625 0064 1797      		sbiw r26,6+1
 626 0066 1D96      		adiw r26,12+1
 627 0068 9C93      		st X,r25
 628 006a 8E93      		st -X,r24
 629 006c 1C97      		sbiw r26,12
 630 006e 00C0      		rjmp .L27
 631               	.LVL54:
 632               	.L29:
 633               	.LBE143:
 281:../../os/hal/src/hal_queues.c **** }
 634               		.loc 1 281 0
 635 0070 8FEF      		ldi r24,lo8(-1)
 636 0072 9FEF      		ldi r25,lo8(-1)
 637 0074 00C0      		rjmp .L25
 638               		.cfi_endproc
 639               	.LFE248:
 641               		.section	.text.iqGetTimeout,"ax",@progbits
 642               	.global	iqGetTimeout
 644               	iqGetTimeout:
 645               	.LFB249:
 283:../../os/hal/src/hal_queues.c **** 
 284:../../os/hal/src/hal_queues.c **** /**
 285:../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 286:../../os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. If the queue
 287:../../os/hal/src/hal_queues.c ****  *          is empty then the calling thread is suspended until a byte arrives
 288:../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 289:../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 290:../../os/hal/src/hal_queues.c ****  *          queue.
 291:../../os/hal/src/hal_queues.c ****  *
 292:../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 293:../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 294:../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 295:../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 296:../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 297:../../os/hal/src/hal_queues.c ****  *                      .
 298:../../os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 299:../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 300:../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 301:../../os/hal/src/hal_queues.c ****  *
 302:../../os/hal/src/hal_queues.c ****  * @api
 303:../../os/hal/src/hal_queues.c ****  */
 304:../../os/hal/src/hal_queues.c **** msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 646               		.loc 1 304 0
 647               		.cfi_startproc
 648               	.LVL55:
 649 0000 CF92      		push r12
 650               	.LCFI23:
 651               		.cfi_def_cfa_offset 3
 652               		.cfi_offset 12, -2
 653 0002 DF92      		push r13
 654               	.LCFI24:
 655               		.cfi_def_cfa_offset 4
 656               		.cfi_offset 13, -3
 657 0004 EF92      		push r14
 658               	.LCFI25:
 659               		.cfi_def_cfa_offset 5
 660               		.cfi_offset 14, -4
 661 0006 FF92      		push r15
 662               	.LCFI26:
 663               		.cfi_def_cfa_offset 6
 664               		.cfi_offset 15, -5
 665 0008 1F93      		push r17
 666               	.LCFI27:
 667               		.cfi_def_cfa_offset 7
 668               		.cfi_offset 17, -6
 669 000a CF93      		push r28
 670               	.LCFI28:
 671               		.cfi_def_cfa_offset 8
 672               		.cfi_offset 28, -7
 673 000c DF93      		push r29
 674               	.LCFI29:
 675               		.cfi_def_cfa_offset 9
 676               		.cfi_offset 29, -8
 677               	/* prologue: function */
 678               	/* frame size = 0 */
 679               	/* stack size = 7 */
 680               	.L__stack_usage = 7
 681 000e EC01      		movw r28,r24
 682 0010 6A01      		movw r12,r20
 683 0012 7B01      		movw r14,r22
 684               	.LBB144:
 685               	.LBB145:
 686               	.LBB146:
 687               	.LBB147:
 688               		.file 4 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 689               		.loc 4 430 0
 690               	/* #APP */
 691               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 692 0014 F894      		cli
 693               	 ;  0 "" 2
 694               	/* #NOAPP */
 695 0016 00C0      		rjmp .L35
 696               	.LVL56:
 697               	.L37:
 698               	.LBE147:
 699               	.LBE146:
 700               	.LBE145:
 701               	.LBE144:
 702               	.LBB148:
 703               	.LBB149:
 704               	.LBB150:
 895:../../os/hal/osal/rt-nil/osal.h **** }
 705               		.loc 3 895 0
 706 0018 B701      		movw r22,r14
 707 001a A601      		movw r20,r12
 708 001c CE01      		movw r24,r28
 709 001e 0E94 0000 		call chThdEnqueueTimeoutS
 710               	.LVL57:
 711               	.LBE150:
 712               	.LBE149:
 305:../../os/hal/src/hal_queues.c ****   uint8_t b;
 306:../../os/hal/src/hal_queues.c **** 
 307:../../os/hal/src/hal_queues.c ****   osalSysLock();
 308:../../os/hal/src/hal_queues.c **** 
 309:../../os/hal/src/hal_queues.c ****   /* Waiting until there is a character available or a timeout occurs.*/
 310:../../os/hal/src/hal_queues.c ****   while (iqIsEmptyI(iqp)) {
 311:../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 312:../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 713               		.loc 1 312 0
 714 0022 97FD      		sbrc r25,7
 715 0024 00C0      		rjmp .L44
 716               	.L35:
 717               	.LBE148:
 310:../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 718               		.loc 1 310 0
 719 0026 8C81      		ldd r24,Y+4
 720 0028 9D81      		ldd r25,Y+5
 721 002a 892B      		or r24,r25
 722 002c 01F0      		breq .L37
 313:../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 314:../../os/hal/src/hal_queues.c ****       return msg;
 315:../../os/hal/src/hal_queues.c ****     }
 316:../../os/hal/src/hal_queues.c ****   }
 317:../../os/hal/src/hal_queues.c **** 
 318:../../os/hal/src/hal_queues.c ****   /* Getting the character from the queue.*/
 319:../../os/hal/src/hal_queues.c ****   iqp->q_counter--;
 723               		.loc 1 319 0
 724 002e 8C81      		ldd r24,Y+4
 725 0030 9D81      		ldd r25,Y+5
 726 0032 0197      		sbiw r24,1
 727 0034 9D83      		std Y+5,r25
 728 0036 8C83      		std Y+4,r24
 320:../../os/hal/src/hal_queues.c ****   b = *iqp->q_rdptr++;
 729               		.loc 1 320 0
 730 0038 EC85      		ldd r30,Y+12
 731 003a FD85      		ldd r31,Y+13
 732 003c CF01      		movw r24,r30
 733 003e 0196      		adiw r24,1
 734 0040 9D87      		std Y+13,r25
 735 0042 8C87      		std Y+12,r24
 736 0044 1081      		ld r17,Z
 737               	.LVL58:
 321:../../os/hal/src/hal_queues.c ****   if (iqp->q_rdptr >= iqp->q_top) {
 738               		.loc 1 321 0
 739 0046 2885      		ldd r18,Y+8
 740 0048 3985      		ldd r19,Y+9
 741 004a 8217      		cp r24,r18
 742 004c 9307      		cpc r25,r19
 743 004e 00F0      		brlo .L38
 322:../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
 744               		.loc 1 322 0
 745 0050 8E81      		ldd r24,Y+6
 746 0052 9F81      		ldd r25,Y+7
 747 0054 9D87      		std Y+13,r25
 748 0056 8C87      		std Y+12,r24
 749               	.L38:
 323:../../os/hal/src/hal_queues.c ****   }
 324:../../os/hal/src/hal_queues.c **** 
 325:../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one slot available.*/
 326:../../os/hal/src/hal_queues.c ****   if (iqp->q_notify != NULL) {
 750               		.loc 1 326 0
 751 0058 EE85      		ldd r30,Y+14
 752 005a FF85      		ldd r31,Y+15
 753 005c 3097      		sbiw r30,0
 754 005e 01F0      		breq .L39
 327:../../os/hal/src/hal_queues.c ****     iqp->q_notify(iqp);
 755               		.loc 1 327 0
 756 0060 CE01      		movw r24,r28
 757 0062 0995      		icall
 758               	.LVL59:
 759               	.L39:
 760               	.LBB156:
 761               	.LBB157:
 762               	.LBB158:
 763               	.LBB159:
 764               	.LBB160:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 765               		.loc 4 440 0
 766               	/* #APP */
 767               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 768 0064 7894      		sei
 769               	 ;  0 "" 2
 770               	/* #NOAPP */
 771               	.LBE160:
 772               	.LBE159:
 773               	.LBE158:
 774               	.LBE157:
 775               	.LBE156:
 328:../../os/hal/src/hal_queues.c ****   }
 329:../../os/hal/src/hal_queues.c **** 
 330:../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 331:../../os/hal/src/hal_queues.c **** 
 332:../../os/hal/src/hal_queues.c ****   return (msg_t)b;
 776               		.loc 1 332 0
 777 0066 812F      		mov r24,r17
 778 0068 90E0      		ldi r25,0
 779               	/* epilogue start */
 333:../../os/hal/src/hal_queues.c **** }
 780               		.loc 1 333 0
 781 006a DF91      		pop r29
 782 006c CF91      		pop r28
 783               	.LVL60:
 784 006e 1F91      		pop r17
 785               	.LVL61:
 786 0070 FF90      		pop r15
 787 0072 EF90      		pop r14
 788 0074 DF90      		pop r13
 789 0076 CF90      		pop r12
 790 0078 0895      		ret
 791               	.LVL62:
 792               	.L44:
 793               	.LBB161:
 794               	.LBB151:
 795               	.LBB152:
 796               	.LBB153:
 797               	.LBB154:
 798               	.LBB155:
 799               		.loc 4 440 0
 800               	/* #APP */
 801               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 802 007a 7894      		sei
 803               	 ;  0 "" 2
 804               	/* epilogue start */
 805               	/* #NOAPP */
 806               	.LBE155:
 807               	.LBE154:
 808               	.LBE153:
 809               	.LBE152:
 810               	.LBE151:
 811               	.LBE161:
 812               		.loc 1 333 0
 813 007c DF91      		pop r29
 814 007e CF91      		pop r28
 815               	.LVL63:
 816 0080 1F91      		pop r17
 817 0082 FF90      		pop r15
 818 0084 EF90      		pop r14
 819 0086 DF90      		pop r13
 820 0088 CF90      		pop r12
 821 008a 0895      		ret
 822               		.cfi_endproc
 823               	.LFE249:
 825               		.section	.text.iqReadI,"ax",@progbits
 826               	.global	iqReadI
 828               	iqReadI:
 829               	.LFB250:
 334:../../os/hal/src/hal_queues.c **** 
 335:../../os/hal/src/hal_queues.c **** /**
 336:../../os/hal/src/hal_queues.c ****  * @brief   Input queue non-blocking read.
 337:../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 338:../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 339:../../os/hal/src/hal_queues.c ****  *
 340:../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 341:../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 342:../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 343:../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 344:../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 345:../../os/hal/src/hal_queues.c ****  *
 346:../../os/hal/src/hal_queues.c ****  * @iclass
 347:../../os/hal/src/hal_queues.c ****  */
 348:../../os/hal/src/hal_queues.c **** size_t iqReadI(input_queue_t *iqp, uint8_t *bp, size_t n) {
 830               		.loc 1 348 0
 831               		.cfi_startproc
 832               	.LVL64:
 833 0000 EF92      		push r14
 834               	.LCFI30:
 835               		.cfi_def_cfa_offset 3
 836               		.cfi_offset 14, -2
 837 0002 FF92      		push r15
 838               	.LCFI31:
 839               		.cfi_def_cfa_offset 4
 840               		.cfi_offset 15, -3
 841 0004 0F93      		push r16
 842               	.LCFI32:
 843               		.cfi_def_cfa_offset 5
 844               		.cfi_offset 16, -4
 845 0006 1F93      		push r17
 846               	.LCFI33:
 847               		.cfi_def_cfa_offset 6
 848               		.cfi_offset 17, -5
 849 0008 CF93      		push r28
 850               	.LCFI34:
 851               		.cfi_def_cfa_offset 7
 852               		.cfi_offset 28, -6
 853 000a DF93      		push r29
 854               	.LCFI35:
 855               		.cfi_def_cfa_offset 8
 856               		.cfi_offset 29, -7
 857               	/* prologue: function */
 858               	/* frame size = 0 */
 859               	/* stack size = 6 */
 860               	.L__stack_usage = 6
 861 000c EC01      		movw r28,r24
 349:../../os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 862               		.loc 1 349 0
 863 000e EE84      		ldd r14,Y+14
 864 0010 FF84      		ldd r15,Y+15
 865               	.LVL65:
 350:../../os/hal/src/hal_queues.c ****   size_t rd;
 351:../../os/hal/src/hal_queues.c **** 
 352:../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 353:../../os/hal/src/hal_queues.c **** 
 354:../../os/hal/src/hal_queues.c ****   rd = iq_read(iqp, bp, n);
 866               		.loc 1 354 0
 867 0012 0E94 0000 		call iq_read
 868               	.LVL66:
 869 0016 8C01      		movw r16,r24
 870               	.LVL67:
 355:../../os/hal/src/hal_queues.c **** 
 356:../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character
 357:../../os/hal/src/hal_queues.c ****      available.*/
 358:../../os/hal/src/hal_queues.c ****   if ((rd > (size_t)0) && (nfy != NULL)) {
 871               		.loc 1 358 0
 872 0018 892B      		or r24,r25
 873 001a 01F0      		breq .L45
 874               		.loc 1 358 0 is_stmt 0 discriminator 1
 875 001c E114      		cp r14,__zero_reg__
 876 001e F104      		cpc r15,__zero_reg__
 877 0020 01F0      		breq .L45
 359:../../os/hal/src/hal_queues.c ****     nfy(iqp);
 878               		.loc 1 359 0 is_stmt 1
 879 0022 CE01      		movw r24,r28
 880 0024 F701      		movw r30,r14
 881 0026 0995      		icall
 882               	.LVL68:
 883               	.L45:
 360:../../os/hal/src/hal_queues.c ****   }
 361:../../os/hal/src/hal_queues.c **** 
 362:../../os/hal/src/hal_queues.c ****   return rd;
 363:../../os/hal/src/hal_queues.c **** }
 884               		.loc 1 363 0
 885 0028 C801      		movw r24,r16
 886               	/* epilogue start */
 887 002a DF91      		pop r29
 888 002c CF91      		pop r28
 889               	.LVL69:
 890 002e 1F91      		pop r17
 891 0030 0F91      		pop r16
 892               	.LVL70:
 893 0032 FF90      		pop r15
 894 0034 EF90      		pop r14
 895               	.LVL71:
 896 0036 0895      		ret
 897               		.cfi_endproc
 898               	.LFE250:
 900               		.section	.text.iqReadTimeout,"ax",@progbits
 901               	.global	iqReadTimeout
 903               	iqReadTimeout:
 904               	.LFB251:
 364:../../os/hal/src/hal_queues.c **** 
 365:../../os/hal/src/hal_queues.c **** /**
 366:../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 367:../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 368:../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 369:../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 370:../../os/hal/src/hal_queues.c ****  *          been reset.
 371:../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 372:../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 373:../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing each character from the
 374:../../os/hal/src/hal_queues.c ****  *          queue.
 375:../../os/hal/src/hal_queues.c ****  *
 376:../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 377:../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 378:../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 379:../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 380:../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 381:../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 382:../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 383:../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 384:../../os/hal/src/hal_queues.c ****  *                      .
 385:../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 386:../../os/hal/src/hal_queues.c ****  *
 387:../../os/hal/src/hal_queues.c ****  * @api
 388:../../os/hal/src/hal_queues.c ****  */
 389:../../os/hal/src/hal_queues.c **** size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
 390:../../os/hal/src/hal_queues.c ****                      size_t n, sysinterval_t timeout) {
 905               		.loc 1 390 0
 906               		.cfi_startproc
 907               	.LVL72:
 908 0000 4F92      		push r4
 909               	.LCFI36:
 910               		.cfi_def_cfa_offset 3
 911               		.cfi_offset 4, -2
 912 0002 5F92      		push r5
 913               	.LCFI37:
 914               		.cfi_def_cfa_offset 4
 915               		.cfi_offset 5, -3
 916 0004 6F92      		push r6
 917               	.LCFI38:
 918               		.cfi_def_cfa_offset 5
 919               		.cfi_offset 6, -4
 920 0006 7F92      		push r7
 921               	.LCFI39:
 922               		.cfi_def_cfa_offset 6
 923               		.cfi_offset 7, -5
 924 0008 8F92      		push r8
 925               	.LCFI40:
 926               		.cfi_def_cfa_offset 7
 927               		.cfi_offset 8, -6
 928 000a 9F92      		push r9
 929               	.LCFI41:
 930               		.cfi_def_cfa_offset 8
 931               		.cfi_offset 9, -7
 932 000c AF92      		push r10
 933               	.LCFI42:
 934               		.cfi_def_cfa_offset 9
 935               		.cfi_offset 10, -8
 936 000e BF92      		push r11
 937               	.LCFI43:
 938               		.cfi_def_cfa_offset 10
 939               		.cfi_offset 11, -9
 940 0010 CF92      		push r12
 941               	.LCFI44:
 942               		.cfi_def_cfa_offset 11
 943               		.cfi_offset 12, -10
 944 0012 DF92      		push r13
 945               	.LCFI45:
 946               		.cfi_def_cfa_offset 12
 947               		.cfi_offset 13, -11
 948 0014 EF92      		push r14
 949               	.LCFI46:
 950               		.cfi_def_cfa_offset 13
 951               		.cfi_offset 14, -12
 952 0016 FF92      		push r15
 953               	.LCFI47:
 954               		.cfi_def_cfa_offset 14
 955               		.cfi_offset 15, -13
 956 0018 0F93      		push r16
 957               	.LCFI48:
 958               		.cfi_def_cfa_offset 15
 959               		.cfi_offset 16, -14
 960 001a 1F93      		push r17
 961               	.LCFI49:
 962               		.cfi_def_cfa_offset 16
 963               		.cfi_offset 17, -15
 964 001c CF93      		push r28
 965               	.LCFI50:
 966               		.cfi_def_cfa_offset 17
 967               		.cfi_offset 28, -16
 968 001e DF93      		push r29
 969               	.LCFI51:
 970               		.cfi_def_cfa_offset 18
 971               		.cfi_offset 29, -17
 972               	/* prologue: function */
 973               	/* frame size = 0 */
 974               	/* stack size = 16 */
 975               	.L__stack_usage = 16
 976 0020 6C01      		movw r12,r24
 977 0022 7B01      		movw r14,r22
 978 0024 4A01      		movw r8,r20
 979 0026 2801      		movw r4,r16
 980 0028 3901      		movw r6,r18
 391:../../os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 981               		.loc 1 391 0
 982 002a FC01      		movw r30,r24
 983 002c A684      		ldd r10,Z+14
 984 002e B784      		ldd r11,Z+15
 985               	.LVL73:
 986               	.LBB162:
 987               	.LBB163:
 988               	.LBB164:
 989               	.LBB165:
 430:../../os/common/ports/AVR/chcore.h **** }
 990               		.loc 4 430 0
 991               	/* #APP */
 992               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 993 0030 F894      		cli
 994               	 ;  0 "" 2
 995               	/* #NOAPP */
 996               	.LBE165:
 997               	.LBE164:
 998               	.LBE163:
 999               	.LBE162:
 392:../../os/hal/src/hal_queues.c ****   size_t max = n;
 393:../../os/hal/src/hal_queues.c **** 
 394:../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 395:../../os/hal/src/hal_queues.c **** 
 396:../../os/hal/src/hal_queues.c ****   osalSysLock();
 397:../../os/hal/src/hal_queues.c **** 
 398:../../os/hal/src/hal_queues.c ****   while (n > 0U) {
 1000               		.loc 1 398 0
 1001 0032 4115      		cp r20,__zero_reg__
 1002 0034 5105      		cpc r21,__zero_reg__
 1003 0036 01F0      		breq .L55
 1004 0038 8A01      		movw r16,r20
 1005               	.LVL74:
 1006               	.L54:
 1007               	.LBB166:
 399:../../os/hal/src/hal_queues.c ****     size_t done;
 400:../../os/hal/src/hal_queues.c **** 
 401:../../os/hal/src/hal_queues.c ****     done = iq_read(iqp, bp, n);
 1008               		.loc 1 401 0
 1009 003a A801      		movw r20,r16
 1010 003c B701      		movw r22,r14
 1011 003e C601      		movw r24,r12
 1012 0040 0E94 0000 		call iq_read
 1013               	.LVL75:
 1014 0044 EC01      		movw r28,r24
 1015               	.LVL76:
 402:../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 1016               		.loc 1 402 0
 1017 0046 892B      		or r24,r25
 1018 0048 01F0      		breq .L67
 403:../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 404:../../os/hal/src/hal_queues.c **** 
 405:../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 406:../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 407:../../os/hal/src/hal_queues.c ****         break;
 408:../../os/hal/src/hal_queues.c ****       }
 409:../../os/hal/src/hal_queues.c ****     }
 410:../../os/hal/src/hal_queues.c ****     else {
 411:../../os/hal/src/hal_queues.c ****       /* Inform the low side that the queue has at least one empty slot
 412:../../os/hal/src/hal_queues.c ****          available.*/
 413:../../os/hal/src/hal_queues.c ****       if (nfy != NULL) {
 1019               		.loc 1 413 0
 1020 004a A114      		cp r10,__zero_reg__
 1021 004c B104      		cpc r11,__zero_reg__
 1022 004e 01F0      		breq .L59
 414:../../os/hal/src/hal_queues.c ****         nfy(iqp);
 1023               		.loc 1 414 0
 1024 0050 C601      		movw r24,r12
 1025               	.LVL77:
 1026 0052 F501      		movw r30,r10
 1027 0054 0995      		icall
 1028               	.LVL78:
 1029               	.L59:
 1030               	.LBB167:
 1031               	.LBB168:
 1032               	.LBB169:
 1033               	.LBB170:
 1034               	.LBB171:
 1035               		.loc 4 440 0
 1036               	/* #APP */
 1037               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1038 0056 7894      		sei
 1039               	 ;  0 "" 2
 1040               	/* #NOAPP */
 1041               	.LBE171:
 1042               	.LBE170:
 1043               	.LBE169:
 1044               	.LBE168:
 1045               	.LBE167:
 415:../../os/hal/src/hal_queues.c ****       }
 416:../../os/hal/src/hal_queues.c **** 
 417:../../os/hal/src/hal_queues.c ****       /* Giving a preemption chance in a controlled point.*/
 418:../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 419:../../os/hal/src/hal_queues.c **** 
 420:../../os/hal/src/hal_queues.c ****       n  -= done;
 1046               		.loc 1 420 0
 1047 0058 0C1B      		sub r16,r28
 1048 005a 1D0B      		sbc r17,r29
 1049               	.LVL79:
 421:../../os/hal/src/hal_queues.c ****       bp += done;
 1050               		.loc 1 421 0
 1051 005c EC0E      		add r14,r28
 1052 005e FD1E      		adc r15,r29
 1053               	.LVL80:
 1054               	.LBB172:
 1055               	.LBB173:
 1056               	.LBB174:
 1057               	.LBB175:
 430:../../os/common/ports/AVR/chcore.h **** }
 1058               		.loc 4 430 0
 1059               	/* #APP */
 1060               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1061 0060 F894      		cli
 1062               	 ;  0 "" 2
 1063               	/* #NOAPP */
 1064               	.LBE175:
 1065               	.LBE174:
 1066               	.LBE173:
 1067               	.LBE172:
 1068               	.LBE166:
 398:../../os/hal/src/hal_queues.c ****     size_t done;
 1069               		.loc 1 398 0
 1070 0062 0115      		cp r16,__zero_reg__
 1071 0064 1105      		cpc r17,__zero_reg__
 1072 0066 01F4      		brne .L54
 1073               	.LVL81:
 1074               	.L55:
 1075 0068 C401      		movw r24,r8
 1076               	.L58:
 1077               	.LBB179:
 1078               	.LBB180:
 1079               	.LBB181:
 1080               	.LBB182:
 1081               	.LBB183:
 1082               		.loc 4 440 0
 1083               	/* #APP */
 1084               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1085 006a 7894      		sei
 1086               	 ;  0 "" 2
 1087               	/* epilogue start */
 1088               	/* #NOAPP */
 1089               	.LBE183:
 1090               	.LBE182:
 1091               	.LBE181:
 1092               	.LBE180:
 1093               	.LBE179:
 422:../../os/hal/src/hal_queues.c **** 
 423:../../os/hal/src/hal_queues.c ****       osalSysLock();
 424:../../os/hal/src/hal_queues.c ****     }
 425:../../os/hal/src/hal_queues.c ****   }
 426:../../os/hal/src/hal_queues.c **** 
 427:../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 428:../../os/hal/src/hal_queues.c ****   return max - n;
 429:../../os/hal/src/hal_queues.c **** }
 1094               		.loc 1 429 0
 1095 006c DF91      		pop r29
 1096 006e CF91      		pop r28
 1097 0070 1F91      		pop r17
 1098 0072 0F91      		pop r16
 1099 0074 FF90      		pop r15
 1100 0076 EF90      		pop r14
 1101               	.LVL82:
 1102 0078 DF90      		pop r13
 1103 007a CF90      		pop r12
 1104               	.LVL83:
 1105 007c BF90      		pop r11
 1106 007e AF90      		pop r10
 1107               	.LVL84:
 1108 0080 9F90      		pop r9
 1109 0082 8F90      		pop r8
 1110               	.LVL85:
 1111 0084 7F90      		pop r7
 1112 0086 6F90      		pop r6
 1113 0088 5F90      		pop r5
 1114 008a 4F90      		pop r4
 1115 008c 0895      		ret
 1116               	.LVL86:
 1117               	.L67:
 1118               	.LBB184:
 1119               	.LBB176:
 1120               	.LBB177:
 1121               	.LBB178:
 895:../../os/hal/osal/rt-nil/osal.h **** }
 1122               		.loc 3 895 0
 1123 008e B301      		movw r22,r6
 1124 0090 A201      		movw r20,r4
 1125 0092 C601      		movw r24,r12
 1126               	.LVL87:
 1127 0094 0E94 0000 		call chThdEnqueueTimeoutS
 1128               	.LVL88:
 1129               	.LBE178:
 1130               	.LBE177:
 406:../../os/hal/src/hal_queues.c ****         break;
 1131               		.loc 1 406 0
 1132 0098 892B      		or r24,r25
 1133 009a 01F0      		breq .L54
 1134 009c C401      		movw r24,r8
 1135 009e 801B      		sub r24,r16
 1136 00a0 910B      		sbc r25,r17
 1137 00a2 00C0      		rjmp .L58
 1138               	.LBE176:
 1139               	.LBE184:
 1140               		.cfi_endproc
 1141               	.LFE251:
 1143               		.section	.text.oqObjectInit,"ax",@progbits
 1144               	.global	oqObjectInit
 1146               	oqObjectInit:
 1147               	.LFB252:
 430:../../os/hal/src/hal_queues.c **** 
 431:../../os/hal/src/hal_queues.c **** /**
 432:../../os/hal/src/hal_queues.c ****  * @brief   Initializes an output queue.
 433:../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 434:../../os/hal/src/hal_queues.c ****  *          the free bytes in the queue.
 435:../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 436:../../os/hal/src/hal_queues.c ****  *
 437:../../os/hal/src/hal_queues.c ****  * @param[out] oqp      pointer to an @p output_queue_t structure
 438:../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 439:../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 440:../../os/hal/src/hal_queues.c ****  * @param[in] onfy      pointer to a callback function that is invoked when
 441:../../os/hal/src/hal_queues.c ****  *                      data is written to the queue. The value can be @p NULL.
 442:../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 443:../../os/hal/src/hal_queues.c ****  *
 444:../../os/hal/src/hal_queues.c ****  * @init
 445:../../os/hal/src/hal_queues.c ****  */
 446:../../os/hal/src/hal_queues.c **** void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
 447:../../os/hal/src/hal_queues.c ****                   qnotify_t onfy, void *link) {
 1148               		.loc 1 447 0
 1149               		.cfi_startproc
 1150               	.LVL89:
 1151 0000 0F93      		push r16
 1152               	.LCFI52:
 1153               		.cfi_def_cfa_offset 3
 1154               		.cfi_offset 16, -2
 1155 0002 1F93      		push r17
 1156               	.LCFI53:
 1157               		.cfi_def_cfa_offset 4
 1158               		.cfi_offset 17, -3
 1159               	/* prologue: function */
 1160               	/* frame size = 0 */
 1161               	/* stack size = 2 */
 1162               	.L__stack_usage = 2
 1163 0004 FC01      		movw r30,r24
 1164               	.LVL90:
 1165               	.LBB185:
 1166               	.LBB186:
 1167               	.LBB187:
 1168               	.LBB188:
 1169               	.LBB189:
 224:../../os/rt/include/chlists.h ****   qp->prev = qp;
 1170               		.loc 2 224 0
 1171 0006 9183      		std Z+1,r25
 1172 0008 8083      		st Z,r24
 1173               		.loc 2 225 0
 1174 000a 9383      		std Z+3,r25
 1175 000c 8283      		std Z+2,r24
 1176               	.LVL91:
 1177               	.LBE189:
 1178               	.LBE188:
 1179               	.LBE187:
 1180               	.LBE186:
 1181               	.LBE185:
 448:../../os/hal/src/hal_queues.c **** 
 449:../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&oqp->q_waiting);
 450:../../os/hal/src/hal_queues.c ****   oqp->q_counter = size;
 1182               		.loc 1 450 0
 1183 000e 5583      		std Z+5,r21
 1184 0010 4483      		std Z+4,r20
 451:../../os/hal/src/hal_queues.c ****   oqp->q_buffer  = bp;
 1185               		.loc 1 451 0
 1186 0012 7783      		std Z+7,r23
 1187 0014 6683      		std Z+6,r22
 452:../../os/hal/src/hal_queues.c ****   oqp->q_rdptr   = bp;
 1188               		.loc 1 452 0
 1189 0016 7587      		std Z+13,r23
 1190 0018 6487      		std Z+12,r22
 453:../../os/hal/src/hal_queues.c ****   oqp->q_wrptr   = bp;
 1191               		.loc 1 453 0
 1192 001a 7387      		std Z+11,r23
 1193 001c 6287      		std Z+10,r22
 454:../../os/hal/src/hal_queues.c ****   oqp->q_top     = bp + size;
 1194               		.loc 1 454 0
 1195 001e 640F      		add r22,r20
 1196 0020 751F      		adc r23,r21
 1197               	.LVL92:
 1198 0022 7187      		std Z+9,r23
 1199 0024 6087      		std Z+8,r22
 455:../../os/hal/src/hal_queues.c ****   oqp->q_notify  = onfy;
 1200               		.loc 1 455 0
 1201 0026 3787      		std Z+15,r19
 1202 0028 2687      		std Z+14,r18
 456:../../os/hal/src/hal_queues.c ****   oqp->q_link    = link;
 1203               		.loc 1 456 0
 1204 002a 118B      		std Z+17,r17
 1205 002c 008B      		std Z+16,r16
 1206               	/* epilogue start */
 457:../../os/hal/src/hal_queues.c **** }
 1207               		.loc 1 457 0
 1208 002e 1F91      		pop r17
 1209 0030 0F91      		pop r16
 1210               	.LVL93:
 1211 0032 0895      		ret
 1212               		.cfi_endproc
 1213               	.LFE252:
 1215               		.section	.text.oqResetI,"ax",@progbits
 1216               	.global	oqResetI
 1218               	oqResetI:
 1219               	.LFB253:
 458:../../os/hal/src/hal_queues.c **** 
 459:../../os/hal/src/hal_queues.c **** /**
 460:../../os/hal/src/hal_queues.c ****  * @brief   Resets an output queue.
 461:../../os/hal/src/hal_queues.c ****  * @details All the data in the output queue is erased and lost, any waiting
 462:../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 463:../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 464:../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 465:../../os/hal/src/hal_queues.c ****  *
 466:../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 467:../../os/hal/src/hal_queues.c ****  *
 468:../../os/hal/src/hal_queues.c ****  * @iclass
 469:../../os/hal/src/hal_queues.c ****  */
 470:../../os/hal/src/hal_queues.c **** void oqResetI(output_queue_t *oqp) {
 1220               		.loc 1 470 0
 1221               		.cfi_startproc
 1222               	.LVL94:
 1223               	/* prologue: function */
 1224               	/* frame size = 0 */
 1225               	/* stack size = 0 */
 1226               	.L__stack_usage = 0
 1227 0000 FC01      		movw r30,r24
 471:../../os/hal/src/hal_queues.c **** 
 472:../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 473:../../os/hal/src/hal_queues.c **** 
 474:../../os/hal/src/hal_queues.c ****   oqp->q_rdptr = oqp->q_buffer;
 1228               		.loc 1 474 0
 1229 0002 2681      		ldd r18,Z+6
 1230 0004 3781      		ldd r19,Z+7
 1231 0006 3587      		std Z+13,r19
 1232 0008 2487      		std Z+12,r18
 475:../../os/hal/src/hal_queues.c ****   oqp->q_wrptr = oqp->q_buffer;
 1233               		.loc 1 475 0
 1234 000a 3387      		std Z+11,r19
 1235 000c 2287      		std Z+10,r18
 476:../../os/hal/src/hal_queues.c ****   oqp->q_counter = qSizeX(oqp);
 1236               		.loc 1 476 0
 1237 000e 8085      		ldd r24,Z+8
 1238 0010 9185      		ldd r25,Z+9
 1239               	.LVL95:
 1240 0012 821B      		sub r24,r18
 1241 0014 930B      		sbc r25,r19
 1242 0016 9583      		std Z+5,r25
 1243 0018 8483      		std Z+4,r24
 1244               	.LVL96:
 1245               	.LBB190:
 1246               	.LBB191:
 1247               		.loc 3 921 0
 1248 001a 6EEF      		ldi r22,lo8(-2)
 1249 001c 7FEF      		ldi r23,lo8(-1)
 1250 001e CF01      		movw r24,r30
 1251 0020 0C94 0000 		jmp chThdDequeueAllI
 1252               	.LVL97:
 1253               	.LBE191:
 1254               	.LBE190:
 1255               		.cfi_endproc
 1256               	.LFE253:
 1258               		.section	.text.oqPutI,"ax",@progbits
 1259               	.global	oqPutI
 1261               	oqPutI:
 1262               	.LFB254:
 477:../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&oqp->q_waiting, MSG_RESET);
 478:../../os/hal/src/hal_queues.c **** }
 479:../../os/hal/src/hal_queues.c **** 
 480:../../os/hal/src/hal_queues.c **** /**
 481:../../os/hal/src/hal_queues.c ****  * @brief   Output queue non-blocking write.
 482:../../os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. The
 483:../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 484:../../os/hal/src/hal_queues.c ****  *
 485:../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 486:../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 487:../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 488:../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 489:../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full.
 490:../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 491:../../os/hal/src/hal_queues.c ****  *
 492:../../os/hal/src/hal_queues.c ****  * @iclass
 493:../../os/hal/src/hal_queues.c ****  */
 494:../../os/hal/src/hal_queues.c **** msg_t oqPutI(output_queue_t *oqp, uint8_t b) {
 1263               		.loc 1 494 0
 1264               		.cfi_startproc
 1265               	.LVL98:
 1266               	/* prologue: function */
 1267               	/* frame size = 0 */
 1268               	/* stack size = 0 */
 1269               	.L__stack_usage = 0
 1270 0000 DC01      		movw r26,r24
 495:../../os/hal/src/hal_queues.c **** 
 496:../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 497:../../os/hal/src/hal_queues.c **** 
 498:../../os/hal/src/hal_queues.c ****   /* Queue space check.*/
 499:../../os/hal/src/hal_queues.c ****   while (!oqIsFullI(oqp)) {
 1271               		.loc 1 499 0
 1272 0002 1496      		adiw r26,4
 1273 0004 8D91      		ld r24,X+
 1274 0006 9C91      		ld r25,X
 1275 0008 1597      		sbiw r26,4+1
 1276               	.LVL99:
 1277 000a 892B      		or r24,r25
 1278 000c 01F0      		breq .L73
 500:../../os/hal/src/hal_queues.c ****     /* Putting the character into the queue.*/
 501:../../os/hal/src/hal_queues.c ****     oqp->q_counter--;
 1279               		.loc 1 501 0
 1280 000e 1496      		adiw r26,4
 1281 0010 8D91      		ld r24,X+
 1282 0012 9C91      		ld r25,X
 1283 0014 1597      		sbiw r26,4+1
 1284 0016 0197      		sbiw r24,1
 1285 0018 1596      		adiw r26,4+1
 1286 001a 9C93      		st X,r25
 1287 001c 8E93      		st -X,r24
 1288 001e 1497      		sbiw r26,4
 502:../../os/hal/src/hal_queues.c ****     *oqp->q_wrptr++ = b;
 1289               		.loc 1 502 0
 1290 0020 1A96      		adiw r26,10
 1291 0022 ED91      		ld r30,X+
 1292 0024 FC91      		ld r31,X
 1293 0026 1B97      		sbiw r26,10+1
 1294 0028 CF01      		movw r24,r30
 1295 002a 0196      		adiw r24,1
 1296 002c 1B96      		adiw r26,10+1
 1297 002e 9C93      		st X,r25
 1298 0030 8E93      		st -X,r24
 1299 0032 1A97      		sbiw r26,10
 1300 0034 6083      		st Z,r22
 503:../../os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1301               		.loc 1 503 0
 1302 0036 1A96      		adiw r26,10
 1303 0038 2D91      		ld r18,X+
 1304 003a 3C91      		ld r19,X
 1305 003c 1B97      		sbiw r26,10+1
 1306 003e 1896      		adiw r26,8
 1307 0040 8D91      		ld r24,X+
 1308 0042 9C91      		ld r25,X
 1309 0044 1997      		sbiw r26,8+1
 1310 0046 2817      		cp r18,r24
 1311 0048 3907      		cpc r19,r25
 1312 004a 00F4      		brsh .L75
 1313               	.L72:
 504:../../os/hal/src/hal_queues.c ****       oqp->q_wrptr = oqp->q_buffer;
 505:../../os/hal/src/hal_queues.c ****     }
 506:../../os/hal/src/hal_queues.c **** 
 507:../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one character available.*/
 508:../../os/hal/src/hal_queues.c ****     if (oqp->q_notify != NULL) {
 1314               		.loc 1 508 0
 1315 004c 1E96      		adiw r26,14
 1316 004e ED91      		ld r30,X+
 1317 0050 FC91      		ld r31,X
 1318 0052 1F97      		sbiw r26,14+1
 1319 0054 3097      		sbiw r30,0
 1320 0056 01F0      		breq .L74
 1321 0058 CD01      		movw r24,r26
 509:../../os/hal/src/hal_queues.c ****       oqp->q_notify(oqp);
 1322               		.loc 1 509 0
 1323 005a 0995      		icall
 1324               	.LVL100:
 510:../../os/hal/src/hal_queues.c ****     }
 511:../../os/hal/src/hal_queues.c **** 
 512:../../os/hal/src/hal_queues.c ****     return MSG_OK;
 1325               		.loc 1 512 0
 1326 005c 90E0      		ldi r25,0
 1327 005e 80E0      		ldi r24,0
 1328 0060 0895      		ret
 1329               	.LVL101:
 1330               	.L75:
 504:../../os/hal/src/hal_queues.c ****     }
 1331               		.loc 1 504 0
 1332 0062 1696      		adiw r26,6
 1333 0064 8D91      		ld r24,X+
 1334 0066 9C91      		ld r25,X
 1335 0068 1797      		sbiw r26,6+1
 1336 006a 1B96      		adiw r26,10+1
 1337 006c 9C93      		st X,r25
 1338 006e 8E93      		st -X,r24
 1339 0070 1A97      		sbiw r26,10
 1340 0072 00C0      		rjmp .L72
 1341               	.L74:
 1342               		.loc 1 512 0
 1343 0074 90E0      		ldi r25,0
 1344 0076 80E0      		ldi r24,0
 1345               	/* epilogue start */
 513:../../os/hal/src/hal_queues.c ****   }
 514:../../os/hal/src/hal_queues.c **** 
 515:../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 516:../../os/hal/src/hal_queues.c **** }
 1346               		.loc 1 516 0
 1347 0078 0895      		ret
 1348               	.L73:
 515:../../os/hal/src/hal_queues.c **** }
 1349               		.loc 1 515 0
 1350 007a 8FEF      		ldi r24,lo8(-1)
 1351 007c 9FEF      		ldi r25,lo8(-1)
 1352 007e 0895      		ret
 1353               		.cfi_endproc
 1354               	.LFE254:
 1356               		.section	.text.oqPutTimeout,"ax",@progbits
 1357               	.global	oqPutTimeout
 1359               	oqPutTimeout:
 1360               	.LFB255:
 517:../../os/hal/src/hal_queues.c **** 
 518:../../os/hal/src/hal_queues.c **** /**
 519:../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 520:../../os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. If the queue
 521:../../os/hal/src/hal_queues.c ****  *          is full then the calling thread is suspended until there is space
 522:../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 523:../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting the character into the
 524:../../os/hal/src/hal_queues.c ****  *          queue.
 525:../../os/hal/src/hal_queues.c ****  *
 526:../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 527:../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 528:../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 529:../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 530:../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 531:../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 532:../../os/hal/src/hal_queues.c ****  *                      .
 533:../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 534:../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 535:../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 536:../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 537:../../os/hal/src/hal_queues.c ****  *
 538:../../os/hal/src/hal_queues.c ****  * @api
 539:../../os/hal/src/hal_queues.c ****  */
 540:../../os/hal/src/hal_queues.c **** msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 1361               		.loc 1 540 0
 1362               		.cfi_startproc
 1363               	.LVL102:
 1364 0000 CF92      		push r12
 1365               	.LCFI54:
 1366               		.cfi_def_cfa_offset 3
 1367               		.cfi_offset 12, -2
 1368 0002 DF92      		push r13
 1369               	.LCFI55:
 1370               		.cfi_def_cfa_offset 4
 1371               		.cfi_offset 13, -3
 1372 0004 EF92      		push r14
 1373               	.LCFI56:
 1374               		.cfi_def_cfa_offset 5
 1375               		.cfi_offset 14, -4
 1376 0006 FF92      		push r15
 1377               	.LCFI57:
 1378               		.cfi_def_cfa_offset 6
 1379               		.cfi_offset 15, -5
 1380 0008 1F93      		push r17
 1381               	.LCFI58:
 1382               		.cfi_def_cfa_offset 7
 1383               		.cfi_offset 17, -6
 1384 000a CF93      		push r28
 1385               	.LCFI59:
 1386               		.cfi_def_cfa_offset 8
 1387               		.cfi_offset 28, -7
 1388 000c DF93      		push r29
 1389               	.LCFI60:
 1390               		.cfi_def_cfa_offset 9
 1391               		.cfi_offset 29, -8
 1392               	/* prologue: function */
 1393               	/* frame size = 0 */
 1394               	/* stack size = 7 */
 1395               	.L__stack_usage = 7
 1396 000e EC01      		movw r28,r24
 1397 0010 162F      		mov r17,r22
 1398 0012 6901      		movw r12,r18
 1399 0014 7A01      		movw r14,r20
 1400               	.LBB192:
 1401               	.LBB193:
 1402               	.LBB194:
 1403               	.LBB195:
 430:../../os/common/ports/AVR/chcore.h **** }
 1404               		.loc 4 430 0
 1405               	/* #APP */
 1406               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1407 0016 F894      		cli
 1408               	 ;  0 "" 2
 1409               	/* #NOAPP */
 1410 0018 00C0      		rjmp .L77
 1411               	.LVL103:
 1412               	.L79:
 1413               	.LBE195:
 1414               	.LBE194:
 1415               	.LBE193:
 1416               	.LBE192:
 1417               	.LBB196:
 1418               	.LBB197:
 1419               	.LBB198:
 895:../../os/hal/osal/rt-nil/osal.h **** }
 1420               		.loc 3 895 0
 1421 001a B701      		movw r22,r14
 1422 001c A601      		movw r20,r12
 1423 001e CE01      		movw r24,r28
 1424 0020 0E94 0000 		call chThdEnqueueTimeoutS
 1425               	.LVL104:
 1426               	.LBE198:
 1427               	.LBE197:
 541:../../os/hal/src/hal_queues.c **** 
 542:../../os/hal/src/hal_queues.c ****   osalSysLock();
 543:../../os/hal/src/hal_queues.c **** 
 544:../../os/hal/src/hal_queues.c ****   /* Waiting until there is a slot available or a timeout occurs.*/
 545:../../os/hal/src/hal_queues.c ****   while (oqIsFullI(oqp)) {
 546:../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 547:../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 1428               		.loc 1 547 0
 1429 0024 97FD      		sbrc r25,7
 1430 0026 00C0      		rjmp .L86
 1431               	.L77:
 1432               	.LBE196:
 545:../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 1433               		.loc 1 545 0
 1434 0028 8C81      		ldd r24,Y+4
 1435 002a 9D81      		ldd r25,Y+5
 1436 002c 892B      		or r24,r25
 1437 002e 01F0      		breq .L79
 548:../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 549:../../os/hal/src/hal_queues.c ****       return msg;
 550:../../os/hal/src/hal_queues.c ****     }
 551:../../os/hal/src/hal_queues.c ****   }
 552:../../os/hal/src/hal_queues.c **** 
 553:../../os/hal/src/hal_queues.c ****   /* Putting the character into the queue.*/
 554:../../os/hal/src/hal_queues.c ****   oqp->q_counter--;
 1438               		.loc 1 554 0
 1439 0030 8C81      		ldd r24,Y+4
 1440 0032 9D81      		ldd r25,Y+5
 1441 0034 0197      		sbiw r24,1
 1442 0036 9D83      		std Y+5,r25
 1443 0038 8C83      		std Y+4,r24
 555:../../os/hal/src/hal_queues.c ****   *oqp->q_wrptr++ = b;
 1444               		.loc 1 555 0
 1445 003a EA85      		ldd r30,Y+10
 1446 003c FB85      		ldd r31,Y+11
 1447 003e CF01      		movw r24,r30
 1448 0040 0196      		adiw r24,1
 1449 0042 9B87      		std Y+11,r25
 1450 0044 8A87      		std Y+10,r24
 1451 0046 1083      		st Z,r17
 556:../../os/hal/src/hal_queues.c ****   if (oqp->q_wrptr >= oqp->q_top) {
 1452               		.loc 1 556 0
 1453 0048 2A85      		ldd r18,Y+10
 1454 004a 3B85      		ldd r19,Y+11
 1455 004c 8885      		ldd r24,Y+8
 1456 004e 9985      		ldd r25,Y+9
 1457 0050 2817      		cp r18,r24
 1458 0052 3907      		cpc r19,r25
 1459 0054 00F0      		brlo .L80
 557:../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 1460               		.loc 1 557 0
 1461 0056 8E81      		ldd r24,Y+6
 1462 0058 9F81      		ldd r25,Y+7
 1463 005a 9B87      		std Y+11,r25
 1464 005c 8A87      		std Y+10,r24
 1465               	.L80:
 558:../../os/hal/src/hal_queues.c ****   }
 559:../../os/hal/src/hal_queues.c **** 
 560:../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character available.*/
 561:../../os/hal/src/hal_queues.c ****   if (oqp->q_notify != NULL) {
 1466               		.loc 1 561 0
 1467 005e EE85      		ldd r30,Y+14
 1468 0060 FF85      		ldd r31,Y+15
 1469 0062 3097      		sbiw r30,0
 1470 0064 01F0      		breq .L81
 562:../../os/hal/src/hal_queues.c ****     oqp->q_notify(oqp);
 1471               		.loc 1 562 0
 1472 0066 CE01      		movw r24,r28
 1473 0068 0995      		icall
 1474               	.LVL105:
 1475               	.L81:
 1476               	.LBB204:
 1477               	.LBB205:
 1478               	.LBB206:
 1479               	.LBB207:
 1480               	.LBB208:
 1481               		.loc 4 440 0
 1482               	/* #APP */
 1483               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1484 006a 7894      		sei
 1485               	 ;  0 "" 2
 1486               	/* #NOAPP */
 1487               	.LBE208:
 1488               	.LBE207:
 1489               	.LBE206:
 1490               	.LBE205:
 1491               	.LBE204:
 563:../../os/hal/src/hal_queues.c ****   }
 564:../../os/hal/src/hal_queues.c **** 
 565:../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 566:../../os/hal/src/hal_queues.c **** 
 567:../../os/hal/src/hal_queues.c ****   return MSG_OK;
 1492               		.loc 1 567 0
 1493 006c 90E0      		ldi r25,0
 1494 006e 80E0      		ldi r24,0
 1495               	/* epilogue start */
 568:../../os/hal/src/hal_queues.c **** }
 1496               		.loc 1 568 0
 1497 0070 DF91      		pop r29
 1498 0072 CF91      		pop r28
 1499               	.LVL106:
 1500 0074 1F91      		pop r17
 1501               	.LVL107:
 1502 0076 FF90      		pop r15
 1503 0078 EF90      		pop r14
 1504 007a DF90      		pop r13
 1505 007c CF90      		pop r12
 1506 007e 0895      		ret
 1507               	.LVL108:
 1508               	.L86:
 1509               	.LBB209:
 1510               	.LBB199:
 1511               	.LBB200:
 1512               	.LBB201:
 1513               	.LBB202:
 1514               	.LBB203:
 1515               		.loc 4 440 0
 1516               	/* #APP */
 1517               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1518 0080 7894      		sei
 1519               	 ;  0 "" 2
 1520               	/* epilogue start */
 1521               	/* #NOAPP */
 1522               	.LBE203:
 1523               	.LBE202:
 1524               	.LBE201:
 1525               	.LBE200:
 1526               	.LBE199:
 1527               	.LBE209:
 1528               		.loc 1 568 0
 1529 0082 DF91      		pop r29
 1530 0084 CF91      		pop r28
 1531               	.LVL109:
 1532 0086 1F91      		pop r17
 1533               	.LVL110:
 1534 0088 FF90      		pop r15
 1535 008a EF90      		pop r14
 1536 008c DF90      		pop r13
 1537 008e CF90      		pop r12
 1538 0090 0895      		ret
 1539               		.cfi_endproc
 1540               	.LFE255:
 1542               		.section	.text.oqGetI,"ax",@progbits
 1543               	.global	oqGetI
 1545               	oqGetI:
 1546               	.LFB256:
 569:../../os/hal/src/hal_queues.c **** 
 570:../../os/hal/src/hal_queues.c **** /**
 571:../../os/hal/src/hal_queues.c ****  * @brief   Output queue read.
 572:../../os/hal/src/hal_queues.c ****  * @details A byte value is read from the low end of an output queue. The
 573:../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 574:../../os/hal/src/hal_queues.c ****  *
 575:../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 576:../../os/hal/src/hal_queues.c ****  * @return              The byte value from the queue.
 577:../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 578:../../os/hal/src/hal_queues.c ****  *
 579:../../os/hal/src/hal_queues.c ****  * @iclass
 580:../../os/hal/src/hal_queues.c ****  */
 581:../../os/hal/src/hal_queues.c **** msg_t oqGetI(output_queue_t *oqp) {
 1547               		.loc 1 581 0
 1548               		.cfi_startproc
 1549               	.LVL111:
 1550 0000 CF93      		push r28
 1551               	.LCFI61:
 1552               		.cfi_def_cfa_offset 3
 1553               		.cfi_offset 28, -2
 1554               	/* prologue: function */
 1555               	/* frame size = 0 */
 1556               	/* stack size = 1 */
 1557               	.L__stack_usage = 1
 1558 0002 FC01      		movw r30,r24
 582:../../os/hal/src/hal_queues.c **** 
 583:../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 584:../../os/hal/src/hal_queues.c **** 
 585:../../os/hal/src/hal_queues.c ****   /* Queue data check.*/
 586:../../os/hal/src/hal_queues.c ****   if (!oqIsEmptyI(oqp)) {
 1559               		.loc 1 586 0
 1560 0004 A485      		ldd r26,Z+12
 1561 0006 B585      		ldd r27,Z+13
 1562 0008 8285      		ldd r24,Z+10
 1563 000a 9385      		ldd r25,Z+11
 1564               	.LVL112:
 1565 000c 8A17      		cp r24,r26
 1566 000e 9B07      		cpc r25,r27
 1567 0010 01F0      		breq .L93
 1568               	.L88:
 1569               	.LBB210:
 587:../../os/hal/src/hal_queues.c ****     uint8_t b;
 588:../../os/hal/src/hal_queues.c **** 
 589:../../os/hal/src/hal_queues.c ****     oqp->q_counter++;
 1570               		.loc 1 589 0
 1571 0012 8481      		ldd r24,Z+4
 1572 0014 9581      		ldd r25,Z+5
 1573 0016 0196      		adiw r24,1
 1574 0018 9583      		std Z+5,r25
 1575 001a 8483      		std Z+4,r24
 590:../../os/hal/src/hal_queues.c ****     b = *oqp->q_rdptr++;
 1576               		.loc 1 590 0
 1577 001c CD01      		movw r24,r26
 1578 001e 0196      		adiw r24,1
 1579 0020 9587      		std Z+13,r25
 1580 0022 8487      		std Z+12,r24
 1581 0024 CC91      		ld r28,X
 1582               	.LVL113:
 591:../../os/hal/src/hal_queues.c ****     if (oqp->q_rdptr >= oqp->q_top) {
 1583               		.loc 1 591 0
 1584 0026 2085      		ldd r18,Z+8
 1585 0028 3185      		ldd r19,Z+9
 1586 002a 8217      		cp r24,r18
 1587 002c 9307      		cpc r25,r19
 1588 002e 00F4      		brsh .L90
 1589               	.L91:
 1590 0030 CF01      		movw r24,r30
 1591               	.LVL114:
 1592               	.LBB211:
 1593               	.LBB212:
 908:../../os/hal/osal/rt-nil/osal.h **** }
 1594               		.loc 3 908 0
 1595 0032 70E0      		ldi r23,0
 1596 0034 60E0      		ldi r22,0
 1597 0036 0E94 0000 		call chThdDequeueNextI
 1598               	.LVL115:
 1599               	.LBE212:
 1600               	.LBE211:
 592:../../os/hal/src/hal_queues.c ****       oqp->q_rdptr = oqp->q_buffer;
 593:../../os/hal/src/hal_queues.c ****     }
 594:../../os/hal/src/hal_queues.c **** 
 595:../../os/hal/src/hal_queues.c ****     osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 596:../../os/hal/src/hal_queues.c **** 
 597:../../os/hal/src/hal_queues.c ****     return (msg_t)b;
 1601               		.loc 1 597 0
 1602 003a 8C2F      		mov r24,r28
 1603 003c 90E0      		ldi r25,0
 1604               	/* epilogue start */
 1605               	.LBE210:
 598:../../os/hal/src/hal_queues.c ****   }
 599:../../os/hal/src/hal_queues.c **** 
 600:../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 601:../../os/hal/src/hal_queues.c **** }
 1606               		.loc 1 601 0
 1607 003e CF91      		pop r28
 1608               	.LVL116:
 1609 0040 0895      		ret
 1610               	.LVL117:
 1611               	.L90:
 1612               	.LBB213:
 592:../../os/hal/src/hal_queues.c ****       oqp->q_rdptr = oqp->q_buffer;
 1613               		.loc 1 592 0
 1614 0042 8681      		ldd r24,Z+6
 1615 0044 9781      		ldd r25,Z+7
 1616 0046 9587      		std Z+13,r25
 1617 0048 8487      		std Z+12,r24
 1618 004a 00C0      		rjmp .L91
 1619               	.LVL118:
 1620               	.L93:
 1621               	.LBE213:
 586:../../os/hal/src/hal_queues.c ****     uint8_t b;
 1622               		.loc 1 586 0 discriminator 1
 1623 004c 8481      		ldd r24,Z+4
 1624 004e 9581      		ldd r25,Z+5
 1625 0050 892B      		or r24,r25
 1626 0052 01F0      		breq .L88
 600:../../os/hal/src/hal_queues.c **** }
 1627               		.loc 1 600 0
 1628 0054 8FEF      		ldi r24,lo8(-1)
 1629 0056 9FEF      		ldi r25,lo8(-1)
 1630               	/* epilogue start */
 1631               		.loc 1 601 0
 1632 0058 CF91      		pop r28
 1633 005a 0895      		ret
 1634               		.cfi_endproc
 1635               	.LFE256:
 1637               		.section	.text.oqWriteI,"ax",@progbits
 1638               	.global	oqWriteI
 1640               	oqWriteI:
 1641               	.LFB257:
 602:../../os/hal/src/hal_queues.c **** 
 603:../../os/hal/src/hal_queues.c **** /**
 604:../../os/hal/src/hal_queues.c ****  * @brief   Output queue non-blocking write.
 605:../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 606:../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 607:../../os/hal/src/hal_queues.c ****  *
 608:../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 609:../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 610:../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 611:../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 612:../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 613:../../os/hal/src/hal_queues.c ****  *
 614:../../os/hal/src/hal_queues.c ****  * @iclass
 615:../../os/hal/src/hal_queues.c ****  */
 616:../../os/hal/src/hal_queues.c **** size_t oqWriteI(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 1642               		.loc 1 616 0
 1643               		.cfi_startproc
 1644               	.LVL119:
 1645 0000 EF92      		push r14
 1646               	.LCFI62:
 1647               		.cfi_def_cfa_offset 3
 1648               		.cfi_offset 14, -2
 1649 0002 FF92      		push r15
 1650               	.LCFI63:
 1651               		.cfi_def_cfa_offset 4
 1652               		.cfi_offset 15, -3
 1653 0004 0F93      		push r16
 1654               	.LCFI64:
 1655               		.cfi_def_cfa_offset 5
 1656               		.cfi_offset 16, -4
 1657 0006 1F93      		push r17
 1658               	.LCFI65:
 1659               		.cfi_def_cfa_offset 6
 1660               		.cfi_offset 17, -5
 1661 0008 CF93      		push r28
 1662               	.LCFI66:
 1663               		.cfi_def_cfa_offset 7
 1664               		.cfi_offset 28, -6
 1665 000a DF93      		push r29
 1666               	.LCFI67:
 1667               		.cfi_def_cfa_offset 8
 1668               		.cfi_offset 29, -7
 1669               	/* prologue: function */
 1670               	/* frame size = 0 */
 1671               	/* stack size = 6 */
 1672               	.L__stack_usage = 6
 1673 000c EC01      		movw r28,r24
 617:../../os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 1674               		.loc 1 617 0
 1675 000e EE84      		ldd r14,Y+14
 1676 0010 FF84      		ldd r15,Y+15
 1677               	.LVL120:
 618:../../os/hal/src/hal_queues.c ****   size_t wr;
 619:../../os/hal/src/hal_queues.c **** 
 620:../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 621:../../os/hal/src/hal_queues.c **** 
 622:../../os/hal/src/hal_queues.c ****   wr = oq_write(oqp, bp, n);
 1678               		.loc 1 622 0
 1679 0012 0E94 0000 		call oq_write
 1680               	.LVL121:
 1681 0016 8C01      		movw r16,r24
 1682               	.LVL122:
 623:../../os/hal/src/hal_queues.c **** 
 624:../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character
 625:../../os/hal/src/hal_queues.c ****      available.*/
 626:../../os/hal/src/hal_queues.c ****   if ((wr > (size_t)0) && (nfy != NULL)) {
 1683               		.loc 1 626 0
 1684 0018 892B      		or r24,r25
 1685 001a 01F0      		breq .L94
 1686               		.loc 1 626 0 is_stmt 0 discriminator 1
 1687 001c E114      		cp r14,__zero_reg__
 1688 001e F104      		cpc r15,__zero_reg__
 1689 0020 01F0      		breq .L94
 627:../../os/hal/src/hal_queues.c ****     nfy(oqp);
 1690               		.loc 1 627 0 is_stmt 1
 1691 0022 CE01      		movw r24,r28
 1692 0024 F701      		movw r30,r14
 1693 0026 0995      		icall
 1694               	.LVL123:
 1695               	.L94:
 628:../../os/hal/src/hal_queues.c ****   }
 629:../../os/hal/src/hal_queues.c **** 
 630:../../os/hal/src/hal_queues.c ****   return wr;
 631:../../os/hal/src/hal_queues.c **** }
 1696               		.loc 1 631 0
 1697 0028 C801      		movw r24,r16
 1698               	/* epilogue start */
 1699 002a DF91      		pop r29
 1700 002c CF91      		pop r28
 1701               	.LVL124:
 1702 002e 1F91      		pop r17
 1703 0030 0F91      		pop r16
 1704               	.LVL125:
 1705 0032 FF90      		pop r15
 1706 0034 EF90      		pop r14
 1707               	.LVL126:
 1708 0036 0895      		ret
 1709               		.cfi_endproc
 1710               	.LFE257:
 1712               		.section	.text.oqWriteTimeout,"ax",@progbits
 1713               	.global	oqWriteTimeout
 1715               	oqWriteTimeout:
 1716               	.LFB258:
 632:../../os/hal/src/hal_queues.c **** 
 633:../../os/hal/src/hal_queues.c **** /**
 634:../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 635:../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 636:../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 637:../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 638:../../os/hal/src/hal_queues.c ****  *          been reset.
 639:../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 640:../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 641:../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting each character into the
 642:../../os/hal/src/hal_queues.c ****  *          queue.
 643:../../os/hal/src/hal_queues.c ****  *
 644:../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 645:../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 646:../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 647:../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 648:../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 649:../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 650:../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 651:../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 652:../../os/hal/src/hal_queues.c ****  *                      .
 653:../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 654:../../os/hal/src/hal_queues.c ****  *
 655:../../os/hal/src/hal_queues.c ****  * @api
 656:../../os/hal/src/hal_queues.c ****  */
 657:../../os/hal/src/hal_queues.c **** size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
 658:../../os/hal/src/hal_queues.c ****                       size_t n, sysinterval_t timeout) {
 1717               		.loc 1 658 0
 1718               		.cfi_startproc
 1719               	.LVL127:
 1720 0000 4F92      		push r4
 1721               	.LCFI68:
 1722               		.cfi_def_cfa_offset 3
 1723               		.cfi_offset 4, -2
 1724 0002 5F92      		push r5
 1725               	.LCFI69:
 1726               		.cfi_def_cfa_offset 4
 1727               		.cfi_offset 5, -3
 1728 0004 6F92      		push r6
 1729               	.LCFI70:
 1730               		.cfi_def_cfa_offset 5
 1731               		.cfi_offset 6, -4
 1732 0006 7F92      		push r7
 1733               	.LCFI71:
 1734               		.cfi_def_cfa_offset 6
 1735               		.cfi_offset 7, -5
 1736 0008 8F92      		push r8
 1737               	.LCFI72:
 1738               		.cfi_def_cfa_offset 7
 1739               		.cfi_offset 8, -6
 1740 000a 9F92      		push r9
 1741               	.LCFI73:
 1742               		.cfi_def_cfa_offset 8
 1743               		.cfi_offset 9, -7
 1744 000c AF92      		push r10
 1745               	.LCFI74:
 1746               		.cfi_def_cfa_offset 9
 1747               		.cfi_offset 10, -8
 1748 000e BF92      		push r11
 1749               	.LCFI75:
 1750               		.cfi_def_cfa_offset 10
 1751               		.cfi_offset 11, -9
 1752 0010 CF92      		push r12
 1753               	.LCFI76:
 1754               		.cfi_def_cfa_offset 11
 1755               		.cfi_offset 12, -10
 1756 0012 DF92      		push r13
 1757               	.LCFI77:
 1758               		.cfi_def_cfa_offset 12
 1759               		.cfi_offset 13, -11
 1760 0014 EF92      		push r14
 1761               	.LCFI78:
 1762               		.cfi_def_cfa_offset 13
 1763               		.cfi_offset 14, -12
 1764 0016 FF92      		push r15
 1765               	.LCFI79:
 1766               		.cfi_def_cfa_offset 14
 1767               		.cfi_offset 15, -13
 1768 0018 0F93      		push r16
 1769               	.LCFI80:
 1770               		.cfi_def_cfa_offset 15
 1771               		.cfi_offset 16, -14
 1772 001a 1F93      		push r17
 1773               	.LCFI81:
 1774               		.cfi_def_cfa_offset 16
 1775               		.cfi_offset 17, -15
 1776 001c CF93      		push r28
 1777               	.LCFI82:
 1778               		.cfi_def_cfa_offset 17
 1779               		.cfi_offset 28, -16
 1780 001e DF93      		push r29
 1781               	.LCFI83:
 1782               		.cfi_def_cfa_offset 18
 1783               		.cfi_offset 29, -17
 1784               	/* prologue: function */
 1785               	/* frame size = 0 */
 1786               	/* stack size = 16 */
 1787               	.L__stack_usage = 16
 1788 0020 6C01      		movw r12,r24
 1789 0022 7B01      		movw r14,r22
 1790 0024 4A01      		movw r8,r20
 1791 0026 2801      		movw r4,r16
 1792 0028 3901      		movw r6,r18
 659:../../os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 1793               		.loc 1 659 0
 1794 002a FC01      		movw r30,r24
 1795 002c A684      		ldd r10,Z+14
 1796 002e B784      		ldd r11,Z+15
 1797               	.LVL128:
 1798               	.LBB214:
 1799               	.LBB215:
 1800               	.LBB216:
 1801               	.LBB217:
 430:../../os/common/ports/AVR/chcore.h **** }
 1802               		.loc 4 430 0
 1803               	/* #APP */
 1804               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1805 0030 F894      		cli
 1806               	 ;  0 "" 2
 1807               	/* #NOAPP */
 1808               	.LBE217:
 1809               	.LBE216:
 1810               	.LBE215:
 1811               	.LBE214:
 660:../../os/hal/src/hal_queues.c ****   size_t max = n;
 661:../../os/hal/src/hal_queues.c **** 
 662:../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 663:../../os/hal/src/hal_queues.c **** 
 664:../../os/hal/src/hal_queues.c ****   osalSysLock();
 665:../../os/hal/src/hal_queues.c **** 
 666:../../os/hal/src/hal_queues.c ****   while (n > 0U) {
 1812               		.loc 1 666 0
 1813 0032 4115      		cp r20,__zero_reg__
 1814 0034 5105      		cpc r21,__zero_reg__
 1815 0036 01F0      		breq .L104
 1816 0038 8A01      		movw r16,r20
 1817               	.LVL129:
 1818               	.L103:
 1819               	.LBB218:
 667:../../os/hal/src/hal_queues.c ****     size_t done;
 668:../../os/hal/src/hal_queues.c **** 
 669:../../os/hal/src/hal_queues.c ****     done = oq_write(oqp, bp, n);
 1820               		.loc 1 669 0
 1821 003a A801      		movw r20,r16
 1822 003c B701      		movw r22,r14
 1823 003e C601      		movw r24,r12
 1824 0040 0E94 0000 		call oq_write
 1825               	.LVL130:
 1826 0044 EC01      		movw r28,r24
 1827               	.LVL131:
 670:../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 1828               		.loc 1 670 0
 1829 0046 892B      		or r24,r25
 1830 0048 01F0      		breq .L116
 671:../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 672:../../os/hal/src/hal_queues.c **** 
 673:../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 674:../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 675:../../os/hal/src/hal_queues.c ****         break;
 676:../../os/hal/src/hal_queues.c ****       }
 677:../../os/hal/src/hal_queues.c ****     }
 678:../../os/hal/src/hal_queues.c ****     else {
 679:../../os/hal/src/hal_queues.c ****       /* Inform the low side that the queue has at least one character
 680:../../os/hal/src/hal_queues.c ****          available.*/
 681:../../os/hal/src/hal_queues.c ****       if (nfy != NULL) {
 1831               		.loc 1 681 0
 1832 004a A114      		cp r10,__zero_reg__
 1833 004c B104      		cpc r11,__zero_reg__
 1834 004e 01F0      		breq .L108
 682:../../os/hal/src/hal_queues.c ****         nfy(oqp);
 1835               		.loc 1 682 0
 1836 0050 C601      		movw r24,r12
 1837               	.LVL132:
 1838 0052 F501      		movw r30,r10
 1839 0054 0995      		icall
 1840               	.LVL133:
 1841               	.L108:
 1842               	.LBB219:
 1843               	.LBB220:
 1844               	.LBB221:
 1845               	.LBB222:
 1846               	.LBB223:
 1847               		.loc 4 440 0
 1848               	/* #APP */
 1849               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1850 0056 7894      		sei
 1851               	 ;  0 "" 2
 1852               	/* #NOAPP */
 1853               	.LBE223:
 1854               	.LBE222:
 1855               	.LBE221:
 1856               	.LBE220:
 1857               	.LBE219:
 683:../../os/hal/src/hal_queues.c ****       }
 684:../../os/hal/src/hal_queues.c **** 
 685:../../os/hal/src/hal_queues.c ****       /* Giving a preemption chance in a controlled point.*/
 686:../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 687:../../os/hal/src/hal_queues.c **** 
 688:../../os/hal/src/hal_queues.c ****       n  -= done;
 1858               		.loc 1 688 0
 1859 0058 0C1B      		sub r16,r28
 1860 005a 1D0B      		sbc r17,r29
 1861               	.LVL134:
 689:../../os/hal/src/hal_queues.c ****       bp += done;
 1862               		.loc 1 689 0
 1863 005c EC0E      		add r14,r28
 1864 005e FD1E      		adc r15,r29
 1865               	.LVL135:
 1866               	.LBB224:
 1867               	.LBB225:
 1868               	.LBB226:
 1869               	.LBB227:
 430:../../os/common/ports/AVR/chcore.h **** }
 1870               		.loc 4 430 0
 1871               	/* #APP */
 1872               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1873 0060 F894      		cli
 1874               	 ;  0 "" 2
 1875               	/* #NOAPP */
 1876               	.LBE227:
 1877               	.LBE226:
 1878               	.LBE225:
 1879               	.LBE224:
 1880               	.LBE218:
 666:../../os/hal/src/hal_queues.c ****     size_t done;
 1881               		.loc 1 666 0
 1882 0062 0115      		cp r16,__zero_reg__
 1883 0064 1105      		cpc r17,__zero_reg__
 1884 0066 01F4      		brne .L103
 1885               	.LVL136:
 1886               	.L104:
 1887 0068 C401      		movw r24,r8
 1888               	.L107:
 1889               	.LBB231:
 1890               	.LBB232:
 1891               	.LBB233:
 1892               	.LBB234:
 1893               	.LBB235:
 1894               		.loc 4 440 0
 1895               	/* #APP */
 1896               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1897 006a 7894      		sei
 1898               	 ;  0 "" 2
 1899               	/* epilogue start */
 1900               	/* #NOAPP */
 1901               	.LBE235:
 1902               	.LBE234:
 1903               	.LBE233:
 1904               	.LBE232:
 1905               	.LBE231:
 690:../../os/hal/src/hal_queues.c **** 
 691:../../os/hal/src/hal_queues.c ****       osalSysLock();
 692:../../os/hal/src/hal_queues.c ****     }
 693:../../os/hal/src/hal_queues.c ****   }
 694:../../os/hal/src/hal_queues.c **** 
 695:../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 696:../../os/hal/src/hal_queues.c ****   return max - n;
 697:../../os/hal/src/hal_queues.c **** }
 1906               		.loc 1 697 0
 1907 006c DF91      		pop r29
 1908 006e CF91      		pop r28
 1909 0070 1F91      		pop r17
 1910 0072 0F91      		pop r16
 1911 0074 FF90      		pop r15
 1912 0076 EF90      		pop r14
 1913               	.LVL137:
 1914 0078 DF90      		pop r13
 1915 007a CF90      		pop r12
 1916               	.LVL138:
 1917 007c BF90      		pop r11
 1918 007e AF90      		pop r10
 1919               	.LVL139:
 1920 0080 9F90      		pop r9
 1921 0082 8F90      		pop r8
 1922               	.LVL140:
 1923 0084 7F90      		pop r7
 1924 0086 6F90      		pop r6
 1925 0088 5F90      		pop r5
 1926 008a 4F90      		pop r4
 1927 008c 0895      		ret
 1928               	.LVL141:
 1929               	.L116:
 1930               	.LBB236:
 1931               	.LBB228:
 1932               	.LBB229:
 1933               	.LBB230:
 895:../../os/hal/osal/rt-nil/osal.h **** }
 1934               		.loc 3 895 0
 1935 008e B301      		movw r22,r6
 1936 0090 A201      		movw r20,r4
 1937 0092 C601      		movw r24,r12
 1938               	.LVL142:
 1939 0094 0E94 0000 		call chThdEnqueueTimeoutS
 1940               	.LVL143:
 1941               	.LBE230:
 1942               	.LBE229:
 674:../../os/hal/src/hal_queues.c ****         break;
 1943               		.loc 1 674 0
 1944 0098 892B      		or r24,r25
 1945 009a 01F0      		breq .L103
 1946 009c C401      		movw r24,r8
 1947 009e 801B      		sub r24,r16
 1948 00a0 910B      		sbc r25,r17
 1949 00a2 00C0      		rjmp .L107
 1950               	.LBE228:
 1951               	.LBE236:
 1952               		.cfi_endproc
 1953               	.LFE258:
 1955               		.text
 1956               	.Letext0:
 1957               		.file 5 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 1958               		.file 6 "/usr/lib/avr/include/stdint.h"
 1959               		.file 7 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1960               		.file 8 "../../os/rt/include/chearly.h"
 1961               		.file 9 "../../os/rt/include/chobjects.h"
 1962               		.file 10 "../../os/rt/include/chrfcu.h"
 1963               		.file 11 "../../os/rt/include/chdebug.h"
 1964               		.file 12 "../../os/rt/include/chtime.h"
 1965               		.file 13 "../../os/rt/include/chsem.h"
 1966               		.file 14 "../../os/rt/include/chmtx.h"
 1967               		.file 15 "../../os/rt/include/chsys.h"
 1968               		.file 16 "../../os/rt/include/chregistry.h"
 1969               		.file 17 "../../os/rt/include/chevents.h"
 1970               		.file 18 "../../os/oslib/include/chmemcore.h"
 1971               		.file 19 "../../os/hal/include/hal_queues.h"
 1972               		.file 20 "../../os/hal/include/hal_pal.h"
 1973               		.file 21 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 1974               		.file 22 "../../os/hal/include/hal_serial.h"
 1975               		.file 23 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 1976               		.file 24 "../../os/rt/include/chthreads.h"
 1977               		.file 25 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_queues.c
     /tmp/ccpXhA2U.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccpXhA2U.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccpXhA2U.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccpXhA2U.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccpXhA2U.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccpXhA2U.s:12     .text.iq_read:0000000000000000 iq_read
     /tmp/ccpXhA2U.s:180    .text.oq_write:0000000000000000 oq_write
     /tmp/ccpXhA2U.s:349    .text.iqObjectInit:0000000000000000 iqObjectInit
     /tmp/ccpXhA2U.s:422    .text.iqResetI:0000000000000000 iqResetI
     /tmp/ccpXhA2U.s:460    .text.iqPutI:0000000000000000 iqPutI
     /tmp/ccpXhA2U.s:541    .text.iqGetI:0000000000000000 iqGetI
     /tmp/ccpXhA2U.s:644    .text.iqGetTimeout:0000000000000000 iqGetTimeout
     /tmp/ccpXhA2U.s:828    .text.iqReadI:0000000000000000 iqReadI
     /tmp/ccpXhA2U.s:903    .text.iqReadTimeout:0000000000000000 iqReadTimeout
     /tmp/ccpXhA2U.s:1146   .text.oqObjectInit:0000000000000000 oqObjectInit
     /tmp/ccpXhA2U.s:1218   .text.oqResetI:0000000000000000 oqResetI
     /tmp/ccpXhA2U.s:1261   .text.oqPutI:0000000000000000 oqPutI
     /tmp/ccpXhA2U.s:1359   .text.oqPutTimeout:0000000000000000 oqPutTimeout
     /tmp/ccpXhA2U.s:1545   .text.oqGetI:0000000000000000 oqGetI
     /tmp/ccpXhA2U.s:1640   .text.oqWriteI:0000000000000000 oqWriteI
     /tmp/ccpXhA2U.s:1715   .text.oqWriteTimeout:0000000000000000 oqWriteTimeout

UNDEFINED SYMBOLS
memcpy
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
