   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup.main,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB243:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** 
  20:main.c        **** #define PEDESTRE_LINE_GREEN PAL_LINE(IOPORT2, 3)
  21:main.c        **** #define PEDESTRE_LINE_RED PAL_LINE(IOPORT2, 2)
  22:main.c        **** 
  23:main.c        **** /*
  24:main.c        **** void vt_cb(void *arg)
  25:main.c        **** {
  26:main.c        ****   chSysLockFromISR();
  27:main.c        ****   palTogglePad(IOPORT2, PORTB_LED1);
  28:main.c        ****   chVTSetI((virtual_timer_t *)arg, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb, arg);
  29:main.c        ****   chSysUnlockFromISR();
  30:main.c        **** }
  31:main.c        **** */
  32:main.c        **** /*
  33:main.c        ****  * LED blinker thread, times are in milliseconds.
  34:main.c        ****  */
  35:main.c        **** /*
  36:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  37:main.c        **** static THD_FUNCTION(Thread1, arg)
  38:main.c        **** {
  39:main.c        ****   virtual_timer_t vt;
  40:main.c        **** 
  41:main.c        ****   chVTObjectInit(&vt);
  42:main.c        ****   chVTSet(&vt, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb, (void *)&vt);
  43:main.c        **** 
  44:main.c        ****   while (1)
  45:main.c        ****   {
  46:main.c        ****   }
  47:main.c        **** }
  48:main.c        **** */
  49:main.c        **** /*
  50:main.c        ****  * Application entry point.
  51:main.c        ****  */
  52:main.c        **** int main(void)
  53:main.c        **** {
  16               		.loc 1 53 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  54:main.c        ****   /*
  55:main.c        ****    * System initializations.
  56:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
  57:main.c        ****    *   and performs the board-specific initializations.
  58:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
  59:main.c        ****    *   RTOS is active.
  60:main.c        ****    */
  61:main.c        ****   halInit();
  22               		.loc 1 61 0
  23 0000 0E94 0000 		call halInit
  24               	.LVL0:
  62:main.c        ****   chSysInit();
  25               		.loc 1 62 0
  26 0004 0E94 0000 		call chSysInit
  27               	.LVL1:
  63:main.c        **** 
  64:main.c        ****   /* Configuração dos pinos */
  65:main.c        ****   // Semáforo primário: Vermelho, Verde
  66:main.c        ****   palSetPadMode(IOPORT4, 7, PAL_MODE_OUTPUT_PUSHPULL);
  28               		.loc 1 66 0
  29 0008 46E0      		ldi r20,lo8(6)
  30 000a 60E8      		ldi r22,lo8(-128)
  31 000c 89E2      		ldi r24,lo8(41)
  32 000e 90E0      		ldi r25,0
  33 0010 0E94 0000 		call _pal_lld_setgroupmode
  34               	.LVL2:
  67:main.c        ****   palClearPad(IOPORT4, 7);
  35               		.loc 1 67 0
  36 0014 5F98      		cbi 0xb,7
  68:main.c        ****   palSetPadMode(IOPORT4, 6, PAL_MODE_OUTPUT_PUSHPULL);
  37               		.loc 1 68 0
  38 0016 46E0      		ldi r20,lo8(6)
  39 0018 60E4      		ldi r22,lo8(64)
  40 001a 89E2      		ldi r24,lo8(41)
  41 001c 90E0      		ldi r25,0
  42 001e 0E94 0000 		call _pal_lld_setgroupmode
  43               	.LVL3:
  69:main.c        ****   palClearPad(IOPORT4, 6);
  44               		.loc 1 69 0
  45 0022 5E98      		cbi 0xb,6
  70:main.c        **** 
  71:main.c        ****   // Semáforo secundário: Vermelho, Verde
  72:main.c        ****   palSetPadMode(IOPORT2, 1, PAL_MODE_OUTPUT_PUSHPULL);
  46               		.loc 1 72 0
  47 0024 46E0      		ldi r20,lo8(6)
  48 0026 62E0      		ldi r22,lo8(2)
  49 0028 83E2      		ldi r24,lo8(35)
  50 002a 90E0      		ldi r25,0
  51 002c 0E94 0000 		call _pal_lld_setgroupmode
  52               	.LVL4:
  73:main.c        ****   palClearPad(IOPORT2, 1);
  53               		.loc 1 73 0
  54 0030 2998      		cbi 0x5,1
  74:main.c        ****   palSetPadMode(IOPORT2, 0, PAL_MODE_OUTPUT_PUSHPULL);
  55               		.loc 1 74 0
  56 0032 46E0      		ldi r20,lo8(6)
  57 0034 61E0      		ldi r22,lo8(1)
  58 0036 83E2      		ldi r24,lo8(35)
  59 0038 90E0      		ldi r25,0
  60 003a 0E94 0000 		call _pal_lld_setgroupmode
  61               	.LVL5:
  75:main.c        ****   palClearPad(IOPORT2, 0);
  62               		.loc 1 75 0
  63 003e 2898      		cbi 0x5,0
  76:main.c        **** 
  77:main.c        ****   // Pedestre: Vermelho, Verde
  78:main.c        ****   palSetLineMode(PEDESTRE_LINE_GREEN, PAL_MODE_OUTPUT_PUSHPULL);
  64               		.loc 1 78 0
  65 0040 63E0      		ldi r22,lo8(3)
  66 0042 83E2      		ldi r24,lo8(35)
  67 0044 90E0      		ldi r25,0
  68 0046 0E94 0000 		call _pal_lld_setlineid
  69               	.LVL6:
  70 004a 0E94 0000 		call _pal_lld_getpadfromline
  71               	.LVL7:
  72 004e 182F      		mov r17,r24
  73 0050 63E0      		ldi r22,lo8(3)
  74 0052 83E2      		ldi r24,lo8(35)
  75 0054 90E0      		ldi r25,0
  76 0056 0E94 0000 		call _pal_lld_setlineid
  77               	.LVL8:
  78 005a 0E94 0000 		call _pal_lld_getportfromline
  79               	.LVL9:
  80 005e C1E0      		ldi r28,lo8(1)
  81 0060 D0E0      		ldi r29,0
  82 0062 BE01      		movw r22,r28
  83 0064 00C0      		rjmp 2f
  84               		1:
  85 0066 660F      		lsl r22
  86               		2:
  87 0068 1A95      		dec r17
  88 006a 02F4      		brpl 1b
  89 006c 46E0      		ldi r20,lo8(6)
  90 006e 0E94 0000 		call _pal_lld_setgroupmode
  91               	.LVL10:
  79:main.c        ****   palSetLineMode(PEDESTRE_LINE_RED, PAL_MODE_OUTPUT_PUSHPULL);
  92               		.loc 1 79 0
  93 0072 62E0      		ldi r22,lo8(2)
  94 0074 83E2      		ldi r24,lo8(35)
  95 0076 90E0      		ldi r25,0
  96 0078 0E94 0000 		call _pal_lld_setlineid
  97               	.LVL11:
  98 007c 0E94 0000 		call _pal_lld_getpadfromline
  99               	.LVL12:
 100 0080 182F      		mov r17,r24
 101 0082 62E0      		ldi r22,lo8(2)
 102 0084 83E2      		ldi r24,lo8(35)
 103 0086 90E0      		ldi r25,0
 104 0088 0E94 0000 		call _pal_lld_setlineid
 105               	.LVL13:
 106 008c 0E94 0000 		call _pal_lld_getportfromline
 107               	.LVL14:
 108 0090 BE01      		movw r22,r28
 109 0092 00C0      		rjmp 2f
 110               		1:
 111 0094 660F      		lsl r22
 112               		2:
 113 0096 1A95      		dec r17
 114 0098 02F4      		brpl 1b
 115 009a 46E0      		ldi r20,lo8(6)
 116 009c 0E94 0000 		call _pal_lld_setgroupmode
 117               	.LVL15:
  80:main.c        **** 
  81:main.c        ****   // LED Interno:
  82:main.c        ****   palSetPadMode(IOPORT2, PORTB_LED1, PAL_MODE_OUTPUT_PUSHPULL);
 118               		.loc 1 82 0
 119 00a0 46E0      		ldi r20,lo8(6)
 120 00a2 60E2      		ldi r22,lo8(32)
 121 00a4 83E2      		ldi r24,lo8(35)
 122 00a6 90E0      		ldi r25,0
 123 00a8 0E94 0000 		call _pal_lld_setgroupmode
 124               	.LVL16:
  83:main.c        ****   palClearPad(IOPORT2, PORTB_LED1);
 125               		.loc 1 83 0
 126 00ac 2D98      		cbi 0x5,5
  84:main.c        **** 
  85:main.c        ****   /* Configuração dos botões */
  86:main.c        **** 
  87:main.c        ****   /*
  88:main.c        ****    * Starts the LED blinker thread.
  89:main.c        ****    */
  90:main.c        ****   // chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO + 1, Thread1, NULL);
  91:main.c        **** 
  92:main.c        ****   // palSetLine(PEDESTRE_LINE_GREEN);
  93:main.c        ****   palSetLine(PEDESTRE_LINE_RED);
 127               		.loc 1 93 0
 128 00ae 62E0      		ldi r22,lo8(2)
 129 00b0 83E2      		ldi r24,lo8(35)
 130 00b2 90E0      		ldi r25,0
 131 00b4 0E94 0000 		call _pal_lld_setlineid
 132               	.LVL17:
 133 00b8 0E94 0000 		call _pal_lld_getpadfromline
 134               	.LVL18:
 135 00bc 182F      		mov r17,r24
 136 00be 62E0      		ldi r22,lo8(2)
 137 00c0 83E2      		ldi r24,lo8(35)
 138 00c2 90E0      		ldi r25,0
 139 00c4 0E94 0000 		call _pal_lld_setlineid
 140               	.LVL19:
 141 00c8 0E94 0000 		call _pal_lld_getportfromline
 142               	.LVL20:
 143 00cc FC01      		movw r30,r24
 144 00ce 9281      		ldd r25,Z+2
 145 00d0 00C0      		rjmp 2f
 146               		1:
 147 00d2 CC0F      		lsl r28
 148               		2:
 149 00d4 1A95      		dec r17
 150 00d6 02F4      		brpl 1b
 151 00d8 C92B      		or r28,r25
 152 00da C283      		std Z+2,r28
 153               	.L2:
 154 00dc 00C0      		rjmp .L2
 155               		.cfi_endproc
 156               	.LFE243:
 158               		.text
 159               	.Letext0:
 160               		.file 2 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 161               		.file 3 "/usr/lib/avr/include/stdint.h"
 162               		.file 4 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/compilers/
 163               		.file 5 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chearly.h"
 164               		.file 6 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chobjects.h"
 165               		.file 7 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chrfcu.h"
 166               		.file 8 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chdebug.h"
 167               		.file 9 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chtime.h"
 168               		.file 10 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chlists.h"
 169               		.file 11 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h"
 170               		.file 12 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chsem.h"
 171               		.file 13 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chmtx.h"
 172               		.file 14 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chsys.h"
 173               		.file 15 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chregistry.h"
 174               		.file 16 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chevents.h"
 175               		.file 17 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/oslib/include/chmemcore.h"
 176               		.file 18 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal_queues.h"
 177               		.file 19 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal_pal.h"
 178               		.file 20 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/ports/AVR/MEGA/LLD/GPI
 179               		.file 21 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal_serial.h"
 180               		.file 22 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/ports/AVR/MEGA/LLD/USA
 181               		.file 23 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccpORUXt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccpORUXt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccpORUXt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccpORUXt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccpORUXt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccpORUXt.s:13     .text.startup.main:0000000000000000 main

UNDEFINED SYMBOLS
halInit
chSysInit
_pal_lld_setgroupmode
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
