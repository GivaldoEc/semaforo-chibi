   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb,"ax",@progbits
  11               	.global	vt_cb
  13               	vt_cb:
  14               	.LFB249:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** #include "chprintf.h"
  20:main.c        **** 
  21:main.c        **** #define QUEUE_SIZE 128
  22:main.c        **** 
  23:main.c        **** /* Definições de pinos*/
  24:main.c        **** // LEDS
  25:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  26:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  27:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  28:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  29:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  30:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  31:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  32:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  33:main.c        **** 
  34:main.c        **** // Botões
  35:main.c        **** #define AMB_PRIM PAL_LINE(IOPORT3, 3)
  36:main.c        **** #define AMB_SEC PAL_LINE(IOPORT3, 5)
  37:main.c        **** #define SEC_FLAG PAL_LINE(IOPORT3, 4)
  38:main.c        **** #define PED_FLAG PAL_LINE(IOPORT3, 2)
  39:main.c        **** 
  40:main.c        **** // Buffer
  41:main.c        **** static msg_t queue[QUEUE_SIZE], *rdp, *wrp;
  42:main.c        **** static size_t qsize;
  43:main.c        **** static mutex_t qmtx;
  44:main.c        **** static condition_variable_t qempty;
  45:main.c        **** static condition_variable_t qfull;
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** void queueInit(void);
  49:main.c        **** void enqueue(msg_t msg);
  50:main.c        **** msg_t dequeue(void);
  51:main.c        **** uint8_t button_check(ioline_t line, uint8_t button);
  52:main.c        **** void vt_cb(void *arg);
  53:main.c        **** 
  54:main.c        **** enum
  55:main.c        **** {
  56:main.c        ****   SECUNDARIO = 1,
  57:main.c        ****   PEDESTRE,
  58:main.c        ****   AMB_PRIMARIO,
  59:main.c        ****   AMB_SECUNDARIO,
  60:main.c        ****   PRIMARIO
  61:main.c        **** };
  62:main.c        **** 
  63:main.c        **** enum
  64:main.c        **** {
  65:main.c        ****   VERDE_AMB_PRIM,
  66:main.c        ****   VERDE_LOCKED_PRIM,
  67:main.c        ****   VERDE_IDLE_PRIM,
  68:main.c        ****   AMARELO_PED_PRIM,
  69:main.c        ****   AMARELO_SEC_PRIM,
  70:main.c        ****   VERDE_AMB_SEC,
  71:main.c        ****   VERDE_LOCKED_SEC,
  72:main.c        ****   AMARELO_PED_SEC,
  73:main.c        ****   AMARELO_PRIM_SEC,
  74:main.c        ****   VERDE_AMB_PED,
  75:main.c        ****   VERDE_LOCKED_PED,
  76:main.c        ****   PISCANDO_SEC,
  77:main.c        ****   PISCANDO_PRIM
  78:main.c        **** };
  79:main.c        **** 
  80:main.c        **** /* Estado inicial */
  81:main.c        **** uint8_t g_state = VERDE_LOCKED_PRIM;
  82:main.c        **** 
  83:main.c        **** /* Flags timers */
  84:main.c        **** uint8_t main_vt_flag = 0;
  85:main.c        **** 
  86:main.c        **** /* Flags ambulancias */
  87:main.c        **** uint8_t flag_amb_prim, flag_amb_sec;
  88:main.c        **** uint8_t prev_state = PEDESTRE;
  89:main.c        **** 
  90:main.c        **** /*
  91:main.c        ****  * LED blinker thread, times are in milliseconds.
  92:main.c        ****  */
  93:main.c        **** 
  94:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  95:main.c        **** static THD_FUNCTION(Thread1, arg)
  96:main.c        **** {
  97:main.c        ****   msg_t ev;
  98:main.c        ****   virtual_timer_t main_vt;
  99:main.c        **** 
 100:main.c        ****   chVTObjectInit(&main_vt);
 101:main.c        ****   
 102:main.c        ****   while (1)
 103:main.c        ****   {
 104:main.c        ****     switch (g_state) {
 105:main.c        ****       case VERDE_LOCKED_PRIM:
 106:main.c        ****         palClearLine(PRIMARIO_VERMELHO);
 107:main.c        ****         palSetLine(PRIMARIO_VERDE);
 108:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 109:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 110:main.c        ****         if (prev_state == SECUNDARIO) {
 111:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 112:main.c        ****           while (!main_vt_flag) {
 113:main.c        ****             if ((*rdp == AMB_PRIMARIO)) {
 114:main.c        ****               flag_amb_prim = !flag_amb_prim;
 115:main.c        ****             }
 116:main.c        ****             chThdSleepMilliseconds(100);
 117:main.c        ****           }
 118:main.c        ****         }
 119:main.c        ****         main_vt_flag = 0;
 120:main.c        ****         chVTSet(&main_vt, TIME_MS2I(prev_state == SECUNDARIO ? 5000 : 10000), (vtfunc_t)vt_cb, (voi
 121:main.c        ****         while (!main_vt_flag) {
 122:main.c        ****           if ((*rdp == AMB_SECUNDARIO)) {
 123:main.c        ****             chVTReset(&main_vt);
 124:main.c        ****             main_vt_flag = 1;
 125:main.c        ****           }
 126:main.c        ****           chThdSleepMilliseconds(100);
 127:main.c        ****         }
 128:main.c        ****         main_vt_flag = 0;
 129:main.c        ****         g_state = VERDE_IDLE_PRIM;
 130:main.c        ****         break;
 131:main.c        ****       case VERDE_IDLE_PRIM:
 132:main.c        ****         ev = dequeue();
 133:main.c        ****         if (ev == AMB_PRIMARIO) {
 134:main.c        ****           flag_amb_prim = !flag_amb_prim;
 135:main.c        ****         }
 136:main.c        ****         if ((ev == SECUNDARIO || ev == AMB_SECUNDARIO) &! flag_amb_prim) {
 137:main.c        ****           if (ev == AMB_SECUNDARIO) {
 138:main.c        ****             flag_amb_sec = 1;
 139:main.c        ****           }
 140:main.c        ****           g_state = AMARELO_SEC_PRIM;
 141:main.c        ****           palClearLine(PRIMARIO_VERDE);
 142:main.c        ****         } else if (ev == PEDESTRE &! flag_amb_prim) {
 143:main.c        ****           g_state = AMARELO_PED_PRIM;
 144:main.c        ****           palClearLine(PRIMARIO_VERDE);
 145:main.c        ****         }
 146:main.c        ****         break;
 147:main.c        ****       case AMARELO_SEC_PRIM:
 148:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 149:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 150:main.c        ****         while (!main_vt_flag) {
 151:main.c        ****           chThdSleepMilliseconds(100);
 152:main.c        ****         }
 153:main.c        ****         main_vt_flag = 0;
 154:main.c        ****         g_state = VERDE_LOCKED_SEC;
 155:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 156:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 157:main.c        ****         prev_state = PRIMARIO;
 158:main.c        ****         break;
 159:main.c        ****       case AMARELO_PED_PRIM:
 160:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 161:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 162:main.c        ****         while (!main_vt_flag) {
 163:main.c        ****           chThdSleepMilliseconds(100);
 164:main.c        ****         }
 165:main.c        ****         main_vt_flag = 0;
 166:main.c        ****         g_state = VERDE_LOCKED_PED;
 167:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 168:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 169:main.c        ****         prev_state = PRIMARIO;
 170:main.c        ****         break;
 171:main.c        ****       case VERDE_LOCKED_SEC:
 172:main.c        ****         palClearLine(SECUNDARIO_VERMELHO);
 173:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 174:main.c        ****         if (prev_state == PRIMARIO) {
 175:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 176:main.c        ****           while (!main_vt_flag) {
 177:main.c        ****             if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 178:main.c        ****               dequeue();
 179:main.c        ****               flag_amb_sec = 1;
 180:main.c        ****             } else if ((*rdp == AMB_PRIMARIO) && flag_amb_prim == 0) {
 181:main.c        ****               dequeue();
 182:main.c        ****               flag_amb_prim = 1;
 183:main.c        ****             }
 184:main.c        ****             chThdSleepMilliseconds(100);
 185:main.c        ****           }
 186:main.c        ****         }
 187:main.c        ****         main_vt_flag = 0;
 188:main.c        ****         chVTSet(&main_vt, TIME_MS2I((prev_state == PRIMARIO) ? 1000 : 6000), (vtfunc_t)vt_cb, (void
 189:main.c        ****         while (!main_vt_flag) {
 190:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 191:main.c        ****             flag_amb_prim = 1;
 192:main.c        ****             chVTReset(&main_vt);
 193:main.c        ****             main_vt_flag = 1;
 194:main.c        ****           } else if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 195:main.c        ****             dequeue();
 196:main.c        ****             flag_amb_sec = 1;
 197:main.c        ****           }
 198:main.c        ****           chThdSleepMilliseconds(100);
 199:main.c        ****         }
 200:main.c        ****         main_vt_flag = 0;
 201:main.c        ****         while (flag_amb_sec) {
 202:main.c        ****           ev = dequeue();
 203:main.c        ****           if (ev == AMB_SECUNDARIO) {
 204:main.c        ****             flag_amb_sec = 0;
 205:main.c        ****           }
 206:main.c        ****         }
 207:main.c        ****         if (qsize > 0) {
 208:main.c        ****           if (*rdp != SECUNDARIO) {
 209:main.c        ****             ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será pe
 210:main.c        ****           }
 211:main.c        ****         }
 212:main.c        ****         if (ev == PEDESTRE &! flag_amb_prim) {
 213:main.c        ****           g_state = AMARELO_PED_SEC;
 214:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 215:main.c        ****         } else {
 216:main.c        ****           g_state = AMARELO_PRIM_SEC;
 217:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 218:main.c        ****         }
 219:main.c        ****         break;
 220:main.c        ****       case AMARELO_PRIM_SEC:
 221:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 222:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 223:main.c        ****         while (!main_vt_flag) {
 224:main.c        ****           chThdSleepMilliseconds(100);
 225:main.c        ****         }
 226:main.c        ****         main_vt_flag = 0;
 227:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 228:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 229:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 230:main.c        ****         prev_state = SECUNDARIO;
 231:main.c        ****         break;
 232:main.c        ****       case AMARELO_PED_SEC:
 233:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 234:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 235:main.c        ****         while (!main_vt_flag) {
 236:main.c        ****           chThdSleepMilliseconds(100);
 237:main.c        ****         }
 238:main.c        ****         main_vt_flag = 0;
 239:main.c        ****         g_state = VERDE_LOCKED_PED;
 240:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 241:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 242:main.c        ****         prev_state = SECUNDARIO;
 243:main.c        ****         break;
 244:main.c        ****       case VERDE_LOCKED_PED:
 245:main.c        ****         palClearLine(PEDESTRE_VERMELHO);
 246:main.c        ****         palSetLine(PEDESTRE_VERDE);
 247:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 248:main.c        ****         while (!main_vt_flag) {
 249:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 250:main.c        ****             flag_amb_prim = 1;
 251:main.c        ****             //chVTReset(&main_vt);
 252:main.c        ****             //main_vt_flag = 1;
 253:main.c        ****           } else if ((*rdp == AMB_SECUNDARIO)) {
 254:main.c        ****             flag_amb_sec = 1;
 255:main.c        ****             //chVTReset(&main_vt);
 256:main.c        ****             //main_vt_flag = 1;
 257:main.c        ****           }
 258:main.c        ****           chThdSleepMilliseconds(100);
 259:main.c        ****         }
 260:main.c        ****         main_vt_flag = 0;
 261:main.c        ****         if (qsize > 0) {
 262:main.c        ****           if (*rdp != PEDESTRE) {
 263:main.c        ****             ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será pe
 264:main.c        ****           }
 265:main.c        ****         }
 266:main.c        ****         if (ev == SECUNDARIO || ev == AMB_SECUNDARIO) {
 267:main.c        ****           g_state = PISCANDO_SEC;
 268:main.c        ****           palClearLine(PEDESTRE_VERDE);
 269:main.c        ****         } else {
 270:main.c        ****           g_state = PISCANDO_PRIM;
 271:main.c        ****           palClearLine(PEDESTRE_VERDE);
 272:main.c        ****         }
 273:main.c        ****         break;
 274:main.c        ****       case PISCANDO_SEC:
 275:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 276:main.c        ****         while (!main_vt_flag) {
 277:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 278:main.c        ****           chThdSleepMilliseconds(125);
 279:main.c        ****         }
 280:main.c        ****         main_vt_flag = 0;
 281:main.c        ****         g_state = VERDE_LOCKED_SEC;
 282:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 283:main.c        ****         prev_state = PEDESTRE;
 284:main.c        ****         break;
 285:main.c        ****       case PISCANDO_PRIM:
 286:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 287:main.c        ****         while (!main_vt_flag) {
 288:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 289:main.c        ****           chThdSleepMilliseconds(125);
 290:main.c        ****         }
 291:main.c        ****         main_vt_flag = 0;
 292:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 293:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 294:main.c        ****         prev_state = PEDESTRE;
 295:main.c        ****         break;
 296:main.c        ****       default:
 297:main.c        ****         palSetLine(PEDESTRE_VERDE);
 298:main.c        ****     }
 299:main.c        ****     chThdSleepMilliseconds(100);
 300:main.c        ****   }
 301:main.c        **** }
 302:main.c        **** 
 303:main.c        **** /*
 304:main.c        ****  * Application entry point.
 305:main.c        ****  */
 306:main.c        **** int main(void)
 307:main.c        **** {
 308:main.c        ****   SerialConfig config = {.sc_brr = UBRR2x(9600),
 309:main.c        ****                          .sc_bits_per_char = USART_CHAR_SIZE_8
 310:main.c        ****   };
 311:main.c        **** 
 312:main.c        ****   queueInit();
 313:main.c        ****   /*
 314:main.c        ****    * System initializations.
 315:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
 316:main.c        ****    *   and performs the board-specific initializations.
 317:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
 318:main.c        ****    *   RTOS is active.
 319:main.c        ****    */
 320:main.c        ****   halInit();
 321:main.c        ****   chSysInit();
 322:main.c        **** 
 323:main.c        ****   sdStart(&SD1, &config);
 324:main.c        **** 
 325:main.c        ****   /* Configuração dos botões */
 326:main.c        ****   palSetLineMode(PED_FLAG, PAL_MODE_INPUT_PULLUP);
 327:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 328:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 329:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 330:main.c        **** 
 331:main.c        ****   // Pedestre
 332:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 333:main.c        ****   palClearLine(PEDESTRE_VERDE);
 334:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 335:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 336:main.c        **** 
 337:main.c        ****   // Primário
 338:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 339:main.c        ****   palClearLine(PRIMARIO_VERDE);
 340:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 341:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 342:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 343:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 344:main.c        **** 
 345:main.c        ****   // Secundário
 346:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 347:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 348:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 349:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 350:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 351:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 352:main.c        **** 
 353:main.c        ****   /*
 354:main.c        ****    * Starts the LED blinker thread.
 355:main.c        ****    */
 356:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 357:main.c        **** 
 358:main.c        ****   while (1)
 359:main.c        ****   {
 360:main.c        ****     if (button_check(AMB_SEC, 1))
 361:main.c        ****     {
 362:main.c        ****       enqueue(AMB_SECUNDARIO);
 363:main.c        ****     }
 364:main.c        ****     else if (button_check(AMB_PRIM, 2))
 365:main.c        ****     {
 366:main.c        ****       enqueue(AMB_PRIMARIO);
 367:main.c        ****     }
 368:main.c        ****     else if (button_check(SEC_FLAG, 3))
 369:main.c        ****     {
 370:main.c        ****       enqueue(SECUNDARIO);
 371:main.c        ****     }
 372:main.c        ****     else if (button_check(PED_FLAG, 4))
 373:main.c        ****     {
 374:main.c        ****       enqueue(PEDESTRE);
 375:main.c        ****     }
 376:main.c        ****     /* Debouncing. */
 377:main.c        ****     chThdSleepMilliseconds(50);
 378:main.c        ****   }
 379:main.c        **** }
 380:main.c        **** 
 381:main.c        **** /*
 382:main.c        ****  * Synchronized queue initialization.
 383:main.c        ****  */
 384:main.c        **** void queueInit(void) {
 385:main.c        ****  
 386:main.c        ****   chMtxObjectInit(&qmtx);
 387:main.c        ****   chCondObjectInit(&qempty);
 388:main.c        ****   chCondObjectInit(&qfull);
 389:main.c        ****  
 390:main.c        ****   rdp = wrp = &queue[0];
 391:main.c        ****   qsize = 0;
 392:main.c        **** }
 393:main.c        **** 
 394:main.c        **** /*
 395:main.c        ****  * Writes a message into the queue, if the queue is full waits
 396:main.c        ****  * for a free slot.
 397:main.c        ****  */
 398:main.c        **** void enqueue(msg_t msg) {
 399:main.c        ****  
 400:main.c        ****   /* Entering monitor.*/
 401:main.c        ****   chMtxLock(&qmtx);
 402:main.c        ****  
 403:main.c        ****   /* Waiting for space in the queue.*/
 404:main.c        ****   while (qsize >= QUEUE_SIZE)
 405:main.c        ****     chCondWait(&qfull);
 406:main.c        ****  
 407:main.c        ****   /* Writing the message in the queue.*/  
 408:main.c        ****   *wrp = msg;
 409:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 410:main.c        ****     wrp = &queue[0];
 411:main.c        ****   qsize++;
 412:main.c        ****  
 413:main.c        ****   /* Signaling that there is at least a message.*/
 414:main.c        ****   chCondSignal(&qempty);
 415:main.c        ****  
 416:main.c        ****   /* Leaving monitor.*/
 417:main.c        ****   chMtxUnlock(&qmtx);
 418:main.c        **** }
 419:main.c        **** 
 420:main.c        **** /*
 421:main.c        ****  * Reads a message from the queue, if the queue is empty waits
 422:main.c        ****  * for a message.
 423:main.c        ****  */
 424:main.c        **** msg_t dequeue(void) {
 425:main.c        ****   msg_t msg;
 426:main.c        ****  
 427:main.c        ****   /* Entering monitor.*/
 428:main.c        ****   chMtxLock(&qmtx);
 429:main.c        ****  
 430:main.c        ****   /* Waiting for messages in the queue.*/
 431:main.c        ****   while (qsize == 0)
 432:main.c        ****     chCondWait(&qempty);
 433:main.c        ****  
 434:main.c        ****   /* Reading the message from the queue.*/  
 435:main.c        ****   msg = *rdp;
 436:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 437:main.c        ****     rdp = &queue[0];
 438:main.c        ****   qsize--;
 439:main.c        ****  
 440:main.c        ****   /* Signaling that there is at least one free slot.*/
 441:main.c        ****   chCondSignal(&qfull);
 442:main.c        ****  
 443:main.c        ****   /* Leaving monitor.*/
 444:main.c        ****   chMtxUnlock(&qmtx);
 445:main.c        ****  
 446:main.c        ****   return msg;
 447:main.c        **** }
 448:main.c        **** 
 449:main.c        **** /* Ficou muito hard coded */
 450:main.c        **** uint8_t button_check(ioline_t line, uint8_t button) {
 451:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 452:main.c        ****   uint8_t w, x;
 453:main.c        **** 
 454:main.c        ****   if (button == 1) {
 455:main.c        ****     x1 = palReadLine(line);
 456:main.c        ****     w = x1^old_x1;
 457:main.c        ****     old_x1 = x1;
 458:main.c        ****     x = x1;
 459:main.c        ****   } else if (button == 2) {
 460:main.c        ****     x2 = palReadLine(line);
 461:main.c        ****     w = x2^old_x2;
 462:main.c        ****     old_x2 = x2;
 463:main.c        ****     x = x2;
 464:main.c        ****   } else if (button == 3) {
 465:main.c        ****     x3 = palReadLine(line);
 466:main.c        ****     w = x3^old_x3;
 467:main.c        ****     old_x3 = x3;
 468:main.c        ****     x = x3;
 469:main.c        ****   } else if (button == 4) {
 470:main.c        ****     x4 = palReadLine(line);
 471:main.c        ****     w = x4^old_x4;
 472:main.c        ****     old_x4 = x4;
 473:main.c        ****     x = x4;
 474:main.c        ****   }
 475:main.c        ****   
 476:main.c        ****   return w &! x;
 477:main.c        **** }
 478:main.c        **** 
 479:main.c        **** void vt_cb(void *arg)
 480:main.c        **** {
  16               		.loc 1 480 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 481:main.c        ****   chSysLockFromISR();
 482:main.c        ****   main_vt_flag = 1;
  23               		.loc 1 482 0
  24 0000 81E0      		ldi r24,lo8(1)
  25               	.LVL1:
  26 0002 8093 0000 		sts main_vt_flag,r24
  27               	/* epilogue start */
 483:main.c        ****   chSysUnlockFromISR();
 484:main.c        **** }
  28               		.loc 1 484 0
  29 0006 0895      		ret
  30               		.cfi_endproc
  31               	.LFE249:
  33               		.section	.text.queueInit,"ax",@progbits
  34               	.global	queueInit
  36               	queueInit:
  37               	.LFB245:
 384:main.c        ****  
  38               		.loc 1 384 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
 386:main.c        ****   chCondObjectInit(&qempty);
  44               		.loc 1 386 0
  45 0000 80E0      		ldi r24,lo8(qmtx)
  46 0002 90E0      		ldi r25,hi8(qmtx)
  47 0004 0E94 0000 		call chMtxObjectInit
  48               	.LVL2:
 387:main.c        ****   chCondObjectInit(&qfull);
  49               		.loc 1 387 0
  50 0008 80E0      		ldi r24,lo8(qempty)
  51 000a 90E0      		ldi r25,hi8(qempty)
  52 000c 0E94 0000 		call chCondObjectInit
  53               	.LVL3:
 388:main.c        ****  
  54               		.loc 1 388 0
  55 0010 80E0      		ldi r24,lo8(qfull)
  56 0012 90E0      		ldi r25,hi8(qfull)
  57 0014 0E94 0000 		call chCondObjectInit
  58               	.LVL4:
 390:main.c        ****   qsize = 0;
  59               		.loc 1 390 0
  60 0018 80E0      		ldi r24,lo8(queue)
  61 001a 90E0      		ldi r25,hi8(queue)
  62 001c 9093 0000 		sts wrp+1,r25
  63 0020 8093 0000 		sts wrp,r24
  64 0024 9093 0000 		sts rdp+1,r25
  65 0028 8093 0000 		sts rdp,r24
 391:main.c        **** }
  66               		.loc 1 391 0
  67 002c 1092 0000 		sts qsize+1,__zero_reg__
  68 0030 1092 0000 		sts qsize,__zero_reg__
  69               	/* epilogue start */
 392:main.c        **** 
  70               		.loc 1 392 0
  71 0034 0895      		ret
  72               		.cfi_endproc
  73               	.LFE245:
  75               		.section	.text.enqueue,"ax",@progbits
  76               	.global	enqueue
  78               	enqueue:
  79               	.LFB246:
 398:main.c        ****  
  80               		.loc 1 398 0
  81               		.cfi_startproc
  82               	.LVL5:
  83 0000 CF93      		push r28
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 28, -2
  87 0002 DF93      		push r29
  88               	.LCFI1:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 29, -3
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 2 */
  94               	.L__stack_usage = 2
  95 0004 EC01      		movw r28,r24
 401:main.c        ****  
  96               		.loc 1 401 0
  97 0006 80E0      		ldi r24,lo8(qmtx)
  98 0008 90E0      		ldi r25,hi8(qmtx)
  99               	.LVL6:
 100 000a 0E94 0000 		call chMtxLock
 101               	.LVL7:
 404:main.c        ****     chCondWait(&qfull);
 102               		.loc 1 404 0
 103 000e 8091 0000 		lds r24,qsize
 104 0012 9091 0000 		lds r25,qsize+1
 105 0016 8038      		cpi r24,-128
 106 0018 9105      		cpc r25,__zero_reg__
 107 001a 00F0      		brlo .L5
 108               	.L6:
 405:main.c        ****  
 109               		.loc 1 405 0
 110 001c 80E0      		ldi r24,lo8(qfull)
 111 001e 90E0      		ldi r25,hi8(qfull)
 112 0020 0E94 0000 		call chCondWait
 113               	.LVL8:
 404:main.c        ****     chCondWait(&qfull);
 114               		.loc 1 404 0
 115 0024 8091 0000 		lds r24,qsize
 116 0028 9091 0000 		lds r25,qsize+1
 117 002c 8038      		cpi r24,-128
 118 002e 9105      		cpc r25,__zero_reg__
 119 0030 00F4      		brsh .L6
 120               	.L5:
 408:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 121               		.loc 1 408 0
 122 0032 E091 0000 		lds r30,wrp
 123 0036 F091 0000 		lds r31,wrp+1
 124 003a C193      		st Z+,r28
 125 003c D193      		st Z+,r29
 409:main.c        ****     wrp = &queue[0];
 126               		.loc 1 409 0
 127 003e 20E0      		ldi r18,hi8(queue+256)
 128 0040 E030      		cpi r30,lo8(queue+256)
 129 0042 F207      		cpc r31,r18
 130 0044 00F0      		brlo .L10
 410:main.c        ****   qsize++;
 131               		.loc 1 410 0
 132 0046 20E0      		ldi r18,lo8(queue)
 133 0048 30E0      		ldi r19,hi8(queue)
 134 004a 3093 0000 		sts wrp+1,r19
 135 004e 2093 0000 		sts wrp,r18
 136               	.L8:
 411:main.c        ****  
 137               		.loc 1 411 0
 138 0052 0196      		adiw r24,1
 139 0054 9093 0000 		sts qsize+1,r25
 140 0058 8093 0000 		sts qsize,r24
 414:main.c        ****  
 141               		.loc 1 414 0
 142 005c 80E0      		ldi r24,lo8(qempty)
 143 005e 90E0      		ldi r25,hi8(qempty)
 144 0060 0E94 0000 		call chCondSignal
 145               	.LVL9:
 417:main.c        **** }
 146               		.loc 1 417 0
 147 0064 80E0      		ldi r24,lo8(qmtx)
 148 0066 90E0      		ldi r25,hi8(qmtx)
 149               	/* epilogue start */
 418:main.c        **** 
 150               		.loc 1 418 0
 151 0068 DF91      		pop r29
 152 006a CF91      		pop r28
 153               	.LVL10:
 417:main.c        **** }
 154               		.loc 1 417 0
 155 006c 0C94 0000 		jmp chMtxUnlock
 156               	.LVL11:
 157               	.L10:
 409:main.c        ****     wrp = &queue[0];
 158               		.loc 1 409 0
 159 0070 F093 0000 		sts wrp+1,r31
 160 0074 E093 0000 		sts wrp,r30
 161 0078 00C0      		rjmp .L8
 162               		.cfi_endproc
 163               	.LFE246:
 165               		.section	.text.dequeue,"ax",@progbits
 166               	.global	dequeue
 168               	dequeue:
 169               	.LFB247:
 424:main.c        ****   msg_t msg;
 170               		.loc 1 424 0
 171               		.cfi_startproc
 172 0000 CF93      		push r28
 173               	.LCFI2:
 174               		.cfi_def_cfa_offset 3
 175               		.cfi_offset 28, -2
 176 0002 DF93      		push r29
 177               	.LCFI3:
 178               		.cfi_def_cfa_offset 4
 179               		.cfi_offset 29, -3
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 2 */
 183               	.L__stack_usage = 2
 428:main.c        ****  
 184               		.loc 1 428 0
 185 0004 80E0      		ldi r24,lo8(qmtx)
 186 0006 90E0      		ldi r25,hi8(qmtx)
 187 0008 0E94 0000 		call chMtxLock
 188               	.LVL12:
 431:main.c        ****     chCondWait(&qempty);
 189               		.loc 1 431 0
 190 000c 8091 0000 		lds r24,qsize
 191 0010 9091 0000 		lds r25,qsize+1
 192 0014 0097      		sbiw r24,0
 193 0016 01F4      		brne .L12
 194               	.L13:
 432:main.c        ****  
 195               		.loc 1 432 0
 196 0018 80E0      		ldi r24,lo8(qempty)
 197 001a 90E0      		ldi r25,hi8(qempty)
 198 001c 0E94 0000 		call chCondWait
 199               	.LVL13:
 431:main.c        ****     chCondWait(&qempty);
 200               		.loc 1 431 0
 201 0020 8091 0000 		lds r24,qsize
 202 0024 9091 0000 		lds r25,qsize+1
 203 0028 0097      		sbiw r24,0
 204 002a 01F0      		breq .L13
 205               	.L12:
 435:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 206               		.loc 1 435 0
 207 002c E091 0000 		lds r30,rdp
 208 0030 F091 0000 		lds r31,rdp+1
 209 0034 C191      		ld r28,Z+
 210 0036 D191      		ld r29,Z+
 211               	.LVL14:
 436:main.c        ****     rdp = &queue[0];
 212               		.loc 1 436 0
 213 0038 20E0      		ldi r18,hi8(queue+256)
 214 003a E030      		cpi r30,lo8(queue+256)
 215 003c F207      		cpc r31,r18
 216 003e 00F0      		brlo .L18
 437:main.c        ****   qsize--;
 217               		.loc 1 437 0
 218 0040 20E0      		ldi r18,lo8(queue)
 219 0042 30E0      		ldi r19,hi8(queue)
 220 0044 3093 0000 		sts rdp+1,r19
 221 0048 2093 0000 		sts rdp,r18
 222               	.L15:
 438:main.c        ****  
 223               		.loc 1 438 0
 224 004c 0197      		sbiw r24,1
 225 004e 9093 0000 		sts qsize+1,r25
 226 0052 8093 0000 		sts qsize,r24
 441:main.c        ****  
 227               		.loc 1 441 0
 228 0056 80E0      		ldi r24,lo8(qfull)
 229 0058 90E0      		ldi r25,hi8(qfull)
 230 005a 0E94 0000 		call chCondSignal
 231               	.LVL15:
 444:main.c        ****  
 232               		.loc 1 444 0
 233 005e 80E0      		ldi r24,lo8(qmtx)
 234 0060 90E0      		ldi r25,hi8(qmtx)
 235 0062 0E94 0000 		call chMtxUnlock
 236               	.LVL16:
 447:main.c        **** 
 237               		.loc 1 447 0
 238 0066 CE01      		movw r24,r28
 239               	/* epilogue start */
 240 0068 DF91      		pop r29
 241 006a CF91      		pop r28
 242               	.LVL17:
 243 006c 0895      		ret
 244               	.LVL18:
 245               	.L18:
 436:main.c        ****     rdp = &queue[0];
 246               		.loc 1 436 0
 247 006e F093 0000 		sts rdp+1,r31
 248 0072 E093 0000 		sts rdp,r30
 249 0076 00C0      		rjmp .L15
 250               		.cfi_endproc
 251               	.LFE247:
 253               		.section	.text.Thread1,"ax",@progbits
 255               	Thread1:
 256               	.LFB243:
  96:main.c        ****   msg_t ev;
 257               		.loc 1 96 0
 258               		.cfi_startproc
 259               	.LVL19:
 260 0000 CF93      		push r28
 261               	.LCFI4:
 262               		.cfi_def_cfa_offset 3
 263               		.cfi_offset 28, -2
 264 0002 DF93      		push r29
 265               	.LCFI5:
 266               		.cfi_def_cfa_offset 4
 267               		.cfi_offset 29, -3
 268 0004 CDB7      		in r28,__SP_L__
 269 0006 DEB7      		in r29,__SP_H__
 270               	.LCFI6:
 271               		.cfi_def_cfa_register 28
 272 0008 6097      		sbiw r28,16
 273               	.LCFI7:
 274               		.cfi_def_cfa_offset 20
 275 000a 0FB6      		in __tmp_reg__,__SREG__
 276 000c F894      		cli
 277 000e DEBF      		out __SP_H__,r29
 278 0010 0FBE      		out __SREG__,__tmp_reg__
 279 0012 CDBF      		out __SP_L__,r28
 280               	/* prologue: function */
 281               	/* frame size = 16 */
 282               	/* stack size = 18 */
 283               	.L__stack_usage = 18
 284               	.LVL20:
 285               	.LBB326:
 286               	.LBB327:
 287               		.file 2 "../../os/rt/include/chvt.h"
   1:../../os/rt/include/chvt.h **** /*
   2:../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chvt.h **** 
   5:../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chvt.h **** 
   7:../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chvt.h **** 
  11:../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chvt.h **** 
  16:../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chvt.h **** */
  19:../../os/rt/include/chvt.h **** 
  20:../../os/rt/include/chvt.h **** /**
  21:../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../os/rt/include/chvt.h ****  *
  24:../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../os/rt/include/chvt.h ****  * @{
  26:../../os/rt/include/chvt.h ****  */
  27:../../os/rt/include/chvt.h **** 
  28:../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../os/rt/include/chvt.h **** 
  31:../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../os/rt/include/chvt.h **** 
  35:../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../os/rt/include/chvt.h **** 
  39:../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../os/rt/include/chvt.h **** 
  43:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../os/rt/include/chvt.h **** #endif
  47:../../os/rt/include/chvt.h **** 
  48:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../os/rt/include/chvt.h **** #endif
  51:../../os/rt/include/chvt.h **** 
  52:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../os/rt/include/chvt.h **** #endif
  55:../../os/rt/include/chvt.h **** 
  56:../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../os/rt/include/chvt.h **** 
  60:../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../os/rt/include/chvt.h **** 
  64:../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../os/rt/include/chvt.h **** 
  68:../../os/rt/include/chvt.h **** /*
  69:../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../os/rt/include/chvt.h ****  */
  71:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../os/rt/include/chvt.h **** extern "C" {
  73:../../os/rt/include/chvt.h **** #endif
  74:../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:../../os/rt/include/chvt.h **** #endif
  85:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  86:../../os/rt/include/chvt.h **** }
  87:../../os/rt/include/chvt.h **** #endif
  88:../../os/rt/include/chvt.h **** 
  89:../../os/rt/include/chvt.h **** /*===========================================================================*/
  90:../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../os/rt/include/chvt.h **** 
  93:../../os/rt/include/chvt.h **** /**
  94:../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:../../os/rt/include/chvt.h ****  *
 100:../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:../../os/rt/include/chvt.h ****  *
 102:../../os/rt/include/chvt.h ****  * @init
 103:../../os/rt/include/chvt.h ****  */
 104:../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:../../os/rt/include/chvt.h **** 
 106:../../os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 288               		.loc 2 106 0
 289 0014 1A82      		std Y+2,__zero_reg__
 290 0016 1982      		std Y+1,__zero_reg__
 291               	.LBE327:
 292               	.LBE326:
 297:main.c        ****     }
 293               		.loc 1 297 0
 294 0018 EE24      		clr r14
 295 001a E394      		inc r14
 296 001c F12C      		mov r15,__zero_reg__
 292:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 297               		.loc 1 292 0
 298 001e BB24      		clr r11
 299 0020 B394      		inc r11
 281:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 300               		.loc 1 281 0
 301 0022 76E0      		ldi r23,lo8(6)
 302 0024 972E      		mov r9,r23
 267:main.c        ****           palClearLine(PEDESTRE_VERDE);
 303               		.loc 1 267 0
 304 0026 EBE0      		ldi r30,lo8(11)
 305 0028 8E2E      		mov r8,r30
 239:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 306               		.loc 1 239 0
 307 002a FAE0      		ldi r31,lo8(10)
 308 002c AF2E      		mov r10,r31
 216:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 309               		.loc 1 216 0
 310 002e A8E0      		ldi r26,lo8(8)
 311 0030 2A2E      		mov r2,r26
 213:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 312               		.loc 1 213 0
 313 0032 B7E0      		ldi r27,lo8(7)
 314 0034 3B2E      		mov r3,r27
 315 0036 00C0      		rjmp .L97
 316               	.LVL21:
 317               	.L20:
 297:main.c        ****     }
 318               		.loc 1 297 0
 319 0038 63E0      		ldi r22,lo8(3)
 320 003a 83E2      		ldi r24,lo8(35)
 321 003c 90E0      		ldi r25,0
 322 003e 0E94 0000 		call _pal_lld_setlineid
 323               	.LVL22:
 324 0042 0E94 0000 		call _pal_lld_getpadfromline
 325               	.LVL23:
 326 0046 782E      		mov r7,r24
 327 0048 63E0      		ldi r22,lo8(3)
 328 004a 83E2      		ldi r24,lo8(35)
 329 004c 90E0      		ldi r25,0
 330 004e 0E94 0000 		call _pal_lld_setlineid
 331               	.LVL24:
 332 0052 0E94 0000 		call _pal_lld_getportfromline
 333               	.LVL25:
 334 0056 FC01      		movw r30,r24
 335 0058 9281      		ldd r25,Z+2
 336 005a 9701      		movw r18,r14
 337 005c 00C0      		rjmp 2f
 338               		1:
 339 005e 220F      		lsl r18
 340               		2:
 341 0060 7A94      		dec r7
 342 0062 02F4      		brpl 1b
 343 0064 922B      		or r25,r18
 344 0066 9283      		std Z+2,r25
 345               	.L44:
 299:main.c        ****   }
 346               		.loc 1 299 0
 347 0068 6BE1      		ldi r22,lo8(27)
 348 006a 76E0      		ldi r23,lo8(6)
 349 006c 80E0      		ldi r24,0
 350 006e 90E0      		ldi r25,0
 351 0070 0E94 0000 		call chThdSleep
 352               	.LVL26:
 353               	.L97:
 104:main.c        ****       case VERDE_LOCKED_PRIM:
 354               		.loc 1 104 0
 355 0074 E091 0000 		lds r30,g_state
 356 0078 E150      		subi r30,lo8(-(-1))
 357 007a EC30      		cpi r30,lo8(12)
 358 007c 00F4      		brsh .L20
 359 007e F0E0      		ldi r31,0
 360 0080 E050      		subi r30,lo8(-(gs(.L22)))
 361 0082 F040      		sbci r31,hi8(-(gs(.L22)))
 362 0084 0C94 0000 		jmp __tablejump2__
 363               		.p2align	1
 364               	.L22:
 365 0088 0000      		.word gs(.L21)
 366 008a 0000      		.word gs(.L23)
 367 008c 0000      		.word gs(.L24)
 368 008e 0000      		.word gs(.L25)
 369 0090 0000      		.word gs(.L20)
 370 0092 0000      		.word gs(.L26)
 371 0094 0000      		.word gs(.L27)
 372 0096 0000      		.word gs(.L28)
 373 0098 0000      		.word gs(.L20)
 374 009a 0000      		.word gs(.L29)
 375 009c 0000      		.word gs(.L30)
 376 009e 0000      		.word gs(.L31)
 377               	.L31:
 378               	.LVL27:
 379               	.LBB328:
 380               	.LBB329:
 381               	.LBB330:
 382               	.LBB331:
 383               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 384               		.loc 3 430 0
 385               	/* #APP */
 386               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 387 00a0 F894      		cli
 388               	 ;  0 "" 2
 389               	.LVL28:
 390               	/* #NOAPP */
 391               	.LBE331:
 392               	.LBE330:
 393               	.LBE329:
 394               	.LBB332:
 395               	.LBB333:
 396               	.LBB334:
 397               	.LBB335:
 107:../../os/rt/include/chvt.h **** }
 108:../../os/rt/include/chvt.h **** 
 109:../../os/rt/include/chvt.h **** /**
 110:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 111:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:../../os/rt/include/chvt.h ****  *          invocation.
 113:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:../../os/rt/include/chvt.h ****  *          @p systime_t size.
 117:../../os/rt/include/chvt.h ****  *
 118:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:../../os/rt/include/chvt.h ****  *
 120:../../os/rt/include/chvt.h ****  * @xclass
 121:../../os/rt/include/chvt.h ****  */
 122:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:../../os/rt/include/chvt.h **** 
 124:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:../../os/rt/include/chvt.h ****   return port_timer_get_time();
 128:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:../../os/rt/include/chvt.h **** }
 130:../../os/rt/include/chvt.h **** 
 131:../../os/rt/include/chvt.h **** /**
 132:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 133:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:../../os/rt/include/chvt.h ****  *          invocation.
 135:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:../../os/rt/include/chvt.h ****  *
 137:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:../../os/rt/include/chvt.h ****  *
 139:../../os/rt/include/chvt.h ****  * @api
 140:../../os/rt/include/chvt.h ****  */
 141:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:../../os/rt/include/chvt.h ****   systime_t systime;
 143:../../os/rt/include/chvt.h **** 
 144:../../os/rt/include/chvt.h ****   chSysLock();
 145:../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:../../os/rt/include/chvt.h ****   chSysUnlock();
 147:../../os/rt/include/chvt.h **** 
 148:../../os/rt/include/chvt.h ****   return systime;
 149:../../os/rt/include/chvt.h **** }
 150:../../os/rt/include/chvt.h **** 
 151:../../os/rt/include/chvt.h **** /**
 152:../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:../../os/rt/include/chvt.h ****  *
 154:../../os/rt/include/chvt.h ****  * @param[in] start     start time
 155:../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:../../os/rt/include/chvt.h ****  *
 157:../../os/rt/include/chvt.h ****  * @xclass
 158:../../os/rt/include/chvt.h ****  */
 159:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:../../os/rt/include/chvt.h **** 
 161:../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:../../os/rt/include/chvt.h **** }
 163:../../os/rt/include/chvt.h **** 
 164:../../os/rt/include/chvt.h **** /**
 165:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:../../os/rt/include/chvt.h ****  *          window.
 167:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:../../os/rt/include/chvt.h ****  *          time window has zero size.
 169:../../os/rt/include/chvt.h ****  *
 170:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:../../os/rt/include/chvt.h ****  *
 175:../../os/rt/include/chvt.h ****  * @xclass
 176:../../os/rt/include/chvt.h ****  */
 177:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:../../os/rt/include/chvt.h **** 
 179:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:../../os/rt/include/chvt.h **** }
 181:../../os/rt/include/chvt.h **** 
 182:../../os/rt/include/chvt.h **** /**
 183:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:../../os/rt/include/chvt.h ****  *          window.
 185:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:../../os/rt/include/chvt.h ****  *          time window has zero size.
 187:../../os/rt/include/chvt.h ****  *
 188:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:../../os/rt/include/chvt.h ****  *
 193:../../os/rt/include/chvt.h ****  * @api
 194:../../os/rt/include/chvt.h ****  */
 195:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:../../os/rt/include/chvt.h **** 
 197:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:../../os/rt/include/chvt.h **** }
 199:../../os/rt/include/chvt.h **** 
 200:../../os/rt/include/chvt.h **** /**
 201:../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:../../os/rt/include/chvt.h ****  *
 207:../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:../../os/rt/include/chvt.h ****  *
 214:../../os/rt/include/chvt.h ****  * @iclass
 215:../../os/rt/include/chvt.h ****  */
 216:../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:../../os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:../../os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:../../os/rt/include/chvt.h **** 
 220:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:../../os/rt/include/chvt.h **** 
 222:../../os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:../../os/rt/include/chvt.h ****     return false;
 224:../../os/rt/include/chvt.h ****   }
 225:../../os/rt/include/chvt.h **** 
 226:../../os/rt/include/chvt.h ****   if (timep != NULL) {
 227:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:../../os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:../../os/rt/include/chvt.h **** #else
 230:../../os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:../../os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:../../os/rt/include/chvt.h **** #endif
 233:../../os/rt/include/chvt.h ****   }
 234:../../os/rt/include/chvt.h **** 
 235:../../os/rt/include/chvt.h ****   return true;
 236:../../os/rt/include/chvt.h **** }
 237:../../os/rt/include/chvt.h **** 
 238:../../os/rt/include/chvt.h **** /**
 239:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:../../os/rt/include/chvt.h ****  *
 243:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:../../os/rt/include/chvt.h ****  *
 246:../../os/rt/include/chvt.h ****  * @iclass
 247:../../os/rt/include/chvt.h ****  */
 248:../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:../../os/rt/include/chvt.h **** 
 250:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:../../os/rt/include/chvt.h **** 
 252:../../os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:../../os/rt/include/chvt.h **** }
 254:../../os/rt/include/chvt.h **** 
 255:../../os/rt/include/chvt.h **** /**
 256:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:../../os/rt/include/chvt.h ****  *
 260:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:../../os/rt/include/chvt.h ****  *
 263:../../os/rt/include/chvt.h ****  * @api
 264:../../os/rt/include/chvt.h ****  */
 265:../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:../../os/rt/include/chvt.h ****   bool b;
 267:../../os/rt/include/chvt.h **** 
 268:../../os/rt/include/chvt.h ****   chSysLock();
 269:../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:../../os/rt/include/chvt.h ****   chSysUnlock();
 271:../../os/rt/include/chvt.h **** 
 272:../../os/rt/include/chvt.h ****   return b;
 273:../../os/rt/include/chvt.h **** }
 274:../../os/rt/include/chvt.h **** 
 275:../../os/rt/include/chvt.h **** /**
 276:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:../../os/rt/include/chvt.h ****  *
 281:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:../../os/rt/include/chvt.h ****  *
 283:../../os/rt/include/chvt.h ****  * @iclass
 284:../../os/rt/include/chvt.h ****  */
 285:../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:../../os/rt/include/chvt.h **** 
 287:../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 398               		.loc 2 287 0
 399 00a2 8981      		ldd r24,Y+1
 400 00a4 9A81      		ldd r25,Y+2
 401 00a6 892B      		or r24,r25
 402 00a8 01F0      		breq .L94
 288:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 403               		.loc 2 288 0
 404 00aa CE01      		movw r24,r28
 405 00ac 0196      		adiw r24,1
 406 00ae 0E94 0000 		call chVTDoResetI
 407               	.LVL29:
 408               	.L94:
 409               	.LBE335:
 410               	.LBE334:
 289:../../os/rt/include/chvt.h ****   }
 290:../../os/rt/include/chvt.h **** }
 291:../../os/rt/include/chvt.h **** 
 292:../../os/rt/include/chvt.h **** /**
 293:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:../../os/rt/include/chvt.h ****  *
 298:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:../../os/rt/include/chvt.h ****  *
 300:../../os/rt/include/chvt.h ****  * @api
 301:../../os/rt/include/chvt.h ****  */
 302:../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:../../os/rt/include/chvt.h **** 
 304:../../os/rt/include/chvt.h ****   chSysLock();
 305:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:../../os/rt/include/chvt.h ****   chSysUnlock();
 307:../../os/rt/include/chvt.h **** }
 308:../../os/rt/include/chvt.h **** 
 309:../../os/rt/include/chvt.h **** /**
 310:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:../../os/rt/include/chvt.h ****  *          using the new parameters.
 313:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:../../os/rt/include/chvt.h ****  *
 316:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:../../os/rt/include/chvt.h ****  *                        normal time specification.
 321:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:../../os/rt/include/chvt.h ****  *                      .
 323:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../os/rt/include/chvt.h ****  *                      function
 328:../../os/rt/include/chvt.h ****  *
 329:../../os/rt/include/chvt.h ****  * @iclass
 330:../../os/rt/include/chvt.h ****  */
 331:../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:../../os/rt/include/chvt.h **** 
 334:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 411               		.loc 2 335 0
 412 00b2 8E01      		movw r16,r28
 413 00b4 0F5F      		subi r16,-1
 414 00b6 1F4F      		sbci r17,-1
 415 00b8 20E0      		ldi r18,lo8(gs(vt_cb))
 416 00ba 30E0      		ldi r19,hi8(gs(vt_cb))
 417 00bc 40E1      		ldi r20,lo8(16)
 418 00be 5AE7      		ldi r21,lo8(122)
 419 00c0 60E0      		ldi r22,0
 420 00c2 70E0      		ldi r23,0
 421 00c4 C801      		movw r24,r16
 422 00c6 0E94 0000 		call chVTDoSetI
 423               	.LVL30:
 424               	.LBE333:
 425               	.LBE332:
 426               	.LBB336:
 427               	.LBB337:
 428               	.LBB338:
 429               	.LBB339:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 430               		.loc 3 440 0
 431               	/* #APP */
 432               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 433 00ca 7894      		sei
 434               	 ;  0 "" 2
 435               	/* #NOAPP */
 436               	.LBE339:
 437               	.LBE338:
 438               	.LBE337:
 439               	.LBE336:
 440               	.LBE328:
 287:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 441               		.loc 1 287 0
 442 00cc 8091 0000 		lds r24,main_vt_flag
 443 00d0 8111      		cpse r24,__zero_reg__
 444 00d2 00C0      		rjmp .L95
 445               	.L96:
 288:main.c        ****           chThdSleepMilliseconds(125);
 446               		.loc 1 288 0
 447 00d4 62E0      		ldi r22,lo8(2)
 448 00d6 83E2      		ldi r24,lo8(35)
 449 00d8 90E0      		ldi r25,0
 450 00da 0E94 0000 		call _pal_lld_setlineid
 451               	.LVL31:
 452 00de 0E94 0000 		call _pal_lld_getportfromline
 453               	.LVL32:
 454 00e2 FC01      		movw r30,r24
 455 00e4 7280      		ldd r7,Z+2
 456 00e6 62E0      		ldi r22,lo8(2)
 457 00e8 83E2      		ldi r24,lo8(35)
 458 00ea 90E0      		ldi r25,0
 459 00ec 0E94 0000 		call _pal_lld_setlineid
 460               	.LVL33:
 461 00f0 0E94 0000 		call _pal_lld_getpadfromline
 462               	.LVL34:
 463 00f4 682E      		mov r6,r24
 464 00f6 62E0      		ldi r22,lo8(2)
 465 00f8 83E2      		ldi r24,lo8(35)
 466 00fa 90E0      		ldi r25,0
 467 00fc 0E94 0000 		call _pal_lld_setlineid
 468               	.LVL35:
 469 0100 0E94 0000 		call _pal_lld_getportfromline
 470               	.LVL36:
 471 0104 9701      		movw r18,r14
 472 0106 00C0      		rjmp 2f
 473               		1:
 474 0108 220F      		lsl r18
 475               		2:
 476 010a 6A94      		dec r6
 477 010c 02F4      		brpl 1b
 478 010e 7226      		eor r7,r18
 479 0110 FC01      		movw r30,r24
 480 0112 7282      		std Z+2,r7
 289:main.c        ****         }
 481               		.loc 1 289 0
 482 0114 61EA      		ldi r22,lo8(-95)
 483 0116 77E0      		ldi r23,lo8(7)
 484 0118 80E0      		ldi r24,0
 485 011a 90E0      		ldi r25,0
 486 011c 0E94 0000 		call chThdSleep
 487               	.LVL37:
 287:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 488               		.loc 1 287 0
 489 0120 8091 0000 		lds r24,main_vt_flag
 490 0124 8823      		tst r24
 491 0126 01F0      		breq .L96
 492               	.L95:
 291:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 493               		.loc 1 291 0
 494 0128 1092 0000 		sts main_vt_flag,__zero_reg__
 292:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 495               		.loc 1 292 0
 496 012c B092 0000 		sts g_state,r11
 497               	.LVL38:
 498               	.L215:
 293:main.c        ****         prev_state = PEDESTRE;
 499               		.loc 1 293 0
 500 0130 62E0      		ldi r22,lo8(2)
 501 0132 83E2      		ldi r24,lo8(35)
 502 0134 90E0      		ldi r25,0
 503 0136 0E94 0000 		call _pal_lld_setlineid
 504               	.LVL39:
 505 013a 0E94 0000 		call _pal_lld_getpadfromline
 506               	.LVL40:
 507 013e 782E      		mov r7,r24
 508 0140 62E0      		ldi r22,lo8(2)
 509 0142 83E2      		ldi r24,lo8(35)
 510 0144 90E0      		ldi r25,0
 511 0146 0E94 0000 		call _pal_lld_setlineid
 512               	.LVL41:
 513 014a 0E94 0000 		call _pal_lld_getportfromline
 514               	.LVL42:
 515 014e FC01      		movw r30,r24
 516 0150 9281      		ldd r25,Z+2
 517 0152 9701      		movw r18,r14
 518 0154 00C0      		rjmp 2f
 519               		1:
 520 0156 220F      		lsl r18
 521               		2:
 522 0158 7A94      		dec r7
 523 015a 02F4      		brpl 1b
 524 015c 922B      		or r25,r18
 525 015e 9283      		std Z+2,r25
 294:main.c        ****         break;
 526               		.loc 1 294 0
 527 0160 82E0      		ldi r24,lo8(2)
 528 0162 8093 0000 		sts prev_state,r24
 295:main.c        ****       default:
 529               		.loc 1 295 0
 530 0166 00C0      		rjmp .L44
 531               	.LVL43:
 532               	.L30:
 533               	.LBB340:
 534               	.LBB341:
 535               	.LBB342:
 536               	.LBB343:
 430:../../os/common/ports/AVR/chcore.h **** }
 537               		.loc 3 430 0
 538               	/* #APP */
 539               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 540 0168 F894      		cli
 541               	 ;  0 "" 2
 542               	.LVL44:
 543               	/* #NOAPP */
 544               	.LBE343:
 545               	.LBE342:
 546               	.LBE341:
 547               	.LBB344:
 548               	.LBB345:
 549               	.LBB346:
 550               	.LBB347:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 551               		.loc 2 287 0
 552 016a 8981      		ldd r24,Y+1
 553 016c 9A81      		ldd r25,Y+2
 554 016e 892B      		or r24,r25
 555 0170 01F0      		breq .L91
 288:../../os/rt/include/chvt.h ****   }
 556               		.loc 2 288 0
 557 0172 CE01      		movw r24,r28
 558 0174 0196      		adiw r24,1
 559 0176 0E94 0000 		call chVTDoResetI
 560               	.LVL45:
 561               	.L91:
 562               	.LBE347:
 563               	.LBE346:
 564               		.loc 2 335 0
 565 017a 8E01      		movw r16,r28
 566 017c 0F5F      		subi r16,-1
 567 017e 1F4F      		sbci r17,-1
 568 0180 20E0      		ldi r18,lo8(gs(vt_cb))
 569 0182 30E0      		ldi r19,hi8(gs(vt_cb))
 570 0184 40E1      		ldi r20,lo8(16)
 571 0186 5AE7      		ldi r21,lo8(122)
 572 0188 60E0      		ldi r22,0
 573 018a 70E0      		ldi r23,0
 574 018c C801      		movw r24,r16
 575 018e 0E94 0000 		call chVTDoSetI
 576               	.LVL46:
 577               	.LBE345:
 578               	.LBE344:
 579               	.LBB348:
 580               	.LBB349:
 581               	.LBB350:
 582               	.LBB351:
 583               		.loc 3 440 0
 584               	/* #APP */
 585               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 586 0192 7894      		sei
 587               	 ;  0 "" 2
 588               	/* #NOAPP */
 589               	.LBE351:
 590               	.LBE350:
 591               	.LBE349:
 592               	.LBE348:
 593               	.LBE340:
 276:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 594               		.loc 1 276 0
 595 0194 8091 0000 		lds r24,main_vt_flag
 596 0198 8111      		cpse r24,__zero_reg__
 597 019a 00C0      		rjmp .L92
 598               	.L93:
 277:main.c        ****           chThdSleepMilliseconds(125);
 599               		.loc 1 277 0
 600 019c 62E0      		ldi r22,lo8(2)
 601 019e 83E2      		ldi r24,lo8(35)
 602 01a0 90E0      		ldi r25,0
 603 01a2 0E94 0000 		call _pal_lld_setlineid
 604               	.LVL47:
 605 01a6 0E94 0000 		call _pal_lld_getportfromline
 606               	.LVL48:
 607 01aa FC01      		movw r30,r24
 608 01ac 7280      		ldd r7,Z+2
 609 01ae 62E0      		ldi r22,lo8(2)
 610 01b0 83E2      		ldi r24,lo8(35)
 611 01b2 90E0      		ldi r25,0
 612 01b4 0E94 0000 		call _pal_lld_setlineid
 613               	.LVL49:
 614 01b8 0E94 0000 		call _pal_lld_getpadfromline
 615               	.LVL50:
 616 01bc 682E      		mov r6,r24
 617 01be 62E0      		ldi r22,lo8(2)
 618 01c0 83E2      		ldi r24,lo8(35)
 619 01c2 90E0      		ldi r25,0
 620 01c4 0E94 0000 		call _pal_lld_setlineid
 621               	.LVL51:
 622 01c8 0E94 0000 		call _pal_lld_getportfromline
 623               	.LVL52:
 624 01cc 9701      		movw r18,r14
 625 01ce 00C0      		rjmp 2f
 626               		1:
 627 01d0 220F      		lsl r18
 628               		2:
 629 01d2 6A94      		dec r6
 630 01d4 02F4      		brpl 1b
 631 01d6 7226      		eor r7,r18
 632 01d8 FC01      		movw r30,r24
 633 01da 7282      		std Z+2,r7
 278:main.c        ****         }
 634               		.loc 1 278 0
 635 01dc 61EA      		ldi r22,lo8(-95)
 636 01de 77E0      		ldi r23,lo8(7)
 637 01e0 80E0      		ldi r24,0
 638 01e2 90E0      		ldi r25,0
 639 01e4 0E94 0000 		call chThdSleep
 640               	.LVL53:
 276:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 641               		.loc 1 276 0
 642 01e8 8091 0000 		lds r24,main_vt_flag
 643 01ec 8823      		tst r24
 644 01ee 01F0      		breq .L93
 645               	.L92:
 280:main.c        ****         g_state = VERDE_LOCKED_SEC;
 646               		.loc 1 280 0
 647 01f0 1092 0000 		sts main_vt_flag,__zero_reg__
 281:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 648               		.loc 1 281 0
 649 01f4 9092 0000 		sts g_state,r9
 650 01f8 00C0      		rjmp .L215
 651               	.LVL54:
 652               	.L29:
 245:main.c        ****         palSetLine(PEDESTRE_VERDE);
 653               		.loc 1 245 0
 654 01fa 62E0      		ldi r22,lo8(2)
 655 01fc 83E2      		ldi r24,lo8(35)
 656 01fe 90E0      		ldi r25,0
 657 0200 0E94 0000 		call _pal_lld_setlineid
 658               	.LVL55:
 659 0204 0E94 0000 		call _pal_lld_getpadfromline
 660               	.LVL56:
 661 0208 782E      		mov r7,r24
 662 020a 62E0      		ldi r22,lo8(2)
 663 020c 83E2      		ldi r24,lo8(35)
 664 020e 90E0      		ldi r25,0
 665 0210 0E94 0000 		call _pal_lld_setlineid
 666               	.LVL57:
 667 0214 0E94 0000 		call _pal_lld_getportfromline
 668               	.LVL58:
 669 0218 FC01      		movw r30,r24
 670 021a 9281      		ldd r25,Z+2
 671 021c 9701      		movw r18,r14
 672 021e 00C0      		rjmp 2f
 673               		1:
 674 0220 220F      		lsl r18
 675 0222 331F      		rol r19
 676               		2:
 677 0224 7A94      		dec r7
 678 0226 02F4      		brpl 1b
 679 0228 2095      		com r18
 680 022a 3095      		com r19
 681 022c 9223      		and r25,r18
 682 022e 9283      		std Z+2,r25
 246:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 683               		.loc 1 246 0
 684 0230 63E0      		ldi r22,lo8(3)
 685 0232 83E2      		ldi r24,lo8(35)
 686 0234 90E0      		ldi r25,0
 687 0236 0E94 0000 		call _pal_lld_setlineid
 688               	.LVL59:
 689 023a 0E94 0000 		call _pal_lld_getpadfromline
 690               	.LVL60:
 691 023e 782E      		mov r7,r24
 692 0240 63E0      		ldi r22,lo8(3)
 693 0242 83E2      		ldi r24,lo8(35)
 694 0244 90E0      		ldi r25,0
 695 0246 0E94 0000 		call _pal_lld_setlineid
 696               	.LVL61:
 697 024a 0E94 0000 		call _pal_lld_getportfromline
 698               	.LVL62:
 699 024e FC01      		movw r30,r24
 700 0250 9281      		ldd r25,Z+2
 701 0252 9701      		movw r18,r14
 702 0254 00C0      		rjmp 2f
 703               		1:
 704 0256 220F      		lsl r18
 705               		2:
 706 0258 7A94      		dec r7
 707 025a 02F4      		brpl 1b
 708 025c 922B      		or r25,r18
 709 025e 9283      		std Z+2,r25
 710               	.LVL63:
 711               	.LBB352:
 712               	.LBB353:
 713               	.LBB354:
 714               	.LBB355:
 430:../../os/common/ports/AVR/chcore.h **** }
 715               		.loc 3 430 0
 716               	/* #APP */
 717               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 718 0260 F894      		cli
 719               	 ;  0 "" 2
 720               	.LVL64:
 721               	/* #NOAPP */
 722               	.LBE355:
 723               	.LBE354:
 724               	.LBE353:
 725               	.LBB356:
 726               	.LBB357:
 727               	.LBB358:
 728               	.LBB359:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 729               		.loc 2 287 0
 730 0262 8981      		ldd r24,Y+1
 731 0264 9A81      		ldd r25,Y+2
 732 0266 892B      		or r24,r25
 733 0268 01F0      		breq .L83
 288:../../os/rt/include/chvt.h ****   }
 734               		.loc 2 288 0
 735 026a CE01      		movw r24,r28
 736 026c 0196      		adiw r24,1
 737 026e 0E94 0000 		call chVTDoResetI
 738               	.LVL65:
 739               	.L83:
 740               	.LBE359:
 741               	.LBE358:
 742               		.loc 2 335 0
 743 0272 8E01      		movw r16,r28
 744 0274 0F5F      		subi r16,-1
 745 0276 1F4F      		sbci r17,-1
 746 0278 20E0      		ldi r18,lo8(gs(vt_cb))
 747 027a 30E0      		ldi r19,hi8(gs(vt_cb))
 748 027c 48E1      		ldi r20,lo8(24)
 749 027e 57EB      		ldi r21,lo8(-73)
 750 0280 60E0      		ldi r22,0
 751 0282 70E0      		ldi r23,0
 752 0284 C801      		movw r24,r16
 753 0286 0E94 0000 		call chVTDoSetI
 754               	.LVL66:
 755               	.LBE357:
 756               	.LBE356:
 757               	.LBB360:
 758               	.LBB361:
 759               	.LBB362:
 760               	.LBB363:
 761               		.loc 3 440 0
 762               	/* #APP */
 763               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 764 028a 7894      		sei
 765               	 ;  0 "" 2
 766               	/* #NOAPP */
 767               	.LBE363:
 768               	.LBE362:
 769               	.LBE361:
 770               	.LBE360:
 771               	.LBE352:
 248:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 772               		.loc 1 248 0
 773 028c 8091 0000 		lds r24,main_vt_flag
 774 0290 8823      		tst r24
 775 0292 01F0      		breq .L87
 776 0294 00C0      		rjmp .L84
 777               	.L85:
 253:main.c        ****             flag_amb_sec = 1;
 778               		.loc 1 253 0
 779 0296 0497      		sbiw r24,4
 780 0298 01F4      		brne .L86
 254:main.c        ****             //chVTReset(&main_vt);
 781               		.loc 1 254 0
 782 029a B092 0000 		sts flag_amb_sec,r11
 783               	.L86:
 258:main.c        ****         }
 784               		.loc 1 258 0
 785 029e 6BE1      		ldi r22,lo8(27)
 786 02a0 76E0      		ldi r23,lo8(6)
 787 02a2 80E0      		ldi r24,0
 788 02a4 90E0      		ldi r25,0
 789 02a6 0E94 0000 		call chThdSleep
 790               	.LVL67:
 248:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 791               		.loc 1 248 0
 792 02aa 8091 0000 		lds r24,main_vt_flag
 793 02ae 8111      		cpse r24,__zero_reg__
 794 02b0 00C0      		rjmp .L84
 795               	.L87:
 249:main.c        ****             flag_amb_prim = 1;
 796               		.loc 1 249 0
 797 02b2 E091 0000 		lds r30,rdp
 798 02b6 F091 0000 		lds r31,rdp+1
 799 02ba 8081      		ld r24,Z
 800 02bc 9181      		ldd r25,Z+1
 801 02be 8330      		cpi r24,3
 802 02c0 9105      		cpc r25,__zero_reg__
 803 02c2 01F4      		brne .L85
 250:main.c        ****             //chVTReset(&main_vt);
 804               		.loc 1 250 0
 805 02c4 B092 0000 		sts flag_amb_prim,r11
 806 02c8 00C0      		rjmp .L86
 807               	.LVL68:
 808               	.L28:
 221:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 809               		.loc 1 221 0
 810 02ca 65E0      		ldi r22,lo8(5)
 811 02cc 89E2      		ldi r24,lo8(41)
 812 02ce 90E0      		ldi r25,0
 813 02d0 0E94 0000 		call _pal_lld_setlineid
 814               	.LVL69:
 815 02d4 0E94 0000 		call _pal_lld_getpadfromline
 816               	.LVL70:
 817 02d8 782E      		mov r7,r24
 818 02da 65E0      		ldi r22,lo8(5)
 819 02dc 89E2      		ldi r24,lo8(41)
 820 02de 90E0      		ldi r25,0
 821 02e0 0E94 0000 		call _pal_lld_setlineid
 822               	.LVL71:
 823 02e4 0E94 0000 		call _pal_lld_getportfromline
 824               	.LVL72:
 825 02e8 FC01      		movw r30,r24
 826 02ea 9281      		ldd r25,Z+2
 827 02ec 9701      		movw r18,r14
 828 02ee 00C0      		rjmp 2f
 829               		1:
 830 02f0 220F      		lsl r18
 831               		2:
 832 02f2 7A94      		dec r7
 833 02f4 02F4      		brpl 1b
 834 02f6 922B      		or r25,r18
 835 02f8 9283      		std Z+2,r25
 836               	.LVL73:
 837               	.LBB364:
 838               	.LBB365:
 839               	.LBB366:
 840               	.LBB367:
 430:../../os/common/ports/AVR/chcore.h **** }
 841               		.loc 3 430 0
 842               	/* #APP */
 843               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 844 02fa F894      		cli
 845               	 ;  0 "" 2
 846               	.LVL74:
 847               	/* #NOAPP */
 848               	.LBE367:
 849               	.LBE366:
 850               	.LBE365:
 851               	.LBB368:
 852               	.LBB369:
 853               	.LBB370:
 854               	.LBB371:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 855               		.loc 2 287 0
 856 02fc 8981      		ldd r24,Y+1
 857 02fe 9A81      		ldd r25,Y+2
 858 0300 892B      		or r24,r25
 859 0302 01F0      		breq .L77
 288:../../os/rt/include/chvt.h ****   }
 860               		.loc 2 288 0
 861 0304 CE01      		movw r24,r28
 862 0306 0196      		adiw r24,1
 863 0308 0E94 0000 		call chVTDoResetI
 864               	.LVL75:
 865               	.L77:
 866               	.LBE371:
 867               	.LBE370:
 868               		.loc 2 335 0
 869 030c 8E01      		movw r16,r28
 870 030e 0F5F      		subi r16,-1
 871 0310 1F4F      		sbci r17,-1
 872 0312 20E0      		ldi r18,lo8(gs(vt_cb))
 873 0314 30E0      		ldi r19,hi8(gs(vt_cb))
 874 0316 40E1      		ldi r20,lo8(16)
 875 0318 5AE7      		ldi r21,lo8(122)
 876 031a 60E0      		ldi r22,0
 877 031c 70E0      		ldi r23,0
 878 031e C801      		movw r24,r16
 879 0320 0E94 0000 		call chVTDoSetI
 880               	.LVL76:
 881               	.LBE369:
 882               	.LBE368:
 883               	.LBB372:
 884               	.LBB373:
 885               	.LBB374:
 886               	.LBB375:
 887               		.loc 3 440 0
 888               	/* #APP */
 889               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 890 0324 7894      		sei
 891               	 ;  0 "" 2
 892               	/* #NOAPP */
 893               	.LBE375:
 894               	.LBE374:
 895               	.LBE373:
 896               	.LBE372:
 897               	.LBE364:
 223:main.c        ****           chThdSleepMilliseconds(100);
 898               		.loc 1 223 0
 899 0326 8091 0000 		lds r24,main_vt_flag
 900 032a 8111      		cpse r24,__zero_reg__
 901 032c 00C0      		rjmp .L78
 902               	.L79:
 224:main.c        ****         }
 903               		.loc 1 224 0
 904 032e 6BE1      		ldi r22,lo8(27)
 905 0330 76E0      		ldi r23,lo8(6)
 906 0332 80E0      		ldi r24,0
 907 0334 90E0      		ldi r25,0
 908 0336 0E94 0000 		call chThdSleep
 909               	.LVL77:
 223:main.c        ****           chThdSleepMilliseconds(100);
 910               		.loc 1 223 0
 911 033a 8091 0000 		lds r24,main_vt_flag
 912 033e 8823      		tst r24
 913 0340 01F0      		breq .L79
 914               	.L78:
 226:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 915               		.loc 1 226 0
 916 0342 1092 0000 		sts main_vt_flag,__zero_reg__
 227:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 917               		.loc 1 227 0
 918 0346 B092 0000 		sts g_state,r11
 919               	.LVL78:
 920               	.L213:
 240:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 921               		.loc 1 240 0
 922 034a 65E0      		ldi r22,lo8(5)
 923 034c 89E2      		ldi r24,lo8(41)
 924 034e 90E0      		ldi r25,0
 925 0350 0E94 0000 		call _pal_lld_setlineid
 926               	.LVL79:
 927 0354 0E94 0000 		call _pal_lld_getpadfromline
 928               	.LVL80:
 929 0358 782E      		mov r7,r24
 930 035a 65E0      		ldi r22,lo8(5)
 931 035c 89E2      		ldi r24,lo8(41)
 932 035e 90E0      		ldi r25,0
 933 0360 0E94 0000 		call _pal_lld_setlineid
 934               	.LVL81:
 935 0364 0E94 0000 		call _pal_lld_getportfromline
 936               	.LVL82:
 937 0368 FC01      		movw r30,r24
 938 036a 9281      		ldd r25,Z+2
 939 036c 9701      		movw r18,r14
 940 036e 00C0      		rjmp 2f
 941               		1:
 942 0370 220F      		lsl r18
 943 0372 331F      		rol r19
 944               		2:
 945 0374 7A94      		dec r7
 946 0376 02F4      		brpl 1b
 947 0378 2095      		com r18
 948 037a 3095      		com r19
 949 037c 9223      		and r25,r18
 950 037e 9283      		std Z+2,r25
 241:main.c        ****         prev_state = SECUNDARIO;
 951               		.loc 1 241 0
 952 0380 60E0      		ldi r22,0
 953 0382 83E2      		ldi r24,lo8(35)
 954 0384 90E0      		ldi r25,0
 955 0386 0E94 0000 		call _pal_lld_setlineid
 956               	.LVL83:
 957 038a 0E94 0000 		call _pal_lld_getpadfromline
 958               	.LVL84:
 959 038e 782E      		mov r7,r24
 960 0390 60E0      		ldi r22,0
 961 0392 83E2      		ldi r24,lo8(35)
 962 0394 90E0      		ldi r25,0
 963 0396 0E94 0000 		call _pal_lld_setlineid
 964               	.LVL85:
 965 039a 0E94 0000 		call _pal_lld_getportfromline
 966               	.LVL86:
 967 039e FC01      		movw r30,r24
 968 03a0 9281      		ldd r25,Z+2
 969 03a2 9701      		movw r18,r14
 970 03a4 00C0      		rjmp 2f
 971               		1:
 972 03a6 220F      		lsl r18
 973               		2:
 974 03a8 7A94      		dec r7
 975 03aa 02F4      		brpl 1b
 976 03ac 922B      		or r25,r18
 977 03ae 9283      		std Z+2,r25
 242:main.c        ****         break;
 978               		.loc 1 242 0
 979 03b0 B092 0000 		sts prev_state,r11
 243:main.c        ****       case VERDE_LOCKED_PED:
 980               		.loc 1 243 0
 981 03b4 00C0      		rjmp .L44
 982               	.LVL87:
 983               	.L27:
 233:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 984               		.loc 1 233 0
 985 03b6 65E0      		ldi r22,lo8(5)
 986 03b8 89E2      		ldi r24,lo8(41)
 987 03ba 90E0      		ldi r25,0
 988 03bc 0E94 0000 		call _pal_lld_setlineid
 989               	.LVL88:
 990 03c0 0E94 0000 		call _pal_lld_getpadfromline
 991               	.LVL89:
 992 03c4 782E      		mov r7,r24
 993 03c6 65E0      		ldi r22,lo8(5)
 994 03c8 89E2      		ldi r24,lo8(41)
 995 03ca 90E0      		ldi r25,0
 996 03cc 0E94 0000 		call _pal_lld_setlineid
 997               	.LVL90:
 998 03d0 0E94 0000 		call _pal_lld_getportfromline
 999               	.LVL91:
 1000 03d4 FC01      		movw r30,r24
 1001 03d6 9281      		ldd r25,Z+2
 1002 03d8 9701      		movw r18,r14
 1003 03da 00C0      		rjmp 2f
 1004               		1:
 1005 03dc 220F      		lsl r18
 1006               		2:
 1007 03de 7A94      		dec r7
 1008 03e0 02F4      		brpl 1b
 1009 03e2 922B      		or r25,r18
 1010 03e4 9283      		std Z+2,r25
 1011               	.LVL92:
 1012               	.LBB376:
 1013               	.LBB377:
 1014               	.LBB378:
 1015               	.LBB379:
 430:../../os/common/ports/AVR/chcore.h **** }
 1016               		.loc 3 430 0
 1017               	/* #APP */
 1018               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1019 03e6 F894      		cli
 1020               	 ;  0 "" 2
 1021               	.LVL93:
 1022               	/* #NOAPP */
 1023               	.LBE379:
 1024               	.LBE378:
 1025               	.LBE377:
 1026               	.LBB380:
 1027               	.LBB381:
 1028               	.LBB382:
 1029               	.LBB383:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1030               		.loc 2 287 0
 1031 03e8 8981      		ldd r24,Y+1
 1032 03ea 9A81      		ldd r25,Y+2
 1033 03ec 892B      		or r24,r25
 1034 03ee 01F0      		breq .L80
 288:../../os/rt/include/chvt.h ****   }
 1035               		.loc 2 288 0
 1036 03f0 CE01      		movw r24,r28
 1037 03f2 0196      		adiw r24,1
 1038 03f4 0E94 0000 		call chVTDoResetI
 1039               	.LVL94:
 1040               	.L80:
 1041               	.LBE383:
 1042               	.LBE382:
 1043               		.loc 2 335 0
 1044 03f8 8E01      		movw r16,r28
 1045 03fa 0F5F      		subi r16,-1
 1046 03fc 1F4F      		sbci r17,-1
 1047 03fe 20E0      		ldi r18,lo8(gs(vt_cb))
 1048 0400 30E0      		ldi r19,hi8(gs(vt_cb))
 1049 0402 40E1      		ldi r20,lo8(16)
 1050 0404 5AE7      		ldi r21,lo8(122)
 1051 0406 60E0      		ldi r22,0
 1052 0408 70E0      		ldi r23,0
 1053 040a C801      		movw r24,r16
 1054 040c 0E94 0000 		call chVTDoSetI
 1055               	.LVL95:
 1056               	.LBE381:
 1057               	.LBE380:
 1058               	.LBB384:
 1059               	.LBB385:
 1060               	.LBB386:
 1061               	.LBB387:
 1062               		.loc 3 440 0
 1063               	/* #APP */
 1064               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1065 0410 7894      		sei
 1066               	 ;  0 "" 2
 1067               	/* #NOAPP */
 1068               	.LBE387:
 1069               	.LBE386:
 1070               	.LBE385:
 1071               	.LBE384:
 1072               	.LBE376:
 235:main.c        ****           chThdSleepMilliseconds(100);
 1073               		.loc 1 235 0
 1074 0412 8091 0000 		lds r24,main_vt_flag
 1075 0416 8111      		cpse r24,__zero_reg__
 1076 0418 00C0      		rjmp .L81
 1077               	.L82:
 236:main.c        ****         }
 1078               		.loc 1 236 0
 1079 041a 6BE1      		ldi r22,lo8(27)
 1080 041c 76E0      		ldi r23,lo8(6)
 1081 041e 80E0      		ldi r24,0
 1082 0420 90E0      		ldi r25,0
 1083 0422 0E94 0000 		call chThdSleep
 1084               	.LVL96:
 235:main.c        ****           chThdSleepMilliseconds(100);
 1085               		.loc 1 235 0
 1086 0426 8091 0000 		lds r24,main_vt_flag
 1087 042a 8823      		tst r24
 1088 042c 01F0      		breq .L82
 1089               	.L81:
 238:main.c        ****         g_state = VERDE_LOCKED_PED;
 1090               		.loc 1 238 0
 1091 042e 1092 0000 		sts main_vt_flag,__zero_reg__
 239:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 1092               		.loc 1 239 0
 1093 0432 A092 0000 		sts g_state,r10
 1094 0436 00C0      		rjmp .L213
 1095               	.LVL97:
 1096               	.L26:
 172:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 1097               		.loc 1 172 0
 1098 0438 60E0      		ldi r22,0
 1099 043a 83E2      		ldi r24,lo8(35)
 1100 043c 90E0      		ldi r25,0
 1101 043e 0E94 0000 		call _pal_lld_setlineid
 1102               	.LVL98:
 1103 0442 0E94 0000 		call _pal_lld_getpadfromline
 1104               	.LVL99:
 1105 0446 782E      		mov r7,r24
 1106 0448 60E0      		ldi r22,0
 1107 044a 83E2      		ldi r24,lo8(35)
 1108 044c 90E0      		ldi r25,0
 1109 044e 0E94 0000 		call _pal_lld_setlineid
 1110               	.LVL100:
 1111 0452 0E94 0000 		call _pal_lld_getportfromline
 1112               	.LVL101:
 1113 0456 FC01      		movw r30,r24
 1114 0458 9281      		ldd r25,Z+2
 1115 045a 9701      		movw r18,r14
 1116 045c 00C0      		rjmp 2f
 1117               		1:
 1118 045e 220F      		lsl r18
 1119 0460 331F      		rol r19
 1120               		2:
 1121 0462 7A94      		dec r7
 1122 0464 02F4      		brpl 1b
 1123 0466 2095      		com r18
 1124 0468 3095      		com r19
 1125 046a 9223      		and r25,r18
 1126 046c 9283      		std Z+2,r25
 173:main.c        ****         if (prev_state == PRIMARIO) {
 1127               		.loc 1 173 0
 1128 046e 61E0      		ldi r22,lo8(1)
 1129 0470 83E2      		ldi r24,lo8(35)
 1130 0472 90E0      		ldi r25,0
 1131 0474 0E94 0000 		call _pal_lld_setlineid
 1132               	.LVL102:
 1133 0478 0E94 0000 		call _pal_lld_getpadfromline
 1134               	.LVL103:
 1135 047c 782E      		mov r7,r24
 1136 047e 61E0      		ldi r22,lo8(1)
 1137 0480 83E2      		ldi r24,lo8(35)
 1138 0482 90E0      		ldi r25,0
 1139 0484 0E94 0000 		call _pal_lld_setlineid
 1140               	.LVL104:
 1141 0488 0E94 0000 		call _pal_lld_getportfromline
 1142               	.LVL105:
 1143 048c FC01      		movw r30,r24
 1144 048e 9281      		ldd r25,Z+2
 1145 0490 9701      		movw r18,r14
 1146 0492 00C0      		rjmp 2f
 1147               		1:
 1148 0494 220F      		lsl r18
 1149               		2:
 1150 0496 7A94      		dec r7
 1151 0498 02F4      		brpl 1b
 1152 049a 922B      		or r25,r18
 1153 049c 9283      		std Z+2,r25
 174:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1154               		.loc 1 174 0
 1155 049e 8091 0000 		lds r24,prev_state
 1156 04a2 8530      		cpi r24,lo8(5)
 1157 04a4 01F4      		brne .+2
 1158 04a6 00C0      		rjmp .L218
 187:main.c        ****         chVTSet(&main_vt, TIME_MS2I((prev_state == PRIMARIO) ? 1000 : 6000), (vtfunc_t)vt_cb, (void
 1159               		.loc 1 187 0
 1160 04a8 1092 0000 		sts main_vt_flag,__zero_reg__
 188:main.c        ****         while (!main_vt_flag) {
 1161               		.loc 1 188 0
 1162 04ac 80E3      		ldi r24,lo8(48)
 1163 04ae 482E      		mov r4,r24
 1164 04b0 8EE6      		ldi r24,lo8(110)
 1165 04b2 582E      		mov r5,r24
 1166 04b4 6624      		clr r6
 1167 04b6 6394      		inc r6
 1168 04b8 712C      		mov r7,__zero_reg__
 1169               	.L62:
 1170               	.LVL106:
 1171               	.LBB388:
 1172               	.LBB389:
 1173               	.LBB390:
 1174               	.LBB391:
 430:../../os/common/ports/AVR/chcore.h **** }
 1175               		.loc 3 430 0 discriminator 4
 1176               	/* #APP */
 1177               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1178 04ba F894      		cli
 1179               	 ;  0 "" 2
 1180               	.LVL107:
 1181               	/* #NOAPP */
 1182               	.LBE391:
 1183               	.LBE390:
 1184               	.LBE389:
 1185               	.LBB392:
 1186               	.LBB393:
 1187               	.LBB394:
 1188               	.LBB395:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1189               		.loc 2 287 0 discriminator 4
 1190 04bc 8981      		ldd r24,Y+1
 1191 04be 9A81      		ldd r25,Y+2
 1192 04c0 892B      		or r24,r25
 1193 04c2 01F0      		breq .L63
 288:../../os/rt/include/chvt.h ****   }
 1194               		.loc 2 288 0
 1195 04c4 CE01      		movw r24,r28
 1196 04c6 0196      		adiw r24,1
 1197 04c8 0E94 0000 		call chVTDoResetI
 1198               	.LVL108:
 1199               	.L63:
 1200               	.LBE395:
 1201               	.LBE394:
 1202               		.loc 2 335 0
 1203 04cc 8E01      		movw r16,r28
 1204 04ce 0F5F      		subi r16,-1
 1205 04d0 1F4F      		sbci r17,-1
 1206 04d2 20E0      		ldi r18,lo8(gs(vt_cb))
 1207 04d4 30E0      		ldi r19,hi8(gs(vt_cb))
 1208 04d6 B301      		movw r22,r6
 1209 04d8 A201      		movw r20,r4
 1210 04da C801      		movw r24,r16
 1211 04dc 0E94 0000 		call chVTDoSetI
 1212               	.LVL109:
 1213               	.LBE393:
 1214               	.LBE392:
 1215               	.LBB396:
 1216               	.LBB397:
 1217               	.LBB398:
 1218               	.LBB399:
 1219               		.loc 3 440 0
 1220               	/* #APP */
 1221               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1222 04e0 7894      		sei
 1223               	 ;  0 "" 2
 1224               	/* #NOAPP */
 1225               	.LBE399:
 1226               	.LBE398:
 1227               	.LBE397:
 1228               	.LBE396:
 1229               	.LBE388:
 189:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 1230               		.loc 1 189 0
 1231 04e2 8091 0000 		lds r24,main_vt_flag
 1232 04e6 8823      		tst r24
 1233 04e8 01F0      		breq .L68
 1234 04ea 00C0      		rjmp .L64
 1235               	.L65:
 194:main.c        ****             dequeue();
 1236               		.loc 1 194 0
 1237 04ec 0497      		sbiw r24,4
 1238 04ee 01F4      		brne .+2
 1239 04f0 00C0      		rjmp .L219
 1240               	.L67:
 198:main.c        ****         }
 1241               		.loc 1 198 0
 1242 04f2 6BE1      		ldi r22,lo8(27)
 1243 04f4 76E0      		ldi r23,lo8(6)
 1244 04f6 80E0      		ldi r24,0
 1245 04f8 90E0      		ldi r25,0
 1246 04fa 0E94 0000 		call chThdSleep
 1247               	.LVL110:
 189:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 1248               		.loc 1 189 0
 1249 04fe 8091 0000 		lds r24,main_vt_flag
 1250 0502 8111      		cpse r24,__zero_reg__
 1251 0504 00C0      		rjmp .L64
 1252               	.L68:
 190:main.c        ****             flag_amb_prim = 1;
 1253               		.loc 1 190 0
 1254 0506 E091 0000 		lds r30,rdp
 1255 050a F091 0000 		lds r31,rdp+1
 1256 050e 8081      		ld r24,Z
 1257 0510 9181      		ldd r25,Z+1
 1258 0512 8330      		cpi r24,3
 1259 0514 9105      		cpc r25,__zero_reg__
 1260 0516 01F4      		brne .L65
 191:main.c        ****             chVTReset(&main_vt);
 1261               		.loc 1 191 0
 1262 0518 B092 0000 		sts flag_amb_prim,r11
 1263               	.LVL111:
 1264               	.LBB400:
 1265               	.LBB401:
 1266               	.LBB402:
 1267               	.LBB403:
 430:../../os/common/ports/AVR/chcore.h **** }
 1268               		.loc 3 430 0
 1269               	/* #APP */
 1270               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1271 051c F894      		cli
 1272               	 ;  0 "" 2
 1273               	.LVL112:
 1274               	/* #NOAPP */
 1275               	.LBE403:
 1276               	.LBE402:
 1277               	.LBE401:
 1278               	.LBB404:
 1279               	.LBB405:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1280               		.loc 2 287 0
 1281 051e 8981      		ldd r24,Y+1
 1282 0520 9A81      		ldd r25,Y+2
 1283 0522 892B      		or r24,r25
 1284 0524 01F0      		breq .L66
 288:../../os/rt/include/chvt.h ****   }
 1285               		.loc 2 288 0
 1286 0526 CE01      		movw r24,r28
 1287 0528 0196      		adiw r24,1
 1288 052a 0E94 0000 		call chVTDoResetI
 1289               	.LVL113:
 1290               	.L66:
 1291               	.LBE405:
 1292               	.LBE404:
 1293               	.LBB406:
 1294               	.LBB407:
 1295               	.LBB408:
 1296               	.LBB409:
 1297               		.loc 3 440 0
 1298               	/* #APP */
 1299               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1300 052e 7894      		sei
 1301               	 ;  0 "" 2
 1302               	.LVL114:
 1303               	/* #NOAPP */
 1304               	.LBE409:
 1305               	.LBE408:
 1306               	.LBE407:
 1307               	.LBE406:
 1308               	.LBE400:
 193:main.c        ****           } else if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 1309               		.loc 1 193 0
 1310 0530 B092 0000 		sts main_vt_flag,r11
 1311 0534 00C0      		rjmp .L67
 1312               	.LVL115:
 1313               	.L25:
 148:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1314               		.loc 1 148 0
 1315 0536 64E0      		ldi r22,lo8(4)
 1316 0538 89E2      		ldi r24,lo8(41)
 1317 053a 90E0      		ldi r25,0
 1318 053c 0E94 0000 		call _pal_lld_setlineid
 1319               	.LVL116:
 1320 0540 0E94 0000 		call _pal_lld_getpadfromline
 1321               	.LVL117:
 1322 0544 782E      		mov r7,r24
 1323 0546 64E0      		ldi r22,lo8(4)
 1324 0548 89E2      		ldi r24,lo8(41)
 1325 054a 90E0      		ldi r25,0
 1326 054c 0E94 0000 		call _pal_lld_setlineid
 1327               	.LVL118:
 1328 0550 0E94 0000 		call _pal_lld_getportfromline
 1329               	.LVL119:
 1330 0554 FC01      		movw r30,r24
 1331 0556 9281      		ldd r25,Z+2
 1332 0558 9701      		movw r18,r14
 1333 055a 00C0      		rjmp 2f
 1334               		1:
 1335 055c 220F      		lsl r18
 1336               		2:
 1337 055e 7A94      		dec r7
 1338 0560 02F4      		brpl 1b
 1339 0562 922B      		or r25,r18
 1340 0564 9283      		std Z+2,r25
 1341               	.LVL120:
 1342               	.LBB410:
 1343               	.LBB411:
 1344               	.LBB412:
 1345               	.LBB413:
 430:../../os/common/ports/AVR/chcore.h **** }
 1346               		.loc 3 430 0
 1347               	/* #APP */
 1348               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1349 0566 F894      		cli
 1350               	 ;  0 "" 2
 1351               	.LVL121:
 1352               	/* #NOAPP */
 1353               	.LBE413:
 1354               	.LBE412:
 1355               	.LBE411:
 1356               	.LBB414:
 1357               	.LBB415:
 1358               	.LBB416:
 1359               	.LBB417:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1360               		.loc 2 287 0
 1361 0568 8981      		ldd r24,Y+1
 1362 056a 9A81      		ldd r25,Y+2
 1363 056c 892B      		or r24,r25
 1364 056e 01F0      		breq .L50
 288:../../os/rt/include/chvt.h ****   }
 1365               		.loc 2 288 0
 1366 0570 CE01      		movw r24,r28
 1367 0572 0196      		adiw r24,1
 1368 0574 0E94 0000 		call chVTDoResetI
 1369               	.LVL122:
 1370               	.L50:
 1371               	.LBE417:
 1372               	.LBE416:
 1373               		.loc 2 335 0
 1374 0578 8E01      		movw r16,r28
 1375 057a 0F5F      		subi r16,-1
 1376 057c 1F4F      		sbci r17,-1
 1377 057e 20E0      		ldi r18,lo8(gs(vt_cb))
 1378 0580 30E0      		ldi r19,hi8(gs(vt_cb))
 1379 0582 40E1      		ldi r20,lo8(16)
 1380 0584 5AE7      		ldi r21,lo8(122)
 1381 0586 60E0      		ldi r22,0
 1382 0588 70E0      		ldi r23,0
 1383 058a C801      		movw r24,r16
 1384 058c 0E94 0000 		call chVTDoSetI
 1385               	.LVL123:
 1386               	.LBE415:
 1387               	.LBE414:
 1388               	.LBB418:
 1389               	.LBB419:
 1390               	.LBB420:
 1391               	.LBB421:
 1392               		.loc 3 440 0
 1393               	/* #APP */
 1394               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1395 0590 7894      		sei
 1396               	 ;  0 "" 2
 1397               	/* #NOAPP */
 1398               	.LBE421:
 1399               	.LBE420:
 1400               	.LBE419:
 1401               	.LBE418:
 1402               	.LBE410:
 150:main.c        ****           chThdSleepMilliseconds(100);
 1403               		.loc 1 150 0
 1404 0592 8091 0000 		lds r24,main_vt_flag
 1405 0596 8111      		cpse r24,__zero_reg__
 1406 0598 00C0      		rjmp .L51
 1407               	.L52:
 151:main.c        ****         }
 1408               		.loc 1 151 0
 1409 059a 6BE1      		ldi r22,lo8(27)
 1410 059c 76E0      		ldi r23,lo8(6)
 1411 059e 80E0      		ldi r24,0
 1412 05a0 90E0      		ldi r25,0
 1413 05a2 0E94 0000 		call chThdSleep
 1414               	.LVL124:
 150:main.c        ****           chThdSleepMilliseconds(100);
 1415               		.loc 1 150 0
 1416 05a6 8091 0000 		lds r24,main_vt_flag
 1417 05aa 8823      		tst r24
 1418 05ac 01F0      		breq .L52
 1419               	.L51:
 153:main.c        ****         g_state = VERDE_LOCKED_SEC;
 1420               		.loc 1 153 0
 1421 05ae 1092 0000 		sts main_vt_flag,__zero_reg__
 154:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1422               		.loc 1 154 0
 1423 05b2 9092 0000 		sts g_state,r9
 1424               	.LVL125:
 1425               	.L211:
 167:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 1426               		.loc 1 167 0
 1427 05b6 64E0      		ldi r22,lo8(4)
 1428 05b8 89E2      		ldi r24,lo8(41)
 1429 05ba 90E0      		ldi r25,0
 1430 05bc 0E94 0000 		call _pal_lld_setlineid
 1431               	.LVL126:
 1432 05c0 0E94 0000 		call _pal_lld_getpadfromline
 1433               	.LVL127:
 1434 05c4 782E      		mov r7,r24
 1435 05c6 64E0      		ldi r22,lo8(4)
 1436 05c8 89E2      		ldi r24,lo8(41)
 1437 05ca 90E0      		ldi r25,0
 1438 05cc 0E94 0000 		call _pal_lld_setlineid
 1439               	.LVL128:
 1440 05d0 0E94 0000 		call _pal_lld_getportfromline
 1441               	.LVL129:
 1442 05d4 FC01      		movw r30,r24
 1443 05d6 9281      		ldd r25,Z+2
 1444 05d8 9701      		movw r18,r14
 1445 05da 00C0      		rjmp 2f
 1446               		1:
 1447 05dc 220F      		lsl r18
 1448 05de 331F      		rol r19
 1449               		2:
 1450 05e0 7A94      		dec r7
 1451 05e2 02F4      		brpl 1b
 1452 05e4 2095      		com r18
 1453 05e6 3095      		com r19
 1454 05e8 9223      		and r25,r18
 1455 05ea 9283      		std Z+2,r25
 168:main.c        ****         prev_state = PRIMARIO;
 1456               		.loc 1 168 0
 1457 05ec 66E0      		ldi r22,lo8(6)
 1458 05ee 89E2      		ldi r24,lo8(41)
 1459 05f0 90E0      		ldi r25,0
 1460 05f2 0E94 0000 		call _pal_lld_setlineid
 1461               	.LVL130:
 1462 05f6 0E94 0000 		call _pal_lld_getpadfromline
 1463               	.LVL131:
 1464 05fa 782E      		mov r7,r24
 1465 05fc 66E0      		ldi r22,lo8(6)
 1466 05fe 89E2      		ldi r24,lo8(41)
 1467 0600 90E0      		ldi r25,0
 1468 0602 0E94 0000 		call _pal_lld_setlineid
 1469               	.LVL132:
 1470 0606 0E94 0000 		call _pal_lld_getportfromline
 1471               	.LVL133:
 1472 060a FC01      		movw r30,r24
 1473 060c 9281      		ldd r25,Z+2
 1474 060e 9701      		movw r18,r14
 1475 0610 00C0      		rjmp 2f
 1476               		1:
 1477 0612 220F      		lsl r18
 1478               		2:
 1479 0614 7A94      		dec r7
 1480 0616 02F4      		brpl 1b
 1481 0618 922B      		or r25,r18
 1482 061a 9283      		std Z+2,r25
 169:main.c        ****         break;
 1483               		.loc 1 169 0
 1484 061c 85E0      		ldi r24,lo8(5)
 1485 061e 8093 0000 		sts prev_state,r24
 170:main.c        ****       case VERDE_LOCKED_SEC:
 1486               		.loc 1 170 0
 1487 0622 00C0      		rjmp .L44
 1488               	.LVL134:
 1489               	.L24:
 160:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1490               		.loc 1 160 0
 1491 0624 64E0      		ldi r22,lo8(4)
 1492 0626 89E2      		ldi r24,lo8(41)
 1493 0628 90E0      		ldi r25,0
 1494 062a 0E94 0000 		call _pal_lld_setlineid
 1495               	.LVL135:
 1496 062e 0E94 0000 		call _pal_lld_getpadfromline
 1497               	.LVL136:
 1498 0632 782E      		mov r7,r24
 1499 0634 64E0      		ldi r22,lo8(4)
 1500 0636 89E2      		ldi r24,lo8(41)
 1501 0638 90E0      		ldi r25,0
 1502 063a 0E94 0000 		call _pal_lld_setlineid
 1503               	.LVL137:
 1504 063e 0E94 0000 		call _pal_lld_getportfromline
 1505               	.LVL138:
 1506 0642 FC01      		movw r30,r24
 1507 0644 9281      		ldd r25,Z+2
 1508 0646 9701      		movw r18,r14
 1509 0648 00C0      		rjmp 2f
 1510               		1:
 1511 064a 220F      		lsl r18
 1512               		2:
 1513 064c 7A94      		dec r7
 1514 064e 02F4      		brpl 1b
 1515 0650 922B      		or r25,r18
 1516 0652 9283      		std Z+2,r25
 1517               	.LVL139:
 1518               	.LBB422:
 1519               	.LBB423:
 1520               	.LBB424:
 1521               	.LBB425:
 430:../../os/common/ports/AVR/chcore.h **** }
 1522               		.loc 3 430 0
 1523               	/* #APP */
 1524               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1525 0654 F894      		cli
 1526               	 ;  0 "" 2
 1527               	.LVL140:
 1528               	/* #NOAPP */
 1529               	.LBE425:
 1530               	.LBE424:
 1531               	.LBE423:
 1532               	.LBB426:
 1533               	.LBB427:
 1534               	.LBB428:
 1535               	.LBB429:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1536               		.loc 2 287 0
 1537 0656 8981      		ldd r24,Y+1
 1538 0658 9A81      		ldd r25,Y+2
 1539 065a 892B      		or r24,r25
 1540 065c 01F0      		breq .L53
 288:../../os/rt/include/chvt.h ****   }
 1541               		.loc 2 288 0
 1542 065e CE01      		movw r24,r28
 1543 0660 0196      		adiw r24,1
 1544 0662 0E94 0000 		call chVTDoResetI
 1545               	.LVL141:
 1546               	.L53:
 1547               	.LBE429:
 1548               	.LBE428:
 1549               		.loc 2 335 0
 1550 0666 8E01      		movw r16,r28
 1551 0668 0F5F      		subi r16,-1
 1552 066a 1F4F      		sbci r17,-1
 1553 066c 20E0      		ldi r18,lo8(gs(vt_cb))
 1554 066e 30E0      		ldi r19,hi8(gs(vt_cb))
 1555 0670 40E1      		ldi r20,lo8(16)
 1556 0672 5AE7      		ldi r21,lo8(122)
 1557 0674 60E0      		ldi r22,0
 1558 0676 70E0      		ldi r23,0
 1559 0678 C801      		movw r24,r16
 1560 067a 0E94 0000 		call chVTDoSetI
 1561               	.LVL142:
 1562               	.LBE427:
 1563               	.LBE426:
 1564               	.LBB430:
 1565               	.LBB431:
 1566               	.LBB432:
 1567               	.LBB433:
 1568               		.loc 3 440 0
 1569               	/* #APP */
 1570               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1571 067e 7894      		sei
 1572               	 ;  0 "" 2
 1573               	/* #NOAPP */
 1574               	.LBE433:
 1575               	.LBE432:
 1576               	.LBE431:
 1577               	.LBE430:
 1578               	.LBE422:
 162:main.c        ****           chThdSleepMilliseconds(100);
 1579               		.loc 1 162 0
 1580 0680 8091 0000 		lds r24,main_vt_flag
 1581 0684 8111      		cpse r24,__zero_reg__
 1582 0686 00C0      		rjmp .L54
 1583               	.L55:
 163:main.c        ****         }
 1584               		.loc 1 163 0
 1585 0688 6BE1      		ldi r22,lo8(27)
 1586 068a 76E0      		ldi r23,lo8(6)
 1587 068c 80E0      		ldi r24,0
 1588 068e 90E0      		ldi r25,0
 1589 0690 0E94 0000 		call chThdSleep
 1590               	.LVL143:
 162:main.c        ****           chThdSleepMilliseconds(100);
 1591               		.loc 1 162 0
 1592 0694 8091 0000 		lds r24,main_vt_flag
 1593 0698 8823      		tst r24
 1594 069a 01F0      		breq .L55
 1595               	.L54:
 165:main.c        ****         g_state = VERDE_LOCKED_PED;
 1596               		.loc 1 165 0
 1597 069c 1092 0000 		sts main_vt_flag,__zero_reg__
 166:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1598               		.loc 1 166 0
 1599 06a0 A092 0000 		sts g_state,r10
 1600 06a4 00C0      		rjmp .L211
 1601               	.LVL144:
 1602               	.L23:
 132:main.c        ****         if (ev == AMB_PRIMARIO) {
 1603               		.loc 1 132 0
 1604 06a6 0E94 0000 		call dequeue
 1605               	.LVL145:
 1606 06aa 6C01      		movw r12,r24
 1607               	.LVL146:
 133:main.c        ****           flag_amb_prim = !flag_amb_prim;
 1608               		.loc 1 133 0
 1609 06ac 83E0      		ldi r24,3
 1610 06ae C816      		cp r12,r24
 1611 06b0 D104      		cpc r13,__zero_reg__
 1612 06b2 01F4      		brne .+2
 1613 06b4 00C0      		rjmp .L220
 1614 06b6 8091 0000 		lds r24,flag_amb_prim
 136:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1615               		.loc 1 136 0
 1616 06ba 91E0      		ldi r25,1
 1617 06bc C916      		cp r12,r25
 1618 06be D104      		cpc r13,__zero_reg__
 1619 06c0 01F4      		brne .+2
 1620 06c2 00C0      		rjmp .L47
 136:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1621               		.loc 1 136 0 is_stmt 0 discriminator 2
 1622 06c4 E4E0      		ldi r30,4
 1623 06c6 CE16      		cp r12,r30
 1624 06c8 D104      		cpc r13,__zero_reg__
 1625 06ca 01F0      		breq .+2
 1626 06cc 00C0      		rjmp .L221
 136:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1627               		.loc 1 136 0
 1628 06ce 8111      		cpse r24,__zero_reg__
 1629 06d0 00C0      		rjmp .L44
 138:main.c        ****           }
 1630               		.loc 1 138 0 is_stmt 1
 1631 06d2 B092 0000 		sts flag_amb_sec,r11
 1632               	.L103:
 140:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1633               		.loc 1 140 0
 1634 06d6 84E0      		ldi r24,lo8(4)
 1635               	.L217:
 143:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1636               		.loc 1 143 0
 1637 06d8 8093 0000 		sts g_state,r24
 144:main.c        ****         }
 1638               		.loc 1 144 0
 1639 06dc 67E0      		ldi r22,lo8(7)
 1640 06de 89E2      		ldi r24,lo8(41)
 1641 06e0 90E0      		ldi r25,0
 1642 06e2 0E94 0000 		call _pal_lld_setlineid
 1643               	.LVL147:
 1644 06e6 0E94 0000 		call _pal_lld_getpadfromline
 1645               	.LVL148:
 1646 06ea 782E      		mov r7,r24
 1647 06ec 67E0      		ldi r22,lo8(7)
 1648 06ee 89E2      		ldi r24,lo8(41)
 1649 06f0 90E0      		ldi r25,0
 1650               	.L210:
 214:main.c        ****         } else {
 1651               		.loc 1 214 0
 1652 06f2 0E94 0000 		call _pal_lld_setlineid
 1653               	.LVL149:
 1654 06f6 0E94 0000 		call _pal_lld_getportfromline
 1655               	.LVL150:
 1656 06fa FC01      		movw r30,r24
 1657 06fc 9281      		ldd r25,Z+2
 1658 06fe 9701      		movw r18,r14
 1659 0700 00C0      		rjmp 2f
 1660               		1:
 1661 0702 220F      		lsl r18
 1662 0704 331F      		rol r19
 1663               		2:
 1664 0706 7A94      		dec r7
 1665 0708 02F4      		brpl 1b
 1666 070a 2095      		com r18
 1667 070c 3095      		com r19
 1668 070e 9223      		and r25,r18
 1669 0710 9283      		std Z+2,r25
 1670 0712 00C0      		rjmp .L44
 1671               	.L21:
 106:main.c        ****         palSetLine(PRIMARIO_VERDE);
 1672               		.loc 1 106 0
 1673 0714 66E0      		ldi r22,lo8(6)
 1674 0716 89E2      		ldi r24,lo8(41)
 1675 0718 90E0      		ldi r25,0
 1676 071a 0E94 0000 		call _pal_lld_setlineid
 1677               	.LVL151:
 1678 071e 0E94 0000 		call _pal_lld_getpadfromline
 1679               	.LVL152:
 1680 0722 782E      		mov r7,r24
 1681 0724 66E0      		ldi r22,lo8(6)
 1682 0726 89E2      		ldi r24,lo8(41)
 1683 0728 90E0      		ldi r25,0
 1684 072a 0E94 0000 		call _pal_lld_setlineid
 1685               	.LVL153:
 1686 072e 0E94 0000 		call _pal_lld_getportfromline
 1687               	.LVL154:
 1688 0732 FC01      		movw r30,r24
 1689 0734 9281      		ldd r25,Z+2
 1690 0736 9701      		movw r18,r14
 1691 0738 00C0      		rjmp 2f
 1692               		1:
 1693 073a 220F      		lsl r18
 1694 073c 331F      		rol r19
 1695               		2:
 1696 073e 7A94      		dec r7
 1697 0740 02F4      		brpl 1b
 1698 0742 2095      		com r18
 1699 0744 3095      		com r19
 1700 0746 9223      		and r25,r18
 1701 0748 9283      		std Z+2,r25
 107:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 1702               		.loc 1 107 0
 1703 074a 67E0      		ldi r22,lo8(7)
 1704 074c 89E2      		ldi r24,lo8(41)
 1705 074e 90E0      		ldi r25,0
 1706 0750 0E94 0000 		call _pal_lld_setlineid
 1707               	.LVL155:
 1708 0754 0E94 0000 		call _pal_lld_getpadfromline
 1709               	.LVL156:
 1710 0758 782E      		mov r7,r24
 1711 075a 67E0      		ldi r22,lo8(7)
 1712 075c 89E2      		ldi r24,lo8(41)
 1713 075e 90E0      		ldi r25,0
 1714 0760 0E94 0000 		call _pal_lld_setlineid
 1715               	.LVL157:
 1716 0764 0E94 0000 		call _pal_lld_getportfromline
 1717               	.LVL158:
 1718 0768 FC01      		movw r30,r24
 1719 076a 9281      		ldd r25,Z+2
 1720 076c 9701      		movw r18,r14
 1721 076e 00C0      		rjmp 2f
 1722               		1:
 1723 0770 220F      		lsl r18
 1724               		2:
 1725 0772 7A94      		dec r7
 1726 0774 02F4      		brpl 1b
 1727 0776 922B      		or r25,r18
 1728 0778 9283      		std Z+2,r25
 108:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 1729               		.loc 1 108 0
 1730 077a 60E0      		ldi r22,0
 1731 077c 83E2      		ldi r24,lo8(35)
 1732 077e 90E0      		ldi r25,0
 1733 0780 0E94 0000 		call _pal_lld_setlineid
 1734               	.LVL159:
 1735 0784 0E94 0000 		call _pal_lld_getpadfromline
 1736               	.LVL160:
 1737 0788 782E      		mov r7,r24
 1738 078a 60E0      		ldi r22,0
 1739 078c 83E2      		ldi r24,lo8(35)
 1740 078e 90E0      		ldi r25,0
 1741 0790 0E94 0000 		call _pal_lld_setlineid
 1742               	.LVL161:
 1743 0794 0E94 0000 		call _pal_lld_getportfromline
 1744               	.LVL162:
 1745 0798 FC01      		movw r30,r24
 1746 079a 9281      		ldd r25,Z+2
 1747 079c 9701      		movw r18,r14
 1748 079e 00C0      		rjmp 2f
 1749               		1:
 1750 07a0 220F      		lsl r18
 1751               		2:
 1752 07a2 7A94      		dec r7
 1753 07a4 02F4      		brpl 1b
 1754 07a6 922B      		or r25,r18
 1755 07a8 9283      		std Z+2,r25
 109:main.c        ****         if (prev_state == SECUNDARIO) {
 1756               		.loc 1 109 0
 1757 07aa 62E0      		ldi r22,lo8(2)
 1758 07ac 83E2      		ldi r24,lo8(35)
 1759 07ae 90E0      		ldi r25,0
 1760 07b0 0E94 0000 		call _pal_lld_setlineid
 1761               	.LVL163:
 1762 07b4 0E94 0000 		call _pal_lld_getpadfromline
 1763               	.LVL164:
 1764 07b8 782E      		mov r7,r24
 1765 07ba 62E0      		ldi r22,lo8(2)
 1766 07bc 83E2      		ldi r24,lo8(35)
 1767 07be 90E0      		ldi r25,0
 1768 07c0 0E94 0000 		call _pal_lld_setlineid
 1769               	.LVL165:
 1770 07c4 0E94 0000 		call _pal_lld_getportfromline
 1771               	.LVL166:
 1772 07c8 FC01      		movw r30,r24
 1773 07ca 9281      		ldd r25,Z+2
 1774 07cc 9701      		movw r18,r14
 1775 07ce 00C0      		rjmp 2f
 1776               		1:
 1777 07d0 220F      		lsl r18
 1778               		2:
 1779 07d2 7A94      		dec r7
 1780 07d4 02F4      		brpl 1b
 1781 07d6 922B      		or r25,r18
 1782 07d8 9283      		std Z+2,r25
 110:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1783               		.loc 1 110 0
 1784 07da 8091 0000 		lds r24,prev_state
 1785 07de 8130      		cpi r24,lo8(1)
 1786 07e0 01F4      		brne .+2
 1787 07e2 00C0      		rjmp .L222
 119:main.c        ****         chVTSet(&main_vt, TIME_MS2I(prev_state == SECUNDARIO ? 5000 : 10000), (vtfunc_t)vt_cb, (voi
 1788               		.loc 1 119 0
 1789 07e4 1092 0000 		sts main_vt_flag,__zero_reg__
 120:main.c        ****         while (!main_vt_flag) {
 1790               		.loc 1 120 0
 1791 07e8 90E5      		ldi r25,lo8(80)
 1792 07ea 492E      		mov r4,r25
 1793 07ec 92E6      		ldi r25,lo8(98)
 1794 07ee 592E      		mov r5,r25
 1795 07f0 92E0      		ldi r25,lo8(2)
 1796 07f2 692E      		mov r6,r25
 1797 07f4 712C      		mov r7,__zero_reg__
 1798               	.L38:
 1799               	.LVL167:
 1800               	.LBB434:
 1801               	.LBB435:
 1802               	.LBB436:
 1803               	.LBB437:
 430:../../os/common/ports/AVR/chcore.h **** }
 1804               		.loc 3 430 0 discriminator 4
 1805               	/* #APP */
 1806               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1807 07f6 F894      		cli
 1808               	 ;  0 "" 2
 1809               	.LVL168:
 1810               	/* #NOAPP */
 1811               	.LBE437:
 1812               	.LBE436:
 1813               	.LBE435:
 1814               	.LBB438:
 1815               	.LBB439:
 1816               	.LBB440:
 1817               	.LBB441:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1818               		.loc 2 287 0 discriminator 4
 1819 07f8 8981      		ldd r24,Y+1
 1820 07fa 9A81      		ldd r25,Y+2
 1821 07fc 892B      		or r24,r25
 1822 07fe 01F0      		breq .L39
 288:../../os/rt/include/chvt.h ****   }
 1823               		.loc 2 288 0
 1824 0800 CE01      		movw r24,r28
 1825 0802 0196      		adiw r24,1
 1826 0804 0E94 0000 		call chVTDoResetI
 1827               	.LVL169:
 1828               	.L39:
 1829               	.LBE441:
 1830               	.LBE440:
 1831               		.loc 2 335 0
 1832 0808 8E01      		movw r16,r28
 1833 080a 0F5F      		subi r16,-1
 1834 080c 1F4F      		sbci r17,-1
 1835 080e 20E0      		ldi r18,lo8(gs(vt_cb))
 1836 0810 30E0      		ldi r19,hi8(gs(vt_cb))
 1837 0812 B301      		movw r22,r6
 1838 0814 A201      		movw r20,r4
 1839 0816 C801      		movw r24,r16
 1840 0818 0E94 0000 		call chVTDoSetI
 1841               	.LVL170:
 1842               	.LBE439:
 1843               	.LBE438:
 1844               	.LBB442:
 1845               	.LBB443:
 1846               	.LBB444:
 1847               	.LBB445:
 1848               		.loc 3 440 0
 1849               	/* #APP */
 1850               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1851 081c 7894      		sei
 1852               	 ;  0 "" 2
 1853               	/* #NOAPP */
 1854               	.LBE445:
 1855               	.LBE444:
 1856               	.LBE443:
 1857               	.LBE442:
 1858               	.LBE434:
 121:main.c        ****           if ((*rdp == AMB_SECUNDARIO)) {
 1859               		.loc 1 121 0
 1860 081e 8091 0000 		lds r24,main_vt_flag
 1861 0822 8823      		tst r24
 1862 0824 01F0      		breq .L43
 1863 0826 00C0      		rjmp .L40
 1864               	.L41:
 126:main.c        ****         }
 1865               		.loc 1 126 0
 1866 0828 6BE1      		ldi r22,lo8(27)
 1867 082a 76E0      		ldi r23,lo8(6)
 1868 082c 80E0      		ldi r24,0
 1869 082e 90E0      		ldi r25,0
 1870 0830 0E94 0000 		call chThdSleep
 1871               	.LVL171:
 121:main.c        ****           if ((*rdp == AMB_SECUNDARIO)) {
 1872               		.loc 1 121 0
 1873 0834 8091 0000 		lds r24,main_vt_flag
 1874 0838 8111      		cpse r24,__zero_reg__
 1875 083a 00C0      		rjmp .L40
 1876               	.L43:
 122:main.c        ****             chVTReset(&main_vt);
 1877               		.loc 1 122 0
 1878 083c E091 0000 		lds r30,rdp
 1879 0840 F091 0000 		lds r31,rdp+1
 1880 0844 8081      		ld r24,Z
 1881 0846 9181      		ldd r25,Z+1
 1882 0848 0497      		sbiw r24,4
 1883 084a 01F4      		brne .L41
 1884               	.LVL172:
 1885               	.LBB446:
 1886               	.LBB447:
 1887               	.LBB448:
 1888               	.LBB449:
 430:../../os/common/ports/AVR/chcore.h **** }
 1889               		.loc 3 430 0
 1890               	/* #APP */
 1891               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1892 084c F894      		cli
 1893               	 ;  0 "" 2
 1894               	.LVL173:
 1895               	/* #NOAPP */
 1896               	.LBE449:
 1897               	.LBE448:
 1898               	.LBE447:
 1899               	.LBB450:
 1900               	.LBB451:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1901               		.loc 2 287 0
 1902 084e 8981      		ldd r24,Y+1
 1903 0850 9A81      		ldd r25,Y+2
 1904 0852 892B      		or r24,r25
 1905 0854 01F0      		breq .L42
 288:../../os/rt/include/chvt.h ****   }
 1906               		.loc 2 288 0
 1907 0856 CE01      		movw r24,r28
 1908 0858 0196      		adiw r24,1
 1909 085a 0E94 0000 		call chVTDoResetI
 1910               	.LVL174:
 1911               	.L42:
 1912               	.LBE451:
 1913               	.LBE450:
 1914               	.LBB452:
 1915               	.LBB453:
 1916               	.LBB454:
 1917               	.LBB455:
 1918               		.loc 3 440 0
 1919               	/* #APP */
 1920               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1921 085e 7894      		sei
 1922               	 ;  0 "" 2
 1923               	.LVL175:
 1924               	/* #NOAPP */
 1925               	.LBE455:
 1926               	.LBE454:
 1927               	.LBE453:
 1928               	.LBE452:
 1929               	.LBE446:
 124:main.c        ****           }
 1930               		.loc 1 124 0
 1931 0860 B092 0000 		sts main_vt_flag,r11
 1932 0864 00C0      		rjmp .L41
 1933               	.LVL176:
 1934               	.L219:
 194:main.c        ****             dequeue();
 1935               		.loc 1 194 0 discriminator 1
 1936 0866 8091 0000 		lds r24,flag_amb_sec
 1937 086a 8111      		cpse r24,__zero_reg__
 1938 086c 00C0      		rjmp .L67
 195:main.c        ****             flag_amb_sec = 1;
 1939               		.loc 1 195 0
 1940 086e 0E94 0000 		call dequeue
 1941               	.LVL177:
 196:main.c        ****           }
 1942               		.loc 1 196 0
 1943 0872 B092 0000 		sts flag_amb_sec,r11
 1944 0876 00C0      		rjmp .L67
 1945               	.L64:
 200:main.c        ****         while (flag_amb_sec) {
 1946               		.loc 1 200 0
 1947 0878 1092 0000 		sts main_vt_flag,__zero_reg__
 1948 087c 8091 0000 		lds r24,flag_amb_sec
 201:main.c        ****           ev = dequeue();
 1949               		.loc 1 201 0
 1950 0880 00C0      		rjmp .L71
 1951               	.L72:
 202:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1952               		.loc 1 202 0
 1953 0882 0E94 0000 		call dequeue
 1954               	.LVL178:
 1955 0886 6C01      		movw r12,r24
 1956               	.LVL179:
 203:main.c        ****             flag_amb_sec = 0;
 1957               		.loc 1 203 0
 1958 0888 0497      		sbiw r24,4
 1959 088a 01F4      		brne .+2
 1960 088c 00C0      		rjmp .L70
 1961 088e 8091 0000 		lds r24,flag_amb_sec
 1962               	.L71:
 201:main.c        ****           ev = dequeue();
 1963               		.loc 1 201 0
 1964 0892 8111      		cpse r24,__zero_reg__
 1965 0894 00C0      		rjmp .L72
 1966               	.L207:
 207:main.c        ****           if (*rdp != SECUNDARIO) {
 1967               		.loc 1 207 0
 1968 0896 8091 0000 		lds r24,qsize
 1969 089a 9091 0000 		lds r25,qsize+1
 1970 089e 892B      		or r24,r25
 1971 08a0 01F0      		breq .L73
 208:main.c        ****             ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será pe
 1972               		.loc 1 208 0
 1973 08a2 E091 0000 		lds r30,rdp
 1974 08a6 F091 0000 		lds r31,rdp+1
 1975 08aa 8081      		ld r24,Z
 1976 08ac 9181      		ldd r25,Z+1
 1977 08ae 0197      		sbiw r24,1
 1978 08b0 01F0      		breq .L73
 209:main.c        ****           }
 1979               		.loc 1 209 0
 1980 08b2 0E94 0000 		call dequeue
 1981               	.LVL180:
 1982 08b6 6C01      		movw r12,r24
 1983               	.LVL181:
 1984               	.L73:
 212:main.c        ****           g_state = AMARELO_PED_SEC;
 1985               		.loc 1 212 0
 1986 08b8 8091 0000 		lds r24,flag_amb_prim
 1987 08bc 8823      		tst r24
 1988 08be 01F4      		brne .+2
 1989 08c0 00C0      		rjmp .L223
 1990               	.L74:
 216:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 1991               		.loc 1 216 0
 1992 08c2 2092 0000 		sts g_state,r2
 1993               	.L212:
 214:main.c        ****         } else {
 1994               		.loc 1 214 0
 1995 08c6 61E0      		ldi r22,lo8(1)
 1996 08c8 83E2      		ldi r24,lo8(35)
 1997 08ca 90E0      		ldi r25,0
 1998 08cc 0E94 0000 		call _pal_lld_setlineid
 1999               	.LVL182:
 2000 08d0 0E94 0000 		call _pal_lld_getpadfromline
 2001               	.LVL183:
 2002 08d4 782E      		mov r7,r24
 2003 08d6 61E0      		ldi r22,lo8(1)
 2004               	.LVL184:
 2005               	.L214:
 2006 08d8 83E2      		ldi r24,lo8(35)
 2007 08da 90E0      		ldi r25,0
 2008 08dc 00C0      		rjmp .L210
 2009               	.LVL185:
 2010               	.L40:
 128:main.c        ****         g_state = VERDE_IDLE_PRIM;
 2011               		.loc 1 128 0
 2012 08de 1092 0000 		sts main_vt_flag,__zero_reg__
 129:main.c        ****         break;
 2013               		.loc 1 129 0
 2014 08e2 82E0      		ldi r24,lo8(2)
 2015 08e4 8093 0000 		sts g_state,r24
 130:main.c        ****       case VERDE_IDLE_PRIM:
 2016               		.loc 1 130 0
 2017 08e8 00C0      		rjmp .L44
 2018               	.LVL186:
 2019               	.L84:
 260:main.c        ****         if (qsize > 0) {
 2020               		.loc 1 260 0
 2021 08ea 1092 0000 		sts main_vt_flag,__zero_reg__
 261:main.c        ****           if (*rdp != PEDESTRE) {
 2022               		.loc 1 261 0
 2023 08ee 8091 0000 		lds r24,qsize
 2024 08f2 9091 0000 		lds r25,qsize+1
 2025 08f6 892B      		or r24,r25
 2026 08f8 01F0      		breq .L88
 262:main.c        ****             ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será pe
 2027               		.loc 1 262 0
 2028 08fa E091 0000 		lds r30,rdp
 2029 08fe F091 0000 		lds r31,rdp+1
 2030 0902 8081      		ld r24,Z
 2031 0904 9181      		ldd r25,Z+1
 2032 0906 0297      		sbiw r24,2
 2033 0908 01F0      		breq .L88
 263:main.c        ****           }
 2034               		.loc 1 263 0
 2035 090a 0E94 0000 		call dequeue
 2036               	.LVL187:
 2037 090e 6C01      		movw r12,r24
 2038               	.LVL188:
 2039               	.L88:
 266:main.c        ****           g_state = PISCANDO_SEC;
 2040               		.loc 1 266 0
 2041 0910 91E0      		ldi r25,1
 2042 0912 C916      		cp r12,r25
 2043 0914 D104      		cpc r13,__zero_reg__
 2044 0916 01F0      		breq .L89
 266:main.c        ****           g_state = PISCANDO_SEC;
 2045               		.loc 1 266 0 is_stmt 0 discriminator 1
 2046 0918 E4E0      		ldi r30,4
 2047 091a CE16      		cp r12,r30
 2048 091c D104      		cpc r13,__zero_reg__
 2049 091e 01F0      		breq .L89
 270:main.c        ****           palClearLine(PEDESTRE_VERDE);
 2050               		.loc 1 270 0 is_stmt 1
 2051 0920 FCE0      		ldi r31,lo8(12)
 2052 0922 F093 0000 		sts g_state,r31
 2053               	.L216:
 271:main.c        ****         }
 2054               		.loc 1 271 0
 2055 0926 63E0      		ldi r22,lo8(3)
 2056 0928 83E2      		ldi r24,lo8(35)
 2057 092a 90E0      		ldi r25,0
 2058 092c 0E94 0000 		call _pal_lld_setlineid
 2059               	.LVL189:
 2060 0930 0E94 0000 		call _pal_lld_getpadfromline
 2061               	.LVL190:
 2062 0934 782E      		mov r7,r24
 2063 0936 63E0      		ldi r22,lo8(3)
 2064 0938 00C0      		rjmp .L214
 2065               	.LVL191:
 2066               	.L70:
 204:main.c        ****           }
 2067               		.loc 1 204 0
 2068 093a 1092 0000 		sts flag_amb_sec,__zero_reg__
 2069 093e 00C0      		rjmp .L207
 2070               	.L223:
 212:main.c        ****           g_state = AMARELO_PED_SEC;
 2071               		.loc 1 212 0
 2072 0940 82E0      		ldi r24,2
 2073 0942 C816      		cp r12,r24
 2074 0944 D104      		cpc r13,__zero_reg__
 2075 0946 01F0      		breq .+2
 2076 0948 00C0      		rjmp .L74
 213:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 2077               		.loc 1 213 0
 2078 094a 3092 0000 		sts g_state,r3
 2079 094e 00C0      		rjmp .L212
 2080               	.LVL192:
 2081               	.L89:
 267:main.c        ****           palClearLine(PEDESTRE_VERDE);
 2082               		.loc 1 267 0
 2083 0950 8092 0000 		sts g_state,r8
 2084 0954 00C0      		rjmp .L216
 2085               	.LVL193:
 2086               	.L47:
 136:main.c        ****           if (ev == AMB_SECUNDARIO) {
 2087               		.loc 1 136 0
 2088 0956 8823      		tst r24
 2089 0958 01F4      		brne .+2
 2090 095a 00C0      		rjmp .L103
 2091 095c 00C0      		rjmp .L44
 2092               	.L220:
 134:main.c        ****         }
 2093               		.loc 1 134 0
 2094 095e 81E0      		ldi r24,lo8(1)
 2095 0960 9091 0000 		lds r25,flag_amb_prim
 2096 0964 9111      		cpse r25,__zero_reg__
 2097 0966 80E0      		ldi r24,0
 2098               	.L46:
 2099 0968 8093 0000 		sts flag_amb_prim,r24
 2100 096c 00C0      		rjmp .L44
 2101               	.L218:
 2102               	.LVL194:
 2103               	.LBB456:
 2104               	.LBB457:
 2105               	.LBB458:
 2106               	.LBB459:
 430:../../os/common/ports/AVR/chcore.h **** }
 2107               		.loc 3 430 0
 2108               	/* #APP */
 2109               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2110 096e F894      		cli
 2111               	 ;  0 "" 2
 2112               	.LVL195:
 2113               	/* #NOAPP */
 2114               	.LBE459:
 2115               	.LBE458:
 2116               	.LBE457:
 2117               	.LBB460:
 2118               	.LBB461:
 2119               	.LBB462:
 2120               	.LBB463:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 2121               		.loc 2 287 0
 2122 0970 8981      		ldd r24,Y+1
 2123 0972 9A81      		ldd r25,Y+2
 2124 0974 892B      		or r24,r25
 2125 0976 01F0      		breq .L57
 288:../../os/rt/include/chvt.h ****   }
 2126               		.loc 2 288 0
 2127 0978 CE01      		movw r24,r28
 2128 097a 0196      		adiw r24,1
 2129 097c 0E94 0000 		call chVTDoResetI
 2130               	.LVL196:
 2131               	.L57:
 2132               	.LBE463:
 2133               	.LBE462:
 2134               		.loc 2 335 0
 2135 0980 8E01      		movw r16,r28
 2136 0982 0F5F      		subi r16,-1
 2137 0984 1F4F      		sbci r17,-1
 2138 0986 20E0      		ldi r18,lo8(gs(vt_cb))
 2139 0988 30E0      		ldi r19,hi8(gs(vt_cb))
 2140 098a 48E2      		ldi r20,lo8(40)
 2141 098c 51E3      		ldi r21,lo8(49)
 2142 098e 61E0      		ldi r22,lo8(1)
 2143 0990 70E0      		ldi r23,0
 2144 0992 C801      		movw r24,r16
 2145 0994 0E94 0000 		call chVTDoSetI
 2146               	.LVL197:
 2147               	.LBE461:
 2148               	.LBE460:
 2149               	.LBB464:
 2150               	.LBB465:
 2151               	.LBB466:
 2152               	.LBB467:
 2153               		.loc 3 440 0
 2154               	/* #APP */
 2155               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2156 0998 7894      		sei
 2157               	 ;  0 "" 2
 2158               	/* #NOAPP */
 2159               	.LBE467:
 2160               	.LBE466:
 2161               	.LBE465:
 2162               	.LBE464:
 2163               	.LBE456:
 176:main.c        ****             if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 2164               		.loc 1 176 0
 2165 099a 8091 0000 		lds r24,main_vt_flag
 2166 099e 8823      		tst r24
 2167 09a0 01F0      		breq .L58
 2168 09a2 00C0      		rjmp .L209
 2169               	.L60:
 180:main.c        ****               dequeue();
 2170               		.loc 1 180 0
 2171 09a4 0397      		sbiw r24,3
 2172 09a6 01F0      		breq .L224
 2173               	.L61:
 184:main.c        ****           }
 2174               		.loc 1 184 0
 2175 09a8 6BE1      		ldi r22,lo8(27)
 2176 09aa 76E0      		ldi r23,lo8(6)
 2177 09ac 80E0      		ldi r24,0
 2178 09ae 90E0      		ldi r25,0
 2179 09b0 0E94 0000 		call chThdSleep
 2180               	.LVL198:
 176:main.c        ****             if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 2181               		.loc 1 176 0
 2182 09b4 8091 0000 		lds r24,main_vt_flag
 2183 09b8 8111      		cpse r24,__zero_reg__
 2184 09ba 00C0      		rjmp .L209
 2185               	.L58:
 177:main.c        ****               dequeue();
 2186               		.loc 1 177 0
 2187 09bc E091 0000 		lds r30,rdp
 2188 09c0 F091 0000 		lds r31,rdp+1
 2189 09c4 8081      		ld r24,Z
 2190 09c6 9181      		ldd r25,Z+1
 2191 09c8 8430      		cpi r24,4
 2192 09ca 9105      		cpc r25,__zero_reg__
 2193 09cc 01F4      		brne .L60
 177:main.c        ****               dequeue();
 2194               		.loc 1 177 0 is_stmt 0 discriminator 1
 2195 09ce 8091 0000 		lds r24,flag_amb_sec
 2196 09d2 8111      		cpse r24,__zero_reg__
 2197 09d4 00C0      		rjmp .L61
 178:main.c        ****               flag_amb_sec = 1;
 2198               		.loc 1 178 0 is_stmt 1
 2199 09d6 0E94 0000 		call dequeue
 2200               	.LVL199:
 179:main.c        ****             } else if ((*rdp == AMB_PRIMARIO) && flag_amb_prim == 0) {
 2201               		.loc 1 179 0
 2202 09da B092 0000 		sts flag_amb_sec,r11
 2203 09de 00C0      		rjmp .L61
 2204               	.L224:
 180:main.c        ****               dequeue();
 2205               		.loc 1 180 0 discriminator 1
 2206 09e0 8091 0000 		lds r24,flag_amb_prim
 2207 09e4 8111      		cpse r24,__zero_reg__
 2208 09e6 00C0      		rjmp .L61
 181:main.c        ****               flag_amb_prim = 1;
 2209               		.loc 1 181 0
 2210 09e8 0E94 0000 		call dequeue
 2211               	.LVL200:
 182:main.c        ****             }
 2212               		.loc 1 182 0
 2213 09ec B092 0000 		sts flag_amb_prim,r11
 2214 09f0 00C0      		rjmp .L61
 2215               	.L209:
 2216 09f2 8091 0000 		lds r24,prev_state
 187:main.c        ****         chVTSet(&main_vt, TIME_MS2I((prev_state == PRIMARIO) ? 1000 : 6000), (vtfunc_t)vt_cb, (void
 2217               		.loc 1 187 0
 2218 09f6 1092 0000 		sts main_vt_flag,__zero_reg__
 188:main.c        ****         while (!main_vt_flag) {
 2219               		.loc 1 188 0
 2220 09fa 20E3      		ldi r18,lo8(48)
 2221 09fc 422E      		mov r4,r18
 2222 09fe 2EE6      		ldi r18,lo8(110)
 2223 0a00 522E      		mov r5,r18
 2224 0a02 6624      		clr r6
 2225 0a04 6394      		inc r6
 2226 0a06 712C      		mov r7,__zero_reg__
 2227 0a08 8530      		cpi r24,lo8(5)
 2228 0a0a 01F0      		breq .+2
 2229 0a0c 00C0      		rjmp .L62
 2230 0a0e 38E0      		ldi r19,lo8(8)
 2231 0a10 432E      		mov r4,r19
 2232 0a12 3DE3      		ldi r19,lo8(61)
 2233 0a14 532E      		mov r5,r19
 2234 0a16 612C      		mov r6,__zero_reg__
 2235 0a18 712C      		mov r7,__zero_reg__
 2236 0a1a 00C0      		rjmp .L62
 2237               	.LVL201:
 2238               	.L222:
 2239               	.LBB468:
 2240               	.LBB469:
 2241               	.LBB470:
 2242               	.LBB471:
 430:../../os/common/ports/AVR/chcore.h **** }
 2243               		.loc 3 430 0
 2244               	/* #APP */
 2245               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2246 0a1c F894      		cli
 2247               	 ;  0 "" 2
 2248               	.LVL202:
 2249               	/* #NOAPP */
 2250               	.LBE471:
 2251               	.LBE470:
 2252               	.LBE469:
 2253               	.LBB472:
 2254               	.LBB473:
 2255               	.LBB474:
 2256               	.LBB475:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 2257               		.loc 2 287 0
 2258 0a1e 8981      		ldd r24,Y+1
 2259 0a20 9A81      		ldd r25,Y+2
 2260 0a22 892B      		or r24,r25
 2261 0a24 01F0      		breq .L33
 288:../../os/rt/include/chvt.h ****   }
 2262               		.loc 2 288 0
 2263 0a26 CE01      		movw r24,r28
 2264 0a28 0196      		adiw r24,1
 2265 0a2a 0E94 0000 		call chVTDoResetI
 2266               	.LVL203:
 2267               	.L33:
 2268               	.LBE475:
 2269               	.LBE474:
 2270               		.loc 2 335 0
 2271 0a2e 8E01      		movw r16,r28
 2272 0a30 0F5F      		subi r16,-1
 2273 0a32 1F4F      		sbci r17,-1
 2274 0a34 20E0      		ldi r18,lo8(gs(vt_cb))
 2275 0a36 30E0      		ldi r19,hi8(gs(vt_cb))
 2276 0a38 48E2      		ldi r20,lo8(40)
 2277 0a3a 51E3      		ldi r21,lo8(49)
 2278 0a3c 61E0      		ldi r22,lo8(1)
 2279 0a3e 70E0      		ldi r23,0
 2280 0a40 C801      		movw r24,r16
 2281 0a42 0E94 0000 		call chVTDoSetI
 2282               	.LVL204:
 2283               	.LBE473:
 2284               	.LBE472:
 2285               	.LBB476:
 2286               	.LBB477:
 2287               	.LBB478:
 2288               	.LBB479:
 2289               		.loc 3 440 0
 2290               	/* #APP */
 2291               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2292 0a46 7894      		sei
 2293               	 ;  0 "" 2
 2294               	/* #NOAPP */
 2295               	.LBE479:
 2296               	.LBE478:
 2297               	.LBE477:
 2298               	.LBE476:
 2299               	.LBE468:
 112:main.c        ****             if ((*rdp == AMB_PRIMARIO)) {
 2300               		.loc 1 112 0
 2301 0a48 8091 0000 		lds r24,main_vt_flag
 2302 0a4c 8823      		tst r24
 2303 0a4e 01F0      		breq .L34
 2304 0a50 00C0      		rjmp .L208
 2305               	.L36:
 116:main.c        ****           }
 2306               		.loc 1 116 0
 2307 0a52 6BE1      		ldi r22,lo8(27)
 2308 0a54 76E0      		ldi r23,lo8(6)
 2309 0a56 80E0      		ldi r24,0
 2310 0a58 90E0      		ldi r25,0
 2311 0a5a 0E94 0000 		call chThdSleep
 2312               	.LVL205:
 112:main.c        ****             if ((*rdp == AMB_PRIMARIO)) {
 2313               		.loc 1 112 0
 2314 0a5e 8091 0000 		lds r24,main_vt_flag
 2315 0a62 8111      		cpse r24,__zero_reg__
 2316 0a64 00C0      		rjmp .L208
 2317               	.L34:
 113:main.c        ****               flag_amb_prim = !flag_amb_prim;
 2318               		.loc 1 113 0
 2319 0a66 E091 0000 		lds r30,rdp
 2320 0a6a F091 0000 		lds r31,rdp+1
 2321 0a6e 8081      		ld r24,Z
 2322 0a70 9181      		ldd r25,Z+1
 2323 0a72 0397      		sbiw r24,3
 2324 0a74 01F4      		brne .L36
 114:main.c        ****             }
 2325               		.loc 1 114 0
 2326 0a76 81E0      		ldi r24,lo8(1)
 2327 0a78 9091 0000 		lds r25,flag_amb_prim
 2328 0a7c 9111      		cpse r25,__zero_reg__
 2329 0a7e 80E0      		ldi r24,0
 2330               	.L37:
 2331 0a80 8093 0000 		sts flag_amb_prim,r24
 2332 0a84 00C0      		rjmp .L36
 2333               	.L208:
 2334 0a86 8091 0000 		lds r24,prev_state
 119:main.c        ****         chVTSet(&main_vt, TIME_MS2I(prev_state == SECUNDARIO ? 5000 : 10000), (vtfunc_t)vt_cb, (voi
 2335               		.loc 1 119 0
 2336 0a8a 1092 0000 		sts main_vt_flag,__zero_reg__
 120:main.c        ****         while (!main_vt_flag) {
 2337               		.loc 1 120 0
 2338 0a8e 40E5      		ldi r20,lo8(80)
 2339 0a90 442E      		mov r4,r20
 2340 0a92 42E6      		ldi r20,lo8(98)
 2341 0a94 542E      		mov r5,r20
 2342 0a96 42E0      		ldi r20,lo8(2)
 2343 0a98 642E      		mov r6,r20
 2344 0a9a 712C      		mov r7,__zero_reg__
 2345 0a9c 8130      		cpi r24,lo8(1)
 2346 0a9e 01F0      		breq .+2
 2347 0aa0 00C0      		rjmp .L38
 2348 0aa2 58E2      		ldi r21,lo8(40)
 2349 0aa4 452E      		mov r4,r21
 2350 0aa6 51E3      		ldi r21,lo8(49)
 2351 0aa8 552E      		mov r5,r21
 2352 0aaa 6624      		clr r6
 2353 0aac 6394      		inc r6
 2354 0aae 712C      		mov r7,__zero_reg__
 2355 0ab0 00C0      		rjmp .L38
 2356               	.LVL206:
 2357               	.L221:
 136:main.c        ****           if (ev == AMB_SECUNDARIO) {
 2358               		.loc 1 136 0
 2359 0ab2 8111      		cpse r24,__zero_reg__
 2360 0ab4 00C0      		rjmp .L44
 142:main.c        ****           g_state = AMARELO_PED_PRIM;
 2361               		.loc 1 142 0
 2362 0ab6 F2E0      		ldi r31,2
 2363 0ab8 CF16      		cp r12,r31
 2364 0aba D104      		cpc r13,__zero_reg__
 2365 0abc 01F0      		breq .+2
 2366 0abe 00C0      		rjmp .L44
 143:main.c        ****           palClearLine(PRIMARIO_VERDE);
 2367               		.loc 1 143 0
 2368 0ac0 83E0      		ldi r24,lo8(3)
 2369 0ac2 00C0      		rjmp .L217
 2370               		.cfi_endproc
 2371               	.LFE243:
 2373               		.section	.text.button_check,"ax",@progbits
 2374               	.global	button_check
 2376               	button_check:
 2377               	.LFB248:
 450:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 2378               		.loc 1 450 0
 2379               		.cfi_startproc
 2380               	.LVL207:
 2381 0000 CF92      		push r12
 2382               	.LCFI8:
 2383               		.cfi_def_cfa_offset 3
 2384               		.cfi_offset 12, -2
 2385 0002 DF92      		push r13
 2386               	.LCFI9:
 2387               		.cfi_def_cfa_offset 4
 2388               		.cfi_offset 13, -3
 2389 0004 EF92      		push r14
 2390               	.LCFI10:
 2391               		.cfi_def_cfa_offset 5
 2392               		.cfi_offset 14, -4
 2393 0006 CF93      		push r28
 2394               	.LCFI11:
 2395               		.cfi_def_cfa_offset 6
 2396               		.cfi_offset 28, -5
 2397               	/* prologue: function */
 2398               	/* frame size = 0 */
 2399               	/* stack size = 4 */
 2400               	.L__stack_usage = 4
 2401 0008 6B01      		movw r12,r22
 2402 000a E82E      		mov r14,r24
 454:main.c        ****     x1 = palReadLine(line);
 2403               		.loc 1 454 0
 2404 000c 4130      		cpi r20,lo8(1)
 2405 000e 01F0      		breq .L230
 459:main.c        ****     x2 = palReadLine(line);
 2406               		.loc 1 459 0
 2407 0010 4230      		cpi r20,lo8(2)
 2408 0012 01F4      		brne .+2
 2409 0014 00C0      		rjmp .L231
 464:main.c        ****     x3 = palReadLine(line);
 2410               		.loc 1 464 0
 2411 0016 4330      		cpi r20,lo8(3)
 2412 0018 01F4      		brne .+2
 2413 001a 00C0      		rjmp .L232
 469:main.c        ****     x4 = palReadLine(line);
 2414               		.loc 1 469 0
 2415 001c 4430      		cpi r20,lo8(4)
 2416 001e 01F0      		breq .L233
 2417               	.LVL208:
 476:main.c        **** }
 2418               		.loc 1 476 0
 2419 0020 81E0      		ldi r24,lo8(1)
 2420 0022 8227      		eor r24,r18
 477:main.c        **** 
 2421               		.loc 1 477 0
 2422 0024 8923      		and r24,r25
 2423               	/* epilogue start */
 2424 0026 CF91      		pop r28
 2425 0028 EF90      		pop r14
 2426               	.LVL209:
 2427 002a DF90      		pop r13
 2428 002c CF90      		pop r12
 2429               	.LVL210:
 2430 002e 0895      		ret
 2431               	.LVL211:
 2432               	.L233:
 470:main.c        ****     w = x4^old_x4;
 2433               		.loc 1 470 0
 2434 0030 0E94 0000 		call _pal_lld_getportfromline
 2435               	.LVL212:
 2436 0034 FC01      		movw r30,r24
 2437 0036 C081      		ld r28,Z
 2438 0038 8E2D      		mov r24,r14
 2439 003a B601      		movw r22,r12
 2440 003c 0E94 0000 		call _pal_lld_getpadfromline
 2441               	.LVL213:
 2442 0040 2C2F      		mov r18,r28
 2443 0042 30E0      		ldi r19,0
 2444 0044 00C0      		rjmp 2f
 2445               		1:
 2446 0046 3595      		asr r19
 2447 0048 2795      		ror r18
 2448               		2:
 2449 004a 8A95      		dec r24
 2450 004c 02F4      		brpl 1b
 2451 004e 2170      		andi r18,lo8(1)
 471:main.c        ****     old_x4 = x4;
 2452               		.loc 1 471 0
 2453 0050 9091 0000 		lds r25,old_x4.4176
 2454 0054 9227      		eor r25,r18
 2455               	.LVL214:
 472:main.c        ****     x = x4;
 2456               		.loc 1 472 0
 2457 0056 2093 0000 		sts old_x4.4176,r18
 2458               	.LVL215:
 476:main.c        **** }
 2459               		.loc 1 476 0
 2460 005a 81E0      		ldi r24,lo8(1)
 2461 005c 8227      		eor r24,r18
 477:main.c        **** 
 2462               		.loc 1 477 0
 2463 005e 8923      		and r24,r25
 2464               	/* epilogue start */
 2465 0060 CF91      		pop r28
 2466 0062 EF90      		pop r14
 2467               	.LVL216:
 2468 0064 DF90      		pop r13
 2469 0066 CF90      		pop r12
 2470 0068 0895      		ret
 2471               	.LVL217:
 2472               	.L230:
 455:main.c        ****     w = x1^old_x1;
 2473               		.loc 1 455 0
 2474 006a 0E94 0000 		call _pal_lld_getportfromline
 2475               	.LVL218:
 2476 006e FC01      		movw r30,r24
 2477 0070 C081      		ld r28,Z
 2478 0072 8E2D      		mov r24,r14
 2479 0074 B601      		movw r22,r12
 2480 0076 0E94 0000 		call _pal_lld_getpadfromline
 2481               	.LVL219:
 2482 007a 2C2F      		mov r18,r28
 2483 007c 30E0      		ldi r19,0
 2484 007e 00C0      		rjmp 2f
 2485               		1:
 2486 0080 3595      		asr r19
 2487 0082 2795      		ror r18
 2488               		2:
 2489 0084 8A95      		dec r24
 2490 0086 02F4      		brpl 1b
 2491 0088 2170      		andi r18,lo8(1)
 456:main.c        ****     old_x1 = x1;
 2492               		.loc 1 456 0
 2493 008a 9091 0000 		lds r25,old_x1.4170
 2494 008e 9227      		eor r25,r18
 2495               	.LVL220:
 457:main.c        ****     x = x1;
 2496               		.loc 1 457 0
 2497 0090 2093 0000 		sts old_x1.4170,r18
 2498               	.LVL221:
 476:main.c        **** }
 2499               		.loc 1 476 0
 2500 0094 81E0      		ldi r24,lo8(1)
 2501 0096 8227      		eor r24,r18
 477:main.c        **** 
 2502               		.loc 1 477 0
 2503 0098 8923      		and r24,r25
 2504               	/* epilogue start */
 2505 009a CF91      		pop r28
 2506 009c EF90      		pop r14
 2507               	.LVL222:
 2508 009e DF90      		pop r13
 2509 00a0 CF90      		pop r12
 2510 00a2 0895      		ret
 2511               	.LVL223:
 2512               	.L231:
 460:main.c        ****     w = x2^old_x2;
 2513               		.loc 1 460 0
 2514 00a4 0E94 0000 		call _pal_lld_getportfromline
 2515               	.LVL224:
 2516 00a8 FC01      		movw r30,r24
 2517 00aa C081      		ld r28,Z
 2518 00ac 8E2D      		mov r24,r14
 2519 00ae B601      		movw r22,r12
 2520 00b0 0E94 0000 		call _pal_lld_getpadfromline
 2521               	.LVL225:
 2522 00b4 2C2F      		mov r18,r28
 2523 00b6 30E0      		ldi r19,0
 2524 00b8 00C0      		rjmp 2f
 2525               		1:
 2526 00ba 3595      		asr r19
 2527 00bc 2795      		ror r18
 2528               		2:
 2529 00be 8A95      		dec r24
 2530 00c0 02F4      		brpl 1b
 2531 00c2 2170      		andi r18,lo8(1)
 461:main.c        ****     old_x2 = x2;
 2532               		.loc 1 461 0
 2533 00c4 9091 0000 		lds r25,old_x2.4172
 2534 00c8 9227      		eor r25,r18
 2535               	.LVL226:
 462:main.c        ****     x = x2;
 2536               		.loc 1 462 0
 2537 00ca 2093 0000 		sts old_x2.4172,r18
 2538               	.LVL227:
 476:main.c        **** }
 2539               		.loc 1 476 0
 2540 00ce 81E0      		ldi r24,lo8(1)
 2541 00d0 8227      		eor r24,r18
 477:main.c        **** 
 2542               		.loc 1 477 0
 2543 00d2 8923      		and r24,r25
 2544               	/* epilogue start */
 2545 00d4 CF91      		pop r28
 2546 00d6 EF90      		pop r14
 2547               	.LVL228:
 2548 00d8 DF90      		pop r13
 2549 00da CF90      		pop r12
 2550 00dc 0895      		ret
 2551               	.LVL229:
 2552               	.L232:
 465:main.c        ****     w = x3^old_x3;
 2553               		.loc 1 465 0
 2554 00de 0E94 0000 		call _pal_lld_getportfromline
 2555               	.LVL230:
 2556 00e2 FC01      		movw r30,r24
 2557 00e4 C081      		ld r28,Z
 2558 00e6 8E2D      		mov r24,r14
 2559 00e8 B601      		movw r22,r12
 2560 00ea 0E94 0000 		call _pal_lld_getpadfromline
 2561               	.LVL231:
 2562 00ee 2C2F      		mov r18,r28
 2563 00f0 30E0      		ldi r19,0
 2564 00f2 00C0      		rjmp 2f
 2565               		1:
 2566 00f4 3595      		asr r19
 2567 00f6 2795      		ror r18
 2568               		2:
 2569 00f8 8A95      		dec r24
 2570 00fa 02F4      		brpl 1b
 2571 00fc 2170      		andi r18,lo8(1)
 466:main.c        ****     old_x3 = x3;
 2572               		.loc 1 466 0
 2573 00fe 9091 0000 		lds r25,old_x3.4174
 2574 0102 9227      		eor r25,r18
 2575               	.LVL232:
 467:main.c        ****     x = x3;
 2576               		.loc 1 467 0
 2577 0104 2093 0000 		sts old_x3.4174,r18
 2578               	.LVL233:
 476:main.c        **** }
 2579               		.loc 1 476 0
 2580 0108 81E0      		ldi r24,lo8(1)
 2581 010a 8227      		eor r24,r18
 477:main.c        **** 
 2582               		.loc 1 477 0
 2583 010c 8923      		and r24,r25
 2584               	/* epilogue start */
 2585 010e CF91      		pop r28
 2586 0110 EF90      		pop r14
 2587               	.LVL234:
 2588 0112 DF90      		pop r13
 2589 0114 CF90      		pop r12
 2590 0116 0895      		ret
 2591               		.cfi_endproc
 2592               	.LFE248:
 2594               		.section	.text.startup.main,"ax",@progbits
 2595               	.global	main
 2597               	main:
 2598               	.LFB244:
 307:main.c        ****   SerialConfig config = {.sc_brr = UBRR2x(9600),
 2599               		.loc 1 307 0
 2600               		.cfi_startproc
 2601 0000 CF93      		push r28
 2602               	.LCFI12:
 2603               		.cfi_def_cfa_offset 3
 2604               		.cfi_offset 28, -2
 2605 0002 DF93      		push r29
 2606               	.LCFI13:
 2607               		.cfi_def_cfa_offset 4
 2608               		.cfi_offset 29, -3
 2609 0004 00D0      		rcall .
 2610 0006 1F92      		push __zero_reg__
 2611               	.LCFI14:
 2612               		.cfi_def_cfa_offset 7
 2613 0008 CDB7      		in r28,__SP_L__
 2614 000a DEB7      		in r29,__SP_H__
 2615               	.LCFI15:
 2616               		.cfi_def_cfa_register 28
 2617               	/* prologue: function */
 2618               	/* frame size = 3 */
 2619               	/* stack size = 5 */
 2620               	.L__stack_usage = 5
 308:main.c        ****                          .sc_bits_per_char = USART_CHAR_SIZE_8
 2621               		.loc 1 308 0
 2622 000c 8FEC      		ldi r24,lo8(-49)
 2623 000e 90E0      		ldi r25,0
 2624 0010 9A83      		std Y+2,r25
 2625 0012 8983      		std Y+1,r24
 2626 0014 83E0      		ldi r24,lo8(3)
 2627 0016 8B83      		std Y+3,r24
 312:main.c        ****   /*
 2628               		.loc 1 312 0
 2629 0018 0E94 0000 		call queueInit
 2630               	.LVL235:
 320:main.c        ****   chSysInit();
 2631               		.loc 1 320 0
 2632 001c 0E94 0000 		call halInit
 2633               	.LVL236:
 321:main.c        **** 
 2634               		.loc 1 321 0
 2635 0020 0E94 0000 		call chSysInit
 2636               	.LVL237:
 323:main.c        **** 
 2637               		.loc 1 323 0
 2638 0024 BE01      		movw r22,r28
 2639 0026 6F5F      		subi r22,-1
 2640 0028 7F4F      		sbci r23,-1
 2641 002a 80E0      		ldi r24,lo8(SD1)
 2642 002c 90E0      		ldi r25,hi8(SD1)
 2643 002e 0E94 0000 		call sdStart
 2644               	.LVL238:
 326:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 2645               		.loc 1 326 0
 2646 0032 62E0      		ldi r22,lo8(2)
 2647 0034 86E2      		ldi r24,lo8(38)
 2648 0036 90E0      		ldi r25,0
 2649 0038 0E94 0000 		call _pal_lld_setlineid
 2650               	.LVL239:
 2651 003c 0E94 0000 		call _pal_lld_getpadfromline
 2652               	.LVL240:
 2653 0040 F82E      		mov r15,r24
 2654 0042 62E0      		ldi r22,lo8(2)
 2655 0044 86E2      		ldi r24,lo8(38)
 2656 0046 90E0      		ldi r25,0
 2657 0048 0E94 0000 		call _pal_lld_setlineid
 2658               	.LVL241:
 2659 004c 0E94 0000 		call _pal_lld_getportfromline
 2660               	.LVL242:
 2661 0050 01E0      		ldi r16,lo8(1)
 2662 0052 10E0      		ldi r17,0
 2663 0054 B801      		movw r22,r16
 2664 0056 00C0      		rjmp 2f
 2665               		1:
 2666 0058 660F      		lsl r22
 2667               		2:
 2668 005a FA94      		dec r15
 2669 005c 02F4      		brpl 1b
 2670 005e 43E0      		ldi r20,lo8(3)
 2671 0060 0E94 0000 		call _pal_lld_setgroupmode
 2672               	.LVL243:
 327:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 2673               		.loc 1 327 0
 2674 0064 64E0      		ldi r22,lo8(4)
 2675 0066 86E2      		ldi r24,lo8(38)
 2676 0068 90E0      		ldi r25,0
 2677 006a 0E94 0000 		call _pal_lld_setlineid
 2678               	.LVL244:
 2679 006e 0E94 0000 		call _pal_lld_getpadfromline
 2680               	.LVL245:
 2681 0072 F82E      		mov r15,r24
 2682 0074 64E0      		ldi r22,lo8(4)
 2683 0076 86E2      		ldi r24,lo8(38)
 2684 0078 90E0      		ldi r25,0
 2685 007a 0E94 0000 		call _pal_lld_setlineid
 2686               	.LVL246:
 2687 007e 0E94 0000 		call _pal_lld_getportfromline
 2688               	.LVL247:
 2689 0082 B801      		movw r22,r16
 2690 0084 00C0      		rjmp 2f
 2691               		1:
 2692 0086 660F      		lsl r22
 2693               		2:
 2694 0088 FA94      		dec r15
 2695 008a 02F4      		brpl 1b
 2696 008c 43E0      		ldi r20,lo8(3)
 2697 008e 0E94 0000 		call _pal_lld_setgroupmode
 2698               	.LVL248:
 328:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 2699               		.loc 1 328 0
 2700 0092 63E0      		ldi r22,lo8(3)
 2701 0094 86E2      		ldi r24,lo8(38)
 2702 0096 90E0      		ldi r25,0
 2703 0098 0E94 0000 		call _pal_lld_setlineid
 2704               	.LVL249:
 2705 009c 0E94 0000 		call _pal_lld_getpadfromline
 2706               	.LVL250:
 2707 00a0 F82E      		mov r15,r24
 2708 00a2 63E0      		ldi r22,lo8(3)
 2709 00a4 86E2      		ldi r24,lo8(38)
 2710 00a6 90E0      		ldi r25,0
 2711 00a8 0E94 0000 		call _pal_lld_setlineid
 2712               	.LVL251:
 2713 00ac 0E94 0000 		call _pal_lld_getportfromline
 2714               	.LVL252:
 2715 00b0 B801      		movw r22,r16
 2716 00b2 00C0      		rjmp 2f
 2717               		1:
 2718 00b4 660F      		lsl r22
 2719               		2:
 2720 00b6 FA94      		dec r15
 2721 00b8 02F4      		brpl 1b
 2722 00ba 43E0      		ldi r20,lo8(3)
 2723 00bc 0E94 0000 		call _pal_lld_setgroupmode
 2724               	.LVL253:
 329:main.c        **** 
 2725               		.loc 1 329 0
 2726 00c0 65E0      		ldi r22,lo8(5)
 2727 00c2 86E2      		ldi r24,lo8(38)
 2728 00c4 90E0      		ldi r25,0
 2729 00c6 0E94 0000 		call _pal_lld_setlineid
 2730               	.LVL254:
 2731 00ca 0E94 0000 		call _pal_lld_getpadfromline
 2732               	.LVL255:
 2733 00ce F82E      		mov r15,r24
 2734 00d0 65E0      		ldi r22,lo8(5)
 2735 00d2 86E2      		ldi r24,lo8(38)
 2736 00d4 90E0      		ldi r25,0
 2737 00d6 0E94 0000 		call _pal_lld_setlineid
 2738               	.LVL256:
 2739 00da 0E94 0000 		call _pal_lld_getportfromline
 2740               	.LVL257:
 2741 00de B801      		movw r22,r16
 2742 00e0 00C0      		rjmp 2f
 2743               		1:
 2744 00e2 660F      		lsl r22
 2745               		2:
 2746 00e4 FA94      		dec r15
 2747 00e6 02F4      		brpl 1b
 2748 00e8 43E0      		ldi r20,lo8(3)
 2749 00ea 0E94 0000 		call _pal_lld_setgroupmode
 2750               	.LVL258:
 332:main.c        ****   palClearLine(PEDESTRE_VERDE);
 2751               		.loc 1 332 0
 2752 00ee 63E0      		ldi r22,lo8(3)
 2753 00f0 83E2      		ldi r24,lo8(35)
 2754 00f2 90E0      		ldi r25,0
 2755 00f4 0E94 0000 		call _pal_lld_setlineid
 2756               	.LVL259:
 2757 00f8 0E94 0000 		call _pal_lld_getpadfromline
 2758               	.LVL260:
 2759 00fc F82E      		mov r15,r24
 2760 00fe 63E0      		ldi r22,lo8(3)
 2761 0100 83E2      		ldi r24,lo8(35)
 2762 0102 90E0      		ldi r25,0
 2763 0104 0E94 0000 		call _pal_lld_setlineid
 2764               	.LVL261:
 2765 0108 0E94 0000 		call _pal_lld_getportfromline
 2766               	.LVL262:
 2767 010c B801      		movw r22,r16
 2768 010e 00C0      		rjmp 2f
 2769               		1:
 2770 0110 660F      		lsl r22
 2771               		2:
 2772 0112 FA94      		dec r15
 2773 0114 02F4      		brpl 1b
 2774 0116 46E0      		ldi r20,lo8(6)
 2775 0118 0E94 0000 		call _pal_lld_setgroupmode
 2776               	.LVL263:
 333:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2777               		.loc 1 333 0
 2778 011c 63E0      		ldi r22,lo8(3)
 2779 011e 83E2      		ldi r24,lo8(35)
 2780 0120 90E0      		ldi r25,0
 2781 0122 0E94 0000 		call _pal_lld_setlineid
 2782               	.LVL264:
 2783 0126 0E94 0000 		call _pal_lld_getpadfromline
 2784               	.LVL265:
 2785 012a F82E      		mov r15,r24
 2786 012c 63E0      		ldi r22,lo8(3)
 2787 012e 83E2      		ldi r24,lo8(35)
 2788 0130 90E0      		ldi r25,0
 2789 0132 0E94 0000 		call _pal_lld_setlineid
 2790               	.LVL266:
 2791 0136 0E94 0000 		call _pal_lld_getportfromline
 2792               	.LVL267:
 2793 013a FC01      		movw r30,r24
 2794 013c 9281      		ldd r25,Z+2
 2795 013e 9801      		movw r18,r16
 2796 0140 00C0      		rjmp 2f
 2797               		1:
 2798 0142 220F      		lsl r18
 2799 0144 331F      		rol r19
 2800               		2:
 2801 0146 FA94      		dec r15
 2802 0148 02F4      		brpl 1b
 2803 014a 2095      		com r18
 2804 014c 3095      		com r19
 2805 014e 9223      		and r25,r18
 2806 0150 9283      		std Z+2,r25
 334:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 2807               		.loc 1 334 0
 2808 0152 62E0      		ldi r22,lo8(2)
 2809 0154 83E2      		ldi r24,lo8(35)
 2810 0156 90E0      		ldi r25,0
 2811 0158 0E94 0000 		call _pal_lld_setlineid
 2812               	.LVL268:
 2813 015c 0E94 0000 		call _pal_lld_getpadfromline
 2814               	.LVL269:
 2815 0160 F82E      		mov r15,r24
 2816 0162 62E0      		ldi r22,lo8(2)
 2817 0164 83E2      		ldi r24,lo8(35)
 2818 0166 90E0      		ldi r25,0
 2819 0168 0E94 0000 		call _pal_lld_setlineid
 2820               	.LVL270:
 2821 016c 0E94 0000 		call _pal_lld_getportfromline
 2822               	.LVL271:
 2823 0170 B801      		movw r22,r16
 2824 0172 00C0      		rjmp 2f
 2825               		1:
 2826 0174 660F      		lsl r22
 2827               		2:
 2828 0176 FA94      		dec r15
 2829 0178 02F4      		brpl 1b
 2830 017a 46E0      		ldi r20,lo8(6)
 2831 017c 0E94 0000 		call _pal_lld_setgroupmode
 2832               	.LVL272:
 335:main.c        **** 
 2833               		.loc 1 335 0
 2834 0180 62E0      		ldi r22,lo8(2)
 2835 0182 83E2      		ldi r24,lo8(35)
 2836 0184 90E0      		ldi r25,0
 2837 0186 0E94 0000 		call _pal_lld_setlineid
 2838               	.LVL273:
 2839 018a 0E94 0000 		call _pal_lld_getpadfromline
 2840               	.LVL274:
 2841 018e F82E      		mov r15,r24
 2842 0190 62E0      		ldi r22,lo8(2)
 2843 0192 83E2      		ldi r24,lo8(35)
 2844 0194 90E0      		ldi r25,0
 2845 0196 0E94 0000 		call _pal_lld_setlineid
 2846               	.LVL275:
 2847 019a 0E94 0000 		call _pal_lld_getportfromline
 2848               	.LVL276:
 2849 019e FC01      		movw r30,r24
 2850 01a0 9281      		ldd r25,Z+2
 2851 01a2 9801      		movw r18,r16
 2852 01a4 00C0      		rjmp 2f
 2853               		1:
 2854 01a6 220F      		lsl r18
 2855 01a8 331F      		rol r19
 2856               		2:
 2857 01aa FA94      		dec r15
 2858 01ac 02F4      		brpl 1b
 2859 01ae 2095      		com r18
 2860 01b0 3095      		com r19
 2861 01b2 9223      		and r25,r18
 2862 01b4 9283      		std Z+2,r25
 338:main.c        ****   palClearLine(PRIMARIO_VERDE);
 2863               		.loc 1 338 0
 2864 01b6 67E0      		ldi r22,lo8(7)
 2865 01b8 89E2      		ldi r24,lo8(41)
 2866 01ba 90E0      		ldi r25,0
 2867 01bc 0E94 0000 		call _pal_lld_setlineid
 2868               	.LVL277:
 2869 01c0 0E94 0000 		call _pal_lld_getpadfromline
 2870               	.LVL278:
 2871 01c4 F82E      		mov r15,r24
 2872 01c6 67E0      		ldi r22,lo8(7)
 2873 01c8 89E2      		ldi r24,lo8(41)
 2874 01ca 90E0      		ldi r25,0
 2875 01cc 0E94 0000 		call _pal_lld_setlineid
 2876               	.LVL279:
 2877 01d0 0E94 0000 		call _pal_lld_getportfromline
 2878               	.LVL280:
 2879 01d4 B801      		movw r22,r16
 2880 01d6 00C0      		rjmp 2f
 2881               		1:
 2882 01d8 660F      		lsl r22
 2883               		2:
 2884 01da FA94      		dec r15
 2885 01dc 02F4      		brpl 1b
 2886 01de 46E0      		ldi r20,lo8(6)
 2887 01e0 0E94 0000 		call _pal_lld_setgroupmode
 2888               	.LVL281:
 339:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 2889               		.loc 1 339 0
 2890 01e4 67E0      		ldi r22,lo8(7)
 2891 01e6 89E2      		ldi r24,lo8(41)
 2892 01e8 90E0      		ldi r25,0
 2893 01ea 0E94 0000 		call _pal_lld_setlineid
 2894               	.LVL282:
 2895 01ee 0E94 0000 		call _pal_lld_getpadfromline
 2896               	.LVL283:
 2897 01f2 F82E      		mov r15,r24
 2898 01f4 67E0      		ldi r22,lo8(7)
 2899 01f6 89E2      		ldi r24,lo8(41)
 2900 01f8 90E0      		ldi r25,0
 2901 01fa 0E94 0000 		call _pal_lld_setlineid
 2902               	.LVL284:
 2903 01fe 0E94 0000 		call _pal_lld_getportfromline
 2904               	.LVL285:
 2905 0202 FC01      		movw r30,r24
 2906 0204 9281      		ldd r25,Z+2
 2907 0206 9801      		movw r18,r16
 2908 0208 00C0      		rjmp 2f
 2909               		1:
 2910 020a 220F      		lsl r18
 2911 020c 331F      		rol r19
 2912               		2:
 2913 020e FA94      		dec r15
 2914 0210 02F4      		brpl 1b
 2915 0212 2095      		com r18
 2916 0214 3095      		com r19
 2917 0216 9223      		and r25,r18
 2918 0218 9283      		std Z+2,r25
 340:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 2919               		.loc 1 340 0
 2920 021a 64E0      		ldi r22,lo8(4)
 2921 021c 89E2      		ldi r24,lo8(41)
 2922 021e 90E0      		ldi r25,0
 2923 0220 0E94 0000 		call _pal_lld_setlineid
 2924               	.LVL286:
 2925 0224 0E94 0000 		call _pal_lld_getpadfromline
 2926               	.LVL287:
 2927 0228 F82E      		mov r15,r24
 2928 022a 64E0      		ldi r22,lo8(4)
 2929 022c 89E2      		ldi r24,lo8(41)
 2930 022e 90E0      		ldi r25,0
 2931 0230 0E94 0000 		call _pal_lld_setlineid
 2932               	.LVL288:
 2933 0234 0E94 0000 		call _pal_lld_getportfromline
 2934               	.LVL289:
 2935 0238 B801      		movw r22,r16
 2936 023a 00C0      		rjmp 2f
 2937               		1:
 2938 023c 660F      		lsl r22
 2939               		2:
 2940 023e FA94      		dec r15
 2941 0240 02F4      		brpl 1b
 2942 0242 46E0      		ldi r20,lo8(6)
 2943 0244 0E94 0000 		call _pal_lld_setgroupmode
 2944               	.LVL290:
 341:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2945               		.loc 1 341 0
 2946 0248 64E0      		ldi r22,lo8(4)
 2947 024a 89E2      		ldi r24,lo8(41)
 2948 024c 90E0      		ldi r25,0
 2949 024e 0E94 0000 		call _pal_lld_setlineid
 2950               	.LVL291:
 2951 0252 0E94 0000 		call _pal_lld_getpadfromline
 2952               	.LVL292:
 2953 0256 F82E      		mov r15,r24
 2954 0258 64E0      		ldi r22,lo8(4)
 2955 025a 89E2      		ldi r24,lo8(41)
 2956 025c 90E0      		ldi r25,0
 2957 025e 0E94 0000 		call _pal_lld_setlineid
 2958               	.LVL293:
 2959 0262 0E94 0000 		call _pal_lld_getportfromline
 2960               	.LVL294:
 2961 0266 FC01      		movw r30,r24
 2962 0268 9281      		ldd r25,Z+2
 2963 026a 9801      		movw r18,r16
 2964 026c 00C0      		rjmp 2f
 2965               		1:
 2966 026e 220F      		lsl r18
 2967 0270 331F      		rol r19
 2968               		2:
 2969 0272 FA94      		dec r15
 2970 0274 02F4      		brpl 1b
 2971 0276 2095      		com r18
 2972 0278 3095      		com r19
 2973 027a 9223      		and r25,r18
 2974 027c 9283      		std Z+2,r25
 342:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 2975               		.loc 1 342 0
 2976 027e 66E0      		ldi r22,lo8(6)
 2977 0280 89E2      		ldi r24,lo8(41)
 2978 0282 90E0      		ldi r25,0
 2979 0284 0E94 0000 		call _pal_lld_setlineid
 2980               	.LVL295:
 2981 0288 0E94 0000 		call _pal_lld_getpadfromline
 2982               	.LVL296:
 2983 028c F82E      		mov r15,r24
 2984 028e 66E0      		ldi r22,lo8(6)
 2985 0290 89E2      		ldi r24,lo8(41)
 2986 0292 90E0      		ldi r25,0
 2987 0294 0E94 0000 		call _pal_lld_setlineid
 2988               	.LVL297:
 2989 0298 0E94 0000 		call _pal_lld_getportfromline
 2990               	.LVL298:
 2991 029c B801      		movw r22,r16
 2992 029e 00C0      		rjmp 2f
 2993               		1:
 2994 02a0 660F      		lsl r22
 2995               		2:
 2996 02a2 FA94      		dec r15
 2997 02a4 02F4      		brpl 1b
 2998 02a6 46E0      		ldi r20,lo8(6)
 2999 02a8 0E94 0000 		call _pal_lld_setgroupmode
 3000               	.LVL299:
 343:main.c        **** 
 3001               		.loc 1 343 0
 3002 02ac 66E0      		ldi r22,lo8(6)
 3003 02ae 89E2      		ldi r24,lo8(41)
 3004 02b0 90E0      		ldi r25,0
 3005 02b2 0E94 0000 		call _pal_lld_setlineid
 3006               	.LVL300:
 3007 02b6 0E94 0000 		call _pal_lld_getpadfromline
 3008               	.LVL301:
 3009 02ba F82E      		mov r15,r24
 3010 02bc 66E0      		ldi r22,lo8(6)
 3011 02be 89E2      		ldi r24,lo8(41)
 3012 02c0 90E0      		ldi r25,0
 3013 02c2 0E94 0000 		call _pal_lld_setlineid
 3014               	.LVL302:
 3015 02c6 0E94 0000 		call _pal_lld_getportfromline
 3016               	.LVL303:
 3017 02ca FC01      		movw r30,r24
 3018 02cc 9281      		ldd r25,Z+2
 3019 02ce 9801      		movw r18,r16
 3020 02d0 00C0      		rjmp 2f
 3021               		1:
 3022 02d2 220F      		lsl r18
 3023 02d4 331F      		rol r19
 3024               		2:
 3025 02d6 FA94      		dec r15
 3026 02d8 02F4      		brpl 1b
 3027 02da 2095      		com r18
 3028 02dc 3095      		com r19
 3029 02de 9223      		and r25,r18
 3030 02e0 9283      		std Z+2,r25
 346:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 3031               		.loc 1 346 0
 3032 02e2 61E0      		ldi r22,lo8(1)
 3033 02e4 83E2      		ldi r24,lo8(35)
 3034 02e6 90E0      		ldi r25,0
 3035 02e8 0E94 0000 		call _pal_lld_setlineid
 3036               	.LVL304:
 3037 02ec 0E94 0000 		call _pal_lld_getpadfromline
 3038               	.LVL305:
 3039 02f0 F82E      		mov r15,r24
 3040 02f2 61E0      		ldi r22,lo8(1)
 3041 02f4 83E2      		ldi r24,lo8(35)
 3042 02f6 90E0      		ldi r25,0
 3043 02f8 0E94 0000 		call _pal_lld_setlineid
 3044               	.LVL306:
 3045 02fc 0E94 0000 		call _pal_lld_getportfromline
 3046               	.LVL307:
 3047 0300 B801      		movw r22,r16
 3048 0302 00C0      		rjmp 2f
 3049               		1:
 3050 0304 660F      		lsl r22
 3051               		2:
 3052 0306 FA94      		dec r15
 3053 0308 02F4      		brpl 1b
 3054 030a 46E0      		ldi r20,lo8(6)
 3055 030c 0E94 0000 		call _pal_lld_setgroupmode
 3056               	.LVL308:
 347:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 3057               		.loc 1 347 0
 3058 0310 61E0      		ldi r22,lo8(1)
 3059 0312 83E2      		ldi r24,lo8(35)
 3060 0314 90E0      		ldi r25,0
 3061 0316 0E94 0000 		call _pal_lld_setlineid
 3062               	.LVL309:
 3063 031a 0E94 0000 		call _pal_lld_getpadfromline
 3064               	.LVL310:
 3065 031e F82E      		mov r15,r24
 3066 0320 61E0      		ldi r22,lo8(1)
 3067 0322 83E2      		ldi r24,lo8(35)
 3068 0324 90E0      		ldi r25,0
 3069 0326 0E94 0000 		call _pal_lld_setlineid
 3070               	.LVL311:
 3071 032a 0E94 0000 		call _pal_lld_getportfromline
 3072               	.LVL312:
 3073 032e FC01      		movw r30,r24
 3074 0330 9281      		ldd r25,Z+2
 3075 0332 9801      		movw r18,r16
 3076 0334 00C0      		rjmp 2f
 3077               		1:
 3078 0336 220F      		lsl r18
 3079 0338 331F      		rol r19
 3080               		2:
 3081 033a FA94      		dec r15
 3082 033c 02F4      		brpl 1b
 3083 033e 2095      		com r18
 3084 0340 3095      		com r19
 3085 0342 9223      		and r25,r18
 3086 0344 9283      		std Z+2,r25
 348:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 3087               		.loc 1 348 0
 3088 0346 65E0      		ldi r22,lo8(5)
 3089 0348 89E2      		ldi r24,lo8(41)
 3090 034a 90E0      		ldi r25,0
 3091 034c 0E94 0000 		call _pal_lld_setlineid
 3092               	.LVL313:
 3093 0350 0E94 0000 		call _pal_lld_getpadfromline
 3094               	.LVL314:
 3095 0354 F82E      		mov r15,r24
 3096 0356 65E0      		ldi r22,lo8(5)
 3097 0358 89E2      		ldi r24,lo8(41)
 3098 035a 90E0      		ldi r25,0
 3099 035c 0E94 0000 		call _pal_lld_setlineid
 3100               	.LVL315:
 3101 0360 0E94 0000 		call _pal_lld_getportfromline
 3102               	.LVL316:
 3103 0364 B801      		movw r22,r16
 3104 0366 00C0      		rjmp 2f
 3105               		1:
 3106 0368 660F      		lsl r22
 3107               		2:
 3108 036a FA94      		dec r15
 3109 036c 02F4      		brpl 1b
 3110 036e 46E0      		ldi r20,lo8(6)
 3111 0370 0E94 0000 		call _pal_lld_setgroupmode
 3112               	.LVL317:
 349:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 3113               		.loc 1 349 0
 3114 0374 65E0      		ldi r22,lo8(5)
 3115 0376 89E2      		ldi r24,lo8(41)
 3116 0378 90E0      		ldi r25,0
 3117 037a 0E94 0000 		call _pal_lld_setlineid
 3118               	.LVL318:
 3119 037e 0E94 0000 		call _pal_lld_getpadfromline
 3120               	.LVL319:
 3121 0382 F82E      		mov r15,r24
 3122 0384 65E0      		ldi r22,lo8(5)
 3123 0386 89E2      		ldi r24,lo8(41)
 3124 0388 90E0      		ldi r25,0
 3125 038a 0E94 0000 		call _pal_lld_setlineid
 3126               	.LVL320:
 3127 038e 0E94 0000 		call _pal_lld_getportfromline
 3128               	.LVL321:
 3129 0392 FC01      		movw r30,r24
 3130 0394 9281      		ldd r25,Z+2
 3131 0396 9801      		movw r18,r16
 3132 0398 00C0      		rjmp 2f
 3133               		1:
 3134 039a 220F      		lsl r18
 3135 039c 331F      		rol r19
 3136               		2:
 3137 039e FA94      		dec r15
 3138 03a0 02F4      		brpl 1b
 3139 03a2 2095      		com r18
 3140 03a4 3095      		com r19
 3141 03a6 9223      		and r25,r18
 3142 03a8 9283      		std Z+2,r25
 350:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 3143               		.loc 1 350 0
 3144 03aa 60E0      		ldi r22,0
 3145 03ac 83E2      		ldi r24,lo8(35)
 3146 03ae 90E0      		ldi r25,0
 3147 03b0 0E94 0000 		call _pal_lld_setlineid
 3148               	.LVL322:
 3149 03b4 0E94 0000 		call _pal_lld_getpadfromline
 3150               	.LVL323:
 3151 03b8 F82E      		mov r15,r24
 3152 03ba 60E0      		ldi r22,0
 3153 03bc 83E2      		ldi r24,lo8(35)
 3154 03be 90E0      		ldi r25,0
 3155 03c0 0E94 0000 		call _pal_lld_setlineid
 3156               	.LVL324:
 3157 03c4 0E94 0000 		call _pal_lld_getportfromline
 3158               	.LVL325:
 3159 03c8 B801      		movw r22,r16
 3160 03ca 00C0      		rjmp 2f
 3161               		1:
 3162 03cc 660F      		lsl r22
 3163               		2:
 3164 03ce FA94      		dec r15
 3165 03d0 02F4      		brpl 1b
 3166 03d2 46E0      		ldi r20,lo8(6)
 3167 03d4 0E94 0000 		call _pal_lld_setgroupmode
 3168               	.LVL326:
 351:main.c        **** 
 3169               		.loc 1 351 0
 3170 03d8 60E0      		ldi r22,0
 3171 03da 83E2      		ldi r24,lo8(35)
 3172 03dc 90E0      		ldi r25,0
 3173 03de 0E94 0000 		call _pal_lld_setlineid
 3174               	.LVL327:
 3175 03e2 0E94 0000 		call _pal_lld_getpadfromline
 3176               	.LVL328:
 3177 03e6 F82E      		mov r15,r24
 3178 03e8 60E0      		ldi r22,0
 3179 03ea 83E2      		ldi r24,lo8(35)
 3180 03ec 90E0      		ldi r25,0
 3181 03ee 0E94 0000 		call _pal_lld_setlineid
 3182               	.LVL329:
 3183 03f2 0E94 0000 		call _pal_lld_getportfromline
 3184               	.LVL330:
 3185 03f6 FC01      		movw r30,r24
 3186 03f8 9281      		ldd r25,Z+2
 3187 03fa 9801      		movw r18,r16
 3188 03fc 00C0      		rjmp 2f
 3189               		1:
 3190 03fe 220F      		lsl r18
 3191 0400 331F      		rol r19
 3192               		2:
 3193 0402 FA94      		dec r15
 3194 0404 02F4      		brpl 1b
 3195 0406 2095      		com r18
 3196 0408 3095      		com r19
 3197 040a 2923      		and r18,r25
 3198 040c 2283      		std Z+2,r18
 356:main.c        **** 
 3199               		.loc 1 356 0
 3200 040e 10E0      		ldi r17,0
 3201 0410 00E0      		ldi r16,0
 3202 0412 20E0      		ldi r18,lo8(gs(Thread1))
 3203 0414 30E0      		ldi r19,hi8(gs(Thread1))
 3204 0416 40E8      		ldi r20,lo8(-128)
 3205 0418 63E8      		ldi r22,lo8(-125)
 3206 041a 70E0      		ldi r23,0
 3207 041c 80E0      		ldi r24,lo8(waThread1)
 3208 041e 90E0      		ldi r25,hi8(waThread1)
 3209 0420 0E94 0000 		call chThdCreateStatic
 3210               	.LVL331:
 3211 0424 00C0      		rjmp .L239
 3212               	.L243:
 362:main.c        ****     }
 3213               		.loc 1 362 0
 3214 0426 84E0      		ldi r24,lo8(4)
 3215 0428 90E0      		ldi r25,0
 3216 042a 0E94 0000 		call enqueue
 3217               	.LVL332:
 3218               	.L236:
 377:main.c        ****   }
 3219               		.loc 1 377 0
 3220 042e 6EE0      		ldi r22,lo8(14)
 3221 0430 73E0      		ldi r23,lo8(3)
 3222 0432 80E0      		ldi r24,0
 3223 0434 90E0      		ldi r25,0
 3224 0436 0E94 0000 		call chThdSleep
 3225               	.LVL333:
 3226               	.L239:
 360:main.c        ****     {
 3227               		.loc 1 360 0
 3228 043a 65E0      		ldi r22,lo8(5)
 3229 043c 86E2      		ldi r24,lo8(38)
 3230 043e 90E0      		ldi r25,0
 3231 0440 0E94 0000 		call _pal_lld_setlineid
 3232               	.LVL334:
 3233 0444 41E0      		ldi r20,lo8(1)
 3234 0446 0E94 0000 		call button_check
 3235               	.LVL335:
 3236 044a 8111      		cpse r24,__zero_reg__
 3237 044c 00C0      		rjmp .L243
 364:main.c        ****     {
 3238               		.loc 1 364 0
 3239 044e 63E0      		ldi r22,lo8(3)
 3240 0450 86E2      		ldi r24,lo8(38)
 3241 0452 90E0      		ldi r25,0
 3242 0454 0E94 0000 		call _pal_lld_setlineid
 3243               	.LVL336:
 3244 0458 42E0      		ldi r20,lo8(2)
 3245 045a 0E94 0000 		call button_check
 3246               	.LVL337:
 3247 045e 8823      		tst r24
 3248 0460 01F0      		breq .L237
 366:main.c        ****     }
 3249               		.loc 1 366 0
 3250 0462 83E0      		ldi r24,lo8(3)
 3251 0464 90E0      		ldi r25,0
 3252 0466 0E94 0000 		call enqueue
 3253               	.LVL338:
 3254 046a 00C0      		rjmp .L236
 3255               	.L237:
 368:main.c        ****     {
 3256               		.loc 1 368 0
 3257 046c 64E0      		ldi r22,lo8(4)
 3258 046e 86E2      		ldi r24,lo8(38)
 3259 0470 90E0      		ldi r25,0
 3260 0472 0E94 0000 		call _pal_lld_setlineid
 3261               	.LVL339:
 3262 0476 43E0      		ldi r20,lo8(3)
 3263 0478 0E94 0000 		call button_check
 3264               	.LVL340:
 3265 047c 8823      		tst r24
 3266 047e 01F0      		breq .L238
 370:main.c        ****     }
 3267               		.loc 1 370 0
 3268 0480 81E0      		ldi r24,lo8(1)
 3269 0482 90E0      		ldi r25,0
 3270 0484 0E94 0000 		call enqueue
 3271               	.LVL341:
 3272 0488 00C0      		rjmp .L236
 3273               	.L238:
 372:main.c        ****     {
 3274               		.loc 1 372 0
 3275 048a 62E0      		ldi r22,lo8(2)
 3276 048c 86E2      		ldi r24,lo8(38)
 3277 048e 90E0      		ldi r25,0
 3278 0490 0E94 0000 		call _pal_lld_setlineid
 3279               	.LVL342:
 3280 0494 44E0      		ldi r20,lo8(4)
 3281 0496 0E94 0000 		call button_check
 3282               	.LVL343:
 3283 049a 8823      		tst r24
 3284 049c 01F0      		breq .L236
 374:main.c        ****     }
 3285               		.loc 1 374 0
 3286 049e 82E0      		ldi r24,lo8(2)
 3287 04a0 90E0      		ldi r25,0
 3288 04a2 0E94 0000 		call enqueue
 3289               	.LVL344:
 3290 04a6 00C0      		rjmp .L236
 3291               		.cfi_endproc
 3292               	.LFE244:
 3294               		.section	.bss.old_x4.4176,"aw",@nobits
 3297               	old_x4.4176:
 3298 0000 00        		.zero	1
 3299               		.section	.bss.old_x3.4174,"aw",@nobits
 3302               	old_x3.4174:
 3303 0000 00        		.zero	1
 3304               		.section	.bss.old_x2.4172,"aw",@nobits
 3307               	old_x2.4172:
 3308 0000 00        		.zero	1
 3309               		.section	.bss.old_x1.4170,"aw",@nobits
 3312               	old_x1.4170:
 3313 0000 00        		.zero	1
 3314               		.section	.bss.waThread1,"aw",@nobits
 3317               	waThread1:
 3318 0000 0000 0000 		.zero	131
 3318      0000 0000 
 3318      0000 0000 
 3318      0000 0000 
 3318      0000 0000 
 3319               	.global	prev_state
 3320               		.section	.data.prev_state,"aw",@progbits
 3323               	prev_state:
 3324 0000 02        		.byte	2
 3325               		.comm	flag_amb_sec,1,1
 3326               		.comm	flag_amb_prim,1,1
 3327               	.global	main_vt_flag
 3328               		.section	.bss.main_vt_flag,"aw",@nobits
 3331               	main_vt_flag:
 3332 0000 00        		.zero	1
 3333               	.global	g_state
 3334               		.section	.data.g_state,"aw",@progbits
 3337               	g_state:
 3338 0000 01        		.byte	1
 3339               		.section	.bss.qfull,"aw",@nobits
 3342               	qfull:
 3343 0000 0000 0000 		.zero	4
 3344               		.section	.bss.qempty,"aw",@nobits
 3347               	qempty:
 3348 0000 0000 0000 		.zero	4
 3349               		.section	.bss.qmtx,"aw",@nobits
 3352               	qmtx:
 3353 0000 0000 0000 		.zero	8
 3353      0000 0000 
 3354               		.section	.bss.qsize,"aw",@nobits
 3357               	qsize:
 3358 0000 0000      		.zero	2
 3359               		.section	.bss.wrp,"aw",@nobits
 3362               	wrp:
 3363 0000 0000      		.zero	2
 3364               		.section	.bss.rdp,"aw",@nobits
 3367               	rdp:
 3368 0000 0000      		.zero	2
 3369               		.section	.bss.queue,"aw",@nobits
 3372               	queue:
 3373 0000 0000 0000 		.zero	256
 3373      0000 0000 
 3373      0000 0000 
 3373      0000 0000 
 3373      0000 0000 
 3374               		.text
 3375               	.Letext0:
 3376               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 3377               		.file 5 "/usr/lib/avr/include/stdint.h"
 3378               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 3379               		.file 7 "../../os/rt/include/chearly.h"
 3380               		.file 8 "../../os/rt/include/chobjects.h"
 3381               		.file 9 "../../os/rt/include/chrfcu.h"
 3382               		.file 10 "../../os/rt/include/chdebug.h"
 3383               		.file 11 "../../os/rt/include/chtime.h"
 3384               		.file 12 "../../os/rt/include/chlists.h"
 3385               		.file 13 "../../os/rt/include/chsem.h"
 3386               		.file 14 "../../os/rt/include/chmtx.h"
 3387               		.file 15 "../../os/rt/include/chsys.h"
 3388               		.file 16 "../../os/rt/include/chregistry.h"
 3389               		.file 17 "../../os/rt/include/chcond.h"
 3390               		.file 18 "../../os/rt/include/chevents.h"
 3391               		.file 19 "../../os/oslib/include/chmemcore.h"
 3392               		.file 20 "../../os/hal/include/hal_queues.h"
 3393               		.file 21 "../../os/hal/include/hal_pal.h"
 3394               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 3395               		.file 23 "../../os/hal/include/hal_serial.h"
 3396               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 3397               		.file 25 "../../os/hal/include/hal.h"
 3398               		.file 26 "../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccDgI57L.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccDgI57L.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccDgI57L.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccDgI57L.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccDgI57L.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccDgI57L.s:13     .text.vt_cb:0000000000000000 vt_cb
     /tmp/ccDgI57L.s:3331   .bss.main_vt_flag:0000000000000000 main_vt_flag
     /tmp/ccDgI57L.s:36     .text.queueInit:0000000000000000 queueInit
     /tmp/ccDgI57L.s:3352   .bss.qmtx:0000000000000000 qmtx
     /tmp/ccDgI57L.s:3347   .bss.qempty:0000000000000000 qempty
     /tmp/ccDgI57L.s:3342   .bss.qfull:0000000000000000 qfull
     /tmp/ccDgI57L.s:3372   .bss.queue:0000000000000000 queue
     /tmp/ccDgI57L.s:3362   .bss.wrp:0000000000000000 wrp
     /tmp/ccDgI57L.s:3367   .bss.rdp:0000000000000000 rdp
     /tmp/ccDgI57L.s:3357   .bss.qsize:0000000000000000 qsize
     /tmp/ccDgI57L.s:78     .text.enqueue:0000000000000000 enqueue
     /tmp/ccDgI57L.s:168    .text.dequeue:0000000000000000 dequeue
     /tmp/ccDgI57L.s:255    .text.Thread1:0000000000000000 Thread1
     /tmp/ccDgI57L.s:3337   .data.g_state:0000000000000000 g_state
     /tmp/ccDgI57L.s:3323   .data.prev_state:0000000000000000 prev_state
                            *COM*:0000000000000001 flag_amb_sec
                            *COM*:0000000000000001 flag_amb_prim
     /tmp/ccDgI57L.s:2376   .text.button_check:0000000000000000 button_check
     /tmp/ccDgI57L.s:3297   .bss.old_x4.4176:0000000000000000 old_x4.4176
     /tmp/ccDgI57L.s:3312   .bss.old_x1.4170:0000000000000000 old_x1.4170
     /tmp/ccDgI57L.s:3307   .bss.old_x2.4172:0000000000000000 old_x2.4172
     /tmp/ccDgI57L.s:3302   .bss.old_x3.4174:0000000000000000 old_x3.4174
     /tmp/ccDgI57L.s:2597   .text.startup.main:0000000000000000 main
     /tmp/ccDgI57L.s:3317   .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
chMtxObjectInit
chCondObjectInit
chMtxLock
chCondWait
chCondSignal
chMtxUnlock
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
chThdSleep
__tablejump2__
chVTDoResetI
chVTDoSetI
halInit
chSysInit
SD1
sdStart
_pal_lld_setgroupmode
chThdCreateStatic
__do_copy_data
__do_clear_bss
