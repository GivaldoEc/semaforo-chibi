   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb,"ax",@progbits
  11               	.global	vt_cb
  13               	vt_cb:
  14               	.LFB248:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** 
  20:main.c        **** #define LED_PERIODO 10000
  21:main.c        **** #define BUFFER_SIZE 8
  22:main.c        **** #define QUEUE_SIZE 128
  23:main.c        **** 
  24:main.c        **** /* Definições de pinos*/
  25:main.c        **** // LEDS
  26:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  27:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  28:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  29:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  30:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  31:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  32:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  33:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  34:main.c        **** 
  35:main.c        **** // Botões
  36:main.c        **** #define AMB_PRIM PAL_LINE(IOPORT3, 3)
  37:main.c        **** #define AMB_SEC PAL_LINE(IOPORT3, 5)
  38:main.c        **** #define SEC_FLAG PAL_LINE(IOPORT3, 4)
  39:main.c        **** #define PED_FLAG PAL_LINE(IOPORT3, 2)
  40:main.c        **** 
  41:main.c        **** // Buffer
  42:main.c        **** static msg_t queue[QUEUE_SIZE], *rdp, *wrp;
  43:main.c        **** static size_t qsize;
  44:main.c        **** static mutex_t qmtx;
  45:main.c        **** static condition_variable_t qempty;
  46:main.c        **** static condition_variable_t qfull;
  47:main.c        **** 
  48:main.c        **** 
  49:main.c        **** typedef struct
  50:main.c        **** {
  51:main.c        ****   uint8_t events[BUFFER_SIZE];
  52:main.c        ****   uint8_t head;
  53:main.c        ****   uint8_t tail;
  54:main.c        ****   uint8_t size;
  55:main.c        **** } EventBuffer;
  56:main.c        **** 
  57:main.c        **** EventBuffer ev_buffer;
  58:main.c        **** 
  59:main.c        **** void queueInit(void);
  60:main.c        **** void enqueue(msg_t msg);
  61:main.c        **** msg_t dequeue(void);
  62:main.c        **** void bufferPush(EventBuffer *cb, uint8_t event);
  63:main.c        **** uint8_t bufferPop(EventBuffer *cb);
  64:main.c        **** void vt_cb(void *arg);
  65:main.c        **** 
  66:main.c        **** enum
  67:main.c        **** {
  68:main.c        ****   SECUNDARIO = 1,
  69:main.c        ****   PEDESTRE,
  70:main.c        ****   AMB_PRIMARIO,
  71:main.c        ****   AMB_SECUNDARIO
  72:main.c        **** };
  73:main.c        **** 
  74:main.c        **** /*
  75:main.c        ****  * LED blinker thread, times are in milliseconds.
  76:main.c        ****  */
  77:main.c        **** 
  78:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  79:main.c        **** static THD_FUNCTION(Thread1, arg)
  80:main.c        **** {
  81:main.c        ****   virtual_timer_t vt;
  82:main.c        **** 
  83:main.c        ****   chVTObjectInit(&vt);
  84:main.c        ****   chVTSet(&vt, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb, (void *)&vt);
  85:main.c        **** 
  86:main.c        ****   msg_t ev;
  87:main.c        ****   while (1)
  88:main.c        ****   {
  89:main.c        ****     ev = dequeue();
  90:main.c        ****     if (ev == AMB_PRIMARIO){
  91:main.c        ****       palSetLine(PRIMARIO_VERDE);
  92:main.c        ****     } else if (ev == AMB_SECUNDARIO){
  93:main.c        ****       palToggleLine(SECUNDARIO_VERDE);
  94:main.c        ****     } else if (ev == SECUNDARIO){
  95:main.c        ****       palSetLine(SECUNDARIO_VERMELHO);
  96:main.c        ****     } else if (ev == PEDESTRE){
  97:main.c        ****       palSetLine(PEDESTRE_VERDE);
  98:main.c        ****     }
  99:main.c        ****     chThdSleepMilliseconds(100);
 100:main.c        ****   }
 101:main.c        **** }
 102:main.c        **** 
 103:main.c        **** /*
 104:main.c        ****  * Application entry point.
 105:main.c        ****  */
 106:main.c        **** int main(void)
 107:main.c        **** {
 108:main.c        ****   queueInit();
 109:main.c        ****   /*
 110:main.c        ****    * System initializations.
 111:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
 112:main.c        ****    *   and performs the board-specific initializations.
 113:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
 114:main.c        ****    *   RTOS is active.
 115:main.c        ****    */
 116:main.c        ****   halInit();
 117:main.c        ****   chSysInit();
 118:main.c        **** 
 119:main.c        ****   /* Configuração dos botões */
 120:main.c        ****   palSetLineMode(PED_FLAG, PAL_MODE_INPUT_PULLUP);
 121:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 122:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 123:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 124:main.c        **** 
 125:main.c        ****   // Pedestre
 126:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 127:main.c        ****   palClearLine(PEDESTRE_VERDE);
 128:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 129:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 130:main.c        **** 
 131:main.c        ****   // Primário
 132:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 133:main.c        ****   palClearLine(PRIMARIO_VERDE);
 134:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 135:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 136:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 137:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 138:main.c        **** 
 139:main.c        ****   // Secundário
 140:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 141:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 142:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 143:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 144:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 145:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 146:main.c        **** 
 147:main.c        ****   /*
 148:main.c        ****    * Starts the LED blinker thread.
 149:main.c        ****    */
 150:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 151:main.c        **** 
 152:main.c        ****   while (1)
 153:main.c        ****   {
 154:main.c        ****     if (palReadLine(AMB_SEC) == PAL_LOW)
 155:main.c        ****     {
 156:main.c        ****       enqueue(AMB_SECUNDARIO);
 157:main.c        ****     }
 158:main.c        ****     else if (palReadLine(AMB_PRIM) == PAL_LOW)
 159:main.c        ****     {
 160:main.c        ****       enqueue(AMB_PRIMARIO);
 161:main.c        ****     }
 162:main.c        ****     else if (palReadLine(SEC_FLAG) == PAL_LOW)
 163:main.c        ****     {
 164:main.c        ****       enqueue(SECUNDARIO);
 165:main.c        ****     }
 166:main.c        ****     else if (palReadLine(PED_FLAG) == PAL_LOW)
 167:main.c        ****     {
 168:main.c        ****       enqueue(PEDESTRE);
 169:main.c        ****     }
 170:main.c        ****     /* Debouncing. */
 171:main.c        ****     chThdSleepMilliseconds(50);
 172:main.c        ****   }
 173:main.c        **** }
 174:main.c        **** 
 175:main.c        **** /*
 176:main.c        ****  * Synchronized queue initialization.
 177:main.c        ****  */
 178:main.c        **** void queueInit(void) {
 179:main.c        ****  
 180:main.c        ****   chMtxObjectInit(&qmtx);
 181:main.c        ****   chCondObjectInit(&qempty);
 182:main.c        ****   chCondObjectInit(&qfull);
 183:main.c        ****  
 184:main.c        ****   rdp = wrp = &queue[0];
 185:main.c        ****   qsize = 0;
 186:main.c        **** }
 187:main.c        **** 
 188:main.c        **** /*
 189:main.c        ****  * Writes a message into the queue, if the queue is full waits
 190:main.c        ****  * for a free slot.
 191:main.c        ****  */
 192:main.c        **** void enqueue(msg_t msg) {
 193:main.c        ****  
 194:main.c        ****   /* Entering monitor.*/
 195:main.c        ****   chMtxLock(&qmtx);
 196:main.c        ****  
 197:main.c        ****   /* Waiting for space in the queue.*/
 198:main.c        ****   while (qsize >= QUEUE_SIZE)
 199:main.c        ****     chCondWait(&qfull);
 200:main.c        ****  
 201:main.c        ****   /* Writing the message in the queue.*/  
 202:main.c        ****   *wrp = msg;
 203:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 204:main.c        ****     wrp = &queue[0];
 205:main.c        ****   qsize++;
 206:main.c        ****  
 207:main.c        ****   /* Signaling that there is at least a message.*/
 208:main.c        ****   chCondSignal(&qempty);
 209:main.c        ****  
 210:main.c        ****   /* Leaving monitor.*/
 211:main.c        ****   chMtxUnlock(&qmtx);
 212:main.c        **** }
 213:main.c        **** 
 214:main.c        **** /*
 215:main.c        ****  * Reads a message from the queue, if the queue is empty waits
 216:main.c        ****  * for a message.
 217:main.c        ****  */
 218:main.c        **** msg_t dequeue(void) {
 219:main.c        ****   msg_t msg;
 220:main.c        ****  
 221:main.c        ****   /* Entering monitor.*/
 222:main.c        ****   chMtxLock(&qmtx);
 223:main.c        ****  
 224:main.c        ****   /* Waiting for messages in the queue.*/
 225:main.c        ****   while (qsize == 0)
 226:main.c        ****     chCondWait(&qempty);
 227:main.c        ****  
 228:main.c        ****   /* Reading the message from the queue.*/  
 229:main.c        ****   msg = *rdp;
 230:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 231:main.c        ****     rdp = &queue[0];
 232:main.c        ****   qsize--;
 233:main.c        ****  
 234:main.c        ****   /* Signaling that there is at least one free slot.*/
 235:main.c        ****   chCondSignal(&qfull);
 236:main.c        ****  
 237:main.c        ****   /* Leaving monitor.*/
 238:main.c        ****   chMtxUnlock(&qmtx);
 239:main.c        ****  
 240:main.c        ****   return msg;
 241:main.c        **** }
 242:main.c        **** 
 243:main.c        **** void vt_cb(void *arg)
 244:main.c        **** {
  16               		.loc 1 244 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 EC01      		movw r28,r24
 245:main.c        ****   chSysLockFromISR();
 246:main.c        ****   palTogglePad(IOPORT2, PORTB_LED1);
  40               		.loc 1 246 0
  41 000a 85B1      		in r24,0x5
  42               	.LVL1:
  43 000c 90E2      		ldi r25,lo8(32)
  44 000e 8927      		eor r24,r25
  45 0010 85B9      		out 0x5,r24
  46               	.LVL2:
  47               	.LBB43:
  48               	.LBB44:
  49               	.LBB45:
  50               	.LBB46:
  51               		.file 2 "../../os/rt/include/chvt.h"
   1:../../os/rt/include/chvt.h **** /*
   2:../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chvt.h **** 
   5:../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chvt.h **** 
   7:../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chvt.h **** 
  11:../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chvt.h **** 
  16:../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chvt.h **** */
  19:../../os/rt/include/chvt.h **** 
  20:../../os/rt/include/chvt.h **** /**
  21:../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../os/rt/include/chvt.h ****  *
  24:../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../os/rt/include/chvt.h ****  * @{
  26:../../os/rt/include/chvt.h ****  */
  27:../../os/rt/include/chvt.h **** 
  28:../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../os/rt/include/chvt.h **** 
  31:../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../os/rt/include/chvt.h **** 
  35:../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../os/rt/include/chvt.h **** 
  39:../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../os/rt/include/chvt.h **** 
  43:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../os/rt/include/chvt.h **** #endif
  47:../../os/rt/include/chvt.h **** 
  48:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../os/rt/include/chvt.h **** #endif
  51:../../os/rt/include/chvt.h **** 
  52:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../os/rt/include/chvt.h **** #endif
  55:../../os/rt/include/chvt.h **** 
  56:../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../os/rt/include/chvt.h **** 
  60:../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../os/rt/include/chvt.h **** 
  64:../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../os/rt/include/chvt.h **** 
  68:../../os/rt/include/chvt.h **** /*
  69:../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../os/rt/include/chvt.h ****  */
  71:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../os/rt/include/chvt.h **** extern "C" {
  73:../../os/rt/include/chvt.h **** #endif
  74:../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:../../os/rt/include/chvt.h **** #endif
  85:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  86:../../os/rt/include/chvt.h **** }
  87:../../os/rt/include/chvt.h **** #endif
  88:../../os/rt/include/chvt.h **** 
  89:../../os/rt/include/chvt.h **** /*===========================================================================*/
  90:../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../os/rt/include/chvt.h **** 
  93:../../os/rt/include/chvt.h **** /**
  94:../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:../../os/rt/include/chvt.h ****  *
 100:../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:../../os/rt/include/chvt.h ****  *
 102:../../os/rt/include/chvt.h ****  * @init
 103:../../os/rt/include/chvt.h ****  */
 104:../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:../../os/rt/include/chvt.h **** 
 106:../../os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 107:../../os/rt/include/chvt.h **** }
 108:../../os/rt/include/chvt.h **** 
 109:../../os/rt/include/chvt.h **** /**
 110:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 111:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:../../os/rt/include/chvt.h ****  *          invocation.
 113:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:../../os/rt/include/chvt.h ****  *          @p systime_t size.
 117:../../os/rt/include/chvt.h ****  *
 118:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:../../os/rt/include/chvt.h ****  *
 120:../../os/rt/include/chvt.h ****  * @xclass
 121:../../os/rt/include/chvt.h ****  */
 122:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:../../os/rt/include/chvt.h **** 
 124:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:../../os/rt/include/chvt.h ****   return port_timer_get_time();
 128:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:../../os/rt/include/chvt.h **** }
 130:../../os/rt/include/chvt.h **** 
 131:../../os/rt/include/chvt.h **** /**
 132:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 133:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:../../os/rt/include/chvt.h ****  *          invocation.
 135:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:../../os/rt/include/chvt.h ****  *
 137:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:../../os/rt/include/chvt.h ****  *
 139:../../os/rt/include/chvt.h ****  * @api
 140:../../os/rt/include/chvt.h ****  */
 141:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:../../os/rt/include/chvt.h ****   systime_t systime;
 143:../../os/rt/include/chvt.h **** 
 144:../../os/rt/include/chvt.h ****   chSysLock();
 145:../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:../../os/rt/include/chvt.h ****   chSysUnlock();
 147:../../os/rt/include/chvt.h **** 
 148:../../os/rt/include/chvt.h ****   return systime;
 149:../../os/rt/include/chvt.h **** }
 150:../../os/rt/include/chvt.h **** 
 151:../../os/rt/include/chvt.h **** /**
 152:../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:../../os/rt/include/chvt.h ****  *
 154:../../os/rt/include/chvt.h ****  * @param[in] start     start time
 155:../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:../../os/rt/include/chvt.h ****  *
 157:../../os/rt/include/chvt.h ****  * @xclass
 158:../../os/rt/include/chvt.h ****  */
 159:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:../../os/rt/include/chvt.h **** 
 161:../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:../../os/rt/include/chvt.h **** }
 163:../../os/rt/include/chvt.h **** 
 164:../../os/rt/include/chvt.h **** /**
 165:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:../../os/rt/include/chvt.h ****  *          window.
 167:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:../../os/rt/include/chvt.h ****  *          time window has zero size.
 169:../../os/rt/include/chvt.h ****  *
 170:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:../../os/rt/include/chvt.h ****  *
 175:../../os/rt/include/chvt.h ****  * @xclass
 176:../../os/rt/include/chvt.h ****  */
 177:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:../../os/rt/include/chvt.h **** 
 179:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:../../os/rt/include/chvt.h **** }
 181:../../os/rt/include/chvt.h **** 
 182:../../os/rt/include/chvt.h **** /**
 183:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:../../os/rt/include/chvt.h ****  *          window.
 185:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:../../os/rt/include/chvt.h ****  *          time window has zero size.
 187:../../os/rt/include/chvt.h ****  *
 188:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:../../os/rt/include/chvt.h ****  *
 193:../../os/rt/include/chvt.h ****  * @api
 194:../../os/rt/include/chvt.h ****  */
 195:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:../../os/rt/include/chvt.h **** 
 197:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:../../os/rt/include/chvt.h **** }
 199:../../os/rt/include/chvt.h **** 
 200:../../os/rt/include/chvt.h **** /**
 201:../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:../../os/rt/include/chvt.h ****  *
 207:../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:../../os/rt/include/chvt.h ****  *
 214:../../os/rt/include/chvt.h ****  * @iclass
 215:../../os/rt/include/chvt.h ****  */
 216:../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:../../os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:../../os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:../../os/rt/include/chvt.h **** 
 220:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:../../os/rt/include/chvt.h **** 
 222:../../os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:../../os/rt/include/chvt.h ****     return false;
 224:../../os/rt/include/chvt.h ****   }
 225:../../os/rt/include/chvt.h **** 
 226:../../os/rt/include/chvt.h ****   if (timep != NULL) {
 227:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:../../os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:../../os/rt/include/chvt.h **** #else
 230:../../os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:../../os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:../../os/rt/include/chvt.h **** #endif
 233:../../os/rt/include/chvt.h ****   }
 234:../../os/rt/include/chvt.h **** 
 235:../../os/rt/include/chvt.h ****   return true;
 236:../../os/rt/include/chvt.h **** }
 237:../../os/rt/include/chvt.h **** 
 238:../../os/rt/include/chvt.h **** /**
 239:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:../../os/rt/include/chvt.h ****  *
 243:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:../../os/rt/include/chvt.h ****  *
 246:../../os/rt/include/chvt.h ****  * @iclass
 247:../../os/rt/include/chvt.h ****  */
 248:../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:../../os/rt/include/chvt.h **** 
 250:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:../../os/rt/include/chvt.h **** 
 252:../../os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:../../os/rt/include/chvt.h **** }
 254:../../os/rt/include/chvt.h **** 
 255:../../os/rt/include/chvt.h **** /**
 256:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:../../os/rt/include/chvt.h ****  *
 260:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:../../os/rt/include/chvt.h ****  *
 263:../../os/rt/include/chvt.h ****  * @api
 264:../../os/rt/include/chvt.h ****  */
 265:../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:../../os/rt/include/chvt.h ****   bool b;
 267:../../os/rt/include/chvt.h **** 
 268:../../os/rt/include/chvt.h ****   chSysLock();
 269:../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:../../os/rt/include/chvt.h ****   chSysUnlock();
 271:../../os/rt/include/chvt.h **** 
 272:../../os/rt/include/chvt.h ****   return b;
 273:../../os/rt/include/chvt.h **** }
 274:../../os/rt/include/chvt.h **** 
 275:../../os/rt/include/chvt.h **** /**
 276:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:../../os/rt/include/chvt.h ****  *
 281:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:../../os/rt/include/chvt.h ****  *
 283:../../os/rt/include/chvt.h ****  * @iclass
 284:../../os/rt/include/chvt.h ****  */
 285:../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:../../os/rt/include/chvt.h **** 
 287:../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
  52               		.loc 2 287 0
  53 0012 8881      		ld r24,Y
  54 0014 9981      		ldd r25,Y+1
  55 0016 892B      		or r24,r25
  56 0018 01F0      		breq .L2
 288:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
  57               		.loc 2 288 0
  58 001a CE01      		movw r24,r28
  59 001c 0E94 0000 		call chVTDoResetI
  60               	.LVL3:
  61               	.L2:
  62               	.LBE46:
  63               	.LBE45:
 289:../../os/rt/include/chvt.h ****   }
 290:../../os/rt/include/chvt.h **** }
 291:../../os/rt/include/chvt.h **** 
 292:../../os/rt/include/chvt.h **** /**
 293:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:../../os/rt/include/chvt.h ****  *
 298:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:../../os/rt/include/chvt.h ****  *
 300:../../os/rt/include/chvt.h ****  * @api
 301:../../os/rt/include/chvt.h ****  */
 302:../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:../../os/rt/include/chvt.h **** 
 304:../../os/rt/include/chvt.h ****   chSysLock();
 305:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:../../os/rt/include/chvt.h ****   chSysUnlock();
 307:../../os/rt/include/chvt.h **** }
 308:../../os/rt/include/chvt.h **** 
 309:../../os/rt/include/chvt.h **** /**
 310:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:../../os/rt/include/chvt.h ****  *          using the new parameters.
 313:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:../../os/rt/include/chvt.h ****  *
 316:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:../../os/rt/include/chvt.h ****  *                        normal time specification.
 321:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:../../os/rt/include/chvt.h ****  *                      .
 323:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../os/rt/include/chvt.h ****  *                      function
 328:../../os/rt/include/chvt.h ****  *
 329:../../os/rt/include/chvt.h ****  * @iclass
 330:../../os/rt/include/chvt.h ****  */
 331:../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:../../os/rt/include/chvt.h **** 
 334:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
  64               		.loc 2 335 0
  65 0020 8E01      		movw r16,r28
  66 0022 20E0      		ldi r18,lo8(gs(vt_cb))
  67 0024 30E0      		ldi r19,hi8(gs(vt_cb))
  68 0026 48E2      		ldi r20,lo8(40)
  69 0028 51E3      		ldi r21,lo8(49)
  70 002a 61E0      		ldi r22,lo8(1)
  71 002c 70E0      		ldi r23,0
  72 002e CE01      		movw r24,r28
  73 0030 0E94 0000 		call chVTDoSetI
  74               	.LVL4:
  75               	/* epilogue start */
  76               	.LBE44:
  77               	.LBE43:
 247:main.c        ****   chVTSetI((virtual_timer_t *)arg, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb, arg);
 248:main.c        ****   chSysUnlockFromISR();
 249:main.c        **** }
  78               		.loc 1 249 0
  79 0034 DF91      		pop r29
  80 0036 CF91      		pop r28
  81               	.LVL5:
  82 0038 1F91      		pop r17
  83 003a 0F91      		pop r16
  84               	.LVL6:
  85 003c 0895      		ret
  86               		.cfi_endproc
  87               	.LFE248:
  89               		.section	.text.queueInit,"ax",@progbits
  90               	.global	queueInit
  92               	queueInit:
  93               	.LFB245:
 178:main.c        ****  
  94               		.loc 1 178 0
  95               		.cfi_startproc
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 0 */
  99               	.L__stack_usage = 0
 180:main.c        ****   chCondObjectInit(&qempty);
 100               		.loc 1 180 0
 101 0000 80E0      		ldi r24,lo8(qmtx)
 102 0002 90E0      		ldi r25,hi8(qmtx)
 103 0004 0E94 0000 		call chMtxObjectInit
 104               	.LVL7:
 181:main.c        ****   chCondObjectInit(&qfull);
 105               		.loc 1 181 0
 106 0008 80E0      		ldi r24,lo8(qempty)
 107 000a 90E0      		ldi r25,hi8(qempty)
 108 000c 0E94 0000 		call chCondObjectInit
 109               	.LVL8:
 182:main.c        ****  
 110               		.loc 1 182 0
 111 0010 80E0      		ldi r24,lo8(qfull)
 112 0012 90E0      		ldi r25,hi8(qfull)
 113 0014 0E94 0000 		call chCondObjectInit
 114               	.LVL9:
 184:main.c        ****   qsize = 0;
 115               		.loc 1 184 0
 116 0018 80E0      		ldi r24,lo8(queue)
 117 001a 90E0      		ldi r25,hi8(queue)
 118 001c 9093 0000 		sts wrp+1,r25
 119 0020 8093 0000 		sts wrp,r24
 120 0024 9093 0000 		sts rdp+1,r25
 121 0028 8093 0000 		sts rdp,r24
 185:main.c        **** }
 122               		.loc 1 185 0
 123 002c 1092 0000 		sts qsize+1,__zero_reg__
 124 0030 1092 0000 		sts qsize,__zero_reg__
 125               	/* epilogue start */
 186:main.c        **** 
 126               		.loc 1 186 0
 127 0034 0895      		ret
 128               		.cfi_endproc
 129               	.LFE245:
 131               		.section	.text.enqueue,"ax",@progbits
 132               	.global	enqueue
 134               	enqueue:
 135               	.LFB246:
 192:main.c        ****  
 136               		.loc 1 192 0
 137               		.cfi_startproc
 138               	.LVL10:
 139 0000 CF93      		push r28
 140               	.LCFI4:
 141               		.cfi_def_cfa_offset 3
 142               		.cfi_offset 28, -2
 143 0002 DF93      		push r29
 144               	.LCFI5:
 145               		.cfi_def_cfa_offset 4
 146               		.cfi_offset 29, -3
 147               	/* prologue: function */
 148               	/* frame size = 0 */
 149               	/* stack size = 2 */
 150               	.L__stack_usage = 2
 151 0004 EC01      		movw r28,r24
 195:main.c        ****  
 152               		.loc 1 195 0
 153 0006 80E0      		ldi r24,lo8(qmtx)
 154 0008 90E0      		ldi r25,hi8(qmtx)
 155               	.LVL11:
 156 000a 0E94 0000 		call chMtxLock
 157               	.LVL12:
 198:main.c        ****     chCondWait(&qfull);
 158               		.loc 1 198 0
 159 000e 8091 0000 		lds r24,qsize
 160 0012 9091 0000 		lds r25,qsize+1
 161 0016 8038      		cpi r24,-128
 162 0018 9105      		cpc r25,__zero_reg__
 163 001a 00F0      		brlo .L9
 164               	.L10:
 199:main.c        ****  
 165               		.loc 1 199 0
 166 001c 80E0      		ldi r24,lo8(qfull)
 167 001e 90E0      		ldi r25,hi8(qfull)
 168 0020 0E94 0000 		call chCondWait
 169               	.LVL13:
 198:main.c        ****     chCondWait(&qfull);
 170               		.loc 1 198 0
 171 0024 8091 0000 		lds r24,qsize
 172 0028 9091 0000 		lds r25,qsize+1
 173 002c 8038      		cpi r24,-128
 174 002e 9105      		cpc r25,__zero_reg__
 175 0030 00F4      		brsh .L10
 176               	.L9:
 202:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 177               		.loc 1 202 0
 178 0032 E091 0000 		lds r30,wrp
 179 0036 F091 0000 		lds r31,wrp+1
 180 003a C193      		st Z+,r28
 181 003c D193      		st Z+,r29
 203:main.c        ****     wrp = &queue[0];
 182               		.loc 1 203 0
 183 003e 20E0      		ldi r18,hi8(queue+256)
 184 0040 E030      		cpi r30,lo8(queue+256)
 185 0042 F207      		cpc r31,r18
 186 0044 00F0      		brlo .L14
 204:main.c        ****   qsize++;
 187               		.loc 1 204 0
 188 0046 20E0      		ldi r18,lo8(queue)
 189 0048 30E0      		ldi r19,hi8(queue)
 190 004a 3093 0000 		sts wrp+1,r19
 191 004e 2093 0000 		sts wrp,r18
 192               	.L12:
 205:main.c        ****  
 193               		.loc 1 205 0
 194 0052 0196      		adiw r24,1
 195 0054 9093 0000 		sts qsize+1,r25
 196 0058 8093 0000 		sts qsize,r24
 208:main.c        ****  
 197               		.loc 1 208 0
 198 005c 80E0      		ldi r24,lo8(qempty)
 199 005e 90E0      		ldi r25,hi8(qempty)
 200 0060 0E94 0000 		call chCondSignal
 201               	.LVL14:
 211:main.c        **** }
 202               		.loc 1 211 0
 203 0064 80E0      		ldi r24,lo8(qmtx)
 204 0066 90E0      		ldi r25,hi8(qmtx)
 205               	/* epilogue start */
 212:main.c        **** 
 206               		.loc 1 212 0
 207 0068 DF91      		pop r29
 208 006a CF91      		pop r28
 209               	.LVL15:
 211:main.c        **** }
 210               		.loc 1 211 0
 211 006c 0C94 0000 		jmp chMtxUnlock
 212               	.LVL16:
 213               	.L14:
 203:main.c        ****     wrp = &queue[0];
 214               		.loc 1 203 0
 215 0070 F093 0000 		sts wrp+1,r31
 216 0074 E093 0000 		sts wrp,r30
 217 0078 00C0      		rjmp .L12
 218               		.cfi_endproc
 219               	.LFE246:
 221               		.section	.text.startup.main,"ax",@progbits
 222               	.global	main
 224               	main:
 225               	.LFB244:
 107:main.c        ****   queueInit();
 226               		.loc 1 107 0
 227               		.cfi_startproc
 228               	/* prologue: function */
 229               	/* frame size = 0 */
 230               	/* stack size = 0 */
 231               	.L__stack_usage = 0
 108:main.c        ****   /*
 232               		.loc 1 108 0
 233 0000 0E94 0000 		call queueInit
 234               	.LVL17:
 116:main.c        ****   chSysInit();
 235               		.loc 1 116 0
 236 0004 0E94 0000 		call halInit
 237               	.LVL18:
 117:main.c        **** 
 238               		.loc 1 117 0
 239 0008 0E94 0000 		call chSysInit
 240               	.LVL19:
 120:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 241               		.loc 1 120 0
 242 000c 62E0      		ldi r22,lo8(2)
 243 000e 86E2      		ldi r24,lo8(38)
 244 0010 90E0      		ldi r25,0
 245 0012 0E94 0000 		call _pal_lld_setlineid
 246               	.LVL20:
 247 0016 0E94 0000 		call _pal_lld_getpadfromline
 248               	.LVL21:
 249 001a 182F      		mov r17,r24
 250 001c 62E0      		ldi r22,lo8(2)
 251 001e 86E2      		ldi r24,lo8(38)
 252 0020 90E0      		ldi r25,0
 253 0022 0E94 0000 		call _pal_lld_setlineid
 254               	.LVL22:
 255 0026 0E94 0000 		call _pal_lld_getportfromline
 256               	.LVL23:
 257 002a C1E0      		ldi r28,lo8(1)
 258 002c D0E0      		ldi r29,0
 259 002e BE01      		movw r22,r28
 260 0030 00C0      		rjmp 2f
 261               		1:
 262 0032 660F      		lsl r22
 263               		2:
 264 0034 1A95      		dec r17
 265 0036 02F4      		brpl 1b
 266 0038 43E0      		ldi r20,lo8(3)
 267 003a 0E94 0000 		call _pal_lld_setgroupmode
 268               	.LVL24:
 121:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 269               		.loc 1 121 0
 270 003e 64E0      		ldi r22,lo8(4)
 271 0040 86E2      		ldi r24,lo8(38)
 272 0042 90E0      		ldi r25,0
 273 0044 0E94 0000 		call _pal_lld_setlineid
 274               	.LVL25:
 275 0048 0E94 0000 		call _pal_lld_getpadfromline
 276               	.LVL26:
 277 004c 182F      		mov r17,r24
 278 004e 64E0      		ldi r22,lo8(4)
 279 0050 86E2      		ldi r24,lo8(38)
 280 0052 90E0      		ldi r25,0
 281 0054 0E94 0000 		call _pal_lld_setlineid
 282               	.LVL27:
 283 0058 0E94 0000 		call _pal_lld_getportfromline
 284               	.LVL28:
 285 005c BE01      		movw r22,r28
 286 005e 00C0      		rjmp 2f
 287               		1:
 288 0060 660F      		lsl r22
 289               		2:
 290 0062 1A95      		dec r17
 291 0064 02F4      		brpl 1b
 292 0066 43E0      		ldi r20,lo8(3)
 293 0068 0E94 0000 		call _pal_lld_setgroupmode
 294               	.LVL29:
 122:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 295               		.loc 1 122 0
 296 006c 63E0      		ldi r22,lo8(3)
 297 006e 86E2      		ldi r24,lo8(38)
 298 0070 90E0      		ldi r25,0
 299 0072 0E94 0000 		call _pal_lld_setlineid
 300               	.LVL30:
 301 0076 0E94 0000 		call _pal_lld_getpadfromline
 302               	.LVL31:
 303 007a 182F      		mov r17,r24
 304 007c 63E0      		ldi r22,lo8(3)
 305 007e 86E2      		ldi r24,lo8(38)
 306 0080 90E0      		ldi r25,0
 307 0082 0E94 0000 		call _pal_lld_setlineid
 308               	.LVL32:
 309 0086 0E94 0000 		call _pal_lld_getportfromline
 310               	.LVL33:
 311 008a BE01      		movw r22,r28
 312 008c 00C0      		rjmp 2f
 313               		1:
 314 008e 660F      		lsl r22
 315               		2:
 316 0090 1A95      		dec r17
 317 0092 02F4      		brpl 1b
 318 0094 43E0      		ldi r20,lo8(3)
 319 0096 0E94 0000 		call _pal_lld_setgroupmode
 320               	.LVL34:
 123:main.c        **** 
 321               		.loc 1 123 0
 322 009a 65E0      		ldi r22,lo8(5)
 323 009c 86E2      		ldi r24,lo8(38)
 324 009e 90E0      		ldi r25,0
 325 00a0 0E94 0000 		call _pal_lld_setlineid
 326               	.LVL35:
 327 00a4 0E94 0000 		call _pal_lld_getpadfromline
 328               	.LVL36:
 329 00a8 182F      		mov r17,r24
 330 00aa 65E0      		ldi r22,lo8(5)
 331 00ac 86E2      		ldi r24,lo8(38)
 332 00ae 90E0      		ldi r25,0
 333 00b0 0E94 0000 		call _pal_lld_setlineid
 334               	.LVL37:
 335 00b4 0E94 0000 		call _pal_lld_getportfromline
 336               	.LVL38:
 337 00b8 BE01      		movw r22,r28
 338 00ba 00C0      		rjmp 2f
 339               		1:
 340 00bc 660F      		lsl r22
 341               		2:
 342 00be 1A95      		dec r17
 343 00c0 02F4      		brpl 1b
 344 00c2 43E0      		ldi r20,lo8(3)
 345 00c4 0E94 0000 		call _pal_lld_setgroupmode
 346               	.LVL39:
 126:main.c        ****   palClearLine(PEDESTRE_VERDE);
 347               		.loc 1 126 0
 348 00c8 63E0      		ldi r22,lo8(3)
 349 00ca 83E2      		ldi r24,lo8(35)
 350 00cc 90E0      		ldi r25,0
 351 00ce 0E94 0000 		call _pal_lld_setlineid
 352               	.LVL40:
 353 00d2 0E94 0000 		call _pal_lld_getpadfromline
 354               	.LVL41:
 355 00d6 182F      		mov r17,r24
 356 00d8 63E0      		ldi r22,lo8(3)
 357 00da 83E2      		ldi r24,lo8(35)
 358 00dc 90E0      		ldi r25,0
 359 00de 0E94 0000 		call _pal_lld_setlineid
 360               	.LVL42:
 361 00e2 0E94 0000 		call _pal_lld_getportfromline
 362               	.LVL43:
 363 00e6 BE01      		movw r22,r28
 364 00e8 00C0      		rjmp 2f
 365               		1:
 366 00ea 660F      		lsl r22
 367               		2:
 368 00ec 1A95      		dec r17
 369 00ee 02F4      		brpl 1b
 370 00f0 46E0      		ldi r20,lo8(6)
 371 00f2 0E94 0000 		call _pal_lld_setgroupmode
 372               	.LVL44:
 127:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 373               		.loc 1 127 0
 374 00f6 63E0      		ldi r22,lo8(3)
 375 00f8 83E2      		ldi r24,lo8(35)
 376 00fa 90E0      		ldi r25,0
 377 00fc 0E94 0000 		call _pal_lld_setlineid
 378               	.LVL45:
 379 0100 0E94 0000 		call _pal_lld_getpadfromline
 380               	.LVL46:
 381 0104 182F      		mov r17,r24
 382 0106 63E0      		ldi r22,lo8(3)
 383 0108 83E2      		ldi r24,lo8(35)
 384 010a 90E0      		ldi r25,0
 385 010c 0E94 0000 		call _pal_lld_setlineid
 386               	.LVL47:
 387 0110 0E94 0000 		call _pal_lld_getportfromline
 388               	.LVL48:
 389 0114 FC01      		movw r30,r24
 390 0116 9281      		ldd r25,Z+2
 391 0118 9E01      		movw r18,r28
 392 011a 00C0      		rjmp 2f
 393               		1:
 394 011c 220F      		lsl r18
 395 011e 331F      		rol r19
 396               		2:
 397 0120 1A95      		dec r17
 398 0122 02F4      		brpl 1b
 399 0124 2095      		com r18
 400 0126 3095      		com r19
 401 0128 9223      		and r25,r18
 402 012a 9283      		std Z+2,r25
 128:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 403               		.loc 1 128 0
 404 012c 62E0      		ldi r22,lo8(2)
 405 012e 83E2      		ldi r24,lo8(35)
 406 0130 90E0      		ldi r25,0
 407 0132 0E94 0000 		call _pal_lld_setlineid
 408               	.LVL49:
 409 0136 0E94 0000 		call _pal_lld_getpadfromline
 410               	.LVL50:
 411 013a 182F      		mov r17,r24
 412 013c 62E0      		ldi r22,lo8(2)
 413 013e 83E2      		ldi r24,lo8(35)
 414 0140 90E0      		ldi r25,0
 415 0142 0E94 0000 		call _pal_lld_setlineid
 416               	.LVL51:
 417 0146 0E94 0000 		call _pal_lld_getportfromline
 418               	.LVL52:
 419 014a BE01      		movw r22,r28
 420 014c 00C0      		rjmp 2f
 421               		1:
 422 014e 660F      		lsl r22
 423               		2:
 424 0150 1A95      		dec r17
 425 0152 02F4      		brpl 1b
 426 0154 46E0      		ldi r20,lo8(6)
 427 0156 0E94 0000 		call _pal_lld_setgroupmode
 428               	.LVL53:
 129:main.c        **** 
 429               		.loc 1 129 0
 430 015a 62E0      		ldi r22,lo8(2)
 431 015c 83E2      		ldi r24,lo8(35)
 432 015e 90E0      		ldi r25,0
 433 0160 0E94 0000 		call _pal_lld_setlineid
 434               	.LVL54:
 435 0164 0E94 0000 		call _pal_lld_getpadfromline
 436               	.LVL55:
 437 0168 182F      		mov r17,r24
 438 016a 62E0      		ldi r22,lo8(2)
 439 016c 83E2      		ldi r24,lo8(35)
 440 016e 90E0      		ldi r25,0
 441 0170 0E94 0000 		call _pal_lld_setlineid
 442               	.LVL56:
 443 0174 0E94 0000 		call _pal_lld_getportfromline
 444               	.LVL57:
 445 0178 FC01      		movw r30,r24
 446 017a 9281      		ldd r25,Z+2
 447 017c 9E01      		movw r18,r28
 448 017e 00C0      		rjmp 2f
 449               		1:
 450 0180 220F      		lsl r18
 451 0182 331F      		rol r19
 452               		2:
 453 0184 1A95      		dec r17
 454 0186 02F4      		brpl 1b
 455 0188 2095      		com r18
 456 018a 3095      		com r19
 457 018c 9223      		and r25,r18
 458 018e 9283      		std Z+2,r25
 132:main.c        ****   palClearLine(PRIMARIO_VERDE);
 459               		.loc 1 132 0
 460 0190 67E0      		ldi r22,lo8(7)
 461 0192 89E2      		ldi r24,lo8(41)
 462 0194 90E0      		ldi r25,0
 463 0196 0E94 0000 		call _pal_lld_setlineid
 464               	.LVL58:
 465 019a 0E94 0000 		call _pal_lld_getpadfromline
 466               	.LVL59:
 467 019e 182F      		mov r17,r24
 468 01a0 67E0      		ldi r22,lo8(7)
 469 01a2 89E2      		ldi r24,lo8(41)
 470 01a4 90E0      		ldi r25,0
 471 01a6 0E94 0000 		call _pal_lld_setlineid
 472               	.LVL60:
 473 01aa 0E94 0000 		call _pal_lld_getportfromline
 474               	.LVL61:
 475 01ae BE01      		movw r22,r28
 476 01b0 00C0      		rjmp 2f
 477               		1:
 478 01b2 660F      		lsl r22
 479               		2:
 480 01b4 1A95      		dec r17
 481 01b6 02F4      		brpl 1b
 482 01b8 46E0      		ldi r20,lo8(6)
 483 01ba 0E94 0000 		call _pal_lld_setgroupmode
 484               	.LVL62:
 133:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 485               		.loc 1 133 0
 486 01be 67E0      		ldi r22,lo8(7)
 487 01c0 89E2      		ldi r24,lo8(41)
 488 01c2 90E0      		ldi r25,0
 489 01c4 0E94 0000 		call _pal_lld_setlineid
 490               	.LVL63:
 491 01c8 0E94 0000 		call _pal_lld_getpadfromline
 492               	.LVL64:
 493 01cc 182F      		mov r17,r24
 494 01ce 67E0      		ldi r22,lo8(7)
 495 01d0 89E2      		ldi r24,lo8(41)
 496 01d2 90E0      		ldi r25,0
 497 01d4 0E94 0000 		call _pal_lld_setlineid
 498               	.LVL65:
 499 01d8 0E94 0000 		call _pal_lld_getportfromline
 500               	.LVL66:
 501 01dc FC01      		movw r30,r24
 502 01de 9281      		ldd r25,Z+2
 503 01e0 9E01      		movw r18,r28
 504 01e2 00C0      		rjmp 2f
 505               		1:
 506 01e4 220F      		lsl r18
 507 01e6 331F      		rol r19
 508               		2:
 509 01e8 1A95      		dec r17
 510 01ea 02F4      		brpl 1b
 511 01ec 2095      		com r18
 512 01ee 3095      		com r19
 513 01f0 9223      		and r25,r18
 514 01f2 9283      		std Z+2,r25
 134:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 515               		.loc 1 134 0
 516 01f4 64E0      		ldi r22,lo8(4)
 517 01f6 89E2      		ldi r24,lo8(41)
 518 01f8 90E0      		ldi r25,0
 519 01fa 0E94 0000 		call _pal_lld_setlineid
 520               	.LVL67:
 521 01fe 0E94 0000 		call _pal_lld_getpadfromline
 522               	.LVL68:
 523 0202 182F      		mov r17,r24
 524 0204 64E0      		ldi r22,lo8(4)
 525 0206 89E2      		ldi r24,lo8(41)
 526 0208 90E0      		ldi r25,0
 527 020a 0E94 0000 		call _pal_lld_setlineid
 528               	.LVL69:
 529 020e 0E94 0000 		call _pal_lld_getportfromline
 530               	.LVL70:
 531 0212 BE01      		movw r22,r28
 532 0214 00C0      		rjmp 2f
 533               		1:
 534 0216 660F      		lsl r22
 535               		2:
 536 0218 1A95      		dec r17
 537 021a 02F4      		brpl 1b
 538 021c 46E0      		ldi r20,lo8(6)
 539 021e 0E94 0000 		call _pal_lld_setgroupmode
 540               	.LVL71:
 135:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 541               		.loc 1 135 0
 542 0222 64E0      		ldi r22,lo8(4)
 543 0224 89E2      		ldi r24,lo8(41)
 544 0226 90E0      		ldi r25,0
 545 0228 0E94 0000 		call _pal_lld_setlineid
 546               	.LVL72:
 547 022c 0E94 0000 		call _pal_lld_getpadfromline
 548               	.LVL73:
 549 0230 182F      		mov r17,r24
 550 0232 64E0      		ldi r22,lo8(4)
 551 0234 89E2      		ldi r24,lo8(41)
 552 0236 90E0      		ldi r25,0
 553 0238 0E94 0000 		call _pal_lld_setlineid
 554               	.LVL74:
 555 023c 0E94 0000 		call _pal_lld_getportfromline
 556               	.LVL75:
 557 0240 FC01      		movw r30,r24
 558 0242 9281      		ldd r25,Z+2
 559 0244 9E01      		movw r18,r28
 560 0246 00C0      		rjmp 2f
 561               		1:
 562 0248 220F      		lsl r18
 563 024a 331F      		rol r19
 564               		2:
 565 024c 1A95      		dec r17
 566 024e 02F4      		brpl 1b
 567 0250 2095      		com r18
 568 0252 3095      		com r19
 569 0254 9223      		and r25,r18
 570 0256 9283      		std Z+2,r25
 136:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 571               		.loc 1 136 0
 572 0258 66E0      		ldi r22,lo8(6)
 573 025a 89E2      		ldi r24,lo8(41)
 574 025c 90E0      		ldi r25,0
 575 025e 0E94 0000 		call _pal_lld_setlineid
 576               	.LVL76:
 577 0262 0E94 0000 		call _pal_lld_getpadfromline
 578               	.LVL77:
 579 0266 182F      		mov r17,r24
 580 0268 66E0      		ldi r22,lo8(6)
 581 026a 89E2      		ldi r24,lo8(41)
 582 026c 90E0      		ldi r25,0
 583 026e 0E94 0000 		call _pal_lld_setlineid
 584               	.LVL78:
 585 0272 0E94 0000 		call _pal_lld_getportfromline
 586               	.LVL79:
 587 0276 BE01      		movw r22,r28
 588 0278 00C0      		rjmp 2f
 589               		1:
 590 027a 660F      		lsl r22
 591               		2:
 592 027c 1A95      		dec r17
 593 027e 02F4      		brpl 1b
 594 0280 46E0      		ldi r20,lo8(6)
 595 0282 0E94 0000 		call _pal_lld_setgroupmode
 596               	.LVL80:
 137:main.c        **** 
 597               		.loc 1 137 0
 598 0286 66E0      		ldi r22,lo8(6)
 599 0288 89E2      		ldi r24,lo8(41)
 600 028a 90E0      		ldi r25,0
 601 028c 0E94 0000 		call _pal_lld_setlineid
 602               	.LVL81:
 603 0290 0E94 0000 		call _pal_lld_getpadfromline
 604               	.LVL82:
 605 0294 182F      		mov r17,r24
 606 0296 66E0      		ldi r22,lo8(6)
 607 0298 89E2      		ldi r24,lo8(41)
 608 029a 90E0      		ldi r25,0
 609 029c 0E94 0000 		call _pal_lld_setlineid
 610               	.LVL83:
 611 02a0 0E94 0000 		call _pal_lld_getportfromline
 612               	.LVL84:
 613 02a4 FC01      		movw r30,r24
 614 02a6 9281      		ldd r25,Z+2
 615 02a8 9E01      		movw r18,r28
 616 02aa 00C0      		rjmp 2f
 617               		1:
 618 02ac 220F      		lsl r18
 619 02ae 331F      		rol r19
 620               		2:
 621 02b0 1A95      		dec r17
 622 02b2 02F4      		brpl 1b
 623 02b4 2095      		com r18
 624 02b6 3095      		com r19
 625 02b8 9223      		and r25,r18
 626 02ba 9283      		std Z+2,r25
 140:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 627               		.loc 1 140 0
 628 02bc 61E0      		ldi r22,lo8(1)
 629 02be 83E2      		ldi r24,lo8(35)
 630 02c0 90E0      		ldi r25,0
 631 02c2 0E94 0000 		call _pal_lld_setlineid
 632               	.LVL85:
 633 02c6 0E94 0000 		call _pal_lld_getpadfromline
 634               	.LVL86:
 635 02ca 182F      		mov r17,r24
 636 02cc 61E0      		ldi r22,lo8(1)
 637 02ce 83E2      		ldi r24,lo8(35)
 638 02d0 90E0      		ldi r25,0
 639 02d2 0E94 0000 		call _pal_lld_setlineid
 640               	.LVL87:
 641 02d6 0E94 0000 		call _pal_lld_getportfromline
 642               	.LVL88:
 643 02da BE01      		movw r22,r28
 644 02dc 00C0      		rjmp 2f
 645               		1:
 646 02de 660F      		lsl r22
 647               		2:
 648 02e0 1A95      		dec r17
 649 02e2 02F4      		brpl 1b
 650 02e4 46E0      		ldi r20,lo8(6)
 651 02e6 0E94 0000 		call _pal_lld_setgroupmode
 652               	.LVL89:
 141:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 653               		.loc 1 141 0
 654 02ea 61E0      		ldi r22,lo8(1)
 655 02ec 83E2      		ldi r24,lo8(35)
 656 02ee 90E0      		ldi r25,0
 657 02f0 0E94 0000 		call _pal_lld_setlineid
 658               	.LVL90:
 659 02f4 0E94 0000 		call _pal_lld_getpadfromline
 660               	.LVL91:
 661 02f8 182F      		mov r17,r24
 662 02fa 61E0      		ldi r22,lo8(1)
 663 02fc 83E2      		ldi r24,lo8(35)
 664 02fe 90E0      		ldi r25,0
 665 0300 0E94 0000 		call _pal_lld_setlineid
 666               	.LVL92:
 667 0304 0E94 0000 		call _pal_lld_getportfromline
 668               	.LVL93:
 669 0308 FC01      		movw r30,r24
 670 030a 9281      		ldd r25,Z+2
 671 030c 9E01      		movw r18,r28
 672 030e 00C0      		rjmp 2f
 673               		1:
 674 0310 220F      		lsl r18
 675 0312 331F      		rol r19
 676               		2:
 677 0314 1A95      		dec r17
 678 0316 02F4      		brpl 1b
 679 0318 2095      		com r18
 680 031a 3095      		com r19
 681 031c 9223      		and r25,r18
 682 031e 9283      		std Z+2,r25
 142:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 683               		.loc 1 142 0
 684 0320 65E0      		ldi r22,lo8(5)
 685 0322 89E2      		ldi r24,lo8(41)
 686 0324 90E0      		ldi r25,0
 687 0326 0E94 0000 		call _pal_lld_setlineid
 688               	.LVL94:
 689 032a 0E94 0000 		call _pal_lld_getpadfromline
 690               	.LVL95:
 691 032e 182F      		mov r17,r24
 692 0330 65E0      		ldi r22,lo8(5)
 693 0332 89E2      		ldi r24,lo8(41)
 694 0334 90E0      		ldi r25,0
 695 0336 0E94 0000 		call _pal_lld_setlineid
 696               	.LVL96:
 697 033a 0E94 0000 		call _pal_lld_getportfromline
 698               	.LVL97:
 699 033e BE01      		movw r22,r28
 700 0340 00C0      		rjmp 2f
 701               		1:
 702 0342 660F      		lsl r22
 703               		2:
 704 0344 1A95      		dec r17
 705 0346 02F4      		brpl 1b
 706 0348 46E0      		ldi r20,lo8(6)
 707 034a 0E94 0000 		call _pal_lld_setgroupmode
 708               	.LVL98:
 143:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 709               		.loc 1 143 0
 710 034e 65E0      		ldi r22,lo8(5)
 711 0350 89E2      		ldi r24,lo8(41)
 712 0352 90E0      		ldi r25,0
 713 0354 0E94 0000 		call _pal_lld_setlineid
 714               	.LVL99:
 715 0358 0E94 0000 		call _pal_lld_getpadfromline
 716               	.LVL100:
 717 035c 182F      		mov r17,r24
 718 035e 65E0      		ldi r22,lo8(5)
 719 0360 89E2      		ldi r24,lo8(41)
 720 0362 90E0      		ldi r25,0
 721 0364 0E94 0000 		call _pal_lld_setlineid
 722               	.LVL101:
 723 0368 0E94 0000 		call _pal_lld_getportfromline
 724               	.LVL102:
 725 036c FC01      		movw r30,r24
 726 036e 9281      		ldd r25,Z+2
 727 0370 9E01      		movw r18,r28
 728 0372 00C0      		rjmp 2f
 729               		1:
 730 0374 220F      		lsl r18
 731 0376 331F      		rol r19
 732               		2:
 733 0378 1A95      		dec r17
 734 037a 02F4      		brpl 1b
 735 037c 2095      		com r18
 736 037e 3095      		com r19
 737 0380 9223      		and r25,r18
 738 0382 9283      		std Z+2,r25
 144:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 739               		.loc 1 144 0
 740 0384 60E0      		ldi r22,0
 741 0386 83E2      		ldi r24,lo8(35)
 742 0388 90E0      		ldi r25,0
 743 038a 0E94 0000 		call _pal_lld_setlineid
 744               	.LVL103:
 745 038e 0E94 0000 		call _pal_lld_getpadfromline
 746               	.LVL104:
 747 0392 182F      		mov r17,r24
 748 0394 60E0      		ldi r22,0
 749 0396 83E2      		ldi r24,lo8(35)
 750 0398 90E0      		ldi r25,0
 751 039a 0E94 0000 		call _pal_lld_setlineid
 752               	.LVL105:
 753 039e 0E94 0000 		call _pal_lld_getportfromline
 754               	.LVL106:
 755 03a2 BE01      		movw r22,r28
 756 03a4 00C0      		rjmp 2f
 757               		1:
 758 03a6 660F      		lsl r22
 759               		2:
 760 03a8 1A95      		dec r17
 761 03aa 02F4      		brpl 1b
 762 03ac 46E0      		ldi r20,lo8(6)
 763 03ae 0E94 0000 		call _pal_lld_setgroupmode
 764               	.LVL107:
 145:main.c        **** 
 765               		.loc 1 145 0
 766 03b2 60E0      		ldi r22,0
 767 03b4 83E2      		ldi r24,lo8(35)
 768 03b6 90E0      		ldi r25,0
 769 03b8 0E94 0000 		call _pal_lld_setlineid
 770               	.LVL108:
 771 03bc 0E94 0000 		call _pal_lld_getpadfromline
 772               	.LVL109:
 773 03c0 182F      		mov r17,r24
 774 03c2 60E0      		ldi r22,0
 775 03c4 83E2      		ldi r24,lo8(35)
 776 03c6 90E0      		ldi r25,0
 777 03c8 0E94 0000 		call _pal_lld_setlineid
 778               	.LVL110:
 779 03cc 0E94 0000 		call _pal_lld_getportfromline
 780               	.LVL111:
 781 03d0 FC01      		movw r30,r24
 782 03d2 9281      		ldd r25,Z+2
 783 03d4 9E01      		movw r18,r28
 784 03d6 00C0      		rjmp 2f
 785               		1:
 786 03d8 220F      		lsl r18
 787 03da 331F      		rol r19
 788               		2:
 789 03dc 1A95      		dec r17
 790 03de 02F4      		brpl 1b
 791 03e0 2095      		com r18
 792 03e2 3095      		com r19
 793 03e4 2923      		and r18,r25
 794 03e6 2283      		std Z+2,r18
 150:main.c        **** 
 795               		.loc 1 150 0
 796 03e8 10E0      		ldi r17,0
 797 03ea 00E0      		ldi r16,0
 798 03ec 20E0      		ldi r18,lo8(gs(Thread1))
 799 03ee 30E0      		ldi r19,hi8(gs(Thread1))
 800 03f0 40E8      		ldi r20,lo8(-128)
 801 03f2 63E8      		ldi r22,lo8(-125)
 802 03f4 70E0      		ldi r23,0
 803 03f6 80E0      		ldi r24,lo8(waThread1)
 804 03f8 90E0      		ldi r25,hi8(waThread1)
 805 03fa 0E94 0000 		call chThdCreateStatic
 806               	.LVL112:
 807 03fe 00C0      		rjmp .L20
 808               	.L21:
 156:main.c        ****     }
 809               		.loc 1 156 0
 810 0400 84E0      		ldi r24,lo8(4)
 811 0402 90E0      		ldi r25,0
 812 0404 0E94 0000 		call enqueue
 813               	.LVL113:
 814               	.L17:
 171:main.c        ****   }
 815               		.loc 1 171 0
 816 0408 6EE0      		ldi r22,lo8(14)
 817 040a 73E0      		ldi r23,lo8(3)
 818 040c 80E0      		ldi r24,0
 819 040e 90E0      		ldi r25,0
 820 0410 0E94 0000 		call chThdSleep
 821               	.LVL114:
 822               	.L20:
 154:main.c        ****     {
 823               		.loc 1 154 0
 824 0414 65E0      		ldi r22,lo8(5)
 825 0416 86E2      		ldi r24,lo8(38)
 826 0418 90E0      		ldi r25,0
 827 041a 0E94 0000 		call _pal_lld_setlineid
 828               	.LVL115:
 829 041e 0E94 0000 		call _pal_lld_getportfromline
 830               	.LVL116:
 831 0422 FC01      		movw r30,r24
 832 0424 C081      		ld r28,Z
 833 0426 65E0      		ldi r22,lo8(5)
 834 0428 86E2      		ldi r24,lo8(38)
 835 042a 90E0      		ldi r25,0
 836 042c 0E94 0000 		call _pal_lld_setlineid
 837               	.LVL117:
 838 0430 0E94 0000 		call _pal_lld_getpadfromline
 839               	.LVL118:
 840 0434 2C2F      		mov r18,r28
 841 0436 30E0      		ldi r19,0
 842 0438 00C0      		rjmp 2f
 843               		1:
 844 043a 3595      		asr r19
 845 043c 2795      		ror r18
 846               		2:
 847 043e 8A95      		dec r24
 848 0440 02F4      		brpl 1b
 849 0442 20FF      		sbrs r18,0
 850 0444 00C0      		rjmp .L21
 158:main.c        ****     {
 851               		.loc 1 158 0
 852 0446 63E0      		ldi r22,lo8(3)
 853 0448 86E2      		ldi r24,lo8(38)
 854 044a 90E0      		ldi r25,0
 855 044c 0E94 0000 		call _pal_lld_setlineid
 856               	.LVL119:
 857 0450 0E94 0000 		call _pal_lld_getportfromline
 858               	.LVL120:
 859 0454 FC01      		movw r30,r24
 860 0456 C081      		ld r28,Z
 861 0458 63E0      		ldi r22,lo8(3)
 862 045a 86E2      		ldi r24,lo8(38)
 863 045c 90E0      		ldi r25,0
 864 045e 0E94 0000 		call _pal_lld_setlineid
 865               	.LVL121:
 866 0462 0E94 0000 		call _pal_lld_getpadfromline
 867               	.LVL122:
 868 0466 2C2F      		mov r18,r28
 869 0468 30E0      		ldi r19,0
 870 046a 00C0      		rjmp 2f
 871               		1:
 872 046c 3595      		asr r19
 873 046e 2795      		ror r18
 874               		2:
 875 0470 8A95      		dec r24
 876 0472 02F4      		brpl 1b
 877 0474 20FD      		sbrc r18,0
 878 0476 00C0      		rjmp .L18
 160:main.c        ****     }
 879               		.loc 1 160 0
 880 0478 83E0      		ldi r24,lo8(3)
 881 047a 90E0      		ldi r25,0
 882 047c 0E94 0000 		call enqueue
 883               	.LVL123:
 884 0480 00C0      		rjmp .L17
 885               	.L18:
 162:main.c        ****     {
 886               		.loc 1 162 0
 887 0482 64E0      		ldi r22,lo8(4)
 888 0484 86E2      		ldi r24,lo8(38)
 889 0486 90E0      		ldi r25,0
 890 0488 0E94 0000 		call _pal_lld_setlineid
 891               	.LVL124:
 892 048c 0E94 0000 		call _pal_lld_getportfromline
 893               	.LVL125:
 894 0490 FC01      		movw r30,r24
 895 0492 C081      		ld r28,Z
 896 0494 64E0      		ldi r22,lo8(4)
 897 0496 86E2      		ldi r24,lo8(38)
 898 0498 90E0      		ldi r25,0
 899 049a 0E94 0000 		call _pal_lld_setlineid
 900               	.LVL126:
 901 049e 0E94 0000 		call _pal_lld_getpadfromline
 902               	.LVL127:
 903 04a2 2C2F      		mov r18,r28
 904 04a4 30E0      		ldi r19,0
 905 04a6 00C0      		rjmp 2f
 906               		1:
 907 04a8 3595      		asr r19
 908 04aa 2795      		ror r18
 909               		2:
 910 04ac 8A95      		dec r24
 911 04ae 02F4      		brpl 1b
 912 04b0 20FD      		sbrc r18,0
 913 04b2 00C0      		rjmp .L19
 164:main.c        ****     }
 914               		.loc 1 164 0
 915 04b4 81E0      		ldi r24,lo8(1)
 916 04b6 90E0      		ldi r25,0
 917 04b8 0E94 0000 		call enqueue
 918               	.LVL128:
 919 04bc 00C0      		rjmp .L17
 920               	.L19:
 166:main.c        ****     {
 921               		.loc 1 166 0
 922 04be 62E0      		ldi r22,lo8(2)
 923 04c0 86E2      		ldi r24,lo8(38)
 924 04c2 90E0      		ldi r25,0
 925 04c4 0E94 0000 		call _pal_lld_setlineid
 926               	.LVL129:
 927 04c8 0E94 0000 		call _pal_lld_getportfromline
 928               	.LVL130:
 929 04cc FC01      		movw r30,r24
 930 04ce C081      		ld r28,Z
 931 04d0 62E0      		ldi r22,lo8(2)
 932 04d2 86E2      		ldi r24,lo8(38)
 933 04d4 90E0      		ldi r25,0
 934 04d6 0E94 0000 		call _pal_lld_setlineid
 935               	.LVL131:
 936 04da 0E94 0000 		call _pal_lld_getpadfromline
 937               	.LVL132:
 938 04de 2C2F      		mov r18,r28
 939 04e0 30E0      		ldi r19,0
 940 04e2 00C0      		rjmp 2f
 941               		1:
 942 04e4 3595      		asr r19
 943 04e6 2795      		ror r18
 944               		2:
 945 04e8 8A95      		dec r24
 946 04ea 02F4      		brpl 1b
 947 04ec 20FD      		sbrc r18,0
 948 04ee 00C0      		rjmp .L17
 168:main.c        ****     }
 949               		.loc 1 168 0
 950 04f0 82E0      		ldi r24,lo8(2)
 951 04f2 90E0      		ldi r25,0
 952 04f4 0E94 0000 		call enqueue
 953               	.LVL133:
 954 04f8 00C0      		rjmp .L17
 955               		.cfi_endproc
 956               	.LFE244:
 958               		.section	.text.dequeue,"ax",@progbits
 959               	.global	dequeue
 961               	dequeue:
 962               	.LFB247:
 218:main.c        ****   msg_t msg;
 963               		.loc 1 218 0
 964               		.cfi_startproc
 965 0000 CF93      		push r28
 966               	.LCFI6:
 967               		.cfi_def_cfa_offset 3
 968               		.cfi_offset 28, -2
 969 0002 DF93      		push r29
 970               	.LCFI7:
 971               		.cfi_def_cfa_offset 4
 972               		.cfi_offset 29, -3
 973               	/* prologue: function */
 974               	/* frame size = 0 */
 975               	/* stack size = 2 */
 976               	.L__stack_usage = 2
 222:main.c        ****  
 977               		.loc 1 222 0
 978 0004 80E0      		ldi r24,lo8(qmtx)
 979 0006 90E0      		ldi r25,hi8(qmtx)
 980 0008 0E94 0000 		call chMtxLock
 981               	.LVL134:
 225:main.c        ****     chCondWait(&qempty);
 982               		.loc 1 225 0
 983 000c 8091 0000 		lds r24,qsize
 984 0010 9091 0000 		lds r25,qsize+1
 985 0014 0097      		sbiw r24,0
 986 0016 01F4      		brne .L23
 987               	.L24:
 226:main.c        ****  
 988               		.loc 1 226 0
 989 0018 80E0      		ldi r24,lo8(qempty)
 990 001a 90E0      		ldi r25,hi8(qempty)
 991 001c 0E94 0000 		call chCondWait
 992               	.LVL135:
 225:main.c        ****     chCondWait(&qempty);
 993               		.loc 1 225 0
 994 0020 8091 0000 		lds r24,qsize
 995 0024 9091 0000 		lds r25,qsize+1
 996 0028 0097      		sbiw r24,0
 997 002a 01F0      		breq .L24
 998               	.L23:
 229:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 999               		.loc 1 229 0
 1000 002c E091 0000 		lds r30,rdp
 1001 0030 F091 0000 		lds r31,rdp+1
 1002 0034 C191      		ld r28,Z+
 1003 0036 D191      		ld r29,Z+
 1004               	.LVL136:
 230:main.c        ****     rdp = &queue[0];
 1005               		.loc 1 230 0
 1006 0038 20E0      		ldi r18,hi8(queue+256)
 1007 003a E030      		cpi r30,lo8(queue+256)
 1008 003c F207      		cpc r31,r18
 1009 003e 00F0      		brlo .L29
 231:main.c        ****   qsize--;
 1010               		.loc 1 231 0
 1011 0040 20E0      		ldi r18,lo8(queue)
 1012 0042 30E0      		ldi r19,hi8(queue)
 1013 0044 3093 0000 		sts rdp+1,r19
 1014 0048 2093 0000 		sts rdp,r18
 1015               	.L26:
 232:main.c        ****  
 1016               		.loc 1 232 0
 1017 004c 0197      		sbiw r24,1
 1018 004e 9093 0000 		sts qsize+1,r25
 1019 0052 8093 0000 		sts qsize,r24
 235:main.c        ****  
 1020               		.loc 1 235 0
 1021 0056 80E0      		ldi r24,lo8(qfull)
 1022 0058 90E0      		ldi r25,hi8(qfull)
 1023 005a 0E94 0000 		call chCondSignal
 1024               	.LVL137:
 238:main.c        ****  
 1025               		.loc 1 238 0
 1026 005e 80E0      		ldi r24,lo8(qmtx)
 1027 0060 90E0      		ldi r25,hi8(qmtx)
 1028 0062 0E94 0000 		call chMtxUnlock
 1029               	.LVL138:
 241:main.c        **** 
 1030               		.loc 1 241 0
 1031 0066 CE01      		movw r24,r28
 1032               	/* epilogue start */
 1033 0068 DF91      		pop r29
 1034 006a CF91      		pop r28
 1035               	.LVL139:
 1036 006c 0895      		ret
 1037               	.LVL140:
 1038               	.L29:
 230:main.c        ****     rdp = &queue[0];
 1039               		.loc 1 230 0
 1040 006e F093 0000 		sts rdp+1,r31
 1041 0072 E093 0000 		sts rdp,r30
 1042 0076 00C0      		rjmp .L26
 1043               		.cfi_endproc
 1044               	.LFE247:
 1046               		.section	.text.Thread1,"ax",@progbits
 1048               	Thread1:
 1049               	.LFB243:
  80:main.c        ****   virtual_timer_t vt;
 1050               		.loc 1 80 0
 1051               		.cfi_startproc
 1052               	.LVL141:
 1053 0000 CF93      		push r28
 1054               	.LCFI8:
 1055               		.cfi_def_cfa_offset 3
 1056               		.cfi_offset 28, -2
 1057 0002 DF93      		push r29
 1058               	.LCFI9:
 1059               		.cfi_def_cfa_offset 4
 1060               		.cfi_offset 29, -3
 1061 0004 CDB7      		in r28,__SP_L__
 1062 0006 DEB7      		in r29,__SP_H__
 1063               	.LCFI10:
 1064               		.cfi_def_cfa_register 28
 1065 0008 6097      		sbiw r28,16
 1066               	.LCFI11:
 1067               		.cfi_def_cfa_offset 20
 1068 000a 0FB6      		in __tmp_reg__,__SREG__
 1069 000c F894      		cli
 1070 000e DEBF      		out __SP_H__,r29
 1071 0010 0FBE      		out __SREG__,__tmp_reg__
 1072 0012 CDBF      		out __SP_L__,r28
 1073               	/* prologue: function */
 1074               	/* frame size = 16 */
 1075               	/* stack size = 18 */
 1076               	.L__stack_usage = 18
 1077               	.LVL142:
 1078               	.LBB62:
 1079               	.LBB63:
 106:../../os/rt/include/chvt.h **** }
 1080               		.loc 2 106 0
 1081 0014 1A82      		std Y+2,__zero_reg__
 1082 0016 1982      		std Y+1,__zero_reg__
 1083               	.LVL143:
 1084               	.LBE63:
 1085               	.LBE62:
 1086               	.LBB64:
 1087               	.LBB65:
 1088               	.LBB66:
 1089               	.LBB67:
 1090               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 1091               		.loc 3 430 0
 1092               	/* #APP */
 1093               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1094 0018 F894      		cli
 1095               	 ;  0 "" 2
 1096               	.LVL144:
 1097               	/* #NOAPP */
 1098               	.LBE67:
 1099               	.LBE66:
 1100               	.LBE65:
 1101               	.LBB68:
 1102               	.LBB69:
 1103               	.LBB70:
 1104               	.LBB71:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1105               		.loc 2 287 0
 1106 001a 8981      		ldd r24,Y+1
 1107 001c 9A81      		ldd r25,Y+2
 1108               	.LVL145:
 1109 001e 892B      		or r24,r25
 1110 0020 01F4      		brne .+2
 1111 0022 00C0      		rjmp .L41
 288:../../os/rt/include/chvt.h ****   }
 1112               		.loc 2 288 0
 1113 0024 FE01      		movw r30,r28
 1114 0026 3196      		adiw r30,1
 1115 0028 7F01      		movw r14,r30
 1116 002a CF01      		movw r24,r30
 1117 002c 0E94 0000 		call chVTDoResetI
 1118               	.LVL146:
 1119               	.L31:
 1120               	.LBE71:
 1121               	.LBE70:
 1122               		.loc 2 335 0
 1123 0030 8701      		movw r16,r14
 1124 0032 20E0      		ldi r18,lo8(gs(vt_cb))
 1125 0034 30E0      		ldi r19,hi8(gs(vt_cb))
 1126 0036 48E2      		ldi r20,lo8(40)
 1127 0038 51E3      		ldi r21,lo8(49)
 1128 003a 61E0      		ldi r22,lo8(1)
 1129 003c 70E0      		ldi r23,0
 1130 003e C701      		movw r24,r14
 1131 0040 0E94 0000 		call chVTDoSetI
 1132               	.LVL147:
 1133               	.LBE69:
 1134               	.LBE68:
 1135               	.LBB72:
 1136               	.LBB73:
 1137               	.LBB74:
 1138               	.LBB75:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 1139               		.loc 3 440 0
 1140               	/* #APP */
 1141               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1142 0044 7894      		sei
 1143               	 ;  0 "" 2
 1144               	/* #NOAPP */
 1145               	.LBE75:
 1146               	.LBE74:
 1147               	.LBE73:
 1148               	.LBE72:
 1149               	.LBE64:
  97:main.c        ****     }
 1150               		.loc 1 97 0
 1151 0046 EE24      		clr r14
 1152 0048 E394      		inc r14
 1153 004a F12C      		mov r15,__zero_reg__
 1154 004c 00C0      		rjmp .L36
 1155               	.LVL148:
 1156               	.L32:
  92:main.c        ****       palToggleLine(SECUNDARIO_VERDE);
 1157               		.loc 1 92 0
 1158 004e 8430      		cpi r24,4
 1159 0050 9105      		cpc r25,__zero_reg__
 1160 0052 01F0      		breq .L42
  94:main.c        ****       palSetLine(SECUNDARIO_VERMELHO);
 1161               		.loc 1 94 0
 1162 0054 8130      		cpi r24,1
 1163 0056 9105      		cpc r25,__zero_reg__
 1164 0058 01F4      		brne .+2
 1165 005a 00C0      		rjmp .L43
  96:main.c        ****       palSetLine(PEDESTRE_VERDE);
 1166               		.loc 1 96 0
 1167 005c 0297      		sbiw r24,2
 1168 005e 01F4      		brne .+2
 1169 0060 00C0      		rjmp .L44
 1170               	.LVL149:
 1171               	.L33:
  99:main.c        ****   }
 1172               		.loc 1 99 0
 1173 0062 6BE1      		ldi r22,lo8(27)
 1174 0064 76E0      		ldi r23,lo8(6)
 1175 0066 80E0      		ldi r24,0
 1176 0068 90E0      		ldi r25,0
 1177 006a 0E94 0000 		call chThdSleep
 1178               	.LVL150:
 1179               	.L36:
  89:main.c        ****     if (ev == AMB_PRIMARIO){
 1180               		.loc 1 89 0
 1181 006e 0E94 0000 		call dequeue
 1182               	.LVL151:
 1183 0072 8C01      		movw r16,r24
 1184               	.LVL152:
  90:main.c        ****       palSetLine(PRIMARIO_VERDE);
 1185               		.loc 1 90 0
 1186 0074 8330      		cpi r24,3
 1187 0076 9105      		cpc r25,__zero_reg__
 1188 0078 01F4      		brne .L32
  91:main.c        ****     } else if (ev == AMB_SECUNDARIO){
 1189               		.loc 1 91 0
 1190 007a 67E0      		ldi r22,lo8(7)
 1191 007c 89E2      		ldi r24,lo8(41)
 1192 007e 90E0      		ldi r25,0
 1193 0080 0E94 0000 		call _pal_lld_setlineid
 1194               	.LVL153:
 1195 0084 0E94 0000 		call _pal_lld_getpadfromline
 1196               	.LVL154:
 1197 0088 182F      		mov r17,r24
 1198 008a 67E0      		ldi r22,lo8(7)
 1199 008c 89E2      		ldi r24,lo8(41)
 1200 008e 90E0      		ldi r25,0
 1201               	.L40:
  97:main.c        ****     }
 1202               		.loc 1 97 0
 1203 0090 0E94 0000 		call _pal_lld_setlineid
 1204               	.LVL155:
 1205 0094 0E94 0000 		call _pal_lld_getportfromline
 1206               	.LVL156:
 1207 0098 FC01      		movw r30,r24
 1208 009a 9281      		ldd r25,Z+2
 1209 009c 9701      		movw r18,r14
 1210 009e 00C0      		rjmp 2f
 1211               		1:
 1212 00a0 220F      		lsl r18
 1213               		2:
 1214 00a2 1A95      		dec r17
 1215 00a4 02F4      		brpl 1b
 1216 00a6 922B      		or r25,r18
 1217 00a8 9283      		std Z+2,r25
 1218 00aa 00C0      		rjmp .L33
 1219               	.L42:
  93:main.c        ****     } else if (ev == SECUNDARIO){
 1220               		.loc 1 93 0
 1221 00ac 61E0      		ldi r22,lo8(1)
 1222 00ae 83E2      		ldi r24,lo8(35)
 1223 00b0 90E0      		ldi r25,0
 1224 00b2 0E94 0000 		call _pal_lld_setlineid
 1225               	.LVL157:
 1226 00b6 0E94 0000 		call _pal_lld_getportfromline
 1227               	.LVL158:
 1228 00ba FC01      		movw r30,r24
 1229 00bc 1281      		ldd r17,Z+2
 1230 00be 61E0      		ldi r22,lo8(1)
 1231 00c0 83E2      		ldi r24,lo8(35)
 1232 00c2 90E0      		ldi r25,0
 1233 00c4 0E94 0000 		call _pal_lld_setlineid
 1234               	.LVL159:
 1235 00c8 0E94 0000 		call _pal_lld_getpadfromline
 1236               	.LVL160:
 1237 00cc 082F      		mov r16,r24
 1238               	.LVL161:
 1239 00ce 61E0      		ldi r22,lo8(1)
 1240 00d0 83E2      		ldi r24,lo8(35)
 1241 00d2 90E0      		ldi r25,0
 1242 00d4 0E94 0000 		call _pal_lld_setlineid
 1243               	.LVL162:
 1244 00d8 0E94 0000 		call _pal_lld_getportfromline
 1245               	.LVL163:
 1246 00dc 9701      		movw r18,r14
 1247 00de 00C0      		rjmp 2f
 1248               		1:
 1249 00e0 220F      		lsl r18
 1250               		2:
 1251 00e2 0A95      		dec r16
 1252 00e4 02F4      		brpl 1b
 1253 00e6 1227      		eor r17,r18
 1254 00e8 FC01      		movw r30,r24
 1255 00ea 1283      		std Z+2,r17
 1256 00ec 00C0      		rjmp .L33
 1257               	.LVL164:
 1258               	.L43:
  95:main.c        ****     } else if (ev == PEDESTRE){
 1259               		.loc 1 95 0
 1260 00ee 60E0      		ldi r22,0
 1261 00f0 83E2      		ldi r24,lo8(35)
 1262 00f2 90E0      		ldi r25,0
 1263 00f4 0E94 0000 		call _pal_lld_setlineid
 1264               	.LVL165:
 1265 00f8 0E94 0000 		call _pal_lld_getpadfromline
 1266               	.LVL166:
 1267 00fc D82E      		mov r13,r24
 1268 00fe 60E0      		ldi r22,0
 1269 0100 83E2      		ldi r24,lo8(35)
 1270 0102 90E0      		ldi r25,0
 1271 0104 0E94 0000 		call _pal_lld_setlineid
 1272               	.LVL167:
 1273 0108 0E94 0000 		call _pal_lld_getportfromline
 1274               	.LVL168:
 1275 010c FC01      		movw r30,r24
 1276 010e 9281      		ldd r25,Z+2
 1277 0110 00C0      		rjmp 2f
 1278               		1:
 1279 0112 000F      		lsl r16
 1280               		2:
 1281 0114 DA94      		dec r13
 1282 0116 02F4      		brpl 1b
 1283               	.LVL169:
 1284 0118 092B      		or r16,r25
 1285 011a 0283      		std Z+2,r16
 1286 011c 00C0      		rjmp .L33
 1287               	.LVL170:
 1288               	.L44:
  97:main.c        ****     }
 1289               		.loc 1 97 0
 1290 011e 63E0      		ldi r22,lo8(3)
 1291 0120 83E2      		ldi r24,lo8(35)
 1292 0122 90E0      		ldi r25,0
 1293 0124 0E94 0000 		call _pal_lld_setlineid
 1294               	.LVL171:
 1295 0128 0E94 0000 		call _pal_lld_getpadfromline
 1296               	.LVL172:
 1297 012c 182F      		mov r17,r24
 1298 012e 63E0      		ldi r22,lo8(3)
 1299 0130 83E2      		ldi r24,lo8(35)
 1300 0132 90E0      		ldi r25,0
 1301 0134 00C0      		rjmp .L40
 1302               	.LVL173:
 1303               	.L41:
 1304 0136 CE01      		movw r24,r28
 1305 0138 0196      		adiw r24,1
 1306 013a 7C01      		movw r14,r24
 1307 013c 00C0      		rjmp .L31
 1308               		.cfi_endproc
 1309               	.LFE243:
 1311               		.section	.bss.waThread1,"aw",@nobits
 1314               	waThread1:
 1315 0000 0000 0000 		.zero	131
 1315      0000 0000 
 1315      0000 0000 
 1315      0000 0000 
 1315      0000 0000 
 1316               		.comm	ev_buffer,11,1
 1317               		.section	.bss.qfull,"aw",@nobits
 1320               	qfull:
 1321 0000 0000 0000 		.zero	4
 1322               		.section	.bss.qempty,"aw",@nobits
 1325               	qempty:
 1326 0000 0000 0000 		.zero	4
 1327               		.section	.bss.qmtx,"aw",@nobits
 1330               	qmtx:
 1331 0000 0000 0000 		.zero	8
 1331      0000 0000 
 1332               		.section	.bss.qsize,"aw",@nobits
 1335               	qsize:
 1336 0000 0000      		.zero	2
 1337               		.section	.bss.wrp,"aw",@nobits
 1340               	wrp:
 1341 0000 0000      		.zero	2
 1342               		.section	.bss.rdp,"aw",@nobits
 1345               	rdp:
 1346 0000 0000      		.zero	2
 1347               		.section	.bss.queue,"aw",@nobits
 1350               	queue:
 1351 0000 0000 0000 		.zero	256
 1351      0000 0000 
 1351      0000 0000 
 1351      0000 0000 
 1351      0000 0000 
 1352               		.text
 1353               	.Letext0:
 1354               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 1355               		.file 5 "/usr/lib/avr/include/stdint.h"
 1356               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1357               		.file 7 "../../os/rt/include/chearly.h"
 1358               		.file 8 "../../os/rt/include/chobjects.h"
 1359               		.file 9 "../../os/rt/include/chrfcu.h"
 1360               		.file 10 "../../os/rt/include/chdebug.h"
 1361               		.file 11 "../../os/rt/include/chtime.h"
 1362               		.file 12 "../../os/rt/include/chlists.h"
 1363               		.file 13 "../../os/rt/include/chsem.h"
 1364               		.file 14 "../../os/rt/include/chmtx.h"
 1365               		.file 15 "../../os/rt/include/chsys.h"
 1366               		.file 16 "../../os/rt/include/chregistry.h"
 1367               		.file 17 "../../os/rt/include/chcond.h"
 1368               		.file 18 "../../os/rt/include/chevents.h"
 1369               		.file 19 "../../os/oslib/include/chmemcore.h"
 1370               		.file 20 "../../os/hal/include/hal_queues.h"
 1371               		.file 21 "../../os/hal/include/hal_pal.h"
 1372               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 1373               		.file 23 "../../os/hal/include/hal_serial.h"
 1374               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 1375               		.file 25 "../../os/hal/include/hal.h"
 1376               		.file 26 "../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccdCckzU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccdCckzU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccdCckzU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccdCckzU.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccdCckzU.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccdCckzU.s:13     .text.vt_cb:0000000000000000 vt_cb
     /tmp/ccdCckzU.s:92     .text.queueInit:0000000000000000 queueInit
     /tmp/ccdCckzU.s:1330   .bss.qmtx:0000000000000000 qmtx
     /tmp/ccdCckzU.s:1325   .bss.qempty:0000000000000000 qempty
     /tmp/ccdCckzU.s:1320   .bss.qfull:0000000000000000 qfull
     /tmp/ccdCckzU.s:1350   .bss.queue:0000000000000000 queue
     /tmp/ccdCckzU.s:1340   .bss.wrp:0000000000000000 wrp
     /tmp/ccdCckzU.s:1345   .bss.rdp:0000000000000000 rdp
     /tmp/ccdCckzU.s:1335   .bss.qsize:0000000000000000 qsize
     /tmp/ccdCckzU.s:134    .text.enqueue:0000000000000000 enqueue
     /tmp/ccdCckzU.s:224    .text.startup.main:0000000000000000 main
     /tmp/ccdCckzU.s:1048   .text.Thread1:0000000000000000 Thread1
     /tmp/ccdCckzU.s:1314   .bss.waThread1:0000000000000000 waThread1
     /tmp/ccdCckzU.s:961    .text.dequeue:0000000000000000 dequeue
                            *COM*:000000000000000b ev_buffer

UNDEFINED SYMBOLS
chVTDoResetI
chVTDoSetI
chMtxObjectInit
chCondObjectInit
chMtxLock
chCondWait
chCondSignal
chMtxUnlock
halInit
chSysInit
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
_pal_lld_setgroupmode
chThdCreateStatic
chThdSleep
__do_clear_bss
