   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb,"ax",@progbits
  11               	.global	vt_cb
  13               	vt_cb:
  14               	.LFB249:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** 
  20:main.c        **** #define QUEUE_SIZE 128
  21:main.c        **** 
  22:main.c        **** /* Definições de pinos*/
  23:main.c        **** // LEDS
  24:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  25:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  26:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  27:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  28:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  29:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  30:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  31:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  32:main.c        **** 
  33:main.c        **** // Botões
  34:main.c        **** #define AMB_PRIM PAL_LINE(IOPORT3, 3)
  35:main.c        **** #define AMB_SEC PAL_LINE(IOPORT3, 5)
  36:main.c        **** #define SEC_FLAG PAL_LINE(IOPORT3, 4)
  37:main.c        **** #define PED_FLAG PAL_LINE(IOPORT3, 2)
  38:main.c        **** 
  39:main.c        **** // Buffer
  40:main.c        **** static msg_t queue[QUEUE_SIZE], *rdp, *wrp;
  41:main.c        **** static size_t qsize;
  42:main.c        **** static mutex_t qmtx;
  43:main.c        **** static condition_variable_t qempty;
  44:main.c        **** static condition_variable_t qfull;
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** void queueInit(void);
  48:main.c        **** void enqueue(msg_t msg);
  49:main.c        **** msg_t dequeue(void);
  50:main.c        **** uint8_t button_check(ioline_t line, uint8_t button);
  51:main.c        **** void vt_cb(void *arg);
  52:main.c        **** 
  53:main.c        **** enum
  54:main.c        **** {
  55:main.c        ****   SECUNDARIO = 1,
  56:main.c        ****   PEDESTRE,
  57:main.c        ****   AMB_PRIMARIO,
  58:main.c        ****   AMB_SECUNDARIO,
  59:main.c        ****   START,
  60:main.c        ****   SWITCH
  61:main.c        **** };
  62:main.c        **** 
  63:main.c        **** enum
  64:main.c        **** {
  65:main.c        ****   VERDE_AMB_PRIM,
  66:main.c        ****   VERDE_LOCKED_PRIM,
  67:main.c        ****   VERDE_IDLE_PRIM,
  68:main.c        ****   AMARELO_PED_PRIM,
  69:main.c        ****   AMARELO_SEC_PRIM,
  70:main.c        ****   VERDE_AMB_SEC,
  71:main.c        ****   VERDE_LOCKED_SEC,
  72:main.c        ****   AMARELO_PED_SEC,
  73:main.c        ****   AMARELO_PRIM_SEC,
  74:main.c        ****   VERDE_AMB_PED,
  75:main.c        ****   VERDE_LOCKED_PED,
  76:main.c        ****   PISCANDO_SEC,
  77:main.c        ****   PISCANDO_PRIM
  78:main.c        **** };
  79:main.c        **** 
  80:main.c        **** /* Estado inicial */
  81:main.c        **** uint8_t g_state = VERDE_LOCKED_PRIM;
  82:main.c        **** 
  83:main.c        **** /* Flags timers */
  84:main.c        **** uint8_t main_vt_flag = 0;
  85:main.c        **** 
  86:main.c        **** 
  87:main.c        **** /*
  88:main.c        ****  * LED blinker thread, times are in milliseconds.
  89:main.c        ****  */
  90:main.c        **** 
  91:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  92:main.c        **** static THD_FUNCTION(Thread1, arg)
  93:main.c        **** {
  94:main.c        ****   msg_t ev;
  95:main.c        ****   virtual_timer_t main_vt;
  96:main.c        ****   virtual_timer_t blink_vt;
  97:main.c        **** 
  98:main.c        ****   chVTObjectInit(&main_vt);
  99:main.c        ****   chVTObjectInit(&blink_vt);
 100:main.c        **** 
 101:main.c        ****   while (1)
 102:main.c        ****   {
 103:main.c        ****     switch (g_state) {
 104:main.c        ****       case VERDE_LOCKED_PRIM:
 105:main.c        ****         palClearLine(PRIMARIO_VERMELHO);
 106:main.c        ****         palSetLine(PRIMARIO_VERDE);
 107:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 108:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 109:main.c        ****         chVTSet(&main_vt, TIME_MS2I(10000), (vtfunc_t)vt_cb, (void *)&main_vt);
 110:main.c        ****         while (!main_vt_flag) {
 111:main.c        ****           chThdSleepMilliseconds(100);
 112:main.c        ****         }
 113:main.c        ****         main_vt_flag = 0;
 114:main.c        ****         g_state = VERDE_IDLE_PRIM;
 115:main.c        ****         break;
 116:main.c        ****       case VERDE_IDLE_PRIM:
 117:main.c        ****         ev = dequeue();
 118:main.c        ****         if (ev == SECUNDARIO || ev == AMB_SECUNDARIO) {
 119:main.c        ****           g_state = AMARELO_SEC_PRIM;
 120:main.c        ****           palClearLine(PRIMARIO_VERDE);
 121:main.c        ****         } else if (ev == PEDESTRE) {
 122:main.c        ****           g_state = AMARELO_PED_PRIM;
 123:main.c        ****           palClearLine(PRIMARIO_VERDE);
 124:main.c        ****         }
 125:main.c        ****         break;
 126:main.c        ****       case AMARELO_SEC_PRIM:
 127:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 128:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 129:main.c        ****         while (!main_vt_flag) {
 130:main.c        ****           chThdSleepMilliseconds(100);
 131:main.c        ****         }
 132:main.c        ****         main_vt_flag = 0;
 133:main.c        ****         g_state = VERDE_LOCKED_SEC;
 134:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 135:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 136:main.c        ****         break;
 137:main.c        ****       case AMARELO_PED_PRIM:
 138:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 139:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 140:main.c        ****         while (!main_vt_flag) {
 141:main.c        ****           chThdSleepMilliseconds(100);
 142:main.c        ****         }
 143:main.c        ****         main_vt_flag = 0;
 144:main.c        ****         g_state = VERDE_LOCKED_PED;
 145:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 146:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 147:main.c        ****         break;
 148:main.c        ****       case VERDE_LOCKED_SEC:
 149:main.c        ****         palClearLine(SECUNDARIO_VERMELHO);
 150:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 151:main.c        ****         chVTSet(&main_vt, TIME_MS2I(6000), (vtfunc_t)vt_cb, (void *)&main_vt);
 152:main.c        ****         while (!main_vt_flag) {
 153:main.c        ****           chThdSleepMilliseconds(100);
 154:main.c        ****         }
 155:main.c        ****         main_vt_flag = 0;
 156:main.c        ****         if (qsize > 0) {
 157:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 158:main.c        ****         }
 159:main.c        ****         if (ev == PEDESTRE) {
 160:main.c        ****           g_state = AMARELO_PED_SEC;
 161:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 162:main.c        ****         } else {
 163:main.c        ****           g_state = AMARELO_PRIM_SEC;
 164:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 165:main.c        ****         }
 166:main.c        ****         break;
 167:main.c        ****       case AMARELO_PRIM_SEC:
 168:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 169:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 170:main.c        ****         while (!main_vt_flag) {
 171:main.c        ****           chThdSleepMilliseconds(100);
 172:main.c        ****         }
 173:main.c        ****         main_vt_flag = 0;
 174:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 175:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 176:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 177:main.c        ****         break;
 178:main.c        ****       case AMARELO_PED_SEC:
 179:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 180:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 181:main.c        ****         while (!main_vt_flag) {
 182:main.c        ****           chThdSleepMilliseconds(100);
 183:main.c        ****         }
 184:main.c        ****         main_vt_flag = 0;
 185:main.c        ****         g_state = VERDE_LOCKED_PED;
 186:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 187:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 188:main.c        ****         break;
 189:main.c        ****       case VERDE_LOCKED_PED:
 190:main.c        ****         palClearLine(PEDESTRE_VERMELHO);
 191:main.c        ****         palSetLine(PEDESTRE_VERDE);
 192:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 193:main.c        ****         while (!main_vt_flag) {
 194:main.c        ****           chThdSleepMilliseconds(100);
 195:main.c        ****         }
 196:main.c        ****         main_vt_flag = 0;
 197:main.c        ****         if (qsize > 0) {
 198:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 199:main.c        ****         }
 200:main.c        ****         if (ev == SECUNDARIO) {
 201:main.c        ****           g_state = PISCANDO_SEC;
 202:main.c        ****           palClearLine(PEDESTRE_VERDE);
 203:main.c        ****         } else {
 204:main.c        ****           g_state = PISCANDO_PRIM;
 205:main.c        ****           palClearLine(PEDESTRE_VERDE);
 206:main.c        ****         }
 207:main.c        ****         break;
 208:main.c        ****       case PISCANDO_SEC:
 209:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 210:main.c        ****         while (!main_vt_flag) {
 211:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 212:main.c        ****           chThdSleepMilliseconds(250);
 213:main.c        ****         }
 214:main.c        ****         main_vt_flag = 0;
 215:main.c        ****         g_state = VERDE_LOCKED_SEC;
 216:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 217:main.c        ****         break;
 218:main.c        ****       case PISCANDO_PRIM:
 219:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 220:main.c        ****         while (!main_vt_flag) {
 221:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 222:main.c        ****           chThdSleepMilliseconds(250);
 223:main.c        ****         }
 224:main.c        ****         main_vt_flag = 0;
 225:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 226:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 227:main.c        ****         break;
 228:main.c        ****       default:
 229:main.c        ****         palSetLine(PEDESTRE_VERDE);
 230:main.c        ****     }
 231:main.c        ****     chThdSleepMilliseconds(100);
 232:main.c        ****   }
 233:main.c        **** }
 234:main.c        **** 
 235:main.c        **** /*
 236:main.c        ****  * Application entry point.
 237:main.c        ****  */
 238:main.c        **** int main(void)
 239:main.c        **** {
 240:main.c        ****   queueInit();
 241:main.c        ****   /*
 242:main.c        ****    * System initializations.
 243:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
 244:main.c        ****    *   and performs the board-specific initializations.
 245:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
 246:main.c        ****    *   RTOS is active.
 247:main.c        ****    */
 248:main.c        ****   halInit();
 249:main.c        ****   chSysInit();
 250:main.c        **** 
 251:main.c        ****   /* Configuração dos botões */
 252:main.c        ****   palSetLineMode(PED_FLAG, PAL_MODE_INPUT_PULLUP);
 253:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 254:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 255:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 256:main.c        **** 
 257:main.c        ****   // Pedestre
 258:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 259:main.c        ****   palClearLine(PEDESTRE_VERDE);
 260:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 261:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 262:main.c        **** 
 263:main.c        ****   // Primário
 264:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 265:main.c        ****   palClearLine(PRIMARIO_VERDE);
 266:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 267:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 268:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 269:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 270:main.c        **** 
 271:main.c        ****   // Secundário
 272:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 273:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 274:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 275:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 276:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 277:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 278:main.c        **** 
 279:main.c        ****   /*
 280:main.c        ****    * Starts the LED blinker thread.
 281:main.c        ****    */
 282:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 283:main.c        **** 
 284:main.c        ****   while (1)
 285:main.c        ****   {
 286:main.c        ****     if (button_check(AMB_SEC, 1))
 287:main.c        ****     {
 288:main.c        ****       enqueue(AMB_SECUNDARIO);
 289:main.c        ****     }
 290:main.c        ****     else if (button_check(AMB_PRIM, 2))
 291:main.c        ****     {
 292:main.c        ****       enqueue(AMB_PRIMARIO);
 293:main.c        ****     }
 294:main.c        ****     else if (button_check(SEC_FLAG, 3))
 295:main.c        ****     {
 296:main.c        ****       enqueue(SECUNDARIO);
 297:main.c        ****     }
 298:main.c        ****     else if (button_check(PED_FLAG, 4))
 299:main.c        ****     {
 300:main.c        ****       enqueue(PEDESTRE);
 301:main.c        ****     }
 302:main.c        ****     /* Debouncing. */
 303:main.c        ****     chThdSleepMilliseconds(50);
 304:main.c        ****   }
 305:main.c        **** }
 306:main.c        **** 
 307:main.c        **** /*
 308:main.c        ****  * Synchronized queue initialization.
 309:main.c        ****  */
 310:main.c        **** void queueInit(void) {
 311:main.c        ****  
 312:main.c        ****   chMtxObjectInit(&qmtx);
 313:main.c        ****   chCondObjectInit(&qempty);
 314:main.c        ****   chCondObjectInit(&qfull);
 315:main.c        ****  
 316:main.c        ****   rdp = wrp = &queue[0];
 317:main.c        ****   qsize = 0;
 318:main.c        **** }
 319:main.c        **** 
 320:main.c        **** /*
 321:main.c        ****  * Writes a message into the queue, if the queue is full waits
 322:main.c        ****  * for a free slot.
 323:main.c        ****  */
 324:main.c        **** void enqueue(msg_t msg) {
 325:main.c        ****  
 326:main.c        ****   /* Entering monitor.*/
 327:main.c        ****   chMtxLock(&qmtx);
 328:main.c        ****  
 329:main.c        ****   /* Waiting for space in the queue.*/
 330:main.c        ****   while (qsize >= QUEUE_SIZE)
 331:main.c        ****     chCondWait(&qfull);
 332:main.c        ****  
 333:main.c        ****   /* Writing the message in the queue.*/  
 334:main.c        ****   *wrp = msg;
 335:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 336:main.c        ****     wrp = &queue[0];
 337:main.c        ****   qsize++;
 338:main.c        ****  
 339:main.c        ****   /* Signaling that there is at least a message.*/
 340:main.c        ****   chCondSignal(&qempty);
 341:main.c        ****  
 342:main.c        ****   /* Leaving monitor.*/
 343:main.c        ****   chMtxUnlock(&qmtx);
 344:main.c        **** }
 345:main.c        **** 
 346:main.c        **** /*
 347:main.c        ****  * Reads a message from the queue, if the queue is empty waits
 348:main.c        ****  * for a message.
 349:main.c        ****  */
 350:main.c        **** msg_t dequeue(void) {
 351:main.c        ****   msg_t msg;
 352:main.c        ****  
 353:main.c        ****   /* Entering monitor.*/
 354:main.c        ****   chMtxLock(&qmtx);
 355:main.c        ****  
 356:main.c        ****   /* Waiting for messages in the queue.*/
 357:main.c        ****   while (qsize == 0)
 358:main.c        ****     chCondWait(&qempty);
 359:main.c        ****  
 360:main.c        ****   /* Reading the message from the queue.*/  
 361:main.c        ****   msg = *rdp;
 362:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 363:main.c        ****     rdp = &queue[0];
 364:main.c        ****   qsize--;
 365:main.c        ****  
 366:main.c        ****   /* Signaling that there is at least one free slot.*/
 367:main.c        ****   chCondSignal(&qfull);
 368:main.c        ****  
 369:main.c        ****   /* Leaving monitor.*/
 370:main.c        ****   chMtxUnlock(&qmtx);
 371:main.c        ****  
 372:main.c        ****   return msg;
 373:main.c        **** }
 374:main.c        **** 
 375:main.c        **** /* Ficou muito hard coded */
 376:main.c        **** uint8_t button_check(ioline_t line, uint8_t button) {
 377:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 378:main.c        ****   uint8_t w, x;
 379:main.c        **** 
 380:main.c        ****   if (button == 1) {
 381:main.c        ****     x1 = palReadLine(line);
 382:main.c        ****     w = x1^old_x1;
 383:main.c        ****     old_x1 = x1;
 384:main.c        ****     x = x1;
 385:main.c        ****   } else if (button == 2) {
 386:main.c        ****     x2 = palReadLine(line);
 387:main.c        ****     w = x2^old_x2;
 388:main.c        ****     old_x2 = x2;
 389:main.c        ****     x = x2;
 390:main.c        ****   } else if (button == 3) {
 391:main.c        ****     x3 = palReadLine(line);
 392:main.c        ****     w = x3^old_x3;
 393:main.c        ****     old_x3 = x3;
 394:main.c        ****     x = x3;
 395:main.c        ****   } else if (button == 4) {
 396:main.c        ****     x4 = palReadLine(line);
 397:main.c        ****     w = x4^old_x4;
 398:main.c        ****     old_x4 = x4;
 399:main.c        ****     x = x4;
 400:main.c        ****   }
 401:main.c        ****   
 402:main.c        ****   return w &! x;
 403:main.c        **** }
 404:main.c        **** 
 405:main.c        **** void vt_cb(void *arg)
 406:main.c        **** {
  16               		.loc 1 406 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 407:main.c        ****   chSysLockFromISR();
 408:main.c        ****   main_vt_flag = 1;
  23               		.loc 1 408 0
  24 0000 81E0      		ldi r24,lo8(1)
  25               	.LVL1:
  26 0002 8093 0000 		sts main_vt_flag,r24
  27               	/* epilogue start */
 409:main.c        ****   chSysUnlockFromISR();
 410:main.c        **** }
  28               		.loc 1 410 0
  29 0006 0895      		ret
  30               		.cfi_endproc
  31               	.LFE249:
  33               		.section	.text.queueInit,"ax",@progbits
  34               	.global	queueInit
  36               	queueInit:
  37               	.LFB245:
 310:main.c        ****  
  38               		.loc 1 310 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
 312:main.c        ****   chCondObjectInit(&qempty);
  44               		.loc 1 312 0
  45 0000 80E0      		ldi r24,lo8(qmtx)
  46 0002 90E0      		ldi r25,hi8(qmtx)
  47 0004 0E94 0000 		call chMtxObjectInit
  48               	.LVL2:
 313:main.c        ****   chCondObjectInit(&qfull);
  49               		.loc 1 313 0
  50 0008 80E0      		ldi r24,lo8(qempty)
  51 000a 90E0      		ldi r25,hi8(qempty)
  52 000c 0E94 0000 		call chCondObjectInit
  53               	.LVL3:
 314:main.c        ****  
  54               		.loc 1 314 0
  55 0010 80E0      		ldi r24,lo8(qfull)
  56 0012 90E0      		ldi r25,hi8(qfull)
  57 0014 0E94 0000 		call chCondObjectInit
  58               	.LVL4:
 316:main.c        ****   qsize = 0;
  59               		.loc 1 316 0
  60 0018 80E0      		ldi r24,lo8(queue)
  61 001a 90E0      		ldi r25,hi8(queue)
  62 001c 9093 0000 		sts wrp+1,r25
  63 0020 8093 0000 		sts wrp,r24
  64 0024 9093 0000 		sts rdp+1,r25
  65 0028 8093 0000 		sts rdp,r24
 317:main.c        **** }
  66               		.loc 1 317 0
  67 002c 1092 0000 		sts qsize+1,__zero_reg__
  68 0030 1092 0000 		sts qsize,__zero_reg__
  69               	/* epilogue start */
 318:main.c        **** 
  70               		.loc 1 318 0
  71 0034 0895      		ret
  72               		.cfi_endproc
  73               	.LFE245:
  75               		.section	.text.enqueue,"ax",@progbits
  76               	.global	enqueue
  78               	enqueue:
  79               	.LFB246:
 324:main.c        ****  
  80               		.loc 1 324 0
  81               		.cfi_startproc
  82               	.LVL5:
  83 0000 CF93      		push r28
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 28, -2
  87 0002 DF93      		push r29
  88               	.LCFI1:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 29, -3
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 2 */
  94               	.L__stack_usage = 2
  95 0004 EC01      		movw r28,r24
 327:main.c        ****  
  96               		.loc 1 327 0
  97 0006 80E0      		ldi r24,lo8(qmtx)
  98 0008 90E0      		ldi r25,hi8(qmtx)
  99               	.LVL6:
 100 000a 0E94 0000 		call chMtxLock
 101               	.LVL7:
 330:main.c        ****     chCondWait(&qfull);
 102               		.loc 1 330 0
 103 000e 8091 0000 		lds r24,qsize
 104 0012 9091 0000 		lds r25,qsize+1
 105 0016 8038      		cpi r24,-128
 106 0018 9105      		cpc r25,__zero_reg__
 107 001a 00F0      		brlo .L5
 108               	.L6:
 331:main.c        ****  
 109               		.loc 1 331 0
 110 001c 80E0      		ldi r24,lo8(qfull)
 111 001e 90E0      		ldi r25,hi8(qfull)
 112 0020 0E94 0000 		call chCondWait
 113               	.LVL8:
 330:main.c        ****     chCondWait(&qfull);
 114               		.loc 1 330 0
 115 0024 8091 0000 		lds r24,qsize
 116 0028 9091 0000 		lds r25,qsize+1
 117 002c 8038      		cpi r24,-128
 118 002e 9105      		cpc r25,__zero_reg__
 119 0030 00F4      		brsh .L6
 120               	.L5:
 334:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 121               		.loc 1 334 0
 122 0032 E091 0000 		lds r30,wrp
 123 0036 F091 0000 		lds r31,wrp+1
 124 003a C193      		st Z+,r28
 125 003c D193      		st Z+,r29
 335:main.c        ****     wrp = &queue[0];
 126               		.loc 1 335 0
 127 003e 20E0      		ldi r18,hi8(queue+256)
 128 0040 E030      		cpi r30,lo8(queue+256)
 129 0042 F207      		cpc r31,r18
 130 0044 00F0      		brlo .L10
 336:main.c        ****   qsize++;
 131               		.loc 1 336 0
 132 0046 20E0      		ldi r18,lo8(queue)
 133 0048 30E0      		ldi r19,hi8(queue)
 134 004a 3093 0000 		sts wrp+1,r19
 135 004e 2093 0000 		sts wrp,r18
 136               	.L8:
 337:main.c        ****  
 137               		.loc 1 337 0
 138 0052 0196      		adiw r24,1
 139 0054 9093 0000 		sts qsize+1,r25
 140 0058 8093 0000 		sts qsize,r24
 340:main.c        ****  
 141               		.loc 1 340 0
 142 005c 80E0      		ldi r24,lo8(qempty)
 143 005e 90E0      		ldi r25,hi8(qempty)
 144 0060 0E94 0000 		call chCondSignal
 145               	.LVL9:
 343:main.c        **** }
 146               		.loc 1 343 0
 147 0064 80E0      		ldi r24,lo8(qmtx)
 148 0066 90E0      		ldi r25,hi8(qmtx)
 149               	/* epilogue start */
 344:main.c        **** 
 150               		.loc 1 344 0
 151 0068 DF91      		pop r29
 152 006a CF91      		pop r28
 153               	.LVL10:
 343:main.c        **** }
 154               		.loc 1 343 0
 155 006c 0C94 0000 		jmp chMtxUnlock
 156               	.LVL11:
 157               	.L10:
 335:main.c        ****     wrp = &queue[0];
 158               		.loc 1 335 0
 159 0070 F093 0000 		sts wrp+1,r31
 160 0074 E093 0000 		sts wrp,r30
 161 0078 00C0      		rjmp .L8
 162               		.cfi_endproc
 163               	.LFE246:
 165               		.section	.text.dequeue,"ax",@progbits
 166               	.global	dequeue
 168               	dequeue:
 169               	.LFB247:
 350:main.c        ****   msg_t msg;
 170               		.loc 1 350 0
 171               		.cfi_startproc
 172 0000 CF93      		push r28
 173               	.LCFI2:
 174               		.cfi_def_cfa_offset 3
 175               		.cfi_offset 28, -2
 176 0002 DF93      		push r29
 177               	.LCFI3:
 178               		.cfi_def_cfa_offset 4
 179               		.cfi_offset 29, -3
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 2 */
 183               	.L__stack_usage = 2
 354:main.c        ****  
 184               		.loc 1 354 0
 185 0004 80E0      		ldi r24,lo8(qmtx)
 186 0006 90E0      		ldi r25,hi8(qmtx)
 187 0008 0E94 0000 		call chMtxLock
 188               	.LVL12:
 357:main.c        ****     chCondWait(&qempty);
 189               		.loc 1 357 0
 190 000c 8091 0000 		lds r24,qsize
 191 0010 9091 0000 		lds r25,qsize+1
 192 0014 0097      		sbiw r24,0
 193 0016 01F4      		brne .L12
 194               	.L13:
 358:main.c        ****  
 195               		.loc 1 358 0
 196 0018 80E0      		ldi r24,lo8(qempty)
 197 001a 90E0      		ldi r25,hi8(qempty)
 198 001c 0E94 0000 		call chCondWait
 199               	.LVL13:
 357:main.c        ****     chCondWait(&qempty);
 200               		.loc 1 357 0
 201 0020 8091 0000 		lds r24,qsize
 202 0024 9091 0000 		lds r25,qsize+1
 203 0028 0097      		sbiw r24,0
 204 002a 01F0      		breq .L13
 205               	.L12:
 361:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 206               		.loc 1 361 0
 207 002c E091 0000 		lds r30,rdp
 208 0030 F091 0000 		lds r31,rdp+1
 209 0034 C191      		ld r28,Z+
 210 0036 D191      		ld r29,Z+
 211               	.LVL14:
 362:main.c        ****     rdp = &queue[0];
 212               		.loc 1 362 0
 213 0038 20E0      		ldi r18,hi8(queue+256)
 214 003a E030      		cpi r30,lo8(queue+256)
 215 003c F207      		cpc r31,r18
 216 003e 00F0      		brlo .L18
 363:main.c        ****   qsize--;
 217               		.loc 1 363 0
 218 0040 20E0      		ldi r18,lo8(queue)
 219 0042 30E0      		ldi r19,hi8(queue)
 220 0044 3093 0000 		sts rdp+1,r19
 221 0048 2093 0000 		sts rdp,r18
 222               	.L15:
 364:main.c        ****  
 223               		.loc 1 364 0
 224 004c 0197      		sbiw r24,1
 225 004e 9093 0000 		sts qsize+1,r25
 226 0052 8093 0000 		sts qsize,r24
 367:main.c        ****  
 227               		.loc 1 367 0
 228 0056 80E0      		ldi r24,lo8(qfull)
 229 0058 90E0      		ldi r25,hi8(qfull)
 230 005a 0E94 0000 		call chCondSignal
 231               	.LVL15:
 370:main.c        ****  
 232               		.loc 1 370 0
 233 005e 80E0      		ldi r24,lo8(qmtx)
 234 0060 90E0      		ldi r25,hi8(qmtx)
 235 0062 0E94 0000 		call chMtxUnlock
 236               	.LVL16:
 373:main.c        **** 
 237               		.loc 1 373 0
 238 0066 CE01      		movw r24,r28
 239               	/* epilogue start */
 240 0068 DF91      		pop r29
 241 006a CF91      		pop r28
 242               	.LVL17:
 243 006c 0895      		ret
 244               	.LVL18:
 245               	.L18:
 362:main.c        ****     rdp = &queue[0];
 246               		.loc 1 362 0
 247 006e F093 0000 		sts rdp+1,r31
 248 0072 E093 0000 		sts rdp,r30
 249 0076 00C0      		rjmp .L15
 250               		.cfi_endproc
 251               	.LFE247:
 253               		.section	.text.Thread1,"ax",@progbits
 255               	Thread1:
 256               	.LFB243:
  93:main.c        ****   msg_t ev;
 257               		.loc 1 93 0
 258               		.cfi_startproc
 259               	.LVL19:
 260 0000 CF93      		push r28
 261               	.LCFI4:
 262               		.cfi_def_cfa_offset 3
 263               		.cfi_offset 28, -2
 264 0002 DF93      		push r29
 265               	.LCFI5:
 266               		.cfi_def_cfa_offset 4
 267               		.cfi_offset 29, -3
 268 0004 CDB7      		in r28,__SP_L__
 269 0006 DEB7      		in r29,__SP_H__
 270               	.LCFI6:
 271               		.cfi_def_cfa_register 28
 272 0008 6097      		sbiw r28,16
 273               	.LCFI7:
 274               		.cfi_def_cfa_offset 20
 275 000a 0FB6      		in __tmp_reg__,__SREG__
 276 000c F894      		cli
 277 000e DEBF      		out __SP_H__,r29
 278 0010 0FBE      		out __SREG__,__tmp_reg__
 279 0012 CDBF      		out __SP_L__,r28
 280               	/* prologue: function */
 281               	/* frame size = 16 */
 282               	/* stack size = 18 */
 283               	.L__stack_usage = 18
 284               	.LVL20:
 285               	.LBB232:
 286               	.LBB233:
 287               		.file 2 "../../os/rt/include/chvt.h"
   1:../../os/rt/include/chvt.h **** /*
   2:../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chvt.h **** 
   5:../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chvt.h **** 
   7:../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chvt.h **** 
  11:../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chvt.h **** 
  16:../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chvt.h **** */
  19:../../os/rt/include/chvt.h **** 
  20:../../os/rt/include/chvt.h **** /**
  21:../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../os/rt/include/chvt.h ****  *
  24:../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../os/rt/include/chvt.h ****  * @{
  26:../../os/rt/include/chvt.h ****  */
  27:../../os/rt/include/chvt.h **** 
  28:../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../os/rt/include/chvt.h **** 
  31:../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../os/rt/include/chvt.h **** 
  35:../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../os/rt/include/chvt.h **** 
  39:../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../os/rt/include/chvt.h **** 
  43:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../os/rt/include/chvt.h **** #endif
  47:../../os/rt/include/chvt.h **** 
  48:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../os/rt/include/chvt.h **** #endif
  51:../../os/rt/include/chvt.h **** 
  52:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../os/rt/include/chvt.h **** #endif
  55:../../os/rt/include/chvt.h **** 
  56:../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../os/rt/include/chvt.h **** 
  60:../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../os/rt/include/chvt.h **** 
  64:../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../os/rt/include/chvt.h **** 
  68:../../os/rt/include/chvt.h **** /*
  69:../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../os/rt/include/chvt.h ****  */
  71:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../os/rt/include/chvt.h **** extern "C" {
  73:../../os/rt/include/chvt.h **** #endif
  74:../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:../../os/rt/include/chvt.h **** #endif
  85:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  86:../../os/rt/include/chvt.h **** }
  87:../../os/rt/include/chvt.h **** #endif
  88:../../os/rt/include/chvt.h **** 
  89:../../os/rt/include/chvt.h **** /*===========================================================================*/
  90:../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../os/rt/include/chvt.h **** 
  93:../../os/rt/include/chvt.h **** /**
  94:../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:../../os/rt/include/chvt.h ****  *
 100:../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:../../os/rt/include/chvt.h ****  *
 102:../../os/rt/include/chvt.h ****  * @init
 103:../../os/rt/include/chvt.h ****  */
 104:../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:../../os/rt/include/chvt.h **** 
 106:../../os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 288               		.loc 2 106 0
 289 0014 1A82      		std Y+2,__zero_reg__
 290 0016 1982      		std Y+1,__zero_reg__
 291               	.LVL21:
 292               	.LBE233:
 293               	.LBE232:
 229:main.c        ****     }
 294               		.loc 1 229 0
 295 0018 EE24      		clr r14
 296 001a E394      		inc r14
 297 001c F12C      		mov r15,__zero_reg__
 298               	.LVL22:
 225:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 299               		.loc 1 225 0
 300 001e 9924      		clr r9
 301 0020 9394      		inc r9
 215:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 302               		.loc 1 215 0
 303 0022 96E0      		ldi r25,lo8(6)
 304 0024 A92E      		mov r10,r25
 204:main.c        ****           palClearLine(PEDESTRE_VERDE);
 305               		.loc 1 204 0
 306 0026 2CE0      		ldi r18,lo8(12)
 307 0028 722E      		mov r7,r18
 201:main.c        ****           palClearLine(PEDESTRE_VERDE);
 308               		.loc 1 201 0
 309 002a 3BE0      		ldi r19,lo8(11)
 310 002c 532E      		mov r5,r19
 185:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 311               		.loc 1 185 0
 312 002e 4AE0      		ldi r20,lo8(10)
 313 0030 B42E      		mov r11,r20
 163:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 314               		.loc 1 163 0
 315 0032 58E0      		ldi r21,lo8(8)
 316 0034 852E      		mov r8,r21
 160:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 317               		.loc 1 160 0
 318 0036 67E0      		ldi r22,lo8(7)
 319 0038 662E      		mov r6,r22
 320 003a 00C0      		rjmp .L66
 321               	.LVL23:
 322               	.L20:
 229:main.c        ****     }
 323               		.loc 1 229 0
 324 003c 63E0      		ldi r22,lo8(3)
 325 003e 83E2      		ldi r24,lo8(35)
 326 0040 90E0      		ldi r25,0
 327 0042 0E94 0000 		call _pal_lld_setlineid
 328               	.LVL24:
 329 0046 0E94 0000 		call _pal_lld_getpadfromline
 330               	.LVL25:
 331 004a 182F      		mov r17,r24
 332 004c 63E0      		ldi r22,lo8(3)
 333               	.L121:
 334 004e 83E2      		ldi r24,lo8(35)
 335 0050 90E0      		ldi r25,0
 336               	.L122:
 337 0052 0E94 0000 		call _pal_lld_setlineid
 338               	.LVL26:
 339 0056 0E94 0000 		call _pal_lld_getportfromline
 340               	.LVL27:
 341 005a FC01      		movw r30,r24
 342 005c 9281      		ldd r25,Z+2
 343 005e 9701      		movw r18,r14
 344 0060 00C0      		rjmp 2f
 345               		1:
 346 0062 220F      		lsl r18
 347               		2:
 348 0064 1A95      		dec r17
 349 0066 02F4      		brpl 1b
 350 0068 922B      		or r25,r18
 351 006a 9283      		std Z+2,r25
 352               	.L35:
 231:main.c        ****   }
 353               		.loc 1 231 0
 354 006c 6BE1      		ldi r22,lo8(27)
 355 006e 76E0      		ldi r23,lo8(6)
 356 0070 80E0      		ldi r24,0
 357 0072 90E0      		ldi r25,0
 358 0074 0E94 0000 		call chThdSleep
 359               	.LVL28:
 360               	.L66:
 103:main.c        ****       case VERDE_LOCKED_PRIM:
 361               		.loc 1 103 0
 362 0078 E091 0000 		lds r30,g_state
 363 007c E150      		subi r30,lo8(-(-1))
 364 007e EC30      		cpi r30,lo8(12)
 365 0080 00F4      		brsh .L20
 366 0082 F0E0      		ldi r31,0
 367 0084 E050      		subi r30,lo8(-(gs(.L22)))
 368 0086 F040      		sbci r31,hi8(-(gs(.L22)))
 369 0088 0C94 0000 		jmp __tablejump2__
 370               		.p2align	1
 371               	.L22:
 372 008c 0000      		.word gs(.L21)
 373 008e 0000      		.word gs(.L23)
 374 0090 0000      		.word gs(.L24)
 375 0092 0000      		.word gs(.L25)
 376 0094 0000      		.word gs(.L20)
 377 0096 0000      		.word gs(.L26)
 378 0098 0000      		.word gs(.L27)
 379 009a 0000      		.word gs(.L28)
 380 009c 0000      		.word gs(.L20)
 381 009e 0000      		.word gs(.L29)
 382 00a0 0000      		.word gs(.L30)
 383 00a2 0000      		.word gs(.L31)
 384               	.L31:
 385               	.LVL29:
 386               	.LBB234:
 387               	.LBB235:
 388               	.LBB236:
 389               	.LBB237:
 390               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 391               		.loc 3 430 0
 392               	/* #APP */
 393               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 394 00a4 F894      		cli
 395               	 ;  0 "" 2
 396               	.LVL30:
 397               	/* #NOAPP */
 398               	.LBE237:
 399               	.LBE236:
 400               	.LBE235:
 401               	.LBB238:
 402               	.LBB239:
 403               	.LBB240:
 404               	.LBB241:
 107:../../os/rt/include/chvt.h **** }
 108:../../os/rt/include/chvt.h **** 
 109:../../os/rt/include/chvt.h **** /**
 110:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 111:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:../../os/rt/include/chvt.h ****  *          invocation.
 113:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:../../os/rt/include/chvt.h ****  *          @p systime_t size.
 117:../../os/rt/include/chvt.h ****  *
 118:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:../../os/rt/include/chvt.h ****  *
 120:../../os/rt/include/chvt.h ****  * @xclass
 121:../../os/rt/include/chvt.h ****  */
 122:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:../../os/rt/include/chvt.h **** 
 124:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:../../os/rt/include/chvt.h ****   return port_timer_get_time();
 128:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:../../os/rt/include/chvt.h **** }
 130:../../os/rt/include/chvt.h **** 
 131:../../os/rt/include/chvt.h **** /**
 132:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 133:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:../../os/rt/include/chvt.h ****  *          invocation.
 135:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:../../os/rt/include/chvt.h ****  *
 137:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:../../os/rt/include/chvt.h ****  *
 139:../../os/rt/include/chvt.h ****  * @api
 140:../../os/rt/include/chvt.h ****  */
 141:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:../../os/rt/include/chvt.h ****   systime_t systime;
 143:../../os/rt/include/chvt.h **** 
 144:../../os/rt/include/chvt.h ****   chSysLock();
 145:../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:../../os/rt/include/chvt.h ****   chSysUnlock();
 147:../../os/rt/include/chvt.h **** 
 148:../../os/rt/include/chvt.h ****   return systime;
 149:../../os/rt/include/chvt.h **** }
 150:../../os/rt/include/chvt.h **** 
 151:../../os/rt/include/chvt.h **** /**
 152:../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:../../os/rt/include/chvt.h ****  *
 154:../../os/rt/include/chvt.h ****  * @param[in] start     start time
 155:../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:../../os/rt/include/chvt.h ****  *
 157:../../os/rt/include/chvt.h ****  * @xclass
 158:../../os/rt/include/chvt.h ****  */
 159:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:../../os/rt/include/chvt.h **** 
 161:../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:../../os/rt/include/chvt.h **** }
 163:../../os/rt/include/chvt.h **** 
 164:../../os/rt/include/chvt.h **** /**
 165:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:../../os/rt/include/chvt.h ****  *          window.
 167:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:../../os/rt/include/chvt.h ****  *          time window has zero size.
 169:../../os/rt/include/chvt.h ****  *
 170:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:../../os/rt/include/chvt.h ****  *
 175:../../os/rt/include/chvt.h ****  * @xclass
 176:../../os/rt/include/chvt.h ****  */
 177:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:../../os/rt/include/chvt.h **** 
 179:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:../../os/rt/include/chvt.h **** }
 181:../../os/rt/include/chvt.h **** 
 182:../../os/rt/include/chvt.h **** /**
 183:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:../../os/rt/include/chvt.h ****  *          window.
 185:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:../../os/rt/include/chvt.h ****  *          time window has zero size.
 187:../../os/rt/include/chvt.h ****  *
 188:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:../../os/rt/include/chvt.h ****  *
 193:../../os/rt/include/chvt.h ****  * @api
 194:../../os/rt/include/chvt.h ****  */
 195:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:../../os/rt/include/chvt.h **** 
 197:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:../../os/rt/include/chvt.h **** }
 199:../../os/rt/include/chvt.h **** 
 200:../../os/rt/include/chvt.h **** /**
 201:../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:../../os/rt/include/chvt.h ****  *
 207:../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:../../os/rt/include/chvt.h ****  *
 214:../../os/rt/include/chvt.h ****  * @iclass
 215:../../os/rt/include/chvt.h ****  */
 216:../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:../../os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:../../os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:../../os/rt/include/chvt.h **** 
 220:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:../../os/rt/include/chvt.h **** 
 222:../../os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:../../os/rt/include/chvt.h ****     return false;
 224:../../os/rt/include/chvt.h ****   }
 225:../../os/rt/include/chvt.h **** 
 226:../../os/rt/include/chvt.h ****   if (timep != NULL) {
 227:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:../../os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:../../os/rt/include/chvt.h **** #else
 230:../../os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:../../os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:../../os/rt/include/chvt.h **** #endif
 233:../../os/rt/include/chvt.h ****   }
 234:../../os/rt/include/chvt.h **** 
 235:../../os/rt/include/chvt.h ****   return true;
 236:../../os/rt/include/chvt.h **** }
 237:../../os/rt/include/chvt.h **** 
 238:../../os/rt/include/chvt.h **** /**
 239:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:../../os/rt/include/chvt.h ****  *
 243:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:../../os/rt/include/chvt.h ****  *
 246:../../os/rt/include/chvt.h ****  * @iclass
 247:../../os/rt/include/chvt.h ****  */
 248:../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:../../os/rt/include/chvt.h **** 
 250:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:../../os/rt/include/chvt.h **** 
 252:../../os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:../../os/rt/include/chvt.h **** }
 254:../../os/rt/include/chvt.h **** 
 255:../../os/rt/include/chvt.h **** /**
 256:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:../../os/rt/include/chvt.h ****  *
 260:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:../../os/rt/include/chvt.h ****  *
 263:../../os/rt/include/chvt.h ****  * @api
 264:../../os/rt/include/chvt.h ****  */
 265:../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:../../os/rt/include/chvt.h ****   bool b;
 267:../../os/rt/include/chvt.h **** 
 268:../../os/rt/include/chvt.h ****   chSysLock();
 269:../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:../../os/rt/include/chvt.h ****   chSysUnlock();
 271:../../os/rt/include/chvt.h **** 
 272:../../os/rt/include/chvt.h ****   return b;
 273:../../os/rt/include/chvt.h **** }
 274:../../os/rt/include/chvt.h **** 
 275:../../os/rt/include/chvt.h **** /**
 276:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:../../os/rt/include/chvt.h ****  *
 281:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:../../os/rt/include/chvt.h ****  *
 283:../../os/rt/include/chvt.h ****  * @iclass
 284:../../os/rt/include/chvt.h ****  */
 285:../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:../../os/rt/include/chvt.h **** 
 287:../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 405               		.loc 2 287 0
 406 00a6 8981      		ldd r24,Y+1
 407 00a8 9A81      		ldd r25,Y+2
 408 00aa 892B      		or r24,r25
 409 00ac 01F0      		breq .L63
 288:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 410               		.loc 2 288 0
 411 00ae CE01      		movw r24,r28
 412 00b0 0196      		adiw r24,1
 413 00b2 0E94 0000 		call chVTDoResetI
 414               	.LVL31:
 415               	.L63:
 416               	.LBE241:
 417               	.LBE240:
 289:../../os/rt/include/chvt.h ****   }
 290:../../os/rt/include/chvt.h **** }
 291:../../os/rt/include/chvt.h **** 
 292:../../os/rt/include/chvt.h **** /**
 293:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:../../os/rt/include/chvt.h ****  *
 298:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:../../os/rt/include/chvt.h ****  *
 300:../../os/rt/include/chvt.h ****  * @api
 301:../../os/rt/include/chvt.h ****  */
 302:../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:../../os/rt/include/chvt.h **** 
 304:../../os/rt/include/chvt.h ****   chSysLock();
 305:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:../../os/rt/include/chvt.h ****   chSysUnlock();
 307:../../os/rt/include/chvt.h **** }
 308:../../os/rt/include/chvt.h **** 
 309:../../os/rt/include/chvt.h **** /**
 310:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:../../os/rt/include/chvt.h ****  *          using the new parameters.
 313:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:../../os/rt/include/chvt.h ****  *
 316:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:../../os/rt/include/chvt.h ****  *                        normal time specification.
 321:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:../../os/rt/include/chvt.h ****  *                      .
 323:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../os/rt/include/chvt.h ****  *                      function
 328:../../os/rt/include/chvt.h ****  *
 329:../../os/rt/include/chvt.h ****  * @iclass
 330:../../os/rt/include/chvt.h ****  */
 331:../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:../../os/rt/include/chvt.h **** 
 334:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 418               		.loc 2 335 0
 419 00b6 8E01      		movw r16,r28
 420 00b8 0F5F      		subi r16,-1
 421 00ba 1F4F      		sbci r17,-1
 422 00bc 20E0      		ldi r18,lo8(gs(vt_cb))
 423 00be 30E0      		ldi r19,hi8(gs(vt_cb))
 424 00c0 40E1      		ldi r20,lo8(16)
 425 00c2 5AE7      		ldi r21,lo8(122)
 426 00c4 60E0      		ldi r22,0
 427 00c6 70E0      		ldi r23,0
 428 00c8 C801      		movw r24,r16
 429 00ca 0E94 0000 		call chVTDoSetI
 430               	.LVL32:
 431               	.LBE239:
 432               	.LBE238:
 433               	.LBB242:
 434               	.LBB243:
 435               	.LBB244:
 436               	.LBB245:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 437               		.loc 3 440 0
 438               	/* #APP */
 439               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 440 00ce 7894      		sei
 441               	 ;  0 "" 2
 442               	/* #NOAPP */
 443               	.LBE245:
 444               	.LBE244:
 445               	.LBE243:
 446               	.LBE242:
 447               	.LBE234:
 220:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 448               		.loc 1 220 0
 449 00d0 8091 0000 		lds r24,main_vt_flag
 450 00d4 8111      		cpse r24,__zero_reg__
 451 00d6 00C0      		rjmp .L64
 452               	.L65:
 221:main.c        ****           chThdSleepMilliseconds(250);
 453               		.loc 1 221 0
 454 00d8 62E0      		ldi r22,lo8(2)
 455 00da 83E2      		ldi r24,lo8(35)
 456 00dc 90E0      		ldi r25,0
 457 00de 0E94 0000 		call _pal_lld_setlineid
 458               	.LVL33:
 459 00e2 0E94 0000 		call _pal_lld_getportfromline
 460               	.LVL34:
 461 00e6 FC01      		movw r30,r24
 462 00e8 1281      		ldd r17,Z+2
 463 00ea 62E0      		ldi r22,lo8(2)
 464 00ec 83E2      		ldi r24,lo8(35)
 465 00ee 90E0      		ldi r25,0
 466 00f0 0E94 0000 		call _pal_lld_setlineid
 467               	.LVL35:
 468 00f4 0E94 0000 		call _pal_lld_getpadfromline
 469               	.LVL36:
 470 00f8 082F      		mov r16,r24
 471 00fa 62E0      		ldi r22,lo8(2)
 472 00fc 83E2      		ldi r24,lo8(35)
 473 00fe 90E0      		ldi r25,0
 474 0100 0E94 0000 		call _pal_lld_setlineid
 475               	.LVL37:
 476 0104 0E94 0000 		call _pal_lld_getportfromline
 477               	.LVL38:
 478 0108 9701      		movw r18,r14
 479 010a 00C0      		rjmp 2f
 480               		1:
 481 010c 220F      		lsl r18
 482               		2:
 483 010e 0A95      		dec r16
 484 0110 02F4      		brpl 1b
 485 0112 1227      		eor r17,r18
 486 0114 FC01      		movw r30,r24
 487 0116 1283      		std Z+2,r17
 222:main.c        ****         }
 488               		.loc 1 222 0
 489 0118 62E4      		ldi r22,lo8(66)
 490 011a 7FE0      		ldi r23,lo8(15)
 491 011c 80E0      		ldi r24,0
 492 011e 90E0      		ldi r25,0
 493 0120 0E94 0000 		call chThdSleep
 494               	.LVL39:
 220:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 495               		.loc 1 220 0
 496 0124 8091 0000 		lds r24,main_vt_flag
 497 0128 8823      		tst r24
 498 012a 01F0      		breq .L65
 499               	.L64:
 224:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 500               		.loc 1 224 0
 501 012c 1092 0000 		sts main_vt_flag,__zero_reg__
 225:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 502               		.loc 1 225 0
 503 0130 9092 0000 		sts g_state,r9
 504               	.LVL40:
 505               	.L126:
 226:main.c        ****         break;
 506               		.loc 1 226 0
 507 0134 62E0      		ldi r22,lo8(2)
 508 0136 83E2      		ldi r24,lo8(35)
 509 0138 90E0      		ldi r25,0
 510 013a 0E94 0000 		call _pal_lld_setlineid
 511               	.LVL41:
 512 013e 0E94 0000 		call _pal_lld_getpadfromline
 513               	.LVL42:
 514 0142 182F      		mov r17,r24
 515 0144 62E0      		ldi r22,lo8(2)
 516 0146 00C0      		rjmp .L121
 517               	.LVL43:
 518               	.L30:
 519               	.LBB246:
 520               	.LBB247:
 521               	.LBB248:
 522               	.LBB249:
 430:../../os/common/ports/AVR/chcore.h **** }
 523               		.loc 3 430 0
 524               	/* #APP */
 525               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 526 0148 F894      		cli
 527               	 ;  0 "" 2
 528               	.LVL44:
 529               	/* #NOAPP */
 530               	.LBE249:
 531               	.LBE248:
 532               	.LBE247:
 533               	.LBB250:
 534               	.LBB251:
 535               	.LBB252:
 536               	.LBB253:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 537               		.loc 2 287 0
 538 014a 8981      		ldd r24,Y+1
 539 014c 9A81      		ldd r25,Y+2
 540 014e 892B      		or r24,r25
 541 0150 01F0      		breq .L60
 288:../../os/rt/include/chvt.h ****   }
 542               		.loc 2 288 0
 543 0152 CE01      		movw r24,r28
 544 0154 0196      		adiw r24,1
 545 0156 0E94 0000 		call chVTDoResetI
 546               	.LVL45:
 547               	.L60:
 548               	.LBE253:
 549               	.LBE252:
 550               		.loc 2 335 0
 551 015a 8E01      		movw r16,r28
 552 015c 0F5F      		subi r16,-1
 553 015e 1F4F      		sbci r17,-1
 554 0160 20E0      		ldi r18,lo8(gs(vt_cb))
 555 0162 30E0      		ldi r19,hi8(gs(vt_cb))
 556 0164 40E1      		ldi r20,lo8(16)
 557 0166 5AE7      		ldi r21,lo8(122)
 558 0168 60E0      		ldi r22,0
 559 016a 70E0      		ldi r23,0
 560 016c C801      		movw r24,r16
 561 016e 0E94 0000 		call chVTDoSetI
 562               	.LVL46:
 563               	.LBE251:
 564               	.LBE250:
 565               	.LBB254:
 566               	.LBB255:
 567               	.LBB256:
 568               	.LBB257:
 569               		.loc 3 440 0
 570               	/* #APP */
 571               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 572 0172 7894      		sei
 573               	 ;  0 "" 2
 574               	/* #NOAPP */
 575               	.LBE257:
 576               	.LBE256:
 577               	.LBE255:
 578               	.LBE254:
 579               	.LBE246:
 210:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 580               		.loc 1 210 0
 581 0174 8091 0000 		lds r24,main_vt_flag
 582 0178 8111      		cpse r24,__zero_reg__
 583 017a 00C0      		rjmp .L61
 584               	.L62:
 211:main.c        ****           chThdSleepMilliseconds(250);
 585               		.loc 1 211 0
 586 017c 62E0      		ldi r22,lo8(2)
 587 017e 83E2      		ldi r24,lo8(35)
 588 0180 90E0      		ldi r25,0
 589 0182 0E94 0000 		call _pal_lld_setlineid
 590               	.LVL47:
 591 0186 0E94 0000 		call _pal_lld_getportfromline
 592               	.LVL48:
 593 018a FC01      		movw r30,r24
 594 018c 1281      		ldd r17,Z+2
 595 018e 62E0      		ldi r22,lo8(2)
 596 0190 83E2      		ldi r24,lo8(35)
 597 0192 90E0      		ldi r25,0
 598 0194 0E94 0000 		call _pal_lld_setlineid
 599               	.LVL49:
 600 0198 0E94 0000 		call _pal_lld_getpadfromline
 601               	.LVL50:
 602 019c 082F      		mov r16,r24
 603 019e 62E0      		ldi r22,lo8(2)
 604 01a0 83E2      		ldi r24,lo8(35)
 605 01a2 90E0      		ldi r25,0
 606 01a4 0E94 0000 		call _pal_lld_setlineid
 607               	.LVL51:
 608 01a8 0E94 0000 		call _pal_lld_getportfromline
 609               	.LVL52:
 610 01ac 9701      		movw r18,r14
 611 01ae 00C0      		rjmp 2f
 612               		1:
 613 01b0 220F      		lsl r18
 614               		2:
 615 01b2 0A95      		dec r16
 616 01b4 02F4      		brpl 1b
 617 01b6 1227      		eor r17,r18
 618 01b8 FC01      		movw r30,r24
 619 01ba 1283      		std Z+2,r17
 212:main.c        ****         }
 620               		.loc 1 212 0
 621 01bc 62E4      		ldi r22,lo8(66)
 622 01be 7FE0      		ldi r23,lo8(15)
 623 01c0 80E0      		ldi r24,0
 624 01c2 90E0      		ldi r25,0
 625 01c4 0E94 0000 		call chThdSleep
 626               	.LVL53:
 210:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 627               		.loc 1 210 0
 628 01c8 8091 0000 		lds r24,main_vt_flag
 629 01cc 8823      		tst r24
 630 01ce 01F0      		breq .L62
 631               	.L61:
 214:main.c        ****         g_state = VERDE_LOCKED_SEC;
 632               		.loc 1 214 0
 633 01d0 1092 0000 		sts main_vt_flag,__zero_reg__
 215:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 634               		.loc 1 215 0
 635 01d4 A092 0000 		sts g_state,r10
 636 01d8 00C0      		rjmp .L126
 637               	.LVL54:
 638               	.L29:
 190:main.c        ****         palSetLine(PEDESTRE_VERDE);
 639               		.loc 1 190 0
 640 01da 62E0      		ldi r22,lo8(2)
 641 01dc 83E2      		ldi r24,lo8(35)
 642 01de 90E0      		ldi r25,0
 643 01e0 0E94 0000 		call _pal_lld_setlineid
 644               	.LVL55:
 645 01e4 0E94 0000 		call _pal_lld_getpadfromline
 646               	.LVL56:
 647 01e8 182F      		mov r17,r24
 648 01ea 62E0      		ldi r22,lo8(2)
 649 01ec 83E2      		ldi r24,lo8(35)
 650 01ee 90E0      		ldi r25,0
 651 01f0 0E94 0000 		call _pal_lld_setlineid
 652               	.LVL57:
 653 01f4 0E94 0000 		call _pal_lld_getportfromline
 654               	.LVL58:
 655 01f8 FC01      		movw r30,r24
 656 01fa 9281      		ldd r25,Z+2
 657 01fc 9701      		movw r18,r14
 658 01fe 00C0      		rjmp 2f
 659               		1:
 660 0200 220F      		lsl r18
 661 0202 331F      		rol r19
 662               		2:
 663 0204 1A95      		dec r17
 664 0206 02F4      		brpl 1b
 665 0208 2095      		com r18
 666 020a 3095      		com r19
 667 020c 9223      		and r25,r18
 668 020e 9283      		std Z+2,r25
 191:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 669               		.loc 1 191 0
 670 0210 63E0      		ldi r22,lo8(3)
 671 0212 83E2      		ldi r24,lo8(35)
 672 0214 90E0      		ldi r25,0
 673 0216 0E94 0000 		call _pal_lld_setlineid
 674               	.LVL59:
 675 021a 0E94 0000 		call _pal_lld_getpadfromline
 676               	.LVL60:
 677 021e 182F      		mov r17,r24
 678 0220 63E0      		ldi r22,lo8(3)
 679 0222 83E2      		ldi r24,lo8(35)
 680 0224 90E0      		ldi r25,0
 681 0226 0E94 0000 		call _pal_lld_setlineid
 682               	.LVL61:
 683 022a 0E94 0000 		call _pal_lld_getportfromline
 684               	.LVL62:
 685 022e FC01      		movw r30,r24
 686 0230 9281      		ldd r25,Z+2
 687 0232 9701      		movw r18,r14
 688 0234 00C0      		rjmp 2f
 689               		1:
 690 0236 220F      		lsl r18
 691               		2:
 692 0238 1A95      		dec r17
 693 023a 02F4      		brpl 1b
 694 023c 922B      		or r25,r18
 695 023e 9283      		std Z+2,r25
 696               	.LVL63:
 697               	.LBB258:
 698               	.LBB259:
 699               	.LBB260:
 700               	.LBB261:
 430:../../os/common/ports/AVR/chcore.h **** }
 701               		.loc 3 430 0
 702               	/* #APP */
 703               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 704 0240 F894      		cli
 705               	 ;  0 "" 2
 706               	.LVL64:
 707               	/* #NOAPP */
 708               	.LBE261:
 709               	.LBE260:
 710               	.LBE259:
 711               	.LBB262:
 712               	.LBB263:
 713               	.LBB264:
 714               	.LBB265:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 715               		.loc 2 287 0
 716 0242 8981      		ldd r24,Y+1
 717 0244 9A81      		ldd r25,Y+2
 718 0246 892B      		or r24,r25
 719 0248 01F0      		breq .L55
 288:../../os/rt/include/chvt.h ****   }
 720               		.loc 2 288 0
 721 024a CE01      		movw r24,r28
 722 024c 0196      		adiw r24,1
 723 024e 0E94 0000 		call chVTDoResetI
 724               	.LVL65:
 725               	.L55:
 726               	.LBE265:
 727               	.LBE264:
 728               		.loc 2 335 0
 729 0252 8E01      		movw r16,r28
 730 0254 0F5F      		subi r16,-1
 731 0256 1F4F      		sbci r17,-1
 732 0258 20E0      		ldi r18,lo8(gs(vt_cb))
 733 025a 30E0      		ldi r19,hi8(gs(vt_cb))
 734 025c 48E1      		ldi r20,lo8(24)
 735 025e 57EB      		ldi r21,lo8(-73)
 736 0260 60E0      		ldi r22,0
 737 0262 70E0      		ldi r23,0
 738 0264 C801      		movw r24,r16
 739 0266 0E94 0000 		call chVTDoSetI
 740               	.LVL66:
 741               	.LBE263:
 742               	.LBE262:
 743               	.LBB266:
 744               	.LBB267:
 745               	.LBB268:
 746               	.LBB269:
 747               		.loc 3 440 0
 748               	/* #APP */
 749               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 750 026a 7894      		sei
 751               	 ;  0 "" 2
 752               	/* #NOAPP */
 753               	.LBE269:
 754               	.LBE268:
 755               	.LBE267:
 756               	.LBE266:
 757               	.LBE258:
 193:main.c        ****           chThdSleepMilliseconds(100);
 758               		.loc 1 193 0
 759 026c 8091 0000 		lds r24,main_vt_flag
 760 0270 8111      		cpse r24,__zero_reg__
 761 0272 00C0      		rjmp .L56
 762               	.L57:
 194:main.c        ****         }
 763               		.loc 1 194 0
 764 0274 6BE1      		ldi r22,lo8(27)
 765 0276 76E0      		ldi r23,lo8(6)
 766 0278 80E0      		ldi r24,0
 767 027a 90E0      		ldi r25,0
 768 027c 0E94 0000 		call chThdSleep
 769               	.LVL67:
 193:main.c        ****           chThdSleepMilliseconds(100);
 770               		.loc 1 193 0
 771 0280 8091 0000 		lds r24,main_vt_flag
 772 0284 8823      		tst r24
 773 0286 01F0      		breq .L57
 774               	.L56:
 196:main.c        ****         if (qsize > 0) {
 775               		.loc 1 196 0
 776 0288 1092 0000 		sts main_vt_flag,__zero_reg__
 197:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 777               		.loc 1 197 0
 778 028c 8091 0000 		lds r24,qsize
 779 0290 9091 0000 		lds r25,qsize+1
 780 0294 892B      		or r24,r25
 781 0296 01F0      		breq .+2
 782 0298 00C0      		rjmp .L129
 783               	.L58:
 200:main.c        ****           g_state = PISCANDO_SEC;
 784               		.loc 1 200 0
 785 029a E1E0      		ldi r30,1
 786 029c CE16      		cp r12,r30
 787 029e D104      		cpc r13,__zero_reg__
 788 02a0 01F4      		brne .+2
 789 02a2 00C0      		rjmp .L130
 204:main.c        ****           palClearLine(PEDESTRE_VERDE);
 790               		.loc 1 204 0
 791 02a4 7092 0000 		sts g_state,r7
 205:main.c        ****         }
 792               		.loc 1 205 0
 793 02a8 63E0      		ldi r22,lo8(3)
 794 02aa 83E2      		ldi r24,lo8(35)
 795 02ac 90E0      		ldi r25,0
 796 02ae 0E94 0000 		call _pal_lld_setlineid
 797               	.LVL68:
 798 02b2 0E94 0000 		call _pal_lld_getpadfromline
 799               	.LVL69:
 800 02b6 182F      		mov r17,r24
 801 02b8 63E0      		ldi r22,lo8(3)
 802 02ba 83E2      		ldi r24,lo8(35)
 803 02bc 90E0      		ldi r25,0
 804               	.LVL70:
 805               	.L124:
 123:main.c        ****         }
 806               		.loc 1 123 0
 807 02be 0E94 0000 		call _pal_lld_setlineid
 808               	.LVL71:
 809 02c2 0E94 0000 		call _pal_lld_getportfromline
 810               	.LVL72:
 811 02c6 FC01      		movw r30,r24
 812 02c8 9281      		ldd r25,Z+2
 813 02ca 9701      		movw r18,r14
 814 02cc 00C0      		rjmp 2f
 815               		1:
 816 02ce 220F      		lsl r18
 817 02d0 331F      		rol r19
 818               		2:
 819 02d2 1A95      		dec r17
 820 02d4 02F4      		brpl 1b
 821 02d6 2095      		com r18
 822 02d8 3095      		com r19
 823 02da 9223      		and r25,r18
 824 02dc 9283      		std Z+2,r25
 825 02de 00C0      		rjmp .L35
 826               	.L28:
 168:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 827               		.loc 1 168 0
 828 02e0 65E0      		ldi r22,lo8(5)
 829 02e2 89E2      		ldi r24,lo8(41)
 830 02e4 90E0      		ldi r25,0
 831 02e6 0E94 0000 		call _pal_lld_setlineid
 832               	.LVL73:
 833 02ea 0E94 0000 		call _pal_lld_getpadfromline
 834               	.LVL74:
 835 02ee 182F      		mov r17,r24
 836 02f0 65E0      		ldi r22,lo8(5)
 837 02f2 89E2      		ldi r24,lo8(41)
 838 02f4 90E0      		ldi r25,0
 839 02f6 0E94 0000 		call _pal_lld_setlineid
 840               	.LVL75:
 841 02fa 0E94 0000 		call _pal_lld_getportfromline
 842               	.LVL76:
 843 02fe FC01      		movw r30,r24
 844 0300 9281      		ldd r25,Z+2
 845 0302 9701      		movw r18,r14
 846 0304 00C0      		rjmp 2f
 847               		1:
 848 0306 220F      		lsl r18
 849               		2:
 850 0308 1A95      		dec r17
 851 030a 02F4      		brpl 1b
 852 030c 922B      		or r25,r18
 853 030e 9283      		std Z+2,r25
 854               	.LVL77:
 855               	.LBB270:
 856               	.LBB271:
 857               	.LBB272:
 858               	.LBB273:
 430:../../os/common/ports/AVR/chcore.h **** }
 859               		.loc 3 430 0
 860               	/* #APP */
 861               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 862 0310 F894      		cli
 863               	 ;  0 "" 2
 864               	.LVL78:
 865               	/* #NOAPP */
 866               	.LBE273:
 867               	.LBE272:
 868               	.LBE271:
 869               	.LBB274:
 870               	.LBB275:
 871               	.LBB276:
 872               	.LBB277:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 873               		.loc 2 287 0
 874 0312 8981      		ldd r24,Y+1
 875 0314 9A81      		ldd r25,Y+2
 876 0316 892B      		or r24,r25
 877 0318 01F0      		breq .L49
 288:../../os/rt/include/chvt.h ****   }
 878               		.loc 2 288 0
 879 031a CE01      		movw r24,r28
 880 031c 0196      		adiw r24,1
 881 031e 0E94 0000 		call chVTDoResetI
 882               	.LVL79:
 883               	.L49:
 884               	.LBE277:
 885               	.LBE276:
 886               		.loc 2 335 0
 887 0322 8E01      		movw r16,r28
 888 0324 0F5F      		subi r16,-1
 889 0326 1F4F      		sbci r17,-1
 890 0328 20E0      		ldi r18,lo8(gs(vt_cb))
 891 032a 30E0      		ldi r19,hi8(gs(vt_cb))
 892 032c 40E1      		ldi r20,lo8(16)
 893 032e 5AE7      		ldi r21,lo8(122)
 894 0330 60E0      		ldi r22,0
 895 0332 70E0      		ldi r23,0
 896 0334 C801      		movw r24,r16
 897 0336 0E94 0000 		call chVTDoSetI
 898               	.LVL80:
 899               	.LBE275:
 900               	.LBE274:
 901               	.LBB278:
 902               	.LBB279:
 903               	.LBB280:
 904               	.LBB281:
 905               		.loc 3 440 0
 906               	/* #APP */
 907               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 908 033a 7894      		sei
 909               	 ;  0 "" 2
 910               	/* #NOAPP */
 911               	.LBE281:
 912               	.LBE280:
 913               	.LBE279:
 914               	.LBE278:
 915               	.LBE270:
 170:main.c        ****           chThdSleepMilliseconds(100);
 916               		.loc 1 170 0
 917 033c 8091 0000 		lds r24,main_vt_flag
 918 0340 8111      		cpse r24,__zero_reg__
 919 0342 00C0      		rjmp .L50
 920               	.L51:
 171:main.c        ****         }
 921               		.loc 1 171 0
 922 0344 6BE1      		ldi r22,lo8(27)
 923 0346 76E0      		ldi r23,lo8(6)
 924 0348 80E0      		ldi r24,0
 925 034a 90E0      		ldi r25,0
 926 034c 0E94 0000 		call chThdSleep
 927               	.LVL81:
 170:main.c        ****           chThdSleepMilliseconds(100);
 928               		.loc 1 170 0
 929 0350 8091 0000 		lds r24,main_vt_flag
 930 0354 8823      		tst r24
 931 0356 01F0      		breq .L51
 932               	.L50:
 173:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 933               		.loc 1 173 0
 934 0358 1092 0000 		sts main_vt_flag,__zero_reg__
 174:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 935               		.loc 1 174 0
 936 035c 9092 0000 		sts g_state,r9
 937               	.LVL82:
 938               	.L127:
 186:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 939               		.loc 1 186 0
 940 0360 65E0      		ldi r22,lo8(5)
 941 0362 89E2      		ldi r24,lo8(41)
 942 0364 90E0      		ldi r25,0
 943 0366 0E94 0000 		call _pal_lld_setlineid
 944               	.LVL83:
 945 036a 0E94 0000 		call _pal_lld_getpadfromline
 946               	.LVL84:
 947 036e 182F      		mov r17,r24
 948 0370 65E0      		ldi r22,lo8(5)
 949 0372 89E2      		ldi r24,lo8(41)
 950 0374 90E0      		ldi r25,0
 951 0376 0E94 0000 		call _pal_lld_setlineid
 952               	.LVL85:
 953 037a 0E94 0000 		call _pal_lld_getportfromline
 954               	.LVL86:
 955 037e FC01      		movw r30,r24
 956 0380 9281      		ldd r25,Z+2
 957 0382 9701      		movw r18,r14
 958 0384 00C0      		rjmp 2f
 959               		1:
 960 0386 220F      		lsl r18
 961 0388 331F      		rol r19
 962               		2:
 963 038a 1A95      		dec r17
 964 038c 02F4      		brpl 1b
 965 038e 2095      		com r18
 966 0390 3095      		com r19
 967 0392 9223      		and r25,r18
 968 0394 9283      		std Z+2,r25
 187:main.c        ****         break;
 969               		.loc 1 187 0
 970 0396 60E0      		ldi r22,0
 971 0398 83E2      		ldi r24,lo8(35)
 972 039a 90E0      		ldi r25,0
 973 039c 0E94 0000 		call _pal_lld_setlineid
 974               	.LVL87:
 975 03a0 0E94 0000 		call _pal_lld_getpadfromline
 976               	.LVL88:
 977 03a4 182F      		mov r17,r24
 978 03a6 60E0      		ldi r22,0
 979 03a8 00C0      		rjmp .L121
 980               	.LVL89:
 981               	.L27:
 179:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 982               		.loc 1 179 0
 983 03aa 65E0      		ldi r22,lo8(5)
 984 03ac 89E2      		ldi r24,lo8(41)
 985 03ae 90E0      		ldi r25,0
 986 03b0 0E94 0000 		call _pal_lld_setlineid
 987               	.LVL90:
 988 03b4 0E94 0000 		call _pal_lld_getpadfromline
 989               	.LVL91:
 990 03b8 182F      		mov r17,r24
 991 03ba 65E0      		ldi r22,lo8(5)
 992 03bc 89E2      		ldi r24,lo8(41)
 993 03be 90E0      		ldi r25,0
 994 03c0 0E94 0000 		call _pal_lld_setlineid
 995               	.LVL92:
 996 03c4 0E94 0000 		call _pal_lld_getportfromline
 997               	.LVL93:
 998 03c8 FC01      		movw r30,r24
 999 03ca 9281      		ldd r25,Z+2
 1000 03cc 9701      		movw r18,r14
 1001 03ce 00C0      		rjmp 2f
 1002               		1:
 1003 03d0 220F      		lsl r18
 1004               		2:
 1005 03d2 1A95      		dec r17
 1006 03d4 02F4      		brpl 1b
 1007 03d6 922B      		or r25,r18
 1008 03d8 9283      		std Z+2,r25
 1009               	.LVL94:
 1010               	.LBB282:
 1011               	.LBB283:
 1012               	.LBB284:
 1013               	.LBB285:
 430:../../os/common/ports/AVR/chcore.h **** }
 1014               		.loc 3 430 0
 1015               	/* #APP */
 1016               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1017 03da F894      		cli
 1018               	 ;  0 "" 2
 1019               	.LVL95:
 1020               	/* #NOAPP */
 1021               	.LBE285:
 1022               	.LBE284:
 1023               	.LBE283:
 1024               	.LBB286:
 1025               	.LBB287:
 1026               	.LBB288:
 1027               	.LBB289:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1028               		.loc 2 287 0
 1029 03dc 8981      		ldd r24,Y+1
 1030 03de 9A81      		ldd r25,Y+2
 1031 03e0 892B      		or r24,r25
 1032 03e2 01F0      		breq .L52
 288:../../os/rt/include/chvt.h ****   }
 1033               		.loc 2 288 0
 1034 03e4 CE01      		movw r24,r28
 1035 03e6 0196      		adiw r24,1
 1036 03e8 0E94 0000 		call chVTDoResetI
 1037               	.LVL96:
 1038               	.L52:
 1039               	.LBE289:
 1040               	.LBE288:
 1041               		.loc 2 335 0
 1042 03ec 8E01      		movw r16,r28
 1043 03ee 0F5F      		subi r16,-1
 1044 03f0 1F4F      		sbci r17,-1
 1045 03f2 20E0      		ldi r18,lo8(gs(vt_cb))
 1046 03f4 30E0      		ldi r19,hi8(gs(vt_cb))
 1047 03f6 40E1      		ldi r20,lo8(16)
 1048 03f8 5AE7      		ldi r21,lo8(122)
 1049 03fa 60E0      		ldi r22,0
 1050 03fc 70E0      		ldi r23,0
 1051 03fe C801      		movw r24,r16
 1052 0400 0E94 0000 		call chVTDoSetI
 1053               	.LVL97:
 1054               	.LBE287:
 1055               	.LBE286:
 1056               	.LBB290:
 1057               	.LBB291:
 1058               	.LBB292:
 1059               	.LBB293:
 1060               		.loc 3 440 0
 1061               	/* #APP */
 1062               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1063 0404 7894      		sei
 1064               	 ;  0 "" 2
 1065               	/* #NOAPP */
 1066               	.LBE293:
 1067               	.LBE292:
 1068               	.LBE291:
 1069               	.LBE290:
 1070               	.LBE282:
 181:main.c        ****           chThdSleepMilliseconds(100);
 1071               		.loc 1 181 0
 1072 0406 8091 0000 		lds r24,main_vt_flag
 1073 040a 8111      		cpse r24,__zero_reg__
 1074 040c 00C0      		rjmp .L53
 1075               	.L54:
 182:main.c        ****         }
 1076               		.loc 1 182 0
 1077 040e 6BE1      		ldi r22,lo8(27)
 1078 0410 76E0      		ldi r23,lo8(6)
 1079 0412 80E0      		ldi r24,0
 1080 0414 90E0      		ldi r25,0
 1081 0416 0E94 0000 		call chThdSleep
 1082               	.LVL98:
 181:main.c        ****           chThdSleepMilliseconds(100);
 1083               		.loc 1 181 0
 1084 041a 8091 0000 		lds r24,main_vt_flag
 1085 041e 8823      		tst r24
 1086 0420 01F0      		breq .L54
 1087               	.L53:
 184:main.c        ****         g_state = VERDE_LOCKED_PED;
 1088               		.loc 1 184 0
 1089 0422 1092 0000 		sts main_vt_flag,__zero_reg__
 185:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 1090               		.loc 1 185 0
 1091 0426 B092 0000 		sts g_state,r11
 1092 042a 00C0      		rjmp .L127
 1093               	.LVL99:
 1094               	.L26:
 149:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 1095               		.loc 1 149 0
 1096 042c 60E0      		ldi r22,0
 1097 042e 83E2      		ldi r24,lo8(35)
 1098 0430 90E0      		ldi r25,0
 1099 0432 0E94 0000 		call _pal_lld_setlineid
 1100               	.LVL100:
 1101 0436 0E94 0000 		call _pal_lld_getpadfromline
 1102               	.LVL101:
 1103 043a 182F      		mov r17,r24
 1104 043c 60E0      		ldi r22,0
 1105 043e 83E2      		ldi r24,lo8(35)
 1106 0440 90E0      		ldi r25,0
 1107 0442 0E94 0000 		call _pal_lld_setlineid
 1108               	.LVL102:
 1109 0446 0E94 0000 		call _pal_lld_getportfromline
 1110               	.LVL103:
 1111 044a FC01      		movw r30,r24
 1112 044c 9281      		ldd r25,Z+2
 1113 044e 9701      		movw r18,r14
 1114 0450 00C0      		rjmp 2f
 1115               		1:
 1116 0452 220F      		lsl r18
 1117 0454 331F      		rol r19
 1118               		2:
 1119 0456 1A95      		dec r17
 1120 0458 02F4      		brpl 1b
 1121 045a 2095      		com r18
 1122 045c 3095      		com r19
 1123 045e 9223      		and r25,r18
 1124 0460 9283      		std Z+2,r25
 150:main.c        ****         chVTSet(&main_vt, TIME_MS2I(6000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1125               		.loc 1 150 0
 1126 0462 61E0      		ldi r22,lo8(1)
 1127 0464 83E2      		ldi r24,lo8(35)
 1128 0466 90E0      		ldi r25,0
 1129 0468 0E94 0000 		call _pal_lld_setlineid
 1130               	.LVL104:
 1131 046c 0E94 0000 		call _pal_lld_getpadfromline
 1132               	.LVL105:
 1133 0470 182F      		mov r17,r24
 1134 0472 61E0      		ldi r22,lo8(1)
 1135 0474 83E2      		ldi r24,lo8(35)
 1136 0476 90E0      		ldi r25,0
 1137 0478 0E94 0000 		call _pal_lld_setlineid
 1138               	.LVL106:
 1139 047c 0E94 0000 		call _pal_lld_getportfromline
 1140               	.LVL107:
 1141 0480 FC01      		movw r30,r24
 1142 0482 9281      		ldd r25,Z+2
 1143 0484 9701      		movw r18,r14
 1144 0486 00C0      		rjmp 2f
 1145               		1:
 1146 0488 220F      		lsl r18
 1147               		2:
 1148 048a 1A95      		dec r17
 1149 048c 02F4      		brpl 1b
 1150 048e 922B      		or r25,r18
 1151 0490 9283      		std Z+2,r25
 1152               	.LVL108:
 1153               	.LBB294:
 1154               	.LBB295:
 1155               	.LBB296:
 1156               	.LBB297:
 430:../../os/common/ports/AVR/chcore.h **** }
 1157               		.loc 3 430 0
 1158               	/* #APP */
 1159               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1160 0492 F894      		cli
 1161               	 ;  0 "" 2
 1162               	.LVL109:
 1163               	/* #NOAPP */
 1164               	.LBE297:
 1165               	.LBE296:
 1166               	.LBE295:
 1167               	.LBB298:
 1168               	.LBB299:
 1169               	.LBB300:
 1170               	.LBB301:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1171               		.loc 2 287 0
 1172 0494 8981      		ldd r24,Y+1
 1173 0496 9A81      		ldd r25,Y+2
 1174 0498 892B      		or r24,r25
 1175 049a 01F0      		breq .L44
 288:../../os/rt/include/chvt.h ****   }
 1176               		.loc 2 288 0
 1177 049c CE01      		movw r24,r28
 1178 049e 0196      		adiw r24,1
 1179 04a0 0E94 0000 		call chVTDoResetI
 1180               	.LVL110:
 1181               	.L44:
 1182               	.LBE301:
 1183               	.LBE300:
 1184               		.loc 2 335 0
 1185 04a4 8E01      		movw r16,r28
 1186 04a6 0F5F      		subi r16,-1
 1187 04a8 1F4F      		sbci r17,-1
 1188 04aa 20E0      		ldi r18,lo8(gs(vt_cb))
 1189 04ac 30E0      		ldi r19,hi8(gs(vt_cb))
 1190 04ae 40E3      		ldi r20,lo8(48)
 1191 04b0 5EE6      		ldi r21,lo8(110)
 1192 04b2 61E0      		ldi r22,lo8(1)
 1193 04b4 70E0      		ldi r23,0
 1194 04b6 C801      		movw r24,r16
 1195 04b8 0E94 0000 		call chVTDoSetI
 1196               	.LVL111:
 1197               	.LBE299:
 1198               	.LBE298:
 1199               	.LBB302:
 1200               	.LBB303:
 1201               	.LBB304:
 1202               	.LBB305:
 1203               		.loc 3 440 0
 1204               	/* #APP */
 1205               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1206 04bc 7894      		sei
 1207               	 ;  0 "" 2
 1208               	/* #NOAPP */
 1209               	.LBE305:
 1210               	.LBE304:
 1211               	.LBE303:
 1212               	.LBE302:
 1213               	.LBE294:
 152:main.c        ****           chThdSleepMilliseconds(100);
 1214               		.loc 1 152 0
 1215 04be 8091 0000 		lds r24,main_vt_flag
 1216 04c2 8111      		cpse r24,__zero_reg__
 1217 04c4 00C0      		rjmp .L45
 1218               	.L46:
 153:main.c        ****         }
 1219               		.loc 1 153 0
 1220 04c6 6BE1      		ldi r22,lo8(27)
 1221 04c8 76E0      		ldi r23,lo8(6)
 1222 04ca 80E0      		ldi r24,0
 1223 04cc 90E0      		ldi r25,0
 1224 04ce 0E94 0000 		call chThdSleep
 1225               	.LVL112:
 152:main.c        ****           chThdSleepMilliseconds(100);
 1226               		.loc 1 152 0
 1227 04d2 8091 0000 		lds r24,main_vt_flag
 1228 04d6 8823      		tst r24
 1229 04d8 01F0      		breq .L46
 1230               	.L45:
 155:main.c        ****         if (qsize > 0) {
 1231               		.loc 1 155 0
 1232 04da 1092 0000 		sts main_vt_flag,__zero_reg__
 156:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 1233               		.loc 1 156 0
 1234 04de 8091 0000 		lds r24,qsize
 1235 04e2 9091 0000 		lds r25,qsize+1
 1236 04e6 892B      		or r24,r25
 1237 04e8 01F0      		breq .+2
 1238 04ea 00C0      		rjmp .L131
 1239               	.L47:
 159:main.c        ****           g_state = AMARELO_PED_SEC;
 1240               		.loc 1 159 0
 1241 04ec 82E0      		ldi r24,2
 1242 04ee C816      		cp r12,r24
 1243 04f0 D104      		cpc r13,__zero_reg__
 1244 04f2 01F4      		brne .+2
 1245 04f4 00C0      		rjmp .L132
 163:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 1246               		.loc 1 163 0
 1247 04f6 8092 0000 		sts g_state,r8
 1248               	.L125:
 164:main.c        ****         }
 1249               		.loc 1 164 0
 1250 04fa 61E0      		ldi r22,lo8(1)
 1251 04fc 83E2      		ldi r24,lo8(35)
 1252 04fe 90E0      		ldi r25,0
 1253 0500 0E94 0000 		call _pal_lld_setlineid
 1254               	.LVL113:
 1255 0504 0E94 0000 		call _pal_lld_getpadfromline
 1256               	.LVL114:
 1257 0508 182F      		mov r17,r24
 1258 050a 61E0      		ldi r22,lo8(1)
 1259 050c 83E2      		ldi r24,lo8(35)
 1260 050e 90E0      		ldi r25,0
 1261 0510 00C0      		rjmp .L124
 1262               	.LVL115:
 1263               	.L25:
 127:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1264               		.loc 1 127 0
 1265 0512 64E0      		ldi r22,lo8(4)
 1266 0514 89E2      		ldi r24,lo8(41)
 1267 0516 90E0      		ldi r25,0
 1268 0518 0E94 0000 		call _pal_lld_setlineid
 1269               	.LVL116:
 1270 051c 0E94 0000 		call _pal_lld_getpadfromline
 1271               	.LVL117:
 1272 0520 182F      		mov r17,r24
 1273 0522 64E0      		ldi r22,lo8(4)
 1274 0524 89E2      		ldi r24,lo8(41)
 1275 0526 90E0      		ldi r25,0
 1276 0528 0E94 0000 		call _pal_lld_setlineid
 1277               	.LVL118:
 1278 052c 0E94 0000 		call _pal_lld_getportfromline
 1279               	.LVL119:
 1280 0530 FC01      		movw r30,r24
 1281 0532 9281      		ldd r25,Z+2
 1282 0534 9701      		movw r18,r14
 1283 0536 00C0      		rjmp 2f
 1284               		1:
 1285 0538 220F      		lsl r18
 1286               		2:
 1287 053a 1A95      		dec r17
 1288 053c 02F4      		brpl 1b
 1289 053e 922B      		or r25,r18
 1290 0540 9283      		std Z+2,r25
 1291               	.LVL120:
 1292               	.LBB306:
 1293               	.LBB307:
 1294               	.LBB308:
 1295               	.LBB309:
 430:../../os/common/ports/AVR/chcore.h **** }
 1296               		.loc 3 430 0
 1297               	/* #APP */
 1298               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1299 0542 F894      		cli
 1300               	 ;  0 "" 2
 1301               	.LVL121:
 1302               	/* #NOAPP */
 1303               	.LBE309:
 1304               	.LBE308:
 1305               	.LBE307:
 1306               	.LBB310:
 1307               	.LBB311:
 1308               	.LBB312:
 1309               	.LBB313:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1310               		.loc 2 287 0
 1311 0544 8981      		ldd r24,Y+1
 1312 0546 9A81      		ldd r25,Y+2
 1313 0548 892B      		or r24,r25
 1314 054a 01F0      		breq .L38
 288:../../os/rt/include/chvt.h ****   }
 1315               		.loc 2 288 0
 1316 054c CE01      		movw r24,r28
 1317 054e 0196      		adiw r24,1
 1318 0550 0E94 0000 		call chVTDoResetI
 1319               	.LVL122:
 1320               	.L38:
 1321               	.LBE313:
 1322               	.LBE312:
 1323               		.loc 2 335 0
 1324 0554 8E01      		movw r16,r28
 1325 0556 0F5F      		subi r16,-1
 1326 0558 1F4F      		sbci r17,-1
 1327 055a 20E0      		ldi r18,lo8(gs(vt_cb))
 1328 055c 30E0      		ldi r19,hi8(gs(vt_cb))
 1329 055e 40E1      		ldi r20,lo8(16)
 1330 0560 5AE7      		ldi r21,lo8(122)
 1331 0562 60E0      		ldi r22,0
 1332 0564 70E0      		ldi r23,0
 1333 0566 C801      		movw r24,r16
 1334 0568 0E94 0000 		call chVTDoSetI
 1335               	.LVL123:
 1336               	.LBE311:
 1337               	.LBE310:
 1338               	.LBB314:
 1339               	.LBB315:
 1340               	.LBB316:
 1341               	.LBB317:
 1342               		.loc 3 440 0
 1343               	/* #APP */
 1344               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1345 056c 7894      		sei
 1346               	 ;  0 "" 2
 1347               	/* #NOAPP */
 1348               	.LBE317:
 1349               	.LBE316:
 1350               	.LBE315:
 1351               	.LBE314:
 1352               	.LBE306:
 129:main.c        ****           chThdSleepMilliseconds(100);
 1353               		.loc 1 129 0
 1354 056e 8091 0000 		lds r24,main_vt_flag
 1355 0572 8111      		cpse r24,__zero_reg__
 1356 0574 00C0      		rjmp .L39
 1357               	.L40:
 130:main.c        ****         }
 1358               		.loc 1 130 0
 1359 0576 6BE1      		ldi r22,lo8(27)
 1360 0578 76E0      		ldi r23,lo8(6)
 1361 057a 80E0      		ldi r24,0
 1362 057c 90E0      		ldi r25,0
 1363 057e 0E94 0000 		call chThdSleep
 1364               	.LVL124:
 129:main.c        ****           chThdSleepMilliseconds(100);
 1365               		.loc 1 129 0
 1366 0582 8091 0000 		lds r24,main_vt_flag
 1367 0586 8823      		tst r24
 1368 0588 01F0      		breq .L40
 1369               	.L39:
 132:main.c        ****         g_state = VERDE_LOCKED_SEC;
 1370               		.loc 1 132 0
 1371 058a 1092 0000 		sts main_vt_flag,__zero_reg__
 133:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1372               		.loc 1 133 0
 1373 058e A092 0000 		sts g_state,r10
 1374               	.LVL125:
 1375               	.L128:
 145:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 1376               		.loc 1 145 0
 1377 0592 64E0      		ldi r22,lo8(4)
 1378 0594 89E2      		ldi r24,lo8(41)
 1379 0596 90E0      		ldi r25,0
 1380 0598 0E94 0000 		call _pal_lld_setlineid
 1381               	.LVL126:
 1382 059c 0E94 0000 		call _pal_lld_getpadfromline
 1383               	.LVL127:
 1384 05a0 182F      		mov r17,r24
 1385 05a2 64E0      		ldi r22,lo8(4)
 1386 05a4 89E2      		ldi r24,lo8(41)
 1387 05a6 90E0      		ldi r25,0
 1388 05a8 0E94 0000 		call _pal_lld_setlineid
 1389               	.LVL128:
 1390 05ac 0E94 0000 		call _pal_lld_getportfromline
 1391               	.LVL129:
 1392 05b0 FC01      		movw r30,r24
 1393 05b2 9281      		ldd r25,Z+2
 1394 05b4 9701      		movw r18,r14
 1395 05b6 00C0      		rjmp 2f
 1396               		1:
 1397 05b8 220F      		lsl r18
 1398 05ba 331F      		rol r19
 1399               		2:
 1400 05bc 1A95      		dec r17
 1401 05be 02F4      		brpl 1b
 1402 05c0 2095      		com r18
 1403 05c2 3095      		com r19
 1404 05c4 9223      		and r25,r18
 1405 05c6 9283      		std Z+2,r25
 146:main.c        ****         break;
 1406               		.loc 1 146 0
 1407 05c8 66E0      		ldi r22,lo8(6)
 1408 05ca 89E2      		ldi r24,lo8(41)
 1409 05cc 90E0      		ldi r25,0
 1410 05ce 0E94 0000 		call _pal_lld_setlineid
 1411               	.LVL130:
 1412 05d2 0E94 0000 		call _pal_lld_getpadfromline
 1413               	.LVL131:
 1414 05d6 182F      		mov r17,r24
 1415 05d8 66E0      		ldi r22,lo8(6)
 1416 05da 89E2      		ldi r24,lo8(41)
 1417 05dc 90E0      		ldi r25,0
 1418 05de 00C0      		rjmp .L122
 1419               	.LVL132:
 1420               	.L24:
 138:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1421               		.loc 1 138 0
 1422 05e0 64E0      		ldi r22,lo8(4)
 1423 05e2 89E2      		ldi r24,lo8(41)
 1424 05e4 90E0      		ldi r25,0
 1425 05e6 0E94 0000 		call _pal_lld_setlineid
 1426               	.LVL133:
 1427 05ea 0E94 0000 		call _pal_lld_getpadfromline
 1428               	.LVL134:
 1429 05ee 182F      		mov r17,r24
 1430 05f0 64E0      		ldi r22,lo8(4)
 1431 05f2 89E2      		ldi r24,lo8(41)
 1432 05f4 90E0      		ldi r25,0
 1433 05f6 0E94 0000 		call _pal_lld_setlineid
 1434               	.LVL135:
 1435 05fa 0E94 0000 		call _pal_lld_getportfromline
 1436               	.LVL136:
 1437 05fe FC01      		movw r30,r24
 1438 0600 9281      		ldd r25,Z+2
 1439 0602 9701      		movw r18,r14
 1440 0604 00C0      		rjmp 2f
 1441               		1:
 1442 0606 220F      		lsl r18
 1443               		2:
 1444 0608 1A95      		dec r17
 1445 060a 02F4      		brpl 1b
 1446 060c 922B      		or r25,r18
 1447 060e 9283      		std Z+2,r25
 1448               	.LVL137:
 1449               	.LBB318:
 1450               	.LBB319:
 1451               	.LBB320:
 1452               	.LBB321:
 430:../../os/common/ports/AVR/chcore.h **** }
 1453               		.loc 3 430 0
 1454               	/* #APP */
 1455               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1456 0610 F894      		cli
 1457               	 ;  0 "" 2
 1458               	.LVL138:
 1459               	/* #NOAPP */
 1460               	.LBE321:
 1461               	.LBE320:
 1462               	.LBE319:
 1463               	.LBB322:
 1464               	.LBB323:
 1465               	.LBB324:
 1466               	.LBB325:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1467               		.loc 2 287 0
 1468 0612 8981      		ldd r24,Y+1
 1469 0614 9A81      		ldd r25,Y+2
 1470 0616 892B      		or r24,r25
 1471 0618 01F0      		breq .L41
 288:../../os/rt/include/chvt.h ****   }
 1472               		.loc 2 288 0
 1473 061a CE01      		movw r24,r28
 1474 061c 0196      		adiw r24,1
 1475 061e 0E94 0000 		call chVTDoResetI
 1476               	.LVL139:
 1477               	.L41:
 1478               	.LBE325:
 1479               	.LBE324:
 1480               		.loc 2 335 0
 1481 0622 8E01      		movw r16,r28
 1482 0624 0F5F      		subi r16,-1
 1483 0626 1F4F      		sbci r17,-1
 1484 0628 20E0      		ldi r18,lo8(gs(vt_cb))
 1485 062a 30E0      		ldi r19,hi8(gs(vt_cb))
 1486 062c 40E1      		ldi r20,lo8(16)
 1487 062e 5AE7      		ldi r21,lo8(122)
 1488 0630 60E0      		ldi r22,0
 1489 0632 70E0      		ldi r23,0
 1490 0634 C801      		movw r24,r16
 1491 0636 0E94 0000 		call chVTDoSetI
 1492               	.LVL140:
 1493               	.LBE323:
 1494               	.LBE322:
 1495               	.LBB326:
 1496               	.LBB327:
 1497               	.LBB328:
 1498               	.LBB329:
 1499               		.loc 3 440 0
 1500               	/* #APP */
 1501               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1502 063a 7894      		sei
 1503               	 ;  0 "" 2
 1504               	/* #NOAPP */
 1505               	.LBE329:
 1506               	.LBE328:
 1507               	.LBE327:
 1508               	.LBE326:
 1509               	.LBE318:
 140:main.c        ****           chThdSleepMilliseconds(100);
 1510               		.loc 1 140 0
 1511 063c 8091 0000 		lds r24,main_vt_flag
 1512 0640 8111      		cpse r24,__zero_reg__
 1513 0642 00C0      		rjmp .L42
 1514               	.L43:
 141:main.c        ****         }
 1515               		.loc 1 141 0
 1516 0644 6BE1      		ldi r22,lo8(27)
 1517 0646 76E0      		ldi r23,lo8(6)
 1518 0648 80E0      		ldi r24,0
 1519 064a 90E0      		ldi r25,0
 1520 064c 0E94 0000 		call chThdSleep
 1521               	.LVL141:
 140:main.c        ****           chThdSleepMilliseconds(100);
 1522               		.loc 1 140 0
 1523 0650 8091 0000 		lds r24,main_vt_flag
 1524 0654 8823      		tst r24
 1525 0656 01F0      		breq .L43
 1526               	.L42:
 143:main.c        ****         g_state = VERDE_LOCKED_PED;
 1527               		.loc 1 143 0
 1528 0658 1092 0000 		sts main_vt_flag,__zero_reg__
 144:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1529               		.loc 1 144 0
 1530 065c B092 0000 		sts g_state,r11
 1531 0660 00C0      		rjmp .L128
 1532               	.LVL142:
 1533               	.L23:
 117:main.c        ****         if (ev == SECUNDARIO || ev == AMB_SECUNDARIO) {
 1534               		.loc 1 117 0
 1535 0662 0E94 0000 		call dequeue
 1536               	.LVL143:
 1537 0666 6C01      		movw r12,r24
 1538               	.LVL144:
 118:main.c        ****           g_state = AMARELO_SEC_PRIM;
 1539               		.loc 1 118 0
 1540 0668 81E0      		ldi r24,1
 1541 066a C816      		cp r12,r24
 1542 066c D104      		cpc r13,__zero_reg__
 1543 066e 01F4      		brne .+2
 1544 0670 00C0      		rjmp .L36
 118:main.c        ****           g_state = AMARELO_SEC_PRIM;
 1545               		.loc 1 118 0 is_stmt 0 discriminator 1
 1546 0672 E4E0      		ldi r30,4
 1547 0674 CE16      		cp r12,r30
 1548 0676 D104      		cpc r13,__zero_reg__
 1549 0678 01F4      		brne .+2
 1550 067a 00C0      		rjmp .L36
 121:main.c        ****           g_state = AMARELO_PED_PRIM;
 1551               		.loc 1 121 0 is_stmt 1
 1552 067c F2E0      		ldi r31,2
 1553 067e CF16      		cp r12,r31
 1554 0680 D104      		cpc r13,__zero_reg__
 1555 0682 01F0      		breq .+2
 1556 0684 00C0      		rjmp .L35
 122:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1557               		.loc 1 122 0
 1558 0686 83E0      		ldi r24,lo8(3)
 1559               	.L123:
 1560 0688 8093 0000 		sts g_state,r24
 123:main.c        ****         }
 1561               		.loc 1 123 0
 1562 068c 67E0      		ldi r22,lo8(7)
 1563 068e 89E2      		ldi r24,lo8(41)
 1564 0690 90E0      		ldi r25,0
 1565 0692 0E94 0000 		call _pal_lld_setlineid
 1566               	.LVL145:
 1567 0696 0E94 0000 		call _pal_lld_getpadfromline
 1568               	.LVL146:
 1569 069a 182F      		mov r17,r24
 1570 069c 67E0      		ldi r22,lo8(7)
 1571 069e 89E2      		ldi r24,lo8(41)
 1572 06a0 90E0      		ldi r25,0
 1573 06a2 00C0      		rjmp .L124
 1574               	.L21:
 105:main.c        ****         palSetLine(PRIMARIO_VERDE);
 1575               		.loc 1 105 0
 1576 06a4 66E0      		ldi r22,lo8(6)
 1577 06a6 89E2      		ldi r24,lo8(41)
 1578 06a8 90E0      		ldi r25,0
 1579 06aa 0E94 0000 		call _pal_lld_setlineid
 1580               	.LVL147:
 1581 06ae 0E94 0000 		call _pal_lld_getpadfromline
 1582               	.LVL148:
 1583 06b2 182F      		mov r17,r24
 1584 06b4 66E0      		ldi r22,lo8(6)
 1585 06b6 89E2      		ldi r24,lo8(41)
 1586 06b8 90E0      		ldi r25,0
 1587 06ba 0E94 0000 		call _pal_lld_setlineid
 1588               	.LVL149:
 1589 06be 0E94 0000 		call _pal_lld_getportfromline
 1590               	.LVL150:
 1591 06c2 FC01      		movw r30,r24
 1592 06c4 9281      		ldd r25,Z+2
 1593 06c6 9701      		movw r18,r14
 1594 06c8 00C0      		rjmp 2f
 1595               		1:
 1596 06ca 220F      		lsl r18
 1597 06cc 331F      		rol r19
 1598               		2:
 1599 06ce 1A95      		dec r17
 1600 06d0 02F4      		brpl 1b
 1601 06d2 2095      		com r18
 1602 06d4 3095      		com r19
 1603 06d6 9223      		and r25,r18
 1604 06d8 9283      		std Z+2,r25
 106:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 1605               		.loc 1 106 0
 1606 06da 67E0      		ldi r22,lo8(7)
 1607 06dc 89E2      		ldi r24,lo8(41)
 1608 06de 90E0      		ldi r25,0
 1609 06e0 0E94 0000 		call _pal_lld_setlineid
 1610               	.LVL151:
 1611 06e4 0E94 0000 		call _pal_lld_getpadfromline
 1612               	.LVL152:
 1613 06e8 182F      		mov r17,r24
 1614 06ea 67E0      		ldi r22,lo8(7)
 1615 06ec 89E2      		ldi r24,lo8(41)
 1616 06ee 90E0      		ldi r25,0
 1617 06f0 0E94 0000 		call _pal_lld_setlineid
 1618               	.LVL153:
 1619 06f4 0E94 0000 		call _pal_lld_getportfromline
 1620               	.LVL154:
 1621 06f8 FC01      		movw r30,r24
 1622 06fa 9281      		ldd r25,Z+2
 1623 06fc 9701      		movw r18,r14
 1624 06fe 00C0      		rjmp 2f
 1625               		1:
 1626 0700 220F      		lsl r18
 1627               		2:
 1628 0702 1A95      		dec r17
 1629 0704 02F4      		brpl 1b
 1630 0706 922B      		or r25,r18
 1631 0708 9283      		std Z+2,r25
 107:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 1632               		.loc 1 107 0
 1633 070a 60E0      		ldi r22,0
 1634 070c 83E2      		ldi r24,lo8(35)
 1635 070e 90E0      		ldi r25,0
 1636 0710 0E94 0000 		call _pal_lld_setlineid
 1637               	.LVL155:
 1638 0714 0E94 0000 		call _pal_lld_getpadfromline
 1639               	.LVL156:
 1640 0718 182F      		mov r17,r24
 1641 071a 60E0      		ldi r22,0
 1642 071c 83E2      		ldi r24,lo8(35)
 1643 071e 90E0      		ldi r25,0
 1644 0720 0E94 0000 		call _pal_lld_setlineid
 1645               	.LVL157:
 1646 0724 0E94 0000 		call _pal_lld_getportfromline
 1647               	.LVL158:
 1648 0728 FC01      		movw r30,r24
 1649 072a 9281      		ldd r25,Z+2
 1650 072c 9701      		movw r18,r14
 1651 072e 00C0      		rjmp 2f
 1652               		1:
 1653 0730 220F      		lsl r18
 1654               		2:
 1655 0732 1A95      		dec r17
 1656 0734 02F4      		brpl 1b
 1657 0736 922B      		or r25,r18
 1658 0738 9283      		std Z+2,r25
 108:main.c        ****         chVTSet(&main_vt, TIME_MS2I(10000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1659               		.loc 1 108 0
 1660 073a 62E0      		ldi r22,lo8(2)
 1661 073c 83E2      		ldi r24,lo8(35)
 1662 073e 90E0      		ldi r25,0
 1663 0740 0E94 0000 		call _pal_lld_setlineid
 1664               	.LVL159:
 1665 0744 0E94 0000 		call _pal_lld_getpadfromline
 1666               	.LVL160:
 1667 0748 182F      		mov r17,r24
 1668 074a 62E0      		ldi r22,lo8(2)
 1669 074c 83E2      		ldi r24,lo8(35)
 1670 074e 90E0      		ldi r25,0
 1671 0750 0E94 0000 		call _pal_lld_setlineid
 1672               	.LVL161:
 1673 0754 0E94 0000 		call _pal_lld_getportfromline
 1674               	.LVL162:
 1675 0758 FC01      		movw r30,r24
 1676 075a 9281      		ldd r25,Z+2
 1677 075c 9701      		movw r18,r14
 1678 075e 00C0      		rjmp 2f
 1679               		1:
 1680 0760 220F      		lsl r18
 1681               		2:
 1682 0762 1A95      		dec r17
 1683 0764 02F4      		brpl 1b
 1684 0766 922B      		or r25,r18
 1685 0768 9283      		std Z+2,r25
 1686               	.LVL163:
 1687               	.LBB330:
 1688               	.LBB331:
 1689               	.LBB332:
 1690               	.LBB333:
 430:../../os/common/ports/AVR/chcore.h **** }
 1691               		.loc 3 430 0
 1692               	/* #APP */
 1693               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1694 076a F894      		cli
 1695               	 ;  0 "" 2
 1696               	.LVL164:
 1697               	/* #NOAPP */
 1698               	.LBE333:
 1699               	.LBE332:
 1700               	.LBE331:
 1701               	.LBB334:
 1702               	.LBB335:
 1703               	.LBB336:
 1704               	.LBB337:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1705               		.loc 2 287 0
 1706 076c 8981      		ldd r24,Y+1
 1707 076e 9A81      		ldd r25,Y+2
 1708 0770 892B      		or r24,r25
 1709 0772 01F0      		breq .L32
 288:../../os/rt/include/chvt.h ****   }
 1710               		.loc 2 288 0
 1711 0774 CE01      		movw r24,r28
 1712 0776 0196      		adiw r24,1
 1713 0778 0E94 0000 		call chVTDoResetI
 1714               	.LVL165:
 1715               	.L32:
 1716               	.LBE337:
 1717               	.LBE336:
 1718               		.loc 2 335 0
 1719 077c 8E01      		movw r16,r28
 1720 077e 0F5F      		subi r16,-1
 1721 0780 1F4F      		sbci r17,-1
 1722 0782 20E0      		ldi r18,lo8(gs(vt_cb))
 1723 0784 30E0      		ldi r19,hi8(gs(vt_cb))
 1724 0786 40E5      		ldi r20,lo8(80)
 1725 0788 52E6      		ldi r21,lo8(98)
 1726 078a 62E0      		ldi r22,lo8(2)
 1727 078c 70E0      		ldi r23,0
 1728 078e C801      		movw r24,r16
 1729 0790 0E94 0000 		call chVTDoSetI
 1730               	.LVL166:
 1731               	.LBE335:
 1732               	.LBE334:
 1733               	.LBB338:
 1734               	.LBB339:
 1735               	.LBB340:
 1736               	.LBB341:
 1737               		.loc 3 440 0
 1738               	/* #APP */
 1739               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1740 0794 7894      		sei
 1741               	 ;  0 "" 2
 1742               	/* #NOAPP */
 1743               	.LBE341:
 1744               	.LBE340:
 1745               	.LBE339:
 1746               	.LBE338:
 1747               	.LBE330:
 110:main.c        ****           chThdSleepMilliseconds(100);
 1748               		.loc 1 110 0
 1749 0796 8091 0000 		lds r24,main_vt_flag
 1750 079a 8111      		cpse r24,__zero_reg__
 1751 079c 00C0      		rjmp .L33
 1752               	.L34:
 111:main.c        ****         }
 1753               		.loc 1 111 0
 1754 079e 6BE1      		ldi r22,lo8(27)
 1755 07a0 76E0      		ldi r23,lo8(6)
 1756 07a2 80E0      		ldi r24,0
 1757 07a4 90E0      		ldi r25,0
 1758 07a6 0E94 0000 		call chThdSleep
 1759               	.LVL167:
 110:main.c        ****           chThdSleepMilliseconds(100);
 1760               		.loc 1 110 0
 1761 07aa 8091 0000 		lds r24,main_vt_flag
 1762 07ae 8823      		tst r24
 1763 07b0 01F0      		breq .L34
 1764               	.L33:
 113:main.c        ****         g_state = VERDE_IDLE_PRIM;
 1765               		.loc 1 113 0
 1766 07b2 1092 0000 		sts main_vt_flag,__zero_reg__
 114:main.c        ****         break;
 1767               		.loc 1 114 0
 1768 07b6 82E0      		ldi r24,lo8(2)
 1769 07b8 8093 0000 		sts g_state,r24
 115:main.c        ****       case VERDE_IDLE_PRIM:
 1770               		.loc 1 115 0
 1771 07bc 00C0      		rjmp .L35
 1772               	.LVL168:
 1773               	.L36:
 119:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1774               		.loc 1 119 0
 1775 07be 84E0      		ldi r24,lo8(4)
 1776 07c0 00C0      		rjmp .L123
 1777               	.LVL169:
 1778               	.L130:
 201:main.c        ****           palClearLine(PEDESTRE_VERDE);
 1779               		.loc 1 201 0
 1780 07c2 5092 0000 		sts g_state,r5
 202:main.c        ****         } else {
 1781               		.loc 1 202 0
 1782 07c6 63E0      		ldi r22,lo8(3)
 1783 07c8 83E2      		ldi r24,lo8(35)
 1784 07ca 90E0      		ldi r25,0
 1785 07cc 0E94 0000 		call _pal_lld_setlineid
 1786               	.LVL170:
 1787 07d0 0E94 0000 		call _pal_lld_getpadfromline
 1788               	.LVL171:
 1789 07d4 182F      		mov r17,r24
 1790 07d6 63E0      		ldi r22,lo8(3)
 1791 07d8 83E2      		ldi r24,lo8(35)
 1792 07da 90E0      		ldi r25,0
 1793 07dc 0E94 0000 		call _pal_lld_setlineid
 1794               	.LVL172:
 1795 07e0 0E94 0000 		call _pal_lld_getportfromline
 1796               	.LVL173:
 1797 07e4 FC01      		movw r30,r24
 1798 07e6 9281      		ldd r25,Z+2
 1799 07e8 9601      		movw r18,r12
 1800 07ea 00C0      		rjmp 2f
 1801               		1:
 1802 07ec 220F      		lsl r18
 1803 07ee 331F      		rol r19
 1804               		2:
 1805 07f0 1A95      		dec r17
 1806 07f2 02F4      		brpl 1b
 1807 07f4 2095      		com r18
 1808 07f6 3095      		com r19
 1809 07f8 9223      		and r25,r18
 1810 07fa 9283      		std Z+2,r25
 1811 07fc 00C0      		rjmp .L35
 1812               	.LVL174:
 1813               	.L132:
 160:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 1814               		.loc 1 160 0
 1815 07fe 6092 0000 		sts g_state,r6
 1816 0802 00C0      		rjmp .L125
 1817               	.LVL175:
 1818               	.L129:
 198:main.c        ****         }
 1819               		.loc 1 198 0
 1820 0804 0E94 0000 		call dequeue
 1821               	.LVL176:
 1822 0808 6C01      		movw r12,r24
 1823               	.LVL177:
 1824 080a 00C0      		rjmp .L58
 1825               	.LVL178:
 1826               	.L131:
 157:main.c        ****         }
 1827               		.loc 1 157 0
 1828 080c 0E94 0000 		call dequeue
 1829               	.LVL179:
 1830 0810 6C01      		movw r12,r24
 1831               	.LVL180:
 1832 0812 00C0      		rjmp .L47
 1833               		.cfi_endproc
 1834               	.LFE243:
 1836               		.section	.text.button_check,"ax",@progbits
 1837               	.global	button_check
 1839               	button_check:
 1840               	.LFB248:
 376:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 1841               		.loc 1 376 0
 1842               		.cfi_startproc
 1843               	.LVL181:
 1844 0000 CF92      		push r12
 1845               	.LCFI8:
 1846               		.cfi_def_cfa_offset 3
 1847               		.cfi_offset 12, -2
 1848 0002 DF92      		push r13
 1849               	.LCFI9:
 1850               		.cfi_def_cfa_offset 4
 1851               		.cfi_offset 13, -3
 1852 0004 EF92      		push r14
 1853               	.LCFI10:
 1854               		.cfi_def_cfa_offset 5
 1855               		.cfi_offset 14, -4
 1856 0006 CF93      		push r28
 1857               	.LCFI11:
 1858               		.cfi_def_cfa_offset 6
 1859               		.cfi_offset 28, -5
 1860               	/* prologue: function */
 1861               	/* frame size = 0 */
 1862               	/* stack size = 4 */
 1863               	.L__stack_usage = 4
 1864 0008 6B01      		movw r12,r22
 1865 000a E82E      		mov r14,r24
 380:main.c        ****     x1 = palReadLine(line);
 1866               		.loc 1 380 0
 1867 000c 4130      		cpi r20,lo8(1)
 1868 000e 01F0      		breq .L138
 385:main.c        ****     x2 = palReadLine(line);
 1869               		.loc 1 385 0
 1870 0010 4230      		cpi r20,lo8(2)
 1871 0012 01F4      		brne .+2
 1872 0014 00C0      		rjmp .L139
 390:main.c        ****     x3 = palReadLine(line);
 1873               		.loc 1 390 0
 1874 0016 4330      		cpi r20,lo8(3)
 1875 0018 01F4      		brne .+2
 1876 001a 00C0      		rjmp .L140
 395:main.c        ****     x4 = palReadLine(line);
 1877               		.loc 1 395 0
 1878 001c 4430      		cpi r20,lo8(4)
 1879 001e 01F0      		breq .L141
 1880               	.LVL182:
 402:main.c        **** }
 1881               		.loc 1 402 0
 1882 0020 81E0      		ldi r24,lo8(1)
 1883 0022 8227      		eor r24,r18
 403:main.c        **** 
 1884               		.loc 1 403 0
 1885 0024 8923      		and r24,r25
 1886               	/* epilogue start */
 1887 0026 CF91      		pop r28
 1888 0028 EF90      		pop r14
 1889               	.LVL183:
 1890 002a DF90      		pop r13
 1891 002c CF90      		pop r12
 1892               	.LVL184:
 1893 002e 0895      		ret
 1894               	.LVL185:
 1895               	.L141:
 396:main.c        ****     w = x4^old_x4;
 1896               		.loc 1 396 0
 1897 0030 0E94 0000 		call _pal_lld_getportfromline
 1898               	.LVL186:
 1899 0034 FC01      		movw r30,r24
 1900 0036 C081      		ld r28,Z
 1901 0038 8E2D      		mov r24,r14
 1902 003a B601      		movw r22,r12
 1903 003c 0E94 0000 		call _pal_lld_getpadfromline
 1904               	.LVL187:
 1905 0040 2C2F      		mov r18,r28
 1906 0042 30E0      		ldi r19,0
 1907 0044 00C0      		rjmp 2f
 1908               		1:
 1909 0046 3595      		asr r19
 1910 0048 2795      		ror r18
 1911               		2:
 1912 004a 8A95      		dec r24
 1913 004c 02F4      		brpl 1b
 1914 004e 2170      		andi r18,lo8(1)
 397:main.c        ****     old_x4 = x4;
 1915               		.loc 1 397 0
 1916 0050 9091 0000 		lds r25,old_x4.4149
 1917 0054 9227      		eor r25,r18
 1918               	.LVL188:
 398:main.c        ****     x = x4;
 1919               		.loc 1 398 0
 1920 0056 2093 0000 		sts old_x4.4149,r18
 1921               	.LVL189:
 402:main.c        **** }
 1922               		.loc 1 402 0
 1923 005a 81E0      		ldi r24,lo8(1)
 1924 005c 8227      		eor r24,r18
 403:main.c        **** 
 1925               		.loc 1 403 0
 1926 005e 8923      		and r24,r25
 1927               	/* epilogue start */
 1928 0060 CF91      		pop r28
 1929 0062 EF90      		pop r14
 1930               	.LVL190:
 1931 0064 DF90      		pop r13
 1932 0066 CF90      		pop r12
 1933 0068 0895      		ret
 1934               	.LVL191:
 1935               	.L138:
 381:main.c        ****     w = x1^old_x1;
 1936               		.loc 1 381 0
 1937 006a 0E94 0000 		call _pal_lld_getportfromline
 1938               	.LVL192:
 1939 006e FC01      		movw r30,r24
 1940 0070 C081      		ld r28,Z
 1941 0072 8E2D      		mov r24,r14
 1942 0074 B601      		movw r22,r12
 1943 0076 0E94 0000 		call _pal_lld_getpadfromline
 1944               	.LVL193:
 1945 007a 2C2F      		mov r18,r28
 1946 007c 30E0      		ldi r19,0
 1947 007e 00C0      		rjmp 2f
 1948               		1:
 1949 0080 3595      		asr r19
 1950 0082 2795      		ror r18
 1951               		2:
 1952 0084 8A95      		dec r24
 1953 0086 02F4      		brpl 1b
 1954 0088 2170      		andi r18,lo8(1)
 382:main.c        ****     old_x1 = x1;
 1955               		.loc 1 382 0
 1956 008a 9091 0000 		lds r25,old_x1.4143
 1957 008e 9227      		eor r25,r18
 1958               	.LVL194:
 383:main.c        ****     x = x1;
 1959               		.loc 1 383 0
 1960 0090 2093 0000 		sts old_x1.4143,r18
 1961               	.LVL195:
 402:main.c        **** }
 1962               		.loc 1 402 0
 1963 0094 81E0      		ldi r24,lo8(1)
 1964 0096 8227      		eor r24,r18
 403:main.c        **** 
 1965               		.loc 1 403 0
 1966 0098 8923      		and r24,r25
 1967               	/* epilogue start */
 1968 009a CF91      		pop r28
 1969 009c EF90      		pop r14
 1970               	.LVL196:
 1971 009e DF90      		pop r13
 1972 00a0 CF90      		pop r12
 1973 00a2 0895      		ret
 1974               	.LVL197:
 1975               	.L139:
 386:main.c        ****     w = x2^old_x2;
 1976               		.loc 1 386 0
 1977 00a4 0E94 0000 		call _pal_lld_getportfromline
 1978               	.LVL198:
 1979 00a8 FC01      		movw r30,r24
 1980 00aa C081      		ld r28,Z
 1981 00ac 8E2D      		mov r24,r14
 1982 00ae B601      		movw r22,r12
 1983 00b0 0E94 0000 		call _pal_lld_getpadfromline
 1984               	.LVL199:
 1985 00b4 2C2F      		mov r18,r28
 1986 00b6 30E0      		ldi r19,0
 1987 00b8 00C0      		rjmp 2f
 1988               		1:
 1989 00ba 3595      		asr r19
 1990 00bc 2795      		ror r18
 1991               		2:
 1992 00be 8A95      		dec r24
 1993 00c0 02F4      		brpl 1b
 1994 00c2 2170      		andi r18,lo8(1)
 387:main.c        ****     old_x2 = x2;
 1995               		.loc 1 387 0
 1996 00c4 9091 0000 		lds r25,old_x2.4145
 1997 00c8 9227      		eor r25,r18
 1998               	.LVL200:
 388:main.c        ****     x = x2;
 1999               		.loc 1 388 0
 2000 00ca 2093 0000 		sts old_x2.4145,r18
 2001               	.LVL201:
 402:main.c        **** }
 2002               		.loc 1 402 0
 2003 00ce 81E0      		ldi r24,lo8(1)
 2004 00d0 8227      		eor r24,r18
 403:main.c        **** 
 2005               		.loc 1 403 0
 2006 00d2 8923      		and r24,r25
 2007               	/* epilogue start */
 2008 00d4 CF91      		pop r28
 2009 00d6 EF90      		pop r14
 2010               	.LVL202:
 2011 00d8 DF90      		pop r13
 2012 00da CF90      		pop r12
 2013 00dc 0895      		ret
 2014               	.LVL203:
 2015               	.L140:
 391:main.c        ****     w = x3^old_x3;
 2016               		.loc 1 391 0
 2017 00de 0E94 0000 		call _pal_lld_getportfromline
 2018               	.LVL204:
 2019 00e2 FC01      		movw r30,r24
 2020 00e4 C081      		ld r28,Z
 2021 00e6 8E2D      		mov r24,r14
 2022 00e8 B601      		movw r22,r12
 2023 00ea 0E94 0000 		call _pal_lld_getpadfromline
 2024               	.LVL205:
 2025 00ee 2C2F      		mov r18,r28
 2026 00f0 30E0      		ldi r19,0
 2027 00f2 00C0      		rjmp 2f
 2028               		1:
 2029 00f4 3595      		asr r19
 2030 00f6 2795      		ror r18
 2031               		2:
 2032 00f8 8A95      		dec r24
 2033 00fa 02F4      		brpl 1b
 2034 00fc 2170      		andi r18,lo8(1)
 392:main.c        ****     old_x3 = x3;
 2035               		.loc 1 392 0
 2036 00fe 9091 0000 		lds r25,old_x3.4147
 2037 0102 9227      		eor r25,r18
 2038               	.LVL206:
 393:main.c        ****     x = x3;
 2039               		.loc 1 393 0
 2040 0104 2093 0000 		sts old_x3.4147,r18
 2041               	.LVL207:
 402:main.c        **** }
 2042               		.loc 1 402 0
 2043 0108 81E0      		ldi r24,lo8(1)
 2044 010a 8227      		eor r24,r18
 403:main.c        **** 
 2045               		.loc 1 403 0
 2046 010c 8923      		and r24,r25
 2047               	/* epilogue start */
 2048 010e CF91      		pop r28
 2049 0110 EF90      		pop r14
 2050               	.LVL208:
 2051 0112 DF90      		pop r13
 2052 0114 CF90      		pop r12
 2053 0116 0895      		ret
 2054               		.cfi_endproc
 2055               	.LFE248:
 2057               		.section	.text.startup.main,"ax",@progbits
 2058               	.global	main
 2060               	main:
 2061               	.LFB244:
 239:main.c        ****   queueInit();
 2062               		.loc 1 239 0
 2063               		.cfi_startproc
 2064               	/* prologue: function */
 2065               	/* frame size = 0 */
 2066               	/* stack size = 0 */
 2067               	.L__stack_usage = 0
 240:main.c        ****   /*
 2068               		.loc 1 240 0
 2069 0000 0E94 0000 		call queueInit
 2070               	.LVL209:
 248:main.c        ****   chSysInit();
 2071               		.loc 1 248 0
 2072 0004 0E94 0000 		call halInit
 2073               	.LVL210:
 249:main.c        **** 
 2074               		.loc 1 249 0
 2075 0008 0E94 0000 		call chSysInit
 2076               	.LVL211:
 252:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 2077               		.loc 1 252 0
 2078 000c 62E0      		ldi r22,lo8(2)
 2079 000e 86E2      		ldi r24,lo8(38)
 2080 0010 90E0      		ldi r25,0
 2081 0012 0E94 0000 		call _pal_lld_setlineid
 2082               	.LVL212:
 2083 0016 0E94 0000 		call _pal_lld_getpadfromline
 2084               	.LVL213:
 2085 001a 182F      		mov r17,r24
 2086 001c 62E0      		ldi r22,lo8(2)
 2087 001e 86E2      		ldi r24,lo8(38)
 2088 0020 90E0      		ldi r25,0
 2089 0022 0E94 0000 		call _pal_lld_setlineid
 2090               	.LVL214:
 2091 0026 0E94 0000 		call _pal_lld_getportfromline
 2092               	.LVL215:
 2093 002a C1E0      		ldi r28,lo8(1)
 2094 002c D0E0      		ldi r29,0
 2095 002e BE01      		movw r22,r28
 2096 0030 00C0      		rjmp 2f
 2097               		1:
 2098 0032 660F      		lsl r22
 2099               		2:
 2100 0034 1A95      		dec r17
 2101 0036 02F4      		brpl 1b
 2102 0038 43E0      		ldi r20,lo8(3)
 2103 003a 0E94 0000 		call _pal_lld_setgroupmode
 2104               	.LVL216:
 253:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 2105               		.loc 1 253 0
 2106 003e 64E0      		ldi r22,lo8(4)
 2107 0040 86E2      		ldi r24,lo8(38)
 2108 0042 90E0      		ldi r25,0
 2109 0044 0E94 0000 		call _pal_lld_setlineid
 2110               	.LVL217:
 2111 0048 0E94 0000 		call _pal_lld_getpadfromline
 2112               	.LVL218:
 2113 004c 182F      		mov r17,r24
 2114 004e 64E0      		ldi r22,lo8(4)
 2115 0050 86E2      		ldi r24,lo8(38)
 2116 0052 90E0      		ldi r25,0
 2117 0054 0E94 0000 		call _pal_lld_setlineid
 2118               	.LVL219:
 2119 0058 0E94 0000 		call _pal_lld_getportfromline
 2120               	.LVL220:
 2121 005c BE01      		movw r22,r28
 2122 005e 00C0      		rjmp 2f
 2123               		1:
 2124 0060 660F      		lsl r22
 2125               		2:
 2126 0062 1A95      		dec r17
 2127 0064 02F4      		brpl 1b
 2128 0066 43E0      		ldi r20,lo8(3)
 2129 0068 0E94 0000 		call _pal_lld_setgroupmode
 2130               	.LVL221:
 254:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 2131               		.loc 1 254 0
 2132 006c 63E0      		ldi r22,lo8(3)
 2133 006e 86E2      		ldi r24,lo8(38)
 2134 0070 90E0      		ldi r25,0
 2135 0072 0E94 0000 		call _pal_lld_setlineid
 2136               	.LVL222:
 2137 0076 0E94 0000 		call _pal_lld_getpadfromline
 2138               	.LVL223:
 2139 007a 182F      		mov r17,r24
 2140 007c 63E0      		ldi r22,lo8(3)
 2141 007e 86E2      		ldi r24,lo8(38)
 2142 0080 90E0      		ldi r25,0
 2143 0082 0E94 0000 		call _pal_lld_setlineid
 2144               	.LVL224:
 2145 0086 0E94 0000 		call _pal_lld_getportfromline
 2146               	.LVL225:
 2147 008a BE01      		movw r22,r28
 2148 008c 00C0      		rjmp 2f
 2149               		1:
 2150 008e 660F      		lsl r22
 2151               		2:
 2152 0090 1A95      		dec r17
 2153 0092 02F4      		brpl 1b
 2154 0094 43E0      		ldi r20,lo8(3)
 2155 0096 0E94 0000 		call _pal_lld_setgroupmode
 2156               	.LVL226:
 255:main.c        **** 
 2157               		.loc 1 255 0
 2158 009a 65E0      		ldi r22,lo8(5)
 2159 009c 86E2      		ldi r24,lo8(38)
 2160 009e 90E0      		ldi r25,0
 2161 00a0 0E94 0000 		call _pal_lld_setlineid
 2162               	.LVL227:
 2163 00a4 0E94 0000 		call _pal_lld_getpadfromline
 2164               	.LVL228:
 2165 00a8 182F      		mov r17,r24
 2166 00aa 65E0      		ldi r22,lo8(5)
 2167 00ac 86E2      		ldi r24,lo8(38)
 2168 00ae 90E0      		ldi r25,0
 2169 00b0 0E94 0000 		call _pal_lld_setlineid
 2170               	.LVL229:
 2171 00b4 0E94 0000 		call _pal_lld_getportfromline
 2172               	.LVL230:
 2173 00b8 BE01      		movw r22,r28
 2174 00ba 00C0      		rjmp 2f
 2175               		1:
 2176 00bc 660F      		lsl r22
 2177               		2:
 2178 00be 1A95      		dec r17
 2179 00c0 02F4      		brpl 1b
 2180 00c2 43E0      		ldi r20,lo8(3)
 2181 00c4 0E94 0000 		call _pal_lld_setgroupmode
 2182               	.LVL231:
 258:main.c        ****   palClearLine(PEDESTRE_VERDE);
 2183               		.loc 1 258 0
 2184 00c8 63E0      		ldi r22,lo8(3)
 2185 00ca 83E2      		ldi r24,lo8(35)
 2186 00cc 90E0      		ldi r25,0
 2187 00ce 0E94 0000 		call _pal_lld_setlineid
 2188               	.LVL232:
 2189 00d2 0E94 0000 		call _pal_lld_getpadfromline
 2190               	.LVL233:
 2191 00d6 182F      		mov r17,r24
 2192 00d8 63E0      		ldi r22,lo8(3)
 2193 00da 83E2      		ldi r24,lo8(35)
 2194 00dc 90E0      		ldi r25,0
 2195 00de 0E94 0000 		call _pal_lld_setlineid
 2196               	.LVL234:
 2197 00e2 0E94 0000 		call _pal_lld_getportfromline
 2198               	.LVL235:
 2199 00e6 BE01      		movw r22,r28
 2200 00e8 00C0      		rjmp 2f
 2201               		1:
 2202 00ea 660F      		lsl r22
 2203               		2:
 2204 00ec 1A95      		dec r17
 2205 00ee 02F4      		brpl 1b
 2206 00f0 46E0      		ldi r20,lo8(6)
 2207 00f2 0E94 0000 		call _pal_lld_setgroupmode
 2208               	.LVL236:
 259:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2209               		.loc 1 259 0
 2210 00f6 63E0      		ldi r22,lo8(3)
 2211 00f8 83E2      		ldi r24,lo8(35)
 2212 00fa 90E0      		ldi r25,0
 2213 00fc 0E94 0000 		call _pal_lld_setlineid
 2214               	.LVL237:
 2215 0100 0E94 0000 		call _pal_lld_getpadfromline
 2216               	.LVL238:
 2217 0104 182F      		mov r17,r24
 2218 0106 63E0      		ldi r22,lo8(3)
 2219 0108 83E2      		ldi r24,lo8(35)
 2220 010a 90E0      		ldi r25,0
 2221 010c 0E94 0000 		call _pal_lld_setlineid
 2222               	.LVL239:
 2223 0110 0E94 0000 		call _pal_lld_getportfromline
 2224               	.LVL240:
 2225 0114 FC01      		movw r30,r24
 2226 0116 9281      		ldd r25,Z+2
 2227 0118 9E01      		movw r18,r28
 2228 011a 00C0      		rjmp 2f
 2229               		1:
 2230 011c 220F      		lsl r18
 2231 011e 331F      		rol r19
 2232               		2:
 2233 0120 1A95      		dec r17
 2234 0122 02F4      		brpl 1b
 2235 0124 2095      		com r18
 2236 0126 3095      		com r19
 2237 0128 9223      		and r25,r18
 2238 012a 9283      		std Z+2,r25
 260:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 2239               		.loc 1 260 0
 2240 012c 62E0      		ldi r22,lo8(2)
 2241 012e 83E2      		ldi r24,lo8(35)
 2242 0130 90E0      		ldi r25,0
 2243 0132 0E94 0000 		call _pal_lld_setlineid
 2244               	.LVL241:
 2245 0136 0E94 0000 		call _pal_lld_getpadfromline
 2246               	.LVL242:
 2247 013a 182F      		mov r17,r24
 2248 013c 62E0      		ldi r22,lo8(2)
 2249 013e 83E2      		ldi r24,lo8(35)
 2250 0140 90E0      		ldi r25,0
 2251 0142 0E94 0000 		call _pal_lld_setlineid
 2252               	.LVL243:
 2253 0146 0E94 0000 		call _pal_lld_getportfromline
 2254               	.LVL244:
 2255 014a BE01      		movw r22,r28
 2256 014c 00C0      		rjmp 2f
 2257               		1:
 2258 014e 660F      		lsl r22
 2259               		2:
 2260 0150 1A95      		dec r17
 2261 0152 02F4      		brpl 1b
 2262 0154 46E0      		ldi r20,lo8(6)
 2263 0156 0E94 0000 		call _pal_lld_setgroupmode
 2264               	.LVL245:
 261:main.c        **** 
 2265               		.loc 1 261 0
 2266 015a 62E0      		ldi r22,lo8(2)
 2267 015c 83E2      		ldi r24,lo8(35)
 2268 015e 90E0      		ldi r25,0
 2269 0160 0E94 0000 		call _pal_lld_setlineid
 2270               	.LVL246:
 2271 0164 0E94 0000 		call _pal_lld_getpadfromline
 2272               	.LVL247:
 2273 0168 182F      		mov r17,r24
 2274 016a 62E0      		ldi r22,lo8(2)
 2275 016c 83E2      		ldi r24,lo8(35)
 2276 016e 90E0      		ldi r25,0
 2277 0170 0E94 0000 		call _pal_lld_setlineid
 2278               	.LVL248:
 2279 0174 0E94 0000 		call _pal_lld_getportfromline
 2280               	.LVL249:
 2281 0178 FC01      		movw r30,r24
 2282 017a 9281      		ldd r25,Z+2
 2283 017c 9E01      		movw r18,r28
 2284 017e 00C0      		rjmp 2f
 2285               		1:
 2286 0180 220F      		lsl r18
 2287 0182 331F      		rol r19
 2288               		2:
 2289 0184 1A95      		dec r17
 2290 0186 02F4      		brpl 1b
 2291 0188 2095      		com r18
 2292 018a 3095      		com r19
 2293 018c 9223      		and r25,r18
 2294 018e 9283      		std Z+2,r25
 264:main.c        ****   palClearLine(PRIMARIO_VERDE);
 2295               		.loc 1 264 0
 2296 0190 67E0      		ldi r22,lo8(7)
 2297 0192 89E2      		ldi r24,lo8(41)
 2298 0194 90E0      		ldi r25,0
 2299 0196 0E94 0000 		call _pal_lld_setlineid
 2300               	.LVL250:
 2301 019a 0E94 0000 		call _pal_lld_getpadfromline
 2302               	.LVL251:
 2303 019e 182F      		mov r17,r24
 2304 01a0 67E0      		ldi r22,lo8(7)
 2305 01a2 89E2      		ldi r24,lo8(41)
 2306 01a4 90E0      		ldi r25,0
 2307 01a6 0E94 0000 		call _pal_lld_setlineid
 2308               	.LVL252:
 2309 01aa 0E94 0000 		call _pal_lld_getportfromline
 2310               	.LVL253:
 2311 01ae BE01      		movw r22,r28
 2312 01b0 00C0      		rjmp 2f
 2313               		1:
 2314 01b2 660F      		lsl r22
 2315               		2:
 2316 01b4 1A95      		dec r17
 2317 01b6 02F4      		brpl 1b
 2318 01b8 46E0      		ldi r20,lo8(6)
 2319 01ba 0E94 0000 		call _pal_lld_setgroupmode
 2320               	.LVL254:
 265:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 2321               		.loc 1 265 0
 2322 01be 67E0      		ldi r22,lo8(7)
 2323 01c0 89E2      		ldi r24,lo8(41)
 2324 01c2 90E0      		ldi r25,0
 2325 01c4 0E94 0000 		call _pal_lld_setlineid
 2326               	.LVL255:
 2327 01c8 0E94 0000 		call _pal_lld_getpadfromline
 2328               	.LVL256:
 2329 01cc 182F      		mov r17,r24
 2330 01ce 67E0      		ldi r22,lo8(7)
 2331 01d0 89E2      		ldi r24,lo8(41)
 2332 01d2 90E0      		ldi r25,0
 2333 01d4 0E94 0000 		call _pal_lld_setlineid
 2334               	.LVL257:
 2335 01d8 0E94 0000 		call _pal_lld_getportfromline
 2336               	.LVL258:
 2337 01dc FC01      		movw r30,r24
 2338 01de 9281      		ldd r25,Z+2
 2339 01e0 9E01      		movw r18,r28
 2340 01e2 00C0      		rjmp 2f
 2341               		1:
 2342 01e4 220F      		lsl r18
 2343 01e6 331F      		rol r19
 2344               		2:
 2345 01e8 1A95      		dec r17
 2346 01ea 02F4      		brpl 1b
 2347 01ec 2095      		com r18
 2348 01ee 3095      		com r19
 2349 01f0 9223      		and r25,r18
 2350 01f2 9283      		std Z+2,r25
 266:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 2351               		.loc 1 266 0
 2352 01f4 64E0      		ldi r22,lo8(4)
 2353 01f6 89E2      		ldi r24,lo8(41)
 2354 01f8 90E0      		ldi r25,0
 2355 01fa 0E94 0000 		call _pal_lld_setlineid
 2356               	.LVL259:
 2357 01fe 0E94 0000 		call _pal_lld_getpadfromline
 2358               	.LVL260:
 2359 0202 182F      		mov r17,r24
 2360 0204 64E0      		ldi r22,lo8(4)
 2361 0206 89E2      		ldi r24,lo8(41)
 2362 0208 90E0      		ldi r25,0
 2363 020a 0E94 0000 		call _pal_lld_setlineid
 2364               	.LVL261:
 2365 020e 0E94 0000 		call _pal_lld_getportfromline
 2366               	.LVL262:
 2367 0212 BE01      		movw r22,r28
 2368 0214 00C0      		rjmp 2f
 2369               		1:
 2370 0216 660F      		lsl r22
 2371               		2:
 2372 0218 1A95      		dec r17
 2373 021a 02F4      		brpl 1b
 2374 021c 46E0      		ldi r20,lo8(6)
 2375 021e 0E94 0000 		call _pal_lld_setgroupmode
 2376               	.LVL263:
 267:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2377               		.loc 1 267 0
 2378 0222 64E0      		ldi r22,lo8(4)
 2379 0224 89E2      		ldi r24,lo8(41)
 2380 0226 90E0      		ldi r25,0
 2381 0228 0E94 0000 		call _pal_lld_setlineid
 2382               	.LVL264:
 2383 022c 0E94 0000 		call _pal_lld_getpadfromline
 2384               	.LVL265:
 2385 0230 182F      		mov r17,r24
 2386 0232 64E0      		ldi r22,lo8(4)
 2387 0234 89E2      		ldi r24,lo8(41)
 2388 0236 90E0      		ldi r25,0
 2389 0238 0E94 0000 		call _pal_lld_setlineid
 2390               	.LVL266:
 2391 023c 0E94 0000 		call _pal_lld_getportfromline
 2392               	.LVL267:
 2393 0240 FC01      		movw r30,r24
 2394 0242 9281      		ldd r25,Z+2
 2395 0244 9E01      		movw r18,r28
 2396 0246 00C0      		rjmp 2f
 2397               		1:
 2398 0248 220F      		lsl r18
 2399 024a 331F      		rol r19
 2400               		2:
 2401 024c 1A95      		dec r17
 2402 024e 02F4      		brpl 1b
 2403 0250 2095      		com r18
 2404 0252 3095      		com r19
 2405 0254 9223      		and r25,r18
 2406 0256 9283      		std Z+2,r25
 268:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 2407               		.loc 1 268 0
 2408 0258 66E0      		ldi r22,lo8(6)
 2409 025a 89E2      		ldi r24,lo8(41)
 2410 025c 90E0      		ldi r25,0
 2411 025e 0E94 0000 		call _pal_lld_setlineid
 2412               	.LVL268:
 2413 0262 0E94 0000 		call _pal_lld_getpadfromline
 2414               	.LVL269:
 2415 0266 182F      		mov r17,r24
 2416 0268 66E0      		ldi r22,lo8(6)
 2417 026a 89E2      		ldi r24,lo8(41)
 2418 026c 90E0      		ldi r25,0
 2419 026e 0E94 0000 		call _pal_lld_setlineid
 2420               	.LVL270:
 2421 0272 0E94 0000 		call _pal_lld_getportfromline
 2422               	.LVL271:
 2423 0276 BE01      		movw r22,r28
 2424 0278 00C0      		rjmp 2f
 2425               		1:
 2426 027a 660F      		lsl r22
 2427               		2:
 2428 027c 1A95      		dec r17
 2429 027e 02F4      		brpl 1b
 2430 0280 46E0      		ldi r20,lo8(6)
 2431 0282 0E94 0000 		call _pal_lld_setgroupmode
 2432               	.LVL272:
 269:main.c        **** 
 2433               		.loc 1 269 0
 2434 0286 66E0      		ldi r22,lo8(6)
 2435 0288 89E2      		ldi r24,lo8(41)
 2436 028a 90E0      		ldi r25,0
 2437 028c 0E94 0000 		call _pal_lld_setlineid
 2438               	.LVL273:
 2439 0290 0E94 0000 		call _pal_lld_getpadfromline
 2440               	.LVL274:
 2441 0294 182F      		mov r17,r24
 2442 0296 66E0      		ldi r22,lo8(6)
 2443 0298 89E2      		ldi r24,lo8(41)
 2444 029a 90E0      		ldi r25,0
 2445 029c 0E94 0000 		call _pal_lld_setlineid
 2446               	.LVL275:
 2447 02a0 0E94 0000 		call _pal_lld_getportfromline
 2448               	.LVL276:
 2449 02a4 FC01      		movw r30,r24
 2450 02a6 9281      		ldd r25,Z+2
 2451 02a8 9E01      		movw r18,r28
 2452 02aa 00C0      		rjmp 2f
 2453               		1:
 2454 02ac 220F      		lsl r18
 2455 02ae 331F      		rol r19
 2456               		2:
 2457 02b0 1A95      		dec r17
 2458 02b2 02F4      		brpl 1b
 2459 02b4 2095      		com r18
 2460 02b6 3095      		com r19
 2461 02b8 9223      		and r25,r18
 2462 02ba 9283      		std Z+2,r25
 272:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 2463               		.loc 1 272 0
 2464 02bc 61E0      		ldi r22,lo8(1)
 2465 02be 83E2      		ldi r24,lo8(35)
 2466 02c0 90E0      		ldi r25,0
 2467 02c2 0E94 0000 		call _pal_lld_setlineid
 2468               	.LVL277:
 2469 02c6 0E94 0000 		call _pal_lld_getpadfromline
 2470               	.LVL278:
 2471 02ca 182F      		mov r17,r24
 2472 02cc 61E0      		ldi r22,lo8(1)
 2473 02ce 83E2      		ldi r24,lo8(35)
 2474 02d0 90E0      		ldi r25,0
 2475 02d2 0E94 0000 		call _pal_lld_setlineid
 2476               	.LVL279:
 2477 02d6 0E94 0000 		call _pal_lld_getportfromline
 2478               	.LVL280:
 2479 02da BE01      		movw r22,r28
 2480 02dc 00C0      		rjmp 2f
 2481               		1:
 2482 02de 660F      		lsl r22
 2483               		2:
 2484 02e0 1A95      		dec r17
 2485 02e2 02F4      		brpl 1b
 2486 02e4 46E0      		ldi r20,lo8(6)
 2487 02e6 0E94 0000 		call _pal_lld_setgroupmode
 2488               	.LVL281:
 273:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 2489               		.loc 1 273 0
 2490 02ea 61E0      		ldi r22,lo8(1)
 2491 02ec 83E2      		ldi r24,lo8(35)
 2492 02ee 90E0      		ldi r25,0
 2493 02f0 0E94 0000 		call _pal_lld_setlineid
 2494               	.LVL282:
 2495 02f4 0E94 0000 		call _pal_lld_getpadfromline
 2496               	.LVL283:
 2497 02f8 182F      		mov r17,r24
 2498 02fa 61E0      		ldi r22,lo8(1)
 2499 02fc 83E2      		ldi r24,lo8(35)
 2500 02fe 90E0      		ldi r25,0
 2501 0300 0E94 0000 		call _pal_lld_setlineid
 2502               	.LVL284:
 2503 0304 0E94 0000 		call _pal_lld_getportfromline
 2504               	.LVL285:
 2505 0308 FC01      		movw r30,r24
 2506 030a 9281      		ldd r25,Z+2
 2507 030c 9E01      		movw r18,r28
 2508 030e 00C0      		rjmp 2f
 2509               		1:
 2510 0310 220F      		lsl r18
 2511 0312 331F      		rol r19
 2512               		2:
 2513 0314 1A95      		dec r17
 2514 0316 02F4      		brpl 1b
 2515 0318 2095      		com r18
 2516 031a 3095      		com r19
 2517 031c 9223      		and r25,r18
 2518 031e 9283      		std Z+2,r25
 274:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 2519               		.loc 1 274 0
 2520 0320 65E0      		ldi r22,lo8(5)
 2521 0322 89E2      		ldi r24,lo8(41)
 2522 0324 90E0      		ldi r25,0
 2523 0326 0E94 0000 		call _pal_lld_setlineid
 2524               	.LVL286:
 2525 032a 0E94 0000 		call _pal_lld_getpadfromline
 2526               	.LVL287:
 2527 032e 182F      		mov r17,r24
 2528 0330 65E0      		ldi r22,lo8(5)
 2529 0332 89E2      		ldi r24,lo8(41)
 2530 0334 90E0      		ldi r25,0
 2531 0336 0E94 0000 		call _pal_lld_setlineid
 2532               	.LVL288:
 2533 033a 0E94 0000 		call _pal_lld_getportfromline
 2534               	.LVL289:
 2535 033e BE01      		movw r22,r28
 2536 0340 00C0      		rjmp 2f
 2537               		1:
 2538 0342 660F      		lsl r22
 2539               		2:
 2540 0344 1A95      		dec r17
 2541 0346 02F4      		brpl 1b
 2542 0348 46E0      		ldi r20,lo8(6)
 2543 034a 0E94 0000 		call _pal_lld_setgroupmode
 2544               	.LVL290:
 275:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2545               		.loc 1 275 0
 2546 034e 65E0      		ldi r22,lo8(5)
 2547 0350 89E2      		ldi r24,lo8(41)
 2548 0352 90E0      		ldi r25,0
 2549 0354 0E94 0000 		call _pal_lld_setlineid
 2550               	.LVL291:
 2551 0358 0E94 0000 		call _pal_lld_getpadfromline
 2552               	.LVL292:
 2553 035c 182F      		mov r17,r24
 2554 035e 65E0      		ldi r22,lo8(5)
 2555 0360 89E2      		ldi r24,lo8(41)
 2556 0362 90E0      		ldi r25,0
 2557 0364 0E94 0000 		call _pal_lld_setlineid
 2558               	.LVL293:
 2559 0368 0E94 0000 		call _pal_lld_getportfromline
 2560               	.LVL294:
 2561 036c FC01      		movw r30,r24
 2562 036e 9281      		ldd r25,Z+2
 2563 0370 9E01      		movw r18,r28
 2564 0372 00C0      		rjmp 2f
 2565               		1:
 2566 0374 220F      		lsl r18
 2567 0376 331F      		rol r19
 2568               		2:
 2569 0378 1A95      		dec r17
 2570 037a 02F4      		brpl 1b
 2571 037c 2095      		com r18
 2572 037e 3095      		com r19
 2573 0380 9223      		and r25,r18
 2574 0382 9283      		std Z+2,r25
 276:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 2575               		.loc 1 276 0
 2576 0384 60E0      		ldi r22,0
 2577 0386 83E2      		ldi r24,lo8(35)
 2578 0388 90E0      		ldi r25,0
 2579 038a 0E94 0000 		call _pal_lld_setlineid
 2580               	.LVL295:
 2581 038e 0E94 0000 		call _pal_lld_getpadfromline
 2582               	.LVL296:
 2583 0392 182F      		mov r17,r24
 2584 0394 60E0      		ldi r22,0
 2585 0396 83E2      		ldi r24,lo8(35)
 2586 0398 90E0      		ldi r25,0
 2587 039a 0E94 0000 		call _pal_lld_setlineid
 2588               	.LVL297:
 2589 039e 0E94 0000 		call _pal_lld_getportfromline
 2590               	.LVL298:
 2591 03a2 BE01      		movw r22,r28
 2592 03a4 00C0      		rjmp 2f
 2593               		1:
 2594 03a6 660F      		lsl r22
 2595               		2:
 2596 03a8 1A95      		dec r17
 2597 03aa 02F4      		brpl 1b
 2598 03ac 46E0      		ldi r20,lo8(6)
 2599 03ae 0E94 0000 		call _pal_lld_setgroupmode
 2600               	.LVL299:
 277:main.c        **** 
 2601               		.loc 1 277 0
 2602 03b2 60E0      		ldi r22,0
 2603 03b4 83E2      		ldi r24,lo8(35)
 2604 03b6 90E0      		ldi r25,0
 2605 03b8 0E94 0000 		call _pal_lld_setlineid
 2606               	.LVL300:
 2607 03bc 0E94 0000 		call _pal_lld_getpadfromline
 2608               	.LVL301:
 2609 03c0 182F      		mov r17,r24
 2610 03c2 60E0      		ldi r22,0
 2611 03c4 83E2      		ldi r24,lo8(35)
 2612 03c6 90E0      		ldi r25,0
 2613 03c8 0E94 0000 		call _pal_lld_setlineid
 2614               	.LVL302:
 2615 03cc 0E94 0000 		call _pal_lld_getportfromline
 2616               	.LVL303:
 2617 03d0 FC01      		movw r30,r24
 2618 03d2 9281      		ldd r25,Z+2
 2619 03d4 9E01      		movw r18,r28
 2620 03d6 00C0      		rjmp 2f
 2621               		1:
 2622 03d8 220F      		lsl r18
 2623 03da 331F      		rol r19
 2624               		2:
 2625 03dc 1A95      		dec r17
 2626 03de 02F4      		brpl 1b
 2627 03e0 2095      		com r18
 2628 03e2 3095      		com r19
 2629 03e4 2923      		and r18,r25
 2630 03e6 2283      		std Z+2,r18
 282:main.c        **** 
 2631               		.loc 1 282 0
 2632 03e8 10E0      		ldi r17,0
 2633 03ea 00E0      		ldi r16,0
 2634 03ec 20E0      		ldi r18,lo8(gs(Thread1))
 2635 03ee 30E0      		ldi r19,hi8(gs(Thread1))
 2636 03f0 40E8      		ldi r20,lo8(-128)
 2637 03f2 63E8      		ldi r22,lo8(-125)
 2638 03f4 70E0      		ldi r23,0
 2639 03f6 80E0      		ldi r24,lo8(waThread1)
 2640 03f8 90E0      		ldi r25,hi8(waThread1)
 2641 03fa 0E94 0000 		call chThdCreateStatic
 2642               	.LVL304:
 2643 03fe 00C0      		rjmp .L147
 2644               	.L151:
 288:main.c        ****     }
 2645               		.loc 1 288 0
 2646 0400 84E0      		ldi r24,lo8(4)
 2647 0402 90E0      		ldi r25,0
 2648 0404 0E94 0000 		call enqueue
 2649               	.LVL305:
 2650               	.L144:
 303:main.c        ****   }
 2651               		.loc 1 303 0
 2652 0408 6EE0      		ldi r22,lo8(14)
 2653 040a 73E0      		ldi r23,lo8(3)
 2654 040c 80E0      		ldi r24,0
 2655 040e 90E0      		ldi r25,0
 2656 0410 0E94 0000 		call chThdSleep
 2657               	.LVL306:
 2658               	.L147:
 286:main.c        ****     {
 2659               		.loc 1 286 0
 2660 0414 65E0      		ldi r22,lo8(5)
 2661 0416 86E2      		ldi r24,lo8(38)
 2662 0418 90E0      		ldi r25,0
 2663 041a 0E94 0000 		call _pal_lld_setlineid
 2664               	.LVL307:
 2665 041e 41E0      		ldi r20,lo8(1)
 2666 0420 0E94 0000 		call button_check
 2667               	.LVL308:
 2668 0424 8111      		cpse r24,__zero_reg__
 2669 0426 00C0      		rjmp .L151
 290:main.c        ****     {
 2670               		.loc 1 290 0
 2671 0428 63E0      		ldi r22,lo8(3)
 2672 042a 86E2      		ldi r24,lo8(38)
 2673 042c 90E0      		ldi r25,0
 2674 042e 0E94 0000 		call _pal_lld_setlineid
 2675               	.LVL309:
 2676 0432 42E0      		ldi r20,lo8(2)
 2677 0434 0E94 0000 		call button_check
 2678               	.LVL310:
 2679 0438 8823      		tst r24
 2680 043a 01F0      		breq .L145
 292:main.c        ****     }
 2681               		.loc 1 292 0
 2682 043c 83E0      		ldi r24,lo8(3)
 2683 043e 90E0      		ldi r25,0
 2684 0440 0E94 0000 		call enqueue
 2685               	.LVL311:
 2686 0444 00C0      		rjmp .L144
 2687               	.L145:
 294:main.c        ****     {
 2688               		.loc 1 294 0
 2689 0446 64E0      		ldi r22,lo8(4)
 2690 0448 86E2      		ldi r24,lo8(38)
 2691 044a 90E0      		ldi r25,0
 2692 044c 0E94 0000 		call _pal_lld_setlineid
 2693               	.LVL312:
 2694 0450 43E0      		ldi r20,lo8(3)
 2695 0452 0E94 0000 		call button_check
 2696               	.LVL313:
 2697 0456 8823      		tst r24
 2698 0458 01F0      		breq .L146
 296:main.c        ****     }
 2699               		.loc 1 296 0
 2700 045a 81E0      		ldi r24,lo8(1)
 2701 045c 90E0      		ldi r25,0
 2702 045e 0E94 0000 		call enqueue
 2703               	.LVL314:
 2704 0462 00C0      		rjmp .L144
 2705               	.L146:
 298:main.c        ****     {
 2706               		.loc 1 298 0
 2707 0464 62E0      		ldi r22,lo8(2)
 2708 0466 86E2      		ldi r24,lo8(38)
 2709 0468 90E0      		ldi r25,0
 2710 046a 0E94 0000 		call _pal_lld_setlineid
 2711               	.LVL315:
 2712 046e 44E0      		ldi r20,lo8(4)
 2713 0470 0E94 0000 		call button_check
 2714               	.LVL316:
 2715 0474 8823      		tst r24
 2716 0476 01F0      		breq .L144
 300:main.c        ****     }
 2717               		.loc 1 300 0
 2718 0478 82E0      		ldi r24,lo8(2)
 2719 047a 90E0      		ldi r25,0
 2720 047c 0E94 0000 		call enqueue
 2721               	.LVL317:
 2722 0480 00C0      		rjmp .L144
 2723               		.cfi_endproc
 2724               	.LFE244:
 2726               		.section	.bss.old_x4.4149,"aw",@nobits
 2729               	old_x4.4149:
 2730 0000 00        		.zero	1
 2731               		.section	.bss.old_x3.4147,"aw",@nobits
 2734               	old_x3.4147:
 2735 0000 00        		.zero	1
 2736               		.section	.bss.old_x2.4145,"aw",@nobits
 2739               	old_x2.4145:
 2740 0000 00        		.zero	1
 2741               		.section	.bss.old_x1.4143,"aw",@nobits
 2744               	old_x1.4143:
 2745 0000 00        		.zero	1
 2746               		.section	.bss.waThread1,"aw",@nobits
 2749               	waThread1:
 2750 0000 0000 0000 		.zero	131
 2750      0000 0000 
 2750      0000 0000 
 2750      0000 0000 
 2750      0000 0000 
 2751               	.global	main_vt_flag
 2752               		.section	.bss.main_vt_flag,"aw",@nobits
 2755               	main_vt_flag:
 2756 0000 00        		.zero	1
 2757               	.global	g_state
 2758               		.section	.data.g_state,"aw",@progbits
 2761               	g_state:
 2762 0000 01        		.byte	1
 2763               		.section	.bss.qfull,"aw",@nobits
 2766               	qfull:
 2767 0000 0000 0000 		.zero	4
 2768               		.section	.bss.qempty,"aw",@nobits
 2771               	qempty:
 2772 0000 0000 0000 		.zero	4
 2773               		.section	.bss.qmtx,"aw",@nobits
 2776               	qmtx:
 2777 0000 0000 0000 		.zero	8
 2777      0000 0000 
 2778               		.section	.bss.qsize,"aw",@nobits
 2781               	qsize:
 2782 0000 0000      		.zero	2
 2783               		.section	.bss.wrp,"aw",@nobits
 2786               	wrp:
 2787 0000 0000      		.zero	2
 2788               		.section	.bss.rdp,"aw",@nobits
 2791               	rdp:
 2792 0000 0000      		.zero	2
 2793               		.section	.bss.queue,"aw",@nobits
 2796               	queue:
 2797 0000 0000 0000 		.zero	256
 2797      0000 0000 
 2797      0000 0000 
 2797      0000 0000 
 2797      0000 0000 
 2798               		.text
 2799               	.Letext0:
 2800               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 2801               		.file 5 "/usr/lib/avr/include/stdint.h"
 2802               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2803               		.file 7 "../../os/rt/include/chearly.h"
 2804               		.file 8 "../../os/rt/include/chobjects.h"
 2805               		.file 9 "../../os/rt/include/chrfcu.h"
 2806               		.file 10 "../../os/rt/include/chdebug.h"
 2807               		.file 11 "../../os/rt/include/chtime.h"
 2808               		.file 12 "../../os/rt/include/chlists.h"
 2809               		.file 13 "../../os/rt/include/chsem.h"
 2810               		.file 14 "../../os/rt/include/chmtx.h"
 2811               		.file 15 "../../os/rt/include/chsys.h"
 2812               		.file 16 "../../os/rt/include/chregistry.h"
 2813               		.file 17 "../../os/rt/include/chcond.h"
 2814               		.file 18 "../../os/rt/include/chevents.h"
 2815               		.file 19 "../../os/oslib/include/chmemcore.h"
 2816               		.file 20 "../../os/hal/include/hal_queues.h"
 2817               		.file 21 "../../os/hal/include/hal_pal.h"
 2818               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 2819               		.file 23 "../../os/hal/include/hal_serial.h"
 2820               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 2821               		.file 25 "../../os/hal/include/hal.h"
 2822               		.file 26 "../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccLzDoXk.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLzDoXk.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLzDoXk.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLzDoXk.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLzDoXk.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLzDoXk.s:13     .text.vt_cb:0000000000000000 vt_cb
     /tmp/ccLzDoXk.s:2755   .bss.main_vt_flag:0000000000000000 main_vt_flag
     /tmp/ccLzDoXk.s:36     .text.queueInit:0000000000000000 queueInit
     /tmp/ccLzDoXk.s:2776   .bss.qmtx:0000000000000000 qmtx
     /tmp/ccLzDoXk.s:2771   .bss.qempty:0000000000000000 qempty
     /tmp/ccLzDoXk.s:2766   .bss.qfull:0000000000000000 qfull
     /tmp/ccLzDoXk.s:2796   .bss.queue:0000000000000000 queue
     /tmp/ccLzDoXk.s:2786   .bss.wrp:0000000000000000 wrp
     /tmp/ccLzDoXk.s:2791   .bss.rdp:0000000000000000 rdp
     /tmp/ccLzDoXk.s:2781   .bss.qsize:0000000000000000 qsize
     /tmp/ccLzDoXk.s:78     .text.enqueue:0000000000000000 enqueue
     /tmp/ccLzDoXk.s:168    .text.dequeue:0000000000000000 dequeue
     /tmp/ccLzDoXk.s:255    .text.Thread1:0000000000000000 Thread1
     /tmp/ccLzDoXk.s:2761   .data.g_state:0000000000000000 g_state
     /tmp/ccLzDoXk.s:1839   .text.button_check:0000000000000000 button_check
     /tmp/ccLzDoXk.s:2729   .bss.old_x4.4149:0000000000000000 old_x4.4149
     /tmp/ccLzDoXk.s:2744   .bss.old_x1.4143:0000000000000000 old_x1.4143
     /tmp/ccLzDoXk.s:2739   .bss.old_x2.4145:0000000000000000 old_x2.4145
     /tmp/ccLzDoXk.s:2734   .bss.old_x3.4147:0000000000000000 old_x3.4147
     /tmp/ccLzDoXk.s:2060   .text.startup.main:0000000000000000 main
     /tmp/ccLzDoXk.s:2749   .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
chMtxObjectInit
chCondObjectInit
chMtxLock
chCondWait
chCondSignal
chMtxUnlock
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
chThdSleep
__tablejump2__
chVTDoResetI
chVTDoSetI
halInit
chSysInit
_pal_lld_setgroupmode
chThdCreateStatic
__do_copy_data
__do_clear_bss
