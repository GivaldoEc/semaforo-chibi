   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb,"ax",@progbits
  11               	.global	vt_cb
  13               	vt_cb:
  14               	.LFB249:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** #include "chprintf.h"
  20:main.c        **** 
  21:main.c        **** #define QUEUE_SIZE 128
  22:main.c        **** 
  23:main.c        **** /* Definições de pinos*/
  24:main.c        **** // LEDS
  25:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  26:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  27:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  28:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  29:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  30:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  31:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  32:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  33:main.c        **** 
  34:main.c        **** // Botões
  35:main.c        **** #define AMB_PRIM PAL_LINE(IOPORT3, 3)
  36:main.c        **** #define AMB_SEC PAL_LINE(IOPORT3, 5)
  37:main.c        **** #define SEC_FLAG PAL_LINE(IOPORT3, 4)
  38:main.c        **** #define PED_FLAG PAL_LINE(IOPORT3, 2)
  39:main.c        **** 
  40:main.c        **** // Buffer
  41:main.c        **** static msg_t queue[QUEUE_SIZE], *rdp, *wrp;
  42:main.c        **** static size_t qsize;
  43:main.c        **** static mutex_t qmtx;
  44:main.c        **** static condition_variable_t qempty;
  45:main.c        **** static condition_variable_t qfull;
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** void queueInit(void);
  49:main.c        **** void enqueue(msg_t msg);
  50:main.c        **** msg_t dequeue(void);
  51:main.c        **** uint8_t button_check(ioline_t line, uint8_t button);
  52:main.c        **** void vt_cb(void *arg);
  53:main.c        **** 
  54:main.c        **** enum
  55:main.c        **** {
  56:main.c        ****   SECUNDARIO = 1,
  57:main.c        ****   PEDESTRE,
  58:main.c        ****   AMB_PRIMARIO,
  59:main.c        ****   AMB_SECUNDARIO,
  60:main.c        ****   PRIMARIO
  61:main.c        **** };
  62:main.c        **** 
  63:main.c        **** enum
  64:main.c        **** {
  65:main.c        ****   VERDE_LOCKED_PRIM,
  66:main.c        ****   VERDE_IDLE_PRIM,
  67:main.c        ****   AMARELO_PED_PRIM,
  68:main.c        ****   AMARELO_SEC_PRIM,
  69:main.c        ****   VERDE_LOCKED_SEC,
  70:main.c        ****   AMARELO_PRIM_SEC,
  71:main.c        ****   VERDE_LOCKED_PED,
  72:main.c        ****   PISCANDO_SEC,
  73:main.c        ****   PISCANDO_PRIM
  74:main.c        **** };
  75:main.c        **** 
  76:main.c        **** /* Estado inicial */
  77:main.c        **** uint8_t g_state = VERDE_LOCKED_PRIM;
  78:main.c        **** 
  79:main.c        **** /* Flags timers */
  80:main.c        **** uint8_t main_vt_flag = 0;
  81:main.c        **** 
  82:main.c        **** /*
  83:main.c        ****  * LED blinker thread, times are in milliseconds.
  84:main.c        ****  */
  85:main.c        **** 
  86:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  87:main.c        **** static THD_FUNCTION(Thread1, arg)
  88:main.c        **** {
  89:main.c        ****   msg_t ev;
  90:main.c        ****   virtual_timer_t main_vt;
  91:main.c        **** 
  92:main.c        ****   chVTObjectInit(&main_vt);
  93:main.c        **** 
  94:main.c        ****   /* Flags fsm */
  95:main.c        ****   uint8_t flag_amb_prim, flag_amb_sec, flag_ped, flag_sec;
  96:main.c        ****   uint8_t prev_state = PEDESTRE;
  97:main.c        ****   
  98:main.c        ****   while (1)
  99:main.c        ****   {
 100:main.c        ****     switch (g_state) {
 101:main.c        ****       case VERDE_LOCKED_PRIM:
 102:main.c        ****         palClearLine(PRIMARIO_VERMELHO);
 103:main.c        ****         palSetLine(PRIMARIO_VERDE);
 104:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 105:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 106:main.c        ****         if (prev_state == SECUNDARIO) {
 107:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 108:main.c        ****           while (!main_vt_flag) {
 109:main.c        ****             if (qsize > 0) {
 110:main.c        ****               ev = dequeue();
 111:main.c        ****               if (ev == AMB_PRIMARIO) {
 112:main.c        ****                 flag_amb_prim = !flag_amb_prim;
 113:main.c        ****               } else if (ev == AMB_SECUNDARIO) {
 114:main.c        ****                 flag_amb_sec = 1;
 115:main.c        ****               } else if (ev == PEDESTRE) {
 116:main.c        ****                 flag_ped = 1;
 117:main.c        ****               } else if (ev == SECUNDARIO) {
 118:main.c        ****                 flag_sec = 1;
 119:main.c        ****               }
 120:main.c        ****             }
 121:main.c        ****             chThdSleepMilliseconds(100);
 122:main.c        ****           }
 123:main.c        ****         }
 124:main.c        ****         main_vt_flag = 0;
 125:main.c        ****         chVTSet(&main_vt, TIME_MS2I(prev_state == SECUNDARIO ? 5000 : 10000), (vtfunc_t)vt_cb, (voi
 126:main.c        ****         while (!main_vt_flag) {
 127:main.c        ****           if (qsize > 0) {
 128:main.c        ****             ev = dequeue();
 129:main.c        ****             if (ev == AMB_SECUNDARIO || flag_amb_sec == 1) {
 130:main.c        ****               flag_amb_sec = 1;
 131:main.c        ****               chVTReset(&main_vt);
 132:main.c        ****               main_vt_flag = 1;
 133:main.c        ****             } 
 134:main.c        ****             if (ev == PEDESTRE) {
 135:main.c        ****               flag_ped = 1;
 136:main.c        ****             } 
 137:main.c        ****             if (ev == SECUNDARIO) {
 138:main.c        ****               flag_sec = 1;
 139:main.c        ****             } 
 140:main.c        ****             if (ev == AMB_PRIMARIO) {
 141:main.c        ****               flag_amb_prim = !flag_amb_prim;
 142:main.c        ****             }
 143:main.c        ****           }
 144:main.c        ****           chThdSleepMilliseconds(100);
 145:main.c        ****         }
 146:main.c        ****         main_vt_flag = 0;
 147:main.c        ****         g_state = VERDE_IDLE_PRIM;
 148:main.c        ****         break;
 149:main.c        ****       case VERDE_IDLE_PRIM:
 150:main.c        ****         if (qsize > 0) {
 151:main.c        ****           ev = dequeue();
 152:main.c        ****           if (ev == AMB_PRIMARIO) {
 153:main.c        ****           flag_amb_prim = !flag_amb_prim;
 154:main.c        ****           } 
 155:main.c        ****           else if ((ev == AMB_SECUNDARIO)) {
 156:main.c        ****               flag_amb_sec = 1;
 157:main.c        ****               flag_sec = 1;
 158:main.c        ****           } 
 159:main.c        ****           else if (ev == PEDESTRE) {
 160:main.c        ****               flag_ped = 1;
 161:main.c        ****           } 
 162:main.c        ****           else if (ev == SECUNDARIO) {
 163:main.c        ****               flag_sec = 1;
 164:main.c        ****           }
 165:main.c        ****         }
 166:main.c        **** 
 167:main.c        ****         if (flag_amb_sec &! flag_amb_prim) {
 168:main.c        ****           g_state = AMARELO_SEC_PRIM;
 169:main.c        ****           palClearLine(PRIMARIO_VERDE);
 170:main.c        ****         } 
 171:main.c        ****         else if (flag_ped &! flag_amb_prim) {
 172:main.c        ****           g_state = AMARELO_PED_PRIM;
 173:main.c        ****           palClearLine(PRIMARIO_VERDE);
 174:main.c        ****         } 
 175:main.c        ****         else if (flag_sec &! flag_amb_prim) {
 176:main.c        ****           g_state = AMARELO_SEC_PRIM;
 177:main.c        ****           palClearLine(PRIMARIO_VERDE);
 178:main.c        ****         }       
 179:main.c        ****         break;
 180:main.c        ****       case AMARELO_SEC_PRIM:
 181:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 182:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 183:main.c        ****         while (!main_vt_flag) {
 184:main.c        ****           if (qsize > 0) {
 185:main.c        ****             ev = dequeue();
 186:main.c        ****             if (ev == AMB_PRIMARIO) {
 187:main.c        ****               flag_amb_prim = 1;
 188:main.c        ****             } 
 189:main.c        ****             else if ((ev == AMB_SECUNDARIO)) {
 190:main.c        ****               flag_amb_sec = 1;
 191:main.c        ****               flag_sec = 1;
 192:main.c        ****             } 
 193:main.c        ****             else if (ev == PEDESTRE) {
 194:main.c        ****               flag_ped = 1;
 195:main.c        ****             } 
 196:main.c        ****             else if (ev == SECUNDARIO) {
 197:main.c        ****               flag_sec = 1;
 198:main.c        ****             }
 199:main.c        ****           }
 200:main.c        ****           chThdSleepMilliseconds(100);
 201:main.c        ****         }
 202:main.c        ****         main_vt_flag = 0;
 203:main.c        ****         g_state = VERDE_LOCKED_SEC;
 204:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 205:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 206:main.c        ****         prev_state = PRIMARIO;
 207:main.c        ****         break;
 208:main.c        ****       case AMARELO_PED_PRIM:
 209:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 210:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 211:main.c        ****         while (!main_vt_flag) {
 212:main.c        ****           if (qsize > 0) {
 213:main.c        ****             ev = dequeue();
 214:main.c        ****             if (ev == AMB_PRIMARIO) {
 215:main.c        ****               flag_amb_prim = 1;
 216:main.c        ****             } 
 217:main.c        ****             else if ((ev == AMB_SECUNDARIO)) {
 218:main.c        ****               flag_amb_sec = 1;
 219:main.c        ****               flag_sec = 1;
 220:main.c        ****             } 
 221:main.c        ****             else if (ev == PEDESTRE) {
 222:main.c        ****               flag_ped = 1;
 223:main.c        ****             } 
 224:main.c        ****             else if (ev == SECUNDARIO) {
 225:main.c        ****               flag_sec = 1;
 226:main.c        ****             }
 227:main.c        ****           }
 228:main.c        ****           chThdSleepMilliseconds(100);
 229:main.c        ****         }
 230:main.c        ****         main_vt_flag = 0;
 231:main.c        ****         g_state = VERDE_LOCKED_PED;
 232:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 233:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 234:main.c        ****         prev_state = PRIMARIO;
 235:main.c        ****         break;
 236:main.c        ****       case VERDE_LOCKED_SEC:
 237:main.c        ****         palClearLine(SECUNDARIO_VERMELHO);
 238:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 239:main.c        ****         if (prev_state == PRIMARIO) {
 240:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 241:main.c        ****           while (!main_vt_flag) {
 242:main.c        ****             if (qsize > 0) {
 243:main.c        ****               ev = dequeue();
 244:main.c        ****               if (ev == AMB_PRIMARIO) {
 245:main.c        ****                 flag_amb_prim = 1;
 246:main.c        ****               } 
 247:main.c        ****               else if ((ev == AMB_SECUNDARIO)) {
 248:main.c        ****                 flag_amb_sec = !flag_amb_sec;
 249:main.c        ****                 flag_sec = 1;
 250:main.c        ****               } 
 251:main.c        ****               else if (ev == PEDESTRE) {
 252:main.c        ****                 flag_ped = 1;
 253:main.c        ****               } 
 254:main.c        ****             }
 255:main.c        ****             chThdSleepMilliseconds(100);
 256:main.c        ****           }
 257:main.c        ****         }
 258:main.c        ****         main_vt_flag = 0;
 259:main.c        ****         chVTSet(&main_vt, TIME_MS2I((prev_state == PRIMARIO) ? 1000 : 6000), (vtfunc_t)vt_cb, (void
 260:main.c        ****         while (!main_vt_flag) {
 261:main.c        ****           if (qsize > 0) {
 262:main.c        ****             ev = dequeue();
 263:main.c        ****             if (ev == AMB_PRIMARIO) {
 264:main.c        ****               flag_amb_prim = 1;
 265:main.c        ****               chVTReset(&main_vt);
 266:main.c        ****               main_vt_flag = 1;
 267:main.c        ****             } 
 268:main.c        ****             else if ((ev == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 269:main.c        ****               flag_amb_sec = 1;
 270:main.c        ****               chVTReset(&main_vt);
 271:main.c        ****               main_vt_flag = 1;
 272:main.c        ****             } 
 273:main.c        ****             else if ((ev == AMB_SECUNDARIO) && flag_amb_sec == 1) {
 274:main.c        ****               flag_amb_sec = 0;
 275:main.c        ****             } 
 276:main.c        ****             else if (ev == PEDESTRE) {
 277:main.c        ****               flag_ped = 1;
 278:main.c        ****             }
 279:main.c        ****           }
 280:main.c        ****           chThdSleepMilliseconds(100);
 281:main.c        ****         }
 282:main.c        ****         main_vt_flag = 0;
 283:main.c        ****         while (flag_amb_sec) {
 284:main.c        ****           ev = dequeue();
 285:main.c        ****           if (ev == AMB_SECUNDARIO) {
 286:main.c        ****             flag_amb_sec = 0;
 287:main.c        ****           }
 288:main.c        ****         }
 289:main.c        ****         g_state = AMARELO_PRIM_SEC;
 290:main.c        ****         flag_sec = 0;
 291:main.c        ****         palClearLine(SECUNDARIO_VERDE);
 292:main.c        ****         break;
 293:main.c        ****       case AMARELO_PRIM_SEC:
 294:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 295:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 296:main.c        ****         while (!main_vt_flag) {
 297:main.c        ****           if (qsize > 0) {
 298:main.c        ****             ev = dequeue();
 299:main.c        ****             if (ev == AMB_PRIMARIO) {
 300:main.c        ****               flag_amb_prim = 1;
 301:main.c        ****             } 
 302:main.c        ****             else if ((ev == AMB_SECUNDARIO)) {
 303:main.c        ****               flag_amb_sec = 1;
 304:main.c        ****               flag_sec = 1;
 305:main.c        ****             } 
 306:main.c        ****             else if (ev == PEDESTRE) {
 307:main.c        ****               flag_ped = 1;
 308:main.c        ****             } 
 309:main.c        ****             else if (ev == SECUNDARIO) {
 310:main.c        ****               flag_sec = 1;
 311:main.c        ****             }
 312:main.c        ****           }
 313:main.c        ****           chThdSleepMilliseconds(100);
 314:main.c        ****         }
 315:main.c        ****         main_vt_flag = 0;
 316:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 317:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 318:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 319:main.c        ****         prev_state = SECUNDARIO;
 320:main.c        ****         break;
 321:main.c        ****       case VERDE_LOCKED_PED:
 322:main.c        ****         palClearLine(PEDESTRE_VERMELHO);
 323:main.c        ****         palSetLine(PEDESTRE_VERDE);
 324:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 325:main.c        ****         while (!main_vt_flag) {
 326:main.c        ****           if (qsize > 0) {
 327:main.c        ****             ev = dequeue();
 328:main.c        ****             if (ev == AMB_PRIMARIO) {
 329:main.c        ****               flag_amb_prim = 1;
 330:main.c        ****             } 
 331:main.c        ****             else if ((ev == AMB_SECUNDARIO)) {
 332:main.c        ****               flag_amb_sec = 1;
 333:main.c        ****             } 
 334:main.c        ****             else if (ev == SECUNDARIO) {
 335:main.c        ****               flag_sec = 1;
 336:main.c        ****             }
 337:main.c        ****           }
 338:main.c        ****           
 339:main.c        ****           chThdSleepMilliseconds(100);
 340:main.c        ****         }
 341:main.c        ****         main_vt_flag = 0;
 342:main.c        ****         if (flag_amb_sec || flag_sec) {
 343:main.c        ****           g_state = PISCANDO_SEC;
 344:main.c        ****         } else {
 345:main.c        ****           g_state = PISCANDO_PRIM;
 346:main.c        ****         }
 347:main.c        ****         palClearLine(PEDESTRE_VERDE);
 348:main.c        ****         flag_ped = 0;
 349:main.c        ****         break;
 350:main.c        ****       case PISCANDO_SEC:
 351:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 352:main.c        ****         while (!main_vt_flag) {
 353:main.c        ****           if (qsize > 0) {
 354:main.c        ****             ev = dequeue();
 355:main.c        ****             if (ev == AMB_PRIMARIO) {
 356:main.c        ****               flag_amb_prim = 1;
 357:main.c        ****             } 
 358:main.c        ****             else if ((ev == AMB_SECUNDARIO)) {
 359:main.c        ****               flag_amb_sec = 1;
 360:main.c        ****               flag_sec = 1;
 361:main.c        ****             } 
 362:main.c        ****             else if (ev == PEDESTRE) {
 363:main.c        ****               flag_ped = 1;
 364:main.c        ****             } 
 365:main.c        ****             else if (ev == SECUNDARIO) {
 366:main.c        ****               flag_sec = 1;
 367:main.c        ****             }
 368:main.c        ****           }
 369:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 370:main.c        ****           chThdSleepMilliseconds(125);
 371:main.c        ****         }
 372:main.c        ****         main_vt_flag = 0;
 373:main.c        ****         g_state = VERDE_LOCKED_SEC;
 374:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 375:main.c        ****         prev_state = PEDESTRE;
 376:main.c        ****         break;
 377:main.c        ****       case PISCANDO_PRIM:
 378:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 379:main.c        ****         while (!main_vt_flag) {
 380:main.c        ****           if (qsize > 0) {
 381:main.c        ****             ev = dequeue();
 382:main.c        ****             if (ev == AMB_PRIMARIO) {
 383:main.c        ****               flag_amb_prim = 1;
 384:main.c        ****             } 
 385:main.c        ****             else if ((ev == AMB_SECUNDARIO)) {
 386:main.c        ****               flag_amb_sec = 1;
 387:main.c        ****               flag_sec = 1;
 388:main.c        ****             } 
 389:main.c        ****             else if (ev == PEDESTRE) {
 390:main.c        ****               flag_ped = 1;
 391:main.c        ****             } 
 392:main.c        ****             else if (ev == SECUNDARIO) {
 393:main.c        ****               flag_sec = 1;
 394:main.c        ****             }
 395:main.c        ****           }
 396:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 397:main.c        ****           chThdSleepMilliseconds(125);
 398:main.c        ****         }
 399:main.c        ****         main_vt_flag = 0;
 400:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 401:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 402:main.c        ****         prev_state = PEDESTRE;
 403:main.c        ****         break;
 404:main.c        ****       default:
 405:main.c        ****         palSetLine(PEDESTRE_VERDE);
 406:main.c        ****     }
 407:main.c        ****     chThdSleepMilliseconds(100);
 408:main.c        ****   }
 409:main.c        **** }
 410:main.c        **** 
 411:main.c        **** /*
 412:main.c        ****  * Application entry point.
 413:main.c        ****  */
 414:main.c        **** int main(void)
 415:main.c        **** {
 416:main.c        ****   SerialConfig config = {.sc_brr = UBRR2x(9600),
 417:main.c        ****                          .sc_bits_per_char = USART_CHAR_SIZE_8
 418:main.c        ****   };
 419:main.c        **** 
 420:main.c        ****   queueInit();
 421:main.c        ****   /*
 422:main.c        ****    * System initializations.
 423:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
 424:main.c        ****    *   and performs the board-specific initializations.
 425:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
 426:main.c        ****    *   RTOS is active.
 427:main.c        ****    */
 428:main.c        ****   halInit();
 429:main.c        ****   chSysInit();
 430:main.c        **** 
 431:main.c        ****   sdStart(&SD1, &config);
 432:main.c        **** 
 433:main.c        ****   /* Configuração dos botões */
 434:main.c        ****   palSetLineMode(PED_FLAG, PAL_MODE_INPUT_PULLUP);
 435:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 436:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 437:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 438:main.c        **** 
 439:main.c        ****   // Pedestre
 440:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 441:main.c        ****   palClearLine(PEDESTRE_VERDE);
 442:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 443:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 444:main.c        **** 
 445:main.c        ****   // Primário
 446:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 447:main.c        ****   palClearLine(PRIMARIO_VERDE);
 448:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 449:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 450:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 451:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 452:main.c        **** 
 453:main.c        ****   // Secundário
 454:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 455:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 456:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 457:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 458:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 459:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 460:main.c        **** 
 461:main.c        ****   /*
 462:main.c        ****    * Starts the LED blinker thread.
 463:main.c        ****    */
 464:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 465:main.c        **** 
 466:main.c        ****   while (1)
 467:main.c        ****   {
 468:main.c        ****     if (button_check(AMB_SEC, 1))
 469:main.c        ****     {
 470:main.c        ****       enqueue(AMB_SECUNDARIO);
 471:main.c        ****     }
 472:main.c        ****     else if (button_check(AMB_PRIM, 2))
 473:main.c        ****     {
 474:main.c        ****       enqueue(AMB_PRIMARIO);
 475:main.c        ****     }
 476:main.c        ****     else if (button_check(SEC_FLAG, 3))
 477:main.c        ****     {
 478:main.c        ****       enqueue(SECUNDARIO);
 479:main.c        ****     }
 480:main.c        ****     else if (button_check(PED_FLAG, 4))
 481:main.c        ****     {
 482:main.c        ****       enqueue(PEDESTRE);
 483:main.c        ****     }
 484:main.c        ****     /* Debouncing. */
 485:main.c        ****     chThdSleepMilliseconds(50);
 486:main.c        ****   }
 487:main.c        **** }
 488:main.c        **** 
 489:main.c        **** /*
 490:main.c        ****  * Synchronized queue initialization.
 491:main.c        ****  */
 492:main.c        **** void queueInit(void) {
 493:main.c        ****  
 494:main.c        ****   chMtxObjectInit(&qmtx);
 495:main.c        ****   chCondObjectInit(&qempty);
 496:main.c        ****   chCondObjectInit(&qfull);
 497:main.c        ****  
 498:main.c        ****   rdp = wrp = &queue[0];
 499:main.c        ****   qsize = 0;
 500:main.c        **** }
 501:main.c        **** 
 502:main.c        **** /*
 503:main.c        ****  * Writes a message into the queue, if the queue is full waits
 504:main.c        ****  * for a free slot.
 505:main.c        ****  */
 506:main.c        **** void enqueue(msg_t msg) {
 507:main.c        ****  
 508:main.c        ****   /* Entering monitor.*/
 509:main.c        ****   chMtxLock(&qmtx);
 510:main.c        ****  
 511:main.c        ****   /* Waiting for space in the queue.*/
 512:main.c        ****   while (qsize >= QUEUE_SIZE)
 513:main.c        ****     chCondWait(&qfull);
 514:main.c        ****  
 515:main.c        ****   /* Writing the message in the queue.*/  
 516:main.c        ****   *wrp = msg;
 517:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 518:main.c        ****     wrp = &queue[0];
 519:main.c        ****   qsize++;
 520:main.c        ****  
 521:main.c        ****   /* Signaling that there is at least a message.*/
 522:main.c        ****   chCondSignal(&qempty);
 523:main.c        ****  
 524:main.c        ****   /* Leaving monitor.*/
 525:main.c        ****   chMtxUnlock(&qmtx);
 526:main.c        **** }
 527:main.c        **** 
 528:main.c        **** /*
 529:main.c        ****  * Reads a message from the queue, if the queue is empty waits
 530:main.c        ****  * for a message.
 531:main.c        ****  */
 532:main.c        **** msg_t dequeue(void) {
 533:main.c        ****   msg_t msg;
 534:main.c        ****  
 535:main.c        ****   /* Entering monitor.*/
 536:main.c        ****   chMtxLock(&qmtx);
 537:main.c        ****  
 538:main.c        ****   /* Waiting for messages in the queue.*/
 539:main.c        ****   while (qsize == 0)
 540:main.c        ****     chCondWait(&qempty);
 541:main.c        ****  
 542:main.c        ****   /* Reading the message from the queue.*/  
 543:main.c        ****   msg = *rdp;
 544:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 545:main.c        ****     rdp = &queue[0];
 546:main.c        ****   qsize--;
 547:main.c        ****  
 548:main.c        ****   /* Signaling that there is at least one free slot.*/
 549:main.c        ****   chCondSignal(&qfull);
 550:main.c        ****  
 551:main.c        ****   /* Leaving monitor.*/
 552:main.c        ****   chMtxUnlock(&qmtx);
 553:main.c        ****  
 554:main.c        ****   return msg;
 555:main.c        **** }
 556:main.c        **** 
 557:main.c        **** /* Ficou muito hard coded */
 558:main.c        **** uint8_t button_check(ioline_t line, uint8_t button) {
 559:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 560:main.c        ****   uint8_t w, x;
 561:main.c        **** 
 562:main.c        ****   if (button == 1) {
 563:main.c        ****     x1 = palReadLine(line);
 564:main.c        ****     w = x1^old_x1;
 565:main.c        ****     old_x1 = x1;
 566:main.c        ****     x = x1;
 567:main.c        ****   } else if (button == 2) {
 568:main.c        ****     x2 = palReadLine(line);
 569:main.c        ****     w = x2^old_x2;
 570:main.c        ****     old_x2 = x2;
 571:main.c        ****     x = x2;
 572:main.c        ****   } else if (button == 3) {
 573:main.c        ****     x3 = palReadLine(line);
 574:main.c        ****     w = x3^old_x3;
 575:main.c        ****     old_x3 = x3;
 576:main.c        ****     x = x3;
 577:main.c        ****   } else if (button == 4) {
 578:main.c        ****     x4 = palReadLine(line);
 579:main.c        ****     w = x4^old_x4;
 580:main.c        ****     old_x4 = x4;
 581:main.c        ****     x = x4;
 582:main.c        ****   }
 583:main.c        ****   
 584:main.c        ****   return w &! x;
 585:main.c        **** }
 586:main.c        **** 
 587:main.c        **** void vt_cb(void *arg)
 588:main.c        **** {
  16               		.loc 1 588 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 589:main.c        ****   chSysLockFromISR();
 590:main.c        ****   main_vt_flag = 1;
  23               		.loc 1 590 0
  24 0000 81E0      		ldi r24,lo8(1)
  25               	.LVL1:
  26 0002 8093 0000 		sts main_vt_flag,r24
  27               	/* epilogue start */
 591:main.c        ****   chSysUnlockFromISR();
 592:main.c        **** }
  28               		.loc 1 592 0
  29 0006 0895      		ret
  30               		.cfi_endproc
  31               	.LFE249:
  33               		.section	.text.queueInit,"ax",@progbits
  34               	.global	queueInit
  36               	queueInit:
  37               	.LFB245:
 492:main.c        ****  
  38               		.loc 1 492 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
 494:main.c        ****   chCondObjectInit(&qempty);
  44               		.loc 1 494 0
  45 0000 80E0      		ldi r24,lo8(qmtx)
  46 0002 90E0      		ldi r25,hi8(qmtx)
  47 0004 0E94 0000 		call chMtxObjectInit
  48               	.LVL2:
 495:main.c        ****   chCondObjectInit(&qfull);
  49               		.loc 1 495 0
  50 0008 80E0      		ldi r24,lo8(qempty)
  51 000a 90E0      		ldi r25,hi8(qempty)
  52 000c 0E94 0000 		call chCondObjectInit
  53               	.LVL3:
 496:main.c        ****  
  54               		.loc 1 496 0
  55 0010 80E0      		ldi r24,lo8(qfull)
  56 0012 90E0      		ldi r25,hi8(qfull)
  57 0014 0E94 0000 		call chCondObjectInit
  58               	.LVL4:
 498:main.c        ****   qsize = 0;
  59               		.loc 1 498 0
  60 0018 80E0      		ldi r24,lo8(queue)
  61 001a 90E0      		ldi r25,hi8(queue)
  62 001c 9093 0000 		sts wrp+1,r25
  63 0020 8093 0000 		sts wrp,r24
  64 0024 9093 0000 		sts rdp+1,r25
  65 0028 8093 0000 		sts rdp,r24
 499:main.c        **** }
  66               		.loc 1 499 0
  67 002c 1092 0000 		sts qsize+1,__zero_reg__
  68 0030 1092 0000 		sts qsize,__zero_reg__
  69               	/* epilogue start */
 500:main.c        **** 
  70               		.loc 1 500 0
  71 0034 0895      		ret
  72               		.cfi_endproc
  73               	.LFE245:
  75               		.section	.text.enqueue,"ax",@progbits
  76               	.global	enqueue
  78               	enqueue:
  79               	.LFB246:
 506:main.c        ****  
  80               		.loc 1 506 0
  81               		.cfi_startproc
  82               	.LVL5:
  83 0000 CF93      		push r28
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 28, -2
  87 0002 DF93      		push r29
  88               	.LCFI1:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 29, -3
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 2 */
  94               	.L__stack_usage = 2
  95 0004 EC01      		movw r28,r24
 509:main.c        ****  
  96               		.loc 1 509 0
  97 0006 80E0      		ldi r24,lo8(qmtx)
  98 0008 90E0      		ldi r25,hi8(qmtx)
  99               	.LVL6:
 100 000a 0E94 0000 		call chMtxLock
 101               	.LVL7:
 512:main.c        ****     chCondWait(&qfull);
 102               		.loc 1 512 0
 103 000e 8091 0000 		lds r24,qsize
 104 0012 9091 0000 		lds r25,qsize+1
 105 0016 8038      		cpi r24,-128
 106 0018 9105      		cpc r25,__zero_reg__
 107 001a 00F0      		brlo .L5
 108               	.L6:
 513:main.c        ****  
 109               		.loc 1 513 0
 110 001c 80E0      		ldi r24,lo8(qfull)
 111 001e 90E0      		ldi r25,hi8(qfull)
 112 0020 0E94 0000 		call chCondWait
 113               	.LVL8:
 512:main.c        ****     chCondWait(&qfull);
 114               		.loc 1 512 0
 115 0024 8091 0000 		lds r24,qsize
 116 0028 9091 0000 		lds r25,qsize+1
 117 002c 8038      		cpi r24,-128
 118 002e 9105      		cpc r25,__zero_reg__
 119 0030 00F4      		brsh .L6
 120               	.L5:
 516:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 121               		.loc 1 516 0
 122 0032 E091 0000 		lds r30,wrp
 123 0036 F091 0000 		lds r31,wrp+1
 124 003a C193      		st Z+,r28
 125 003c D193      		st Z+,r29
 517:main.c        ****     wrp = &queue[0];
 126               		.loc 1 517 0
 127 003e 20E0      		ldi r18,hi8(queue+256)
 128 0040 E030      		cpi r30,lo8(queue+256)
 129 0042 F207      		cpc r31,r18
 130 0044 00F0      		brlo .L10
 518:main.c        ****   qsize++;
 131               		.loc 1 518 0
 132 0046 20E0      		ldi r18,lo8(queue)
 133 0048 30E0      		ldi r19,hi8(queue)
 134 004a 3093 0000 		sts wrp+1,r19
 135 004e 2093 0000 		sts wrp,r18
 136               	.L8:
 519:main.c        ****  
 137               		.loc 1 519 0
 138 0052 0196      		adiw r24,1
 139 0054 9093 0000 		sts qsize+1,r25
 140 0058 8093 0000 		sts qsize,r24
 522:main.c        ****  
 141               		.loc 1 522 0
 142 005c 80E0      		ldi r24,lo8(qempty)
 143 005e 90E0      		ldi r25,hi8(qempty)
 144 0060 0E94 0000 		call chCondSignal
 145               	.LVL9:
 525:main.c        **** }
 146               		.loc 1 525 0
 147 0064 80E0      		ldi r24,lo8(qmtx)
 148 0066 90E0      		ldi r25,hi8(qmtx)
 149               	/* epilogue start */
 526:main.c        **** 
 150               		.loc 1 526 0
 151 0068 DF91      		pop r29
 152 006a CF91      		pop r28
 153               	.LVL10:
 525:main.c        **** }
 154               		.loc 1 525 0
 155 006c 0C94 0000 		jmp chMtxUnlock
 156               	.LVL11:
 157               	.L10:
 517:main.c        ****     wrp = &queue[0];
 158               		.loc 1 517 0
 159 0070 F093 0000 		sts wrp+1,r31
 160 0074 E093 0000 		sts wrp,r30
 161 0078 00C0      		rjmp .L8
 162               		.cfi_endproc
 163               	.LFE246:
 165               		.section	.text.dequeue,"ax",@progbits
 166               	.global	dequeue
 168               	dequeue:
 169               	.LFB247:
 532:main.c        ****   msg_t msg;
 170               		.loc 1 532 0
 171               		.cfi_startproc
 172 0000 CF93      		push r28
 173               	.LCFI2:
 174               		.cfi_def_cfa_offset 3
 175               		.cfi_offset 28, -2
 176 0002 DF93      		push r29
 177               	.LCFI3:
 178               		.cfi_def_cfa_offset 4
 179               		.cfi_offset 29, -3
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 2 */
 183               	.L__stack_usage = 2
 536:main.c        ****  
 184               		.loc 1 536 0
 185 0004 80E0      		ldi r24,lo8(qmtx)
 186 0006 90E0      		ldi r25,hi8(qmtx)
 187 0008 0E94 0000 		call chMtxLock
 188               	.LVL12:
 539:main.c        ****     chCondWait(&qempty);
 189               		.loc 1 539 0
 190 000c 8091 0000 		lds r24,qsize
 191 0010 9091 0000 		lds r25,qsize+1
 192 0014 0097      		sbiw r24,0
 193 0016 01F4      		brne .L12
 194               	.L13:
 540:main.c        ****  
 195               		.loc 1 540 0
 196 0018 80E0      		ldi r24,lo8(qempty)
 197 001a 90E0      		ldi r25,hi8(qempty)
 198 001c 0E94 0000 		call chCondWait
 199               	.LVL13:
 539:main.c        ****     chCondWait(&qempty);
 200               		.loc 1 539 0
 201 0020 8091 0000 		lds r24,qsize
 202 0024 9091 0000 		lds r25,qsize+1
 203 0028 0097      		sbiw r24,0
 204 002a 01F0      		breq .L13
 205               	.L12:
 543:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 206               		.loc 1 543 0
 207 002c E091 0000 		lds r30,rdp
 208 0030 F091 0000 		lds r31,rdp+1
 209 0034 C191      		ld r28,Z+
 210 0036 D191      		ld r29,Z+
 211               	.LVL14:
 544:main.c        ****     rdp = &queue[0];
 212               		.loc 1 544 0
 213 0038 20E0      		ldi r18,hi8(queue+256)
 214 003a E030      		cpi r30,lo8(queue+256)
 215 003c F207      		cpc r31,r18
 216 003e 00F0      		brlo .L18
 545:main.c        ****   qsize--;
 217               		.loc 1 545 0
 218 0040 20E0      		ldi r18,lo8(queue)
 219 0042 30E0      		ldi r19,hi8(queue)
 220 0044 3093 0000 		sts rdp+1,r19
 221 0048 2093 0000 		sts rdp,r18
 222               	.L15:
 546:main.c        ****  
 223               		.loc 1 546 0
 224 004c 0197      		sbiw r24,1
 225 004e 9093 0000 		sts qsize+1,r25
 226 0052 8093 0000 		sts qsize,r24
 549:main.c        ****  
 227               		.loc 1 549 0
 228 0056 80E0      		ldi r24,lo8(qfull)
 229 0058 90E0      		ldi r25,hi8(qfull)
 230 005a 0E94 0000 		call chCondSignal
 231               	.LVL15:
 552:main.c        ****  
 232               		.loc 1 552 0
 233 005e 80E0      		ldi r24,lo8(qmtx)
 234 0060 90E0      		ldi r25,hi8(qmtx)
 235 0062 0E94 0000 		call chMtxUnlock
 236               	.LVL16:
 555:main.c        **** 
 237               		.loc 1 555 0
 238 0066 CE01      		movw r24,r28
 239               	/* epilogue start */
 240 0068 DF91      		pop r29
 241 006a CF91      		pop r28
 242               	.LVL17:
 243 006c 0895      		ret
 244               	.LVL18:
 245               	.L18:
 544:main.c        ****     rdp = &queue[0];
 246               		.loc 1 544 0
 247 006e F093 0000 		sts rdp+1,r31
 248 0072 E093 0000 		sts rdp,r30
 249 0076 00C0      		rjmp .L15
 250               		.cfi_endproc
 251               	.LFE247:
 253               		.section	.text.Thread1,"ax",@progbits
 255               	Thread1:
 256               	.LFB243:
  88:main.c        ****   msg_t ev;
 257               		.loc 1 88 0
 258               		.cfi_startproc
 259               	.LVL19:
 260 0000 CF93      		push r28
 261               	.LCFI4:
 262               		.cfi_def_cfa_offset 3
 263               		.cfi_offset 28, -2
 264 0002 DF93      		push r29
 265               	.LCFI5:
 266               		.cfi_def_cfa_offset 4
 267               		.cfi_offset 29, -3
 268 0004 CDB7      		in r28,__SP_L__
 269 0006 DEB7      		in r29,__SP_H__
 270               	.LCFI6:
 271               		.cfi_def_cfa_register 28
 272 0008 6197      		sbiw r28,17
 273               	.LCFI7:
 274               		.cfi_def_cfa_offset 21
 275 000a 0FB6      		in __tmp_reg__,__SREG__
 276 000c F894      		cli
 277 000e DEBF      		out __SP_H__,r29
 278 0010 0FBE      		out __SREG__,__tmp_reg__
 279 0012 CDBF      		out __SP_L__,r28
 280               	/* prologue: function */
 281               	/* frame size = 17 */
 282               	/* stack size = 19 */
 283               	.L__stack_usage = 19
 284               	.LVL20:
 285               	.LBB325:
 286               	.LBB326:
 287               		.file 2 "../../os/rt/include/chvt.h"
   1:../../os/rt/include/chvt.h **** /*
   2:../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chvt.h **** 
   5:../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chvt.h **** 
   7:../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chvt.h **** 
  11:../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chvt.h **** 
  16:../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chvt.h **** */
  19:../../os/rt/include/chvt.h **** 
  20:../../os/rt/include/chvt.h **** /**
  21:../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../os/rt/include/chvt.h ****  *
  24:../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../os/rt/include/chvt.h ****  * @{
  26:../../os/rt/include/chvt.h ****  */
  27:../../os/rt/include/chvt.h **** 
  28:../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../os/rt/include/chvt.h **** 
  31:../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../os/rt/include/chvt.h **** 
  35:../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../os/rt/include/chvt.h **** 
  39:../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../os/rt/include/chvt.h **** 
  43:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../os/rt/include/chvt.h **** #endif
  47:../../os/rt/include/chvt.h **** 
  48:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../os/rt/include/chvt.h **** #endif
  51:../../os/rt/include/chvt.h **** 
  52:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../os/rt/include/chvt.h **** #endif
  55:../../os/rt/include/chvt.h **** 
  56:../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../os/rt/include/chvt.h **** 
  60:../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../os/rt/include/chvt.h **** 
  64:../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../os/rt/include/chvt.h **** 
  68:../../os/rt/include/chvt.h **** /*
  69:../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../os/rt/include/chvt.h ****  */
  71:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../os/rt/include/chvt.h **** extern "C" {
  73:../../os/rt/include/chvt.h **** #endif
  74:../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:../../os/rt/include/chvt.h **** #endif
  85:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  86:../../os/rt/include/chvt.h **** }
  87:../../os/rt/include/chvt.h **** #endif
  88:../../os/rt/include/chvt.h **** 
  89:../../os/rt/include/chvt.h **** /*===========================================================================*/
  90:../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../os/rt/include/chvt.h **** 
  93:../../os/rt/include/chvt.h **** /**
  94:../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:../../os/rt/include/chvt.h ****  *
 100:../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:../../os/rt/include/chvt.h ****  *
 102:../../os/rt/include/chvt.h ****  * @init
 103:../../os/rt/include/chvt.h ****  */
 104:../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:../../os/rt/include/chvt.h **** 
 106:../../os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 288               		.loc 2 106 0
 289 0014 1A82      		std Y+2,__zero_reg__
 290 0016 1982      		std Y+1,__zero_reg__
 291               	.LVL21:
 292               	.LBE326:
 293               	.LBE325:
  96:main.c        ****   
 294               		.loc 1 96 0
 295 0018 82E0      		ldi r24,lo8(2)
 296               	.LVL22:
 297 001a 898B      		std Y+17,r24
 405:main.c        ****     }
 298               		.loc 1 405 0
 299 001c EE24      		clr r14
 300 001e E394      		inc r14
 301 0020 F12C      		mov r15,__zero_reg__
 387:main.c        ****             } 
 302               		.loc 1 387 0
 303 0022 3324      		clr r3
 304 0024 3394      		inc r3
 305 0026 9924      		clr r9
 306 0028 9394      		inc r9
 373:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 307               		.loc 1 373 0
 308 002a 54E0      		ldi r21,lo8(4)
 309 002c 852E      		mov r8,r21
 231:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 310               		.loc 1 231 0
 311 002e 66E0      		ldi r22,lo8(6)
 312 0030 262E      		mov r2,r22
 313 0032 00C0      		rjmp .L91
 314               	.LVL23:
 315               	.L20:
 405:main.c        ****     }
 316               		.loc 1 405 0
 317 0034 63E0      		ldi r22,lo8(3)
 318 0036 83E2      		ldi r24,lo8(35)
 319 0038 90E0      		ldi r25,0
 320 003a 0E94 0000 		call _pal_lld_setlineid
 321               	.LVL24:
 322 003e 0E94 0000 		call _pal_lld_getpadfromline
 323               	.LVL25:
 324 0042 782E      		mov r7,r24
 325 0044 63E0      		ldi r22,lo8(3)
 326 0046 83E2      		ldi r24,lo8(35)
 327 0048 90E0      		ldi r25,0
 328 004a 0E94 0000 		call _pal_lld_setlineid
 329               	.LVL26:
 330 004e 0E94 0000 		call _pal_lld_getportfromline
 331               	.LVL27:
 332 0052 FC01      		movw r30,r24
 333 0054 9281      		ldd r25,Z+2
 334 0056 9701      		movw r18,r14
 335 0058 00C0      		rjmp 2f
 336               		1:
 337 005a 220F      		lsl r18
 338               		2:
 339 005c 7A94      		dec r7
 340 005e 02F4      		brpl 1b
 341 0060 922B      		or r25,r18
 342 0062 9283      		std Z+2,r25
 343               	.LVL28:
 344               	.L44:
 407:main.c        ****   }
 345               		.loc 1 407 0
 346 0064 6BE1      		ldi r22,lo8(27)
 347 0066 76E0      		ldi r23,lo8(6)
 348 0068 80E0      		ldi r24,0
 349 006a 90E0      		ldi r25,0
 350 006c 0E94 0000 		call chThdSleep
 351               	.LVL29:
 352               	.L91:
 100:main.c        ****       case VERDE_LOCKED_PRIM:
 353               		.loc 1 100 0
 354 0070 E091 0000 		lds r30,g_state
 355 0074 E930      		cpi r30,lo8(9)
 356 0076 00F4      		brsh .L20
 357 0078 F0E0      		ldi r31,0
 358 007a E050      		subi r30,lo8(-(gs(.L22)))
 359 007c F040      		sbci r31,hi8(-(gs(.L22)))
 360 007e 0C94 0000 		jmp __tablejump2__
 361               		.p2align	1
 362               	.L22:
 363 0082 0000      		.word gs(.L21)
 364 0084 0000      		.word gs(.L23)
 365 0086 0000      		.word gs(.L24)
 366 0088 0000      		.word gs(.L25)
 367 008a 0000      		.word gs(.L26)
 368 008c 0000      		.word gs(.L27)
 369 008e 0000      		.word gs(.L28)
 370 0090 0000      		.word gs(.L29)
 371 0092 0000      		.word gs(.L30)
 372               	.L29:
 373               	.LVL30:
 374               	.LBB327:
 375               	.LBB328:
 376               	.LBB329:
 377               	.LBB330:
 378               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 379               		.loc 3 430 0
 380               	/* #APP */
 381               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 382 0094 F894      		cli
 383               	 ;  0 "" 2
 384               	.LVL31:
 385               	/* #NOAPP */
 386               	.LBE330:
 387               	.LBE329:
 388               	.LBE328:
 389               	.LBB331:
 390               	.LBB332:
 391               	.LBB333:
 392               	.LBB334:
 107:../../os/rt/include/chvt.h **** }
 108:../../os/rt/include/chvt.h **** 
 109:../../os/rt/include/chvt.h **** /**
 110:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 111:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:../../os/rt/include/chvt.h ****  *          invocation.
 113:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:../../os/rt/include/chvt.h ****  *          @p systime_t size.
 117:../../os/rt/include/chvt.h ****  *
 118:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:../../os/rt/include/chvt.h ****  *
 120:../../os/rt/include/chvt.h ****  * @xclass
 121:../../os/rt/include/chvt.h ****  */
 122:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:../../os/rt/include/chvt.h **** 
 124:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:../../os/rt/include/chvt.h ****   return port_timer_get_time();
 128:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:../../os/rt/include/chvt.h **** }
 130:../../os/rt/include/chvt.h **** 
 131:../../os/rt/include/chvt.h **** /**
 132:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 133:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:../../os/rt/include/chvt.h ****  *          invocation.
 135:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:../../os/rt/include/chvt.h ****  *
 137:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:../../os/rt/include/chvt.h ****  *
 139:../../os/rt/include/chvt.h ****  * @api
 140:../../os/rt/include/chvt.h ****  */
 141:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:../../os/rt/include/chvt.h ****   systime_t systime;
 143:../../os/rt/include/chvt.h **** 
 144:../../os/rt/include/chvt.h ****   chSysLock();
 145:../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:../../os/rt/include/chvt.h ****   chSysUnlock();
 147:../../os/rt/include/chvt.h **** 
 148:../../os/rt/include/chvt.h ****   return systime;
 149:../../os/rt/include/chvt.h **** }
 150:../../os/rt/include/chvt.h **** 
 151:../../os/rt/include/chvt.h **** /**
 152:../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:../../os/rt/include/chvt.h ****  *
 154:../../os/rt/include/chvt.h ****  * @param[in] start     start time
 155:../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:../../os/rt/include/chvt.h ****  *
 157:../../os/rt/include/chvt.h ****  * @xclass
 158:../../os/rt/include/chvt.h ****  */
 159:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:../../os/rt/include/chvt.h **** 
 161:../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:../../os/rt/include/chvt.h **** }
 163:../../os/rt/include/chvt.h **** 
 164:../../os/rt/include/chvt.h **** /**
 165:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:../../os/rt/include/chvt.h ****  *          window.
 167:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:../../os/rt/include/chvt.h ****  *          time window has zero size.
 169:../../os/rt/include/chvt.h ****  *
 170:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:../../os/rt/include/chvt.h ****  *
 175:../../os/rt/include/chvt.h ****  * @xclass
 176:../../os/rt/include/chvt.h ****  */
 177:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:../../os/rt/include/chvt.h **** 
 179:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:../../os/rt/include/chvt.h **** }
 181:../../os/rt/include/chvt.h **** 
 182:../../os/rt/include/chvt.h **** /**
 183:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:../../os/rt/include/chvt.h ****  *          window.
 185:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:../../os/rt/include/chvt.h ****  *          time window has zero size.
 187:../../os/rt/include/chvt.h ****  *
 188:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:../../os/rt/include/chvt.h ****  *
 193:../../os/rt/include/chvt.h ****  * @api
 194:../../os/rt/include/chvt.h ****  */
 195:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:../../os/rt/include/chvt.h **** 
 197:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:../../os/rt/include/chvt.h **** }
 199:../../os/rt/include/chvt.h **** 
 200:../../os/rt/include/chvt.h **** /**
 201:../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:../../os/rt/include/chvt.h ****  *
 207:../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:../../os/rt/include/chvt.h ****  *
 214:../../os/rt/include/chvt.h ****  * @iclass
 215:../../os/rt/include/chvt.h ****  */
 216:../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:../../os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:../../os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:../../os/rt/include/chvt.h **** 
 220:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:../../os/rt/include/chvt.h **** 
 222:../../os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:../../os/rt/include/chvt.h ****     return false;
 224:../../os/rt/include/chvt.h ****   }
 225:../../os/rt/include/chvt.h **** 
 226:../../os/rt/include/chvt.h ****   if (timep != NULL) {
 227:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:../../os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:../../os/rt/include/chvt.h **** #else
 230:../../os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:../../os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:../../os/rt/include/chvt.h **** #endif
 233:../../os/rt/include/chvt.h ****   }
 234:../../os/rt/include/chvt.h **** 
 235:../../os/rt/include/chvt.h ****   return true;
 236:../../os/rt/include/chvt.h **** }
 237:../../os/rt/include/chvt.h **** 
 238:../../os/rt/include/chvt.h **** /**
 239:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:../../os/rt/include/chvt.h ****  *
 243:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:../../os/rt/include/chvt.h ****  *
 246:../../os/rt/include/chvt.h ****  * @iclass
 247:../../os/rt/include/chvt.h ****  */
 248:../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:../../os/rt/include/chvt.h **** 
 250:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:../../os/rt/include/chvt.h **** 
 252:../../os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:../../os/rt/include/chvt.h **** }
 254:../../os/rt/include/chvt.h **** 
 255:../../os/rt/include/chvt.h **** /**
 256:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:../../os/rt/include/chvt.h ****  *
 260:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:../../os/rt/include/chvt.h ****  *
 263:../../os/rt/include/chvt.h ****  * @api
 264:../../os/rt/include/chvt.h ****  */
 265:../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:../../os/rt/include/chvt.h ****   bool b;
 267:../../os/rt/include/chvt.h **** 
 268:../../os/rt/include/chvt.h ****   chSysLock();
 269:../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:../../os/rt/include/chvt.h ****   chSysUnlock();
 271:../../os/rt/include/chvt.h **** 
 272:../../os/rt/include/chvt.h ****   return b;
 273:../../os/rt/include/chvt.h **** }
 274:../../os/rt/include/chvt.h **** 
 275:../../os/rt/include/chvt.h **** /**
 276:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:../../os/rt/include/chvt.h ****  *
 281:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:../../os/rt/include/chvt.h ****  *
 283:../../os/rt/include/chvt.h ****  * @iclass
 284:../../os/rt/include/chvt.h ****  */
 285:../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:../../os/rt/include/chvt.h **** 
 287:../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 393               		.loc 2 287 0
 394 0096 8981      		ldd r24,Y+1
 395 0098 9A81      		ldd r25,Y+2
 396 009a 892B      		or r24,r25
 397 009c 01F0      		breq .L83
 288:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 398               		.loc 2 288 0
 399 009e CE01      		movw r24,r28
 400 00a0 0196      		adiw r24,1
 401 00a2 0E94 0000 		call chVTDoResetI
 402               	.LVL32:
 403               	.L83:
 404               	.LBE334:
 405               	.LBE333:
 289:../../os/rt/include/chvt.h ****   }
 290:../../os/rt/include/chvt.h **** }
 291:../../os/rt/include/chvt.h **** 
 292:../../os/rt/include/chvt.h **** /**
 293:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:../../os/rt/include/chvt.h ****  *
 298:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:../../os/rt/include/chvt.h ****  *
 300:../../os/rt/include/chvt.h ****  * @api
 301:../../os/rt/include/chvt.h ****  */
 302:../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:../../os/rt/include/chvt.h **** 
 304:../../os/rt/include/chvt.h ****   chSysLock();
 305:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:../../os/rt/include/chvt.h ****   chSysUnlock();
 307:../../os/rt/include/chvt.h **** }
 308:../../os/rt/include/chvt.h **** 
 309:../../os/rt/include/chvt.h **** /**
 310:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:../../os/rt/include/chvt.h ****  *          using the new parameters.
 313:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:../../os/rt/include/chvt.h ****  *
 316:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:../../os/rt/include/chvt.h ****  *                        normal time specification.
 321:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:../../os/rt/include/chvt.h ****  *                      .
 323:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../os/rt/include/chvt.h ****  *                      function
 328:../../os/rt/include/chvt.h ****  *
 329:../../os/rt/include/chvt.h ****  * @iclass
 330:../../os/rt/include/chvt.h ****  */
 331:../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:../../os/rt/include/chvt.h **** 
 334:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 406               		.loc 2 335 0
 407 00a6 8E01      		movw r16,r28
 408 00a8 0F5F      		subi r16,-1
 409 00aa 1F4F      		sbci r17,-1
 410 00ac 20E0      		ldi r18,lo8(gs(vt_cb))
 411 00ae 30E0      		ldi r19,hi8(gs(vt_cb))
 412 00b0 40E1      		ldi r20,lo8(16)
 413 00b2 5AE7      		ldi r21,lo8(122)
 414 00b4 60E0      		ldi r22,0
 415 00b6 70E0      		ldi r23,0
 416 00b8 C801      		movw r24,r16
 417 00ba 0E94 0000 		call chVTDoSetI
 418               	.LVL33:
 419               	.LBE332:
 420               	.LBE331:
 421               	.LBB335:
 422               	.LBB336:
 423               	.LBB337:
 424               	.LBB338:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 425               		.loc 3 440 0
 426               	/* #APP */
 427               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 428 00be 7894      		sei
 429               	 ;  0 "" 2
 430               	/* #NOAPP */
 431               	.LBE338:
 432               	.LBE337:
 433               	.LBE336:
 434               	.LBE335:
 435               	.LBE327:
 352:main.c        ****           if (qsize > 0) {
 436               		.loc 1 352 0
 437 00c0 8091 0000 		lds r24,main_vt_flag
 438 00c4 8823      		tst r24
 439 00c6 01F0      		breq .L86
 440 00c8 00C0      		rjmp .L84
 441               	.LVL34:
 442               	.L85:
 369:main.c        ****           chThdSleepMilliseconds(125);
 443               		.loc 1 369 0
 444 00ca 62E0      		ldi r22,lo8(2)
 445 00cc 83E2      		ldi r24,lo8(35)
 446 00ce 90E0      		ldi r25,0
 447 00d0 0E94 0000 		call _pal_lld_setlineid
 448               	.LVL35:
 449 00d4 0E94 0000 		call _pal_lld_getportfromline
 450               	.LVL36:
 451 00d8 FC01      		movw r30,r24
 452 00da 7280      		ldd r7,Z+2
 453 00dc 62E0      		ldi r22,lo8(2)
 454 00de 83E2      		ldi r24,lo8(35)
 455 00e0 90E0      		ldi r25,0
 456 00e2 0E94 0000 		call _pal_lld_setlineid
 457               	.LVL37:
 458 00e6 0E94 0000 		call _pal_lld_getpadfromline
 459               	.LVL38:
 460 00ea 682E      		mov r6,r24
 461 00ec 62E0      		ldi r22,lo8(2)
 462 00ee 83E2      		ldi r24,lo8(35)
 463 00f0 90E0      		ldi r25,0
 464 00f2 0E94 0000 		call _pal_lld_setlineid
 465               	.LVL39:
 466 00f6 0E94 0000 		call _pal_lld_getportfromline
 467               	.LVL40:
 468 00fa 9701      		movw r18,r14
 469 00fc 00C0      		rjmp 2f
 470               		1:
 471 00fe 220F      		lsl r18
 472               		2:
 473 0100 6A94      		dec r6
 474 0102 02F4      		brpl 1b
 475 0104 7226      		eor r7,r18
 476 0106 FC01      		movw r30,r24
 477 0108 7282      		std Z+2,r7
 370:main.c        ****         }
 478               		.loc 1 370 0
 479 010a 61EA      		ldi r22,lo8(-95)
 480 010c 77E0      		ldi r23,lo8(7)
 481 010e 80E0      		ldi r24,0
 482 0110 90E0      		ldi r25,0
 483 0112 0E94 0000 		call chThdSleep
 484               	.LVL41:
 352:main.c        ****           if (qsize > 0) {
 485               		.loc 1 352 0
 486 0116 8091 0000 		lds r24,main_vt_flag
 487 011a 8111      		cpse r24,__zero_reg__
 488 011c 00C0      		rjmp .L84
 489               	.L86:
 353:main.c        ****             ev = dequeue();
 490               		.loc 1 353 0
 491 011e 8091 0000 		lds r24,qsize
 492 0122 9091 0000 		lds r25,qsize+1
 493 0126 892B      		or r24,r25
 494 0128 01F0      		breq .L85
 354:main.c        ****             if (ev == AMB_PRIMARIO) {
 495               		.loc 1 354 0
 496 012a 0E94 0000 		call dequeue
 497               	.LVL42:
 355:main.c        ****               flag_amb_prim = 1;
 498               		.loc 1 355 0
 499 012e 8330      		cpi r24,3
 500 0130 9105      		cpc r25,__zero_reg__
 501 0132 01F4      		brne .+2
 502 0134 00C0      		rjmp .L122
 358:main.c        ****               flag_amb_sec = 1;
 503               		.loc 1 358 0
 504 0136 8430      		cpi r24,4
 505 0138 9105      		cpc r25,__zero_reg__
 506 013a 01F4      		brne .+2
 507 013c 00C0      		rjmp .L123
 362:main.c        ****               flag_ped = 1;
 508               		.loc 1 362 0
 509 013e 8230      		cpi r24,2
 510 0140 9105      		cpc r25,__zero_reg__
 511 0142 01F4      		brne .+2
 512 0144 00C0      		rjmp .L124
 365:main.c        ****               flag_sec = 1;
 513               		.loc 1 365 0
 514 0146 0197      		sbiw r24,1
 515 0148 01F0      		breq .+2
 516 014a 00C0      		rjmp .L85
 366:main.c        ****             }
 517               		.loc 1 366 0
 518 014c BB24      		clr r11
 519 014e B394      		inc r11
 520               	.LVL43:
 521 0150 00C0      		rjmp .L85
 522               	.LVL44:
 523               	.L28:
 322:main.c        ****         palSetLine(PEDESTRE_VERDE);
 524               		.loc 1 322 0
 525 0152 62E0      		ldi r22,lo8(2)
 526 0154 83E2      		ldi r24,lo8(35)
 527 0156 90E0      		ldi r25,0
 528 0158 0E94 0000 		call _pal_lld_setlineid
 529               	.LVL45:
 530 015c 0E94 0000 		call _pal_lld_getpadfromline
 531               	.LVL46:
 532 0160 A82E      		mov r10,r24
 533               	.LVL47:
 534 0162 62E0      		ldi r22,lo8(2)
 535 0164 83E2      		ldi r24,lo8(35)
 536 0166 90E0      		ldi r25,0
 537 0168 0E94 0000 		call _pal_lld_setlineid
 538               	.LVL48:
 539 016c 0E94 0000 		call _pal_lld_getportfromline
 540               	.LVL49:
 541 0170 FC01      		movw r30,r24
 542 0172 9281      		ldd r25,Z+2
 543 0174 9701      		movw r18,r14
 544 0176 00C0      		rjmp 2f
 545               		1:
 546 0178 220F      		lsl r18
 547 017a 331F      		rol r19
 548               		2:
 549 017c AA94      		dec r10
 550 017e 02F4      		brpl 1b
 551 0180 2095      		com r18
 552 0182 3095      		com r19
 553 0184 9223      		and r25,r18
 554 0186 9283      		std Z+2,r25
 323:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 555               		.loc 1 323 0
 556 0188 63E0      		ldi r22,lo8(3)
 557 018a 83E2      		ldi r24,lo8(35)
 558 018c 90E0      		ldi r25,0
 559 018e 0E94 0000 		call _pal_lld_setlineid
 560               	.LVL50:
 561 0192 0E94 0000 		call _pal_lld_getpadfromline
 562               	.LVL51:
 563 0196 A82E      		mov r10,r24
 564 0198 63E0      		ldi r22,lo8(3)
 565 019a 83E2      		ldi r24,lo8(35)
 566 019c 90E0      		ldi r25,0
 567 019e 0E94 0000 		call _pal_lld_setlineid
 568               	.LVL52:
 569 01a2 0E94 0000 		call _pal_lld_getportfromline
 570               	.LVL53:
 571 01a6 FC01      		movw r30,r24
 572 01a8 9281      		ldd r25,Z+2
 573 01aa 9701      		movw r18,r14
 574 01ac 00C0      		rjmp 2f
 575               		1:
 576 01ae 220F      		lsl r18
 577               		2:
 578 01b0 AA94      		dec r10
 579 01b2 02F4      		brpl 1b
 580 01b4 922B      		or r25,r18
 581 01b6 9283      		std Z+2,r25
 582               	.LVL54:
 583               	.LBB339:
 584               	.LBB340:
 585               	.LBB341:
 586               	.LBB342:
 430:../../os/common/ports/AVR/chcore.h **** }
 587               		.loc 3 430 0
 588               	/* #APP */
 589               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 590 01b8 F894      		cli
 591               	 ;  0 "" 2
 592               	.LVL55:
 593               	/* #NOAPP */
 594               	.LBE342:
 595               	.LBE341:
 596               	.LBE340:
 597               	.LBB343:
 598               	.LBB344:
 599               	.LBB345:
 600               	.LBB346:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 601               		.loc 2 287 0
 602 01ba 8981      		ldd r24,Y+1
 603 01bc 9A81      		ldd r25,Y+2
 604 01be 892B      		or r24,r25
 605 01c0 01F0      		breq .L76
 288:../../os/rt/include/chvt.h ****   }
 606               		.loc 2 288 0
 607 01c2 CE01      		movw r24,r28
 608 01c4 0196      		adiw r24,1
 609 01c6 0E94 0000 		call chVTDoResetI
 610               	.LVL56:
 611               	.L76:
 612               	.LBE346:
 613               	.LBE345:
 614               		.loc 2 335 0
 615 01ca 8E01      		movw r16,r28
 616 01cc 0F5F      		subi r16,-1
 617 01ce 1F4F      		sbci r17,-1
 618 01d0 20E0      		ldi r18,lo8(gs(vt_cb))
 619 01d2 30E0      		ldi r19,hi8(gs(vt_cb))
 620 01d4 48E1      		ldi r20,lo8(24)
 621 01d6 57EB      		ldi r21,lo8(-73)
 622 01d8 60E0      		ldi r22,0
 623 01da 70E0      		ldi r23,0
 624 01dc C801      		movw r24,r16
 625 01de 0E94 0000 		call chVTDoSetI
 626               	.LVL57:
 627               	.LBE344:
 628               	.LBE343:
 629               	.LBB347:
 630               	.LBB348:
 631               	.LBB349:
 632               	.LBB350:
 633               		.loc 3 440 0
 634               	/* #APP */
 635               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 636 01e2 7894      		sei
 637               	 ;  0 "" 2
 638               	/* #NOAPP */
 639               	.LBE350:
 640               	.LBE349:
 641               	.LBE348:
 642               	.LBE347:
 643               	.LBE339:
 325:main.c        ****           if (qsize > 0) {
 644               		.loc 1 325 0
 645 01e4 8091 0000 		lds r24,main_vt_flag
 646 01e8 8823      		tst r24
 647 01ea 01F0      		breq .L79
 648 01ec 00C0      		rjmp .L77
 649               	.LVL58:
 650               	.L78:
 339:main.c        ****         }
 651               		.loc 1 339 0
 652 01ee 6BE1      		ldi r22,lo8(27)
 653 01f0 76E0      		ldi r23,lo8(6)
 654 01f2 80E0      		ldi r24,0
 655 01f4 90E0      		ldi r25,0
 656 01f6 0E94 0000 		call chThdSleep
 657               	.LVL59:
 325:main.c        ****           if (qsize > 0) {
 658               		.loc 1 325 0
 659 01fa 8091 0000 		lds r24,main_vt_flag
 660 01fe 8111      		cpse r24,__zero_reg__
 661 0200 00C0      		rjmp .L77
 662               	.L79:
 326:main.c        ****             ev = dequeue();
 663               		.loc 1 326 0
 664 0202 8091 0000 		lds r24,qsize
 665 0206 9091 0000 		lds r25,qsize+1
 666 020a 892B      		or r24,r25
 667 020c 01F0      		breq .L78
 327:main.c        ****             if (ev == AMB_PRIMARIO) {
 668               		.loc 1 327 0
 669 020e 0E94 0000 		call dequeue
 670               	.LVL60:
 328:main.c        ****               flag_amb_prim = 1;
 671               		.loc 1 328 0
 672 0212 8330      		cpi r24,3
 673 0214 9105      		cpc r25,__zero_reg__
 674 0216 01F4      		brne .+2
 675 0218 00C0      		rjmp .L119
 331:main.c        ****               flag_amb_sec = 1;
 676               		.loc 1 331 0
 677 021a 8430      		cpi r24,4
 678 021c 9105      		cpc r25,__zero_reg__
 679 021e 01F4      		brne .+2
 680 0220 00C0      		rjmp .L120
 334:main.c        ****               flag_sec = 1;
 681               		.loc 1 334 0
 682 0222 0197      		sbiw r24,1
 683 0224 01F4      		brne .L78
 335:main.c        ****             }
 684               		.loc 1 335 0
 685 0226 BB24      		clr r11
 686 0228 B394      		inc r11
 687               	.LVL61:
 688 022a 00C0      		rjmp .L78
 689               	.LVL62:
 690               	.L27:
 294:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 691               		.loc 1 294 0
 692 022c 65E0      		ldi r22,lo8(5)
 693 022e 89E2      		ldi r24,lo8(41)
 694 0230 90E0      		ldi r25,0
 695 0232 0E94 0000 		call _pal_lld_setlineid
 696               	.LVL63:
 697 0236 0E94 0000 		call _pal_lld_getpadfromline
 698               	.LVL64:
 699 023a 782E      		mov r7,r24
 700 023c 65E0      		ldi r22,lo8(5)
 701 023e 89E2      		ldi r24,lo8(41)
 702 0240 90E0      		ldi r25,0
 703 0242 0E94 0000 		call _pal_lld_setlineid
 704               	.LVL65:
 705 0246 0E94 0000 		call _pal_lld_getportfromline
 706               	.LVL66:
 707 024a FC01      		movw r30,r24
 708 024c 9281      		ldd r25,Z+2
 709 024e 9701      		movw r18,r14
 710 0250 00C0      		rjmp 2f
 711               		1:
 712 0252 220F      		lsl r18
 713               		2:
 714 0254 7A94      		dec r7
 715 0256 02F4      		brpl 1b
 716 0258 922B      		or r25,r18
 717 025a 9283      		std Z+2,r25
 718               	.LVL67:
 719               	.LBB351:
 720               	.LBB352:
 721               	.LBB353:
 722               	.LBB354:
 430:../../os/common/ports/AVR/chcore.h **** }
 723               		.loc 3 430 0
 724               	/* #APP */
 725               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 726 025c F894      		cli
 727               	 ;  0 "" 2
 728               	.LVL68:
 729               	/* #NOAPP */
 730               	.LBE354:
 731               	.LBE353:
 732               	.LBE352:
 733               	.LBB355:
 734               	.LBB356:
 735               	.LBB357:
 736               	.LBB358:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 737               		.loc 2 287 0
 738 025e 8981      		ldd r24,Y+1
 739 0260 9A81      		ldd r25,Y+2
 740 0262 892B      		or r24,r25
 741 0264 01F0      		breq .L72
 288:../../os/rt/include/chvt.h ****   }
 742               		.loc 2 288 0
 743 0266 CE01      		movw r24,r28
 744 0268 0196      		adiw r24,1
 745 026a 0E94 0000 		call chVTDoResetI
 746               	.LVL69:
 747               	.L72:
 748               	.LBE358:
 749               	.LBE357:
 750               		.loc 2 335 0
 751 026e 8E01      		movw r16,r28
 752 0270 0F5F      		subi r16,-1
 753 0272 1F4F      		sbci r17,-1
 754 0274 20E0      		ldi r18,lo8(gs(vt_cb))
 755 0276 30E0      		ldi r19,hi8(gs(vt_cb))
 756 0278 40E1      		ldi r20,lo8(16)
 757 027a 5AE7      		ldi r21,lo8(122)
 758 027c 60E0      		ldi r22,0
 759 027e 70E0      		ldi r23,0
 760 0280 C801      		movw r24,r16
 761 0282 0E94 0000 		call chVTDoSetI
 762               	.LVL70:
 763               	.LBE356:
 764               	.LBE355:
 765               	.LBB359:
 766               	.LBB360:
 767               	.LBB361:
 768               	.LBB362:
 769               		.loc 3 440 0
 770               	/* #APP */
 771               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 772 0286 7894      		sei
 773               	 ;  0 "" 2
 774               	/* #NOAPP */
 775               	.LBE362:
 776               	.LBE361:
 777               	.LBE360:
 778               	.LBE359:
 779               	.LBE351:
 296:main.c        ****           if (qsize > 0) {
 780               		.loc 1 296 0
 781 0288 8091 0000 		lds r24,main_vt_flag
 782 028c 8823      		tst r24
 783 028e 01F0      		breq .L75
 784 0290 00C0      		rjmp .L73
 785               	.LVL71:
 786               	.L74:
 313:main.c        ****         }
 787               		.loc 1 313 0
 788 0292 6BE1      		ldi r22,lo8(27)
 789 0294 76E0      		ldi r23,lo8(6)
 790 0296 80E0      		ldi r24,0
 791 0298 90E0      		ldi r25,0
 792 029a 0E94 0000 		call chThdSleep
 793               	.LVL72:
 296:main.c        ****           if (qsize > 0) {
 794               		.loc 1 296 0
 795 029e 8091 0000 		lds r24,main_vt_flag
 796 02a2 8111      		cpse r24,__zero_reg__
 797 02a4 00C0      		rjmp .L73
 798               	.L75:
 297:main.c        ****             ev = dequeue();
 799               		.loc 1 297 0
 800 02a6 8091 0000 		lds r24,qsize
 801 02aa 9091 0000 		lds r25,qsize+1
 802 02ae 892B      		or r24,r25
 803 02b0 01F0      		breq .L74
 298:main.c        ****             if (ev == AMB_PRIMARIO) {
 804               		.loc 1 298 0
 805 02b2 0E94 0000 		call dequeue
 806               	.LVL73:
 299:main.c        ****               flag_amb_prim = 1;
 807               		.loc 1 299 0
 808 02b6 8330      		cpi r24,3
 809 02b8 9105      		cpc r25,__zero_reg__
 810 02ba 01F4      		brne .+2
 811 02bc 00C0      		rjmp .L115
 302:main.c        ****               flag_amb_sec = 1;
 812               		.loc 1 302 0
 813 02be 8430      		cpi r24,4
 814 02c0 9105      		cpc r25,__zero_reg__
 815 02c2 01F4      		brne .+2
 816 02c4 00C0      		rjmp .L116
 306:main.c        ****               flag_ped = 1;
 817               		.loc 1 306 0
 818 02c6 8230      		cpi r24,2
 819 02c8 9105      		cpc r25,__zero_reg__
 820 02ca 01F4      		brne .+2
 821 02cc 00C0      		rjmp .L117
 309:main.c        ****               flag_sec = 1;
 822               		.loc 1 309 0
 823 02ce 0197      		sbiw r24,1
 824 02d0 01F4      		brne .L74
 310:main.c        ****             }
 825               		.loc 1 310 0
 826 02d2 BB24      		clr r11
 827 02d4 B394      		inc r11
 828               	.LVL74:
 829 02d6 00C0      		rjmp .L74
 830               	.LVL75:
 831               	.L26:
 237:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 832               		.loc 1 237 0
 833 02d8 60E0      		ldi r22,0
 834 02da 83E2      		ldi r24,lo8(35)
 835 02dc 90E0      		ldi r25,0
 836 02de 0E94 0000 		call _pal_lld_setlineid
 837               	.LVL76:
 838 02e2 0E94 0000 		call _pal_lld_getpadfromline
 839               	.LVL77:
 840 02e6 B82E      		mov r11,r24
 841               	.LVL78:
 842 02e8 60E0      		ldi r22,0
 843 02ea 83E2      		ldi r24,lo8(35)
 844 02ec 90E0      		ldi r25,0
 845 02ee 0E94 0000 		call _pal_lld_setlineid
 846               	.LVL79:
 847 02f2 0E94 0000 		call _pal_lld_getportfromline
 848               	.LVL80:
 849 02f6 FC01      		movw r30,r24
 850 02f8 9281      		ldd r25,Z+2
 851 02fa 9701      		movw r18,r14
 852 02fc 00C0      		rjmp 2f
 853               		1:
 854 02fe 220F      		lsl r18
 855 0300 331F      		rol r19
 856               		2:
 857 0302 BA94      		dec r11
 858 0304 02F4      		brpl 1b
 859 0306 2095      		com r18
 860 0308 3095      		com r19
 861 030a 9223      		and r25,r18
 862 030c 9283      		std Z+2,r25
 238:main.c        ****         if (prev_state == PRIMARIO) {
 863               		.loc 1 238 0
 864 030e 61E0      		ldi r22,lo8(1)
 865 0310 83E2      		ldi r24,lo8(35)
 866 0312 90E0      		ldi r25,0
 867 0314 0E94 0000 		call _pal_lld_setlineid
 868               	.LVL81:
 869 0318 0E94 0000 		call _pal_lld_getpadfromline
 870               	.LVL82:
 871 031c B82E      		mov r11,r24
 872 031e 61E0      		ldi r22,lo8(1)
 873 0320 83E2      		ldi r24,lo8(35)
 874 0322 90E0      		ldi r25,0
 875 0324 0E94 0000 		call _pal_lld_setlineid
 876               	.LVL83:
 877 0328 0E94 0000 		call _pal_lld_getportfromline
 878               	.LVL84:
 879 032c FC01      		movw r30,r24
 880 032e 9281      		ldd r25,Z+2
 881 0330 9701      		movw r18,r14
 882 0332 00C0      		rjmp 2f
 883               		1:
 884 0334 220F      		lsl r18
 885               		2:
 886 0336 BA94      		dec r11
 887 0338 02F4      		brpl 1b
 888 033a 922B      		or r25,r18
 889 033c 9283      		std Z+2,r25
 239:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 890               		.loc 1 239 0
 891 033e 8989      		ldd r24,Y+17
 892 0340 8530      		cpi r24,lo8(5)
 893 0342 01F4      		brne .+2
 894 0344 00C0      		rjmp .L233
 258:main.c        ****         chVTSet(&main_vt, TIME_MS2I((prev_state == PRIMARIO) ? 1000 : 6000), (vtfunc_t)vt_cb, (void
 895               		.loc 1 258 0
 896 0346 1092 0000 		sts main_vt_flag,__zero_reg__
 259:main.c        ****         while (!main_vt_flag) {
 897               		.loc 1 259 0
 898 034a 90E3      		ldi r25,lo8(48)
 899 034c 492E      		mov r4,r25
 900 034e 9EE6      		ldi r25,lo8(110)
 901 0350 592E      		mov r5,r25
 902 0352 6624      		clr r6
 903 0354 6394      		inc r6
 904 0356 712C      		mov r7,__zero_reg__
 905               	.L93:
 906               	.LVL85:
 907               	.LBB363:
 908               	.LBB364:
 909               	.LBB365:
 910               	.LBB366:
 430:../../os/common/ports/AVR/chcore.h **** }
 911               		.loc 3 430 0 discriminator 4
 912               	/* #APP */
 913               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 914 0358 F894      		cli
 915               	 ;  0 "" 2
 916               	.LVL86:
 917               	/* #NOAPP */
 918               	.LBE366:
 919               	.LBE365:
 920               	.LBE364:
 921               	.LBB367:
 922               	.LBB368:
 923               	.LBB369:
 924               	.LBB370:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 925               		.loc 2 287 0 discriminator 4
 926 035a 8981      		ldd r24,Y+1
 927 035c 9A81      		ldd r25,Y+2
 928 035e 892B      		or r24,r25
 929 0360 01F0      		breq .L62
 288:../../os/rt/include/chvt.h ****   }
 930               		.loc 2 288 0
 931 0362 CE01      		movw r24,r28
 932 0364 0196      		adiw r24,1
 933 0366 0E94 0000 		call chVTDoResetI
 934               	.LVL87:
 935               	.L62:
 936               	.LBE370:
 937               	.LBE369:
 938               		.loc 2 335 0
 939 036a 8E01      		movw r16,r28
 940 036c 0F5F      		subi r16,-1
 941 036e 1F4F      		sbci r17,-1
 942 0370 20E0      		ldi r18,lo8(gs(vt_cb))
 943 0372 30E0      		ldi r19,hi8(gs(vt_cb))
 944 0374 B301      		movw r22,r6
 945 0376 A201      		movw r20,r4
 946 0378 C801      		movw r24,r16
 947 037a 0E94 0000 		call chVTDoSetI
 948               	.LVL88:
 949               	.LBE368:
 950               	.LBE367:
 951               	.LBB371:
 952               	.LBB372:
 953               	.LBB373:
 954               	.LBB374:
 955               		.loc 3 440 0
 956               	/* #APP */
 957               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 958 037e 7894      		sei
 959               	 ;  0 "" 2
 960               	/* #NOAPP */
 961               	.LBE374:
 962               	.LBE373:
 963               	.LBE372:
 964               	.LBE371:
 965               	.LBE363:
 260:main.c        ****           if (qsize > 0) {
 966               		.loc 1 260 0
 967 0380 8091 0000 		lds r24,main_vt_flag
 968 0384 8823      		tst r24
 969 0386 01F0      		breq .L69
 970 0388 00C0      		rjmp .L63
 971               	.LVL89:
 972               	.L64:
 280:main.c        ****         }
 973               		.loc 1 280 0
 974 038a 6BE1      		ldi r22,lo8(27)
 975 038c 76E0      		ldi r23,lo8(6)
 976 038e 80E0      		ldi r24,0
 977 0390 90E0      		ldi r25,0
 978 0392 0E94 0000 		call chThdSleep
 979               	.LVL90:
 260:main.c        ****           if (qsize > 0) {
 980               		.loc 1 260 0
 981 0396 8091 0000 		lds r24,main_vt_flag
 982 039a 8111      		cpse r24,__zero_reg__
 983 039c 00C0      		rjmp .L63
 984               	.L69:
 261:main.c        ****             ev = dequeue();
 985               		.loc 1 261 0
 986 039e 8091 0000 		lds r24,qsize
 987 03a2 9091 0000 		lds r25,qsize+1
 988 03a6 892B      		or r24,r25
 989 03a8 01F0      		breq .L64
 262:main.c        ****             if (ev == AMB_PRIMARIO) {
 990               		.loc 1 262 0
 991 03aa 0E94 0000 		call dequeue
 992               	.LVL91:
 263:main.c        ****               flag_amb_prim = 1;
 993               		.loc 1 263 0
 994 03ae 8330      		cpi r24,3
 995 03b0 9105      		cpc r25,__zero_reg__
 996 03b2 01F4      		brne .+2
 997 03b4 00C0      		rjmp .L234
 268:main.c        ****               flag_amb_sec = 1;
 998               		.loc 1 268 0
 999 03b6 8430      		cpi r24,4
 1000 03b8 9105      		cpc r25,__zero_reg__
 1001 03ba 01F4      		brne .+2
 1002 03bc 00C0      		rjmp .L235
 276:main.c        ****               flag_ped = 1;
 1003               		.loc 1 276 0
 1004 03be 0297      		sbiw r24,2
 1005 03c0 01F4      		brne .L64
 277:main.c        ****             }
 1006               		.loc 1 277 0
 1007 03c2 AA24      		clr r10
 1008 03c4 A394      		inc r10
 1009               	.LVL92:
 1010 03c6 00C0      		rjmp .L64
 1011               	.LVL93:
 1012               	.L25:
 181:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1013               		.loc 1 181 0
 1014 03c8 64E0      		ldi r22,lo8(4)
 1015 03ca 89E2      		ldi r24,lo8(41)
 1016 03cc 90E0      		ldi r25,0
 1017 03ce 0E94 0000 		call _pal_lld_setlineid
 1018               	.LVL94:
 1019 03d2 0E94 0000 		call _pal_lld_getpadfromline
 1020               	.LVL95:
 1021 03d6 782E      		mov r7,r24
 1022 03d8 64E0      		ldi r22,lo8(4)
 1023 03da 89E2      		ldi r24,lo8(41)
 1024 03dc 90E0      		ldi r25,0
 1025 03de 0E94 0000 		call _pal_lld_setlineid
 1026               	.LVL96:
 1027 03e2 0E94 0000 		call _pal_lld_getportfromline
 1028               	.LVL97:
 1029 03e6 FC01      		movw r30,r24
 1030 03e8 9281      		ldd r25,Z+2
 1031 03ea 9701      		movw r18,r14
 1032 03ec 00C0      		rjmp 2f
 1033               		1:
 1034 03ee 220F      		lsl r18
 1035               		2:
 1036 03f0 7A94      		dec r7
 1037 03f2 02F4      		brpl 1b
 1038 03f4 922B      		or r25,r18
 1039 03f6 9283      		std Z+2,r25
 1040               	.LVL98:
 1041               	.LBB375:
 1042               	.LBB376:
 1043               	.LBB377:
 1044               	.LBB378:
 430:../../os/common/ports/AVR/chcore.h **** }
 1045               		.loc 3 430 0
 1046               	/* #APP */
 1047               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1048 03f8 F894      		cli
 1049               	 ;  0 "" 2
 1050               	.LVL99:
 1051               	/* #NOAPP */
 1052               	.LBE378:
 1053               	.LBE377:
 1054               	.LBE376:
 1055               	.LBB379:
 1056               	.LBB380:
 1057               	.LBB381:
 1058               	.LBB382:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1059               		.loc 2 287 0
 1060 03fa 8981      		ldd r24,Y+1
 1061 03fc 9A81      		ldd r25,Y+2
 1062 03fe 892B      		or r24,r25
 1063 0400 01F0      		breq .L48
 288:../../os/rt/include/chvt.h ****   }
 1064               		.loc 2 288 0
 1065 0402 CE01      		movw r24,r28
 1066 0404 0196      		adiw r24,1
 1067 0406 0E94 0000 		call chVTDoResetI
 1068               	.LVL100:
 1069               	.L48:
 1070               	.LBE382:
 1071               	.LBE381:
 1072               		.loc 2 335 0
 1073 040a 8E01      		movw r16,r28
 1074 040c 0F5F      		subi r16,-1
 1075 040e 1F4F      		sbci r17,-1
 1076 0410 20E0      		ldi r18,lo8(gs(vt_cb))
 1077 0412 30E0      		ldi r19,hi8(gs(vt_cb))
 1078 0414 40E1      		ldi r20,lo8(16)
 1079 0416 5AE7      		ldi r21,lo8(122)
 1080 0418 60E0      		ldi r22,0
 1081 041a 70E0      		ldi r23,0
 1082 041c C801      		movw r24,r16
 1083 041e 0E94 0000 		call chVTDoSetI
 1084               	.LVL101:
 1085               	.LBE380:
 1086               	.LBE379:
 1087               	.LBB383:
 1088               	.LBB384:
 1089               	.LBB385:
 1090               	.LBB386:
 1091               		.loc 3 440 0
 1092               	/* #APP */
 1093               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1094 0422 7894      		sei
 1095               	 ;  0 "" 2
 1096               	/* #NOAPP */
 1097               	.LBE386:
 1098               	.LBE385:
 1099               	.LBE384:
 1100               	.LBE383:
 1101               	.LBE375:
 183:main.c        ****           if (qsize > 0) {
 1102               		.loc 1 183 0
 1103 0424 8091 0000 		lds r24,main_vt_flag
 1104 0428 8823      		tst r24
 1105 042a 01F0      		breq .L51
 1106 042c 00C0      		rjmp .L49
 1107               	.LVL102:
 1108               	.L50:
 200:main.c        ****         }
 1109               		.loc 1 200 0
 1110 042e 6BE1      		ldi r22,lo8(27)
 1111 0430 76E0      		ldi r23,lo8(6)
 1112 0432 80E0      		ldi r24,0
 1113 0434 90E0      		ldi r25,0
 1114 0436 0E94 0000 		call chThdSleep
 1115               	.LVL103:
 183:main.c        ****           if (qsize > 0) {
 1116               		.loc 1 183 0
 1117 043a 8091 0000 		lds r24,main_vt_flag
 1118 043e 8111      		cpse r24,__zero_reg__
 1119 0440 00C0      		rjmp .L49
 1120               	.L51:
 184:main.c        ****             ev = dequeue();
 1121               		.loc 1 184 0
 1122 0442 8091 0000 		lds r24,qsize
 1123 0446 9091 0000 		lds r25,qsize+1
 1124 044a 892B      		or r24,r25
 1125 044c 01F0      		breq .L50
 185:main.c        ****             if (ev == AMB_PRIMARIO) {
 1126               		.loc 1 185 0
 1127 044e 0E94 0000 		call dequeue
 1128               	.LVL104:
 186:main.c        ****               flag_amb_prim = 1;
 1129               		.loc 1 186 0
 1130 0452 8330      		cpi r24,3
 1131 0454 9105      		cpc r25,__zero_reg__
 1132 0456 01F4      		brne .+2
 1133 0458 00C0      		rjmp .L103
 189:main.c        ****               flag_amb_sec = 1;
 1134               		.loc 1 189 0
 1135 045a 8430      		cpi r24,4
 1136 045c 9105      		cpc r25,__zero_reg__
 1137 045e 01F4      		brne .+2
 1138 0460 00C0      		rjmp .L104
 193:main.c        ****               flag_ped = 1;
 1139               		.loc 1 193 0
 1140 0462 8230      		cpi r24,2
 1141 0464 9105      		cpc r25,__zero_reg__
 1142 0466 01F4      		brne .+2
 1143 0468 00C0      		rjmp .L105
 196:main.c        ****               flag_sec = 1;
 1144               		.loc 1 196 0
 1145 046a 0197      		sbiw r24,1
 1146 046c 01F4      		brne .L50
 197:main.c        ****             }
 1147               		.loc 1 197 0
 1148 046e BB24      		clr r11
 1149 0470 B394      		inc r11
 1150               	.LVL105:
 1151 0472 00C0      		rjmp .L50
 1152               	.LVL106:
 1153               	.L24:
 209:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1154               		.loc 1 209 0
 1155 0474 64E0      		ldi r22,lo8(4)
 1156 0476 89E2      		ldi r24,lo8(41)
 1157 0478 90E0      		ldi r25,0
 1158 047a 0E94 0000 		call _pal_lld_setlineid
 1159               	.LVL107:
 1160 047e 0E94 0000 		call _pal_lld_getpadfromline
 1161               	.LVL108:
 1162 0482 782E      		mov r7,r24
 1163 0484 64E0      		ldi r22,lo8(4)
 1164 0486 89E2      		ldi r24,lo8(41)
 1165 0488 90E0      		ldi r25,0
 1166 048a 0E94 0000 		call _pal_lld_setlineid
 1167               	.LVL109:
 1168 048e 0E94 0000 		call _pal_lld_getportfromline
 1169               	.LVL110:
 1170 0492 FC01      		movw r30,r24
 1171 0494 9281      		ldd r25,Z+2
 1172 0496 9701      		movw r18,r14
 1173 0498 00C0      		rjmp 2f
 1174               		1:
 1175 049a 220F      		lsl r18
 1176               		2:
 1177 049c 7A94      		dec r7
 1178 049e 02F4      		brpl 1b
 1179 04a0 922B      		or r25,r18
 1180 04a2 9283      		std Z+2,r25
 1181               	.LVL111:
 1182               	.LBB387:
 1183               	.LBB388:
 1184               	.LBB389:
 1185               	.LBB390:
 430:../../os/common/ports/AVR/chcore.h **** }
 1186               		.loc 3 430 0
 1187               	/* #APP */
 1188               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1189 04a4 F894      		cli
 1190               	 ;  0 "" 2
 1191               	.LVL112:
 1192               	/* #NOAPP */
 1193               	.LBE390:
 1194               	.LBE389:
 1195               	.LBE388:
 1196               	.LBB391:
 1197               	.LBB392:
 1198               	.LBB393:
 1199               	.LBB394:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1200               		.loc 2 287 0
 1201 04a6 8981      		ldd r24,Y+1
 1202 04a8 9A81      		ldd r25,Y+2
 1203 04aa 892B      		or r24,r25
 1204 04ac 01F0      		breq .L52
 288:../../os/rt/include/chvt.h ****   }
 1205               		.loc 2 288 0
 1206 04ae CE01      		movw r24,r28
 1207 04b0 0196      		adiw r24,1
 1208 04b2 0E94 0000 		call chVTDoResetI
 1209               	.LVL113:
 1210               	.L52:
 1211               	.LBE394:
 1212               	.LBE393:
 1213               		.loc 2 335 0
 1214 04b6 8E01      		movw r16,r28
 1215 04b8 0F5F      		subi r16,-1
 1216 04ba 1F4F      		sbci r17,-1
 1217 04bc 20E0      		ldi r18,lo8(gs(vt_cb))
 1218 04be 30E0      		ldi r19,hi8(gs(vt_cb))
 1219 04c0 40E1      		ldi r20,lo8(16)
 1220 04c2 5AE7      		ldi r21,lo8(122)
 1221 04c4 60E0      		ldi r22,0
 1222 04c6 70E0      		ldi r23,0
 1223 04c8 C801      		movw r24,r16
 1224 04ca 0E94 0000 		call chVTDoSetI
 1225               	.LVL114:
 1226               	.LBE392:
 1227               	.LBE391:
 1228               	.LBB395:
 1229               	.LBB396:
 1230               	.LBB397:
 1231               	.LBB398:
 1232               		.loc 3 440 0
 1233               	/* #APP */
 1234               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1235 04ce 7894      		sei
 1236               	 ;  0 "" 2
 1237               	/* #NOAPP */
 1238               	.LBE398:
 1239               	.LBE397:
 1240               	.LBE396:
 1241               	.LBE395:
 1242               	.LBE387:
 211:main.c        ****           if (qsize > 0) {
 1243               		.loc 1 211 0
 1244 04d0 8091 0000 		lds r24,main_vt_flag
 1245 04d4 8823      		tst r24
 1246 04d6 01F0      		breq .L55
 1247 04d8 00C0      		rjmp .L53
 1248               	.LVL115:
 1249               	.L54:
 228:main.c        ****         }
 1250               		.loc 1 228 0
 1251 04da 6BE1      		ldi r22,lo8(27)
 1252 04dc 76E0      		ldi r23,lo8(6)
 1253 04de 80E0      		ldi r24,0
 1254 04e0 90E0      		ldi r25,0
 1255 04e2 0E94 0000 		call chThdSleep
 1256               	.LVL116:
 211:main.c        ****           if (qsize > 0) {
 1257               		.loc 1 211 0
 1258 04e6 8091 0000 		lds r24,main_vt_flag
 1259 04ea 8111      		cpse r24,__zero_reg__
 1260 04ec 00C0      		rjmp .L53
 1261               	.L55:
 212:main.c        ****             ev = dequeue();
 1262               		.loc 1 212 0
 1263 04ee 8091 0000 		lds r24,qsize
 1264 04f2 9091 0000 		lds r25,qsize+1
 1265 04f6 892B      		or r24,r25
 1266 04f8 01F0      		breq .L54
 213:main.c        ****             if (ev == AMB_PRIMARIO) {
 1267               		.loc 1 213 0
 1268 04fa 0E94 0000 		call dequeue
 1269               	.LVL117:
 214:main.c        ****               flag_amb_prim = 1;
 1270               		.loc 1 214 0
 1271 04fe 8330      		cpi r24,3
 1272 0500 9105      		cpc r25,__zero_reg__
 1273 0502 01F4      		brne .+2
 1274 0504 00C0      		rjmp .L107
 217:main.c        ****               flag_amb_sec = 1;
 1275               		.loc 1 217 0
 1276 0506 8430      		cpi r24,4
 1277 0508 9105      		cpc r25,__zero_reg__
 1278 050a 01F4      		brne .+2
 1279 050c 00C0      		rjmp .L108
 221:main.c        ****               flag_ped = 1;
 1280               		.loc 1 221 0
 1281 050e 8230      		cpi r24,2
 1282 0510 9105      		cpc r25,__zero_reg__
 1283 0512 01F4      		brne .+2
 1284 0514 00C0      		rjmp .L109
 224:main.c        ****               flag_sec = 1;
 1285               		.loc 1 224 0
 1286 0516 0197      		sbiw r24,1
 1287 0518 01F4      		brne .L54
 225:main.c        ****             }
 1288               		.loc 1 225 0
 1289 051a BB24      		clr r11
 1290 051c B394      		inc r11
 1291               	.LVL118:
 1292 051e 00C0      		rjmp .L54
 1293               	.LVL119:
 1294               	.L23:
 1295 0520 7C2C      		mov r7,r12
 1296 0522 7324      		eor r7,r3
 150:main.c        ****           ev = dequeue();
 1297               		.loc 1 150 0
 1298 0524 8091 0000 		lds r24,qsize
 1299 0528 9091 0000 		lds r25,qsize+1
 1300 052c 892B      		or r24,r25
 1301 052e 01F0      		breq .+2
 1302 0530 00C0      		rjmp .L236
 1303               	.LVL120:
 1304               	.L45:
 167:main.c        ****           g_state = AMARELO_SEC_PRIM;
 1305               		.loc 1 167 0
 1306 0532 872D      		mov r24,r7
 1307 0534 8D21      		and r24,r13
 1308 0536 01F0      		breq .+2
 1309 0538 00C0      		rjmp .L237
 171:main.c        ****           g_state = AMARELO_PED_PRIM;
 1310               		.loc 1 171 0
 1311 053a 872D      		mov r24,r7
 1312 053c 8A21      		and r24,r10
 1313 053e 01F0      		breq .+2
 1314 0540 00C0      		rjmp .L238
 175:main.c        ****           g_state = AMARELO_SEC_PRIM;
 1315               		.loc 1 175 0
 1316 0542 7B20      		and r7,r11
 1317 0544 01F4      		brne .+2
 1318 0546 00C0      		rjmp .L44
 176:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1319               		.loc 1 176 0
 1320 0548 83E0      		ldi r24,lo8(3)
 1321 054a 8093 0000 		sts g_state,r24
 177:main.c        ****         }       
 1322               		.loc 1 177 0
 1323 054e 67E0      		ldi r22,lo8(7)
 1324 0550 89E2      		ldi r24,lo8(41)
 1325 0552 90E0      		ldi r25,0
 1326 0554 0E94 0000 		call _pal_lld_setlineid
 1327               	.LVL121:
 1328 0558 0E94 0000 		call _pal_lld_getpadfromline
 1329               	.LVL122:
 1330 055c C82E      		mov r12,r24
 1331               	.LVL123:
 1332 055e 67E0      		ldi r22,lo8(7)
 1333 0560 89E2      		ldi r24,lo8(41)
 1334 0562 90E0      		ldi r25,0
 1335 0564 0E94 0000 		call _pal_lld_setlineid
 1336               	.LVL124:
 1337 0568 0E94 0000 		call _pal_lld_getportfromline
 1338               	.LVL125:
 1339 056c FC01      		movw r30,r24
 1340 056e 9281      		ldd r25,Z+2
 1341 0570 9701      		movw r18,r14
 1342 0572 00C0      		rjmp 2f
 1343               		1:
 1344 0574 220F      		lsl r18
 1345 0576 331F      		rol r19
 1346               		2:
 1347 0578 CA94      		dec r12
 1348 057a 02F4      		brpl 1b
 1349 057c 2095      		com r18
 1350 057e 3095      		com r19
 1351 0580 9223      		and r25,r18
 1352 0582 9283      		std Z+2,r25
 1353 0584 BB24      		clr r11
 1354 0586 B394      		inc r11
 1355               	.LVL126:
 1356 0588 C12C      		mov r12,__zero_reg__
 1357 058a 00C0      		rjmp .L44
 1358               	.LVL127:
 1359               	.L21:
 102:main.c        ****         palSetLine(PRIMARIO_VERDE);
 1360               		.loc 1 102 0
 1361 058c 66E0      		ldi r22,lo8(6)
 1362 058e 89E2      		ldi r24,lo8(41)
 1363 0590 90E0      		ldi r25,0
 1364 0592 0E94 0000 		call _pal_lld_setlineid
 1365               	.LVL128:
 1366 0596 0E94 0000 		call _pal_lld_getpadfromline
 1367               	.LVL129:
 1368 059a 782E      		mov r7,r24
 1369 059c 66E0      		ldi r22,lo8(6)
 1370 059e 89E2      		ldi r24,lo8(41)
 1371 05a0 90E0      		ldi r25,0
 1372 05a2 0E94 0000 		call _pal_lld_setlineid
 1373               	.LVL130:
 1374 05a6 0E94 0000 		call _pal_lld_getportfromline
 1375               	.LVL131:
 1376 05aa FC01      		movw r30,r24
 1377 05ac 9281      		ldd r25,Z+2
 1378 05ae 9701      		movw r18,r14
 1379 05b0 00C0      		rjmp 2f
 1380               		1:
 1381 05b2 220F      		lsl r18
 1382 05b4 331F      		rol r19
 1383               		2:
 1384 05b6 7A94      		dec r7
 1385 05b8 02F4      		brpl 1b
 1386 05ba 2095      		com r18
 1387 05bc 3095      		com r19
 1388 05be 9223      		and r25,r18
 1389 05c0 9283      		std Z+2,r25
 103:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 1390               		.loc 1 103 0
 1391 05c2 67E0      		ldi r22,lo8(7)
 1392 05c4 89E2      		ldi r24,lo8(41)
 1393 05c6 90E0      		ldi r25,0
 1394 05c8 0E94 0000 		call _pal_lld_setlineid
 1395               	.LVL132:
 1396 05cc 0E94 0000 		call _pal_lld_getpadfromline
 1397               	.LVL133:
 1398 05d0 782E      		mov r7,r24
 1399 05d2 67E0      		ldi r22,lo8(7)
 1400 05d4 89E2      		ldi r24,lo8(41)
 1401 05d6 90E0      		ldi r25,0
 1402 05d8 0E94 0000 		call _pal_lld_setlineid
 1403               	.LVL134:
 1404 05dc 0E94 0000 		call _pal_lld_getportfromline
 1405               	.LVL135:
 1406 05e0 FC01      		movw r30,r24
 1407 05e2 9281      		ldd r25,Z+2
 1408 05e4 9701      		movw r18,r14
 1409 05e6 00C0      		rjmp 2f
 1410               		1:
 1411 05e8 220F      		lsl r18
 1412               		2:
 1413 05ea 7A94      		dec r7
 1414 05ec 02F4      		brpl 1b
 1415 05ee 922B      		or r25,r18
 1416 05f0 9283      		std Z+2,r25
 104:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 1417               		.loc 1 104 0
 1418 05f2 60E0      		ldi r22,0
 1419 05f4 83E2      		ldi r24,lo8(35)
 1420 05f6 90E0      		ldi r25,0
 1421 05f8 0E94 0000 		call _pal_lld_setlineid
 1422               	.LVL136:
 1423 05fc 0E94 0000 		call _pal_lld_getpadfromline
 1424               	.LVL137:
 1425 0600 782E      		mov r7,r24
 1426 0602 60E0      		ldi r22,0
 1427 0604 83E2      		ldi r24,lo8(35)
 1428 0606 90E0      		ldi r25,0
 1429 0608 0E94 0000 		call _pal_lld_setlineid
 1430               	.LVL138:
 1431 060c 0E94 0000 		call _pal_lld_getportfromline
 1432               	.LVL139:
 1433 0610 FC01      		movw r30,r24
 1434 0612 9281      		ldd r25,Z+2
 1435 0614 9701      		movw r18,r14
 1436 0616 00C0      		rjmp 2f
 1437               		1:
 1438 0618 220F      		lsl r18
 1439               		2:
 1440 061a 7A94      		dec r7
 1441 061c 02F4      		brpl 1b
 1442 061e 922B      		or r25,r18
 1443 0620 9283      		std Z+2,r25
 105:main.c        ****         if (prev_state == SECUNDARIO) {
 1444               		.loc 1 105 0
 1445 0622 62E0      		ldi r22,lo8(2)
 1446 0624 83E2      		ldi r24,lo8(35)
 1447 0626 90E0      		ldi r25,0
 1448 0628 0E94 0000 		call _pal_lld_setlineid
 1449               	.LVL140:
 1450 062c 0E94 0000 		call _pal_lld_getpadfromline
 1451               	.LVL141:
 1452 0630 782E      		mov r7,r24
 1453 0632 62E0      		ldi r22,lo8(2)
 1454 0634 83E2      		ldi r24,lo8(35)
 1455 0636 90E0      		ldi r25,0
 1456 0638 0E94 0000 		call _pal_lld_setlineid
 1457               	.LVL142:
 1458 063c 0E94 0000 		call _pal_lld_getportfromline
 1459               	.LVL143:
 1460 0640 FC01      		movw r30,r24
 1461 0642 9281      		ldd r25,Z+2
 1462 0644 9701      		movw r18,r14
 1463 0646 00C0      		rjmp 2f
 1464               		1:
 1465 0648 220F      		lsl r18
 1466               		2:
 1467 064a 7A94      		dec r7
 1468 064c 02F4      		brpl 1b
 1469 064e 922B      		or r25,r18
 1470 0650 9283      		std Z+2,r25
 106:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1471               		.loc 1 106 0
 1472 0652 E989      		ldd r30,Y+17
 1473 0654 E130      		cpi r30,lo8(1)
 1474 0656 01F4      		brne .+2
 1475 0658 00C0      		rjmp .L239
 124:main.c        ****         chVTSet(&main_vt, TIME_MS2I(prev_state == SECUNDARIO ? 5000 : 10000), (vtfunc_t)vt_cb, (voi
 1476               		.loc 1 124 0
 1477 065a 1092 0000 		sts main_vt_flag,__zero_reg__
 125:main.c        ****         while (!main_vt_flag) {
 1478               		.loc 1 125 0
 1479 065e 30E5      		ldi r19,lo8(80)
 1480 0660 432E      		mov r4,r19
 1481 0662 32E6      		ldi r19,lo8(98)
 1482 0664 532E      		mov r5,r19
 1483 0666 32E0      		ldi r19,lo8(2)
 1484 0668 632E      		mov r6,r19
 1485 066a 712C      		mov r7,__zero_reg__
 1486               	.L92:
 1487               	.LVL144:
 1488               	.LBB399:
 1489               	.LBB400:
 1490               	.LBB401:
 1491               	.LBB402:
 430:../../os/common/ports/AVR/chcore.h **** }
 1492               		.loc 3 430 0 discriminator 4
 1493               	/* #APP */
 1494               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1495 066c F894      		cli
 1496               	 ;  0 "" 2
 1497               	.LVL145:
 1498               	/* #NOAPP */
 1499               	.LBE402:
 1500               	.LBE401:
 1501               	.LBE400:
 1502               	.LBB403:
 1503               	.LBB404:
 1504               	.LBB405:
 1505               	.LBB406:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1506               		.loc 2 287 0 discriminator 4
 1507 066e 8981      		ldd r24,Y+1
 1508 0670 9A81      		ldd r25,Y+2
 1509 0672 892B      		or r24,r25
 1510 0674 01F0      		breq .L37
 288:../../os/rt/include/chvt.h ****   }
 1511               		.loc 2 288 0
 1512 0676 CE01      		movw r24,r28
 1513 0678 0196      		adiw r24,1
 1514 067a 0E94 0000 		call chVTDoResetI
 1515               	.LVL146:
 1516               	.L37:
 1517               	.LBE406:
 1518               	.LBE405:
 1519               		.loc 2 335 0
 1520 067e 8E01      		movw r16,r28
 1521 0680 0F5F      		subi r16,-1
 1522 0682 1F4F      		sbci r17,-1
 1523 0684 20E0      		ldi r18,lo8(gs(vt_cb))
 1524 0686 30E0      		ldi r19,hi8(gs(vt_cb))
 1525 0688 B301      		movw r22,r6
 1526 068a A201      		movw r20,r4
 1527 068c C801      		movw r24,r16
 1528 068e 0E94 0000 		call chVTDoSetI
 1529               	.LVL147:
 1530               	.LBE404:
 1531               	.LBE403:
 1532               	.LBB407:
 1533               	.LBB408:
 1534               	.LBB409:
 1535               	.LBB410:
 1536               		.loc 3 440 0
 1537               	/* #APP */
 1538               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1539 0692 7894      		sei
 1540               	 ;  0 "" 2
 1541               	/* #NOAPP */
 1542               	.LBE410:
 1543               	.LBE409:
 1544               	.LBE408:
 1545               	.LBE407:
 1546               	.LBE399:
 126:main.c        ****           if (qsize > 0) {
 1547               		.loc 1 126 0
 1548 0694 8091 0000 		lds r24,main_vt_flag
 1549 0698 8823      		tst r24
 1550 069a 01F0      		breq .L43
 1551 069c 00C0      		rjmp .L38
 1552               	.LVL148:
 1553               	.L39:
 144:main.c        ****         }
 1554               		.loc 1 144 0
 1555 069e 6BE1      		ldi r22,lo8(27)
 1556 06a0 76E0      		ldi r23,lo8(6)
 1557 06a2 80E0      		ldi r24,0
 1558 06a4 90E0      		ldi r25,0
 1559 06a6 0E94 0000 		call chThdSleep
 1560               	.LVL149:
 126:main.c        ****           if (qsize > 0) {
 1561               		.loc 1 126 0
 1562 06aa 8091 0000 		lds r24,main_vt_flag
 1563 06ae 8111      		cpse r24,__zero_reg__
 1564 06b0 00C0      		rjmp .L38
 1565               	.L43:
 127:main.c        ****             ev = dequeue();
 1566               		.loc 1 127 0
 1567 06b2 8091 0000 		lds r24,qsize
 1568 06b6 9091 0000 		lds r25,qsize+1
 1569 06ba 892B      		or r24,r25
 1570 06bc 01F0      		breq .L39
 128:main.c        ****             if (ev == AMB_SECUNDARIO || flag_amb_sec == 1) {
 1571               		.loc 1 128 0
 1572 06be 0E94 0000 		call dequeue
 1573               	.LVL150:
 1574 06c2 3C01      		movw r6,r24
 1575               	.LVL151:
 129:main.c        ****               flag_amb_sec = 1;
 1576               		.loc 1 129 0
 1577 06c4 0497      		sbiw r24,4
 1578 06c6 01F4      		brne .+2
 1579 06c8 00C0      		rjmp .L40
 129:main.c        ****               flag_amb_sec = 1;
 1580               		.loc 1 129 0 is_stmt 0 discriminator 1
 1581 06ca 81E0      		ldi r24,lo8(1)
 1582 06cc D816      		cp r13,r24
 1583 06ce 01F4      		brne .+2
 1584 06d0 00C0      		rjmp .L40
 134:main.c        ****               flag_ped = 1;
 1585               		.loc 1 134 0 is_stmt 1
 1586 06d2 E2E0      		ldi r30,2
 1587 06d4 6E16      		cp r6,r30
 1588 06d6 7104      		cpc r7,__zero_reg__
 1589 06d8 01F4      		brne .+2
 1590 06da 00C0      		rjmp .L97
 1591               	.L240:
 137:main.c        ****               flag_sec = 1;
 1592               		.loc 1 137 0
 1593 06dc F1E0      		ldi r31,1
 1594 06de 6F16      		cp r6,r31
 1595 06e0 7104      		cpc r7,__zero_reg__
 1596 06e2 01F4      		brne .+2
 1597 06e4 00C0      		rjmp .L98
 140:main.c        ****               flag_amb_prim = !flag_amb_prim;
 1598               		.loc 1 140 0
 1599 06e6 83E0      		ldi r24,3
 1600 06e8 6816      		cp r6,r24
 1601 06ea 7104      		cpc r7,__zero_reg__
 1602 06ec 01F4      		brne .L39
 1603 06ee C324      		eor r12,r3
 1604               	.LVL152:
 1605 06f0 00C0      		rjmp .L39
 1606               	.LVL153:
 1607               	.L30:
 1608               	.LBB411:
 1609               	.LBB412:
 1610               	.LBB413:
 1611               	.LBB414:
 430:../../os/common/ports/AVR/chcore.h **** }
 1612               		.loc 3 430 0
 1613               	/* #APP */
 1614               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1615 06f2 F894      		cli
 1616               	 ;  0 "" 2
 1617               	.LVL154:
 1618               	/* #NOAPP */
 1619               	.LBE414:
 1620               	.LBE413:
 1621               	.LBE412:
 1622               	.LBB415:
 1623               	.LBB416:
 1624               	.LBB417:
 1625               	.LBB418:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1626               		.loc 2 287 0
 1627 06f4 8981      		ldd r24,Y+1
 1628 06f6 9A81      		ldd r25,Y+2
 1629 06f8 892B      		or r24,r25
 1630 06fa 01F0      		breq .L87
 288:../../os/rt/include/chvt.h ****   }
 1631               		.loc 2 288 0
 1632 06fc CE01      		movw r24,r28
 1633 06fe 0196      		adiw r24,1
 1634 0700 0E94 0000 		call chVTDoResetI
 1635               	.LVL155:
 1636               	.L87:
 1637               	.LBE418:
 1638               	.LBE417:
 1639               		.loc 2 335 0
 1640 0704 8E01      		movw r16,r28
 1641 0706 0F5F      		subi r16,-1
 1642 0708 1F4F      		sbci r17,-1
 1643 070a 20E0      		ldi r18,lo8(gs(vt_cb))
 1644 070c 30E0      		ldi r19,hi8(gs(vt_cb))
 1645 070e 40E1      		ldi r20,lo8(16)
 1646 0710 5AE7      		ldi r21,lo8(122)
 1647 0712 60E0      		ldi r22,0
 1648 0714 70E0      		ldi r23,0
 1649 0716 C801      		movw r24,r16
 1650 0718 0E94 0000 		call chVTDoSetI
 1651               	.LVL156:
 1652               	.LBE416:
 1653               	.LBE415:
 1654               	.LBB419:
 1655               	.LBB420:
 1656               	.LBB421:
 1657               	.LBB422:
 1658               		.loc 3 440 0
 1659               	/* #APP */
 1660               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1661 071c 7894      		sei
 1662               	 ;  0 "" 2
 1663               	/* #NOAPP */
 1664               	.LBE422:
 1665               	.LBE421:
 1666               	.LBE420:
 1667               	.LBE419:
 1668               	.LBE411:
 379:main.c        ****           if (qsize > 0) {
 1669               		.loc 1 379 0
 1670 071e 8091 0000 		lds r24,main_vt_flag
 1671 0722 8823      		tst r24
 1672 0724 01F0      		breq .L90
 1673 0726 00C0      		rjmp .L88
 1674               	.LVL157:
 1675               	.L89:
 396:main.c        ****           chThdSleepMilliseconds(125);
 1676               		.loc 1 396 0
 1677 0728 62E0      		ldi r22,lo8(2)
 1678 072a 83E2      		ldi r24,lo8(35)
 1679 072c 90E0      		ldi r25,0
 1680 072e 0E94 0000 		call _pal_lld_setlineid
 1681               	.LVL158:
 1682 0732 0E94 0000 		call _pal_lld_getportfromline
 1683               	.LVL159:
 1684 0736 FC01      		movw r30,r24
 1685 0738 7280      		ldd r7,Z+2
 1686 073a 62E0      		ldi r22,lo8(2)
 1687 073c 83E2      		ldi r24,lo8(35)
 1688 073e 90E0      		ldi r25,0
 1689 0740 0E94 0000 		call _pal_lld_setlineid
 1690               	.LVL160:
 1691 0744 0E94 0000 		call _pal_lld_getpadfromline
 1692               	.LVL161:
 1693 0748 682E      		mov r6,r24
 1694 074a 62E0      		ldi r22,lo8(2)
 1695 074c 83E2      		ldi r24,lo8(35)
 1696 074e 90E0      		ldi r25,0
 1697 0750 0E94 0000 		call _pal_lld_setlineid
 1698               	.LVL162:
 1699 0754 0E94 0000 		call _pal_lld_getportfromline
 1700               	.LVL163:
 1701 0758 9701      		movw r18,r14
 1702 075a 00C0      		rjmp 2f
 1703               		1:
 1704 075c 220F      		lsl r18
 1705               		2:
 1706 075e 6A94      		dec r6
 1707 0760 02F4      		brpl 1b
 1708 0762 7226      		eor r7,r18
 1709 0764 FC01      		movw r30,r24
 1710 0766 7282      		std Z+2,r7
 397:main.c        ****         }
 1711               		.loc 1 397 0
 1712 0768 61EA      		ldi r22,lo8(-95)
 1713 076a 77E0      		ldi r23,lo8(7)
 1714 076c 80E0      		ldi r24,0
 1715 076e 90E0      		ldi r25,0
 1716 0770 0E94 0000 		call chThdSleep
 1717               	.LVL164:
 379:main.c        ****           if (qsize > 0) {
 1718               		.loc 1 379 0
 1719 0774 8091 0000 		lds r24,main_vt_flag
 1720 0778 8111      		cpse r24,__zero_reg__
 1721 077a 00C0      		rjmp .L88
 1722               	.L90:
 380:main.c        ****             ev = dequeue();
 1723               		.loc 1 380 0
 1724 077c 8091 0000 		lds r24,qsize
 1725 0780 9091 0000 		lds r25,qsize+1
 1726 0784 892B      		or r24,r25
 1727 0786 01F0      		breq .L89
 381:main.c        ****             if (ev == AMB_PRIMARIO) {
 1728               		.loc 1 381 0
 1729 0788 0E94 0000 		call dequeue
 1730               	.LVL165:
 382:main.c        ****               flag_amb_prim = 1;
 1731               		.loc 1 382 0
 1732 078c 8330      		cpi r24,3
 1733 078e 9105      		cpc r25,__zero_reg__
 1734 0790 01F4      		brne .+2
 1735 0792 00C0      		rjmp .L126
 385:main.c        ****               flag_amb_sec = 1;
 1736               		.loc 1 385 0
 1737 0794 8430      		cpi r24,4
 1738 0796 9105      		cpc r25,__zero_reg__
 1739 0798 01F4      		brne .+2
 1740 079a 00C0      		rjmp .L127
 389:main.c        ****               flag_ped = 1;
 1741               		.loc 1 389 0
 1742 079c 8230      		cpi r24,2
 1743 079e 9105      		cpc r25,__zero_reg__
 1744 07a0 01F4      		brne .+2
 1745 07a2 00C0      		rjmp .L128
 392:main.c        ****               flag_sec = 1;
 1746               		.loc 1 392 0
 1747 07a4 0197      		sbiw r24,1
 1748 07a6 01F0      		breq .+2
 1749 07a8 00C0      		rjmp .L89
 393:main.c        ****             }
 1750               		.loc 1 393 0
 1751 07aa BB24      		clr r11
 1752 07ac B394      		inc r11
 1753               	.LVL166:
 1754 07ae 00C0      		rjmp .L89
 1755               	.LVL167:
 1756               	.L40:
 1757               	.LBB423:
 1758               	.LBB424:
 1759               	.LBB425:
 1760               	.LBB426:
 430:../../os/common/ports/AVR/chcore.h **** }
 1761               		.loc 3 430 0
 1762               	/* #APP */
 1763               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1764 07b0 F894      		cli
 1765               	 ;  0 "" 2
 1766               	.LVL168:
 1767               	/* #NOAPP */
 1768               	.LBE426:
 1769               	.LBE425:
 1770               	.LBE424:
 1771               	.LBB427:
 1772               	.LBB428:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1773               		.loc 2 287 0
 1774 07b2 8981      		ldd r24,Y+1
 1775 07b4 9A81      		ldd r25,Y+2
 1776 07b6 892B      		or r24,r25
 1777 07b8 01F0      		breq .L42
 288:../../os/rt/include/chvt.h ****   }
 1778               		.loc 2 288 0
 1779 07ba CE01      		movw r24,r28
 1780 07bc 0196      		adiw r24,1
 1781 07be 0E94 0000 		call chVTDoResetI
 1782               	.LVL169:
 1783               	.L42:
 1784               	.LBE428:
 1785               	.LBE427:
 1786               	.LBB429:
 1787               	.LBB430:
 1788               	.LBB431:
 1789               	.LBB432:
 1790               		.loc 3 440 0
 1791               	/* #APP */
 1792               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1793 07c2 7894      		sei
 1794               	 ;  0 "" 2
 1795               	.LVL170:
 1796               	/* #NOAPP */
 1797               	.LBE432:
 1798               	.LBE431:
 1799               	.LBE430:
 1800               	.LBE429:
 1801               	.LBE423:
 132:main.c        ****             } 
 1802               		.loc 1 132 0
 1803 07c4 9092 0000 		sts main_vt_flag,r9
 130:main.c        ****               chVTReset(&main_vt);
 1804               		.loc 1 130 0
 1805 07c8 DD24      		clr r13
 1806 07ca D394      		inc r13
 1807               	.LVL171:
 134:main.c        ****               flag_ped = 1;
 1808               		.loc 1 134 0
 1809 07cc E2E0      		ldi r30,2
 1810 07ce 6E16      		cp r6,r30
 1811 07d0 7104      		cpc r7,__zero_reg__
 1812 07d2 01F0      		breq .+2
 1813 07d4 00C0      		rjmp .L240
 1814               	.LVL172:
 1815               	.L97:
 135:main.c        ****             } 
 1816               		.loc 1 135 0
 1817 07d6 AA24      		clr r10
 1818 07d8 A394      		inc r10
 1819               	.LVL173:
 1820 07da 00C0      		rjmp .L39
 1821               	.LVL174:
 1822               	.L88:
 399:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 1823               		.loc 1 399 0
 1824 07dc 1092 0000 		sts main_vt_flag,__zero_reg__
 400:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 1825               		.loc 1 400 0
 1826 07e0 1092 0000 		sts g_state,__zero_reg__
 1827               	.LVL175:
 1828               	.L232:
 401:main.c        ****         prev_state = PEDESTRE;
 1829               		.loc 1 401 0
 1830 07e4 62E0      		ldi r22,lo8(2)
 1831 07e6 83E2      		ldi r24,lo8(35)
 1832 07e8 90E0      		ldi r25,0
 1833 07ea 0E94 0000 		call _pal_lld_setlineid
 1834               	.LVL176:
 1835 07ee 0E94 0000 		call _pal_lld_getpadfromline
 1836               	.LVL177:
 1837 07f2 782E      		mov r7,r24
 1838 07f4 62E0      		ldi r22,lo8(2)
 1839 07f6 83E2      		ldi r24,lo8(35)
 1840 07f8 90E0      		ldi r25,0
 1841 07fa 0E94 0000 		call _pal_lld_setlineid
 1842               	.LVL178:
 1843 07fe 0E94 0000 		call _pal_lld_getportfromline
 1844               	.LVL179:
 1845 0802 FC01      		movw r30,r24
 1846 0804 9281      		ldd r25,Z+2
 1847 0806 9701      		movw r18,r14
 1848 0808 00C0      		rjmp 2f
 1849               		1:
 1850 080a 220F      		lsl r18
 1851               		2:
 1852 080c 7A94      		dec r7
 1853 080e 02F4      		brpl 1b
 1854 0810 922B      		or r25,r18
 1855 0812 9283      		std Z+2,r25
 1856               	.LVL180:
 402:main.c        ****         break;
 1857               		.loc 1 402 0
 1858 0814 F2E0      		ldi r31,lo8(2)
 1859 0816 F98B      		std Y+17,r31
 403:main.c        ****       default:
 1860               		.loc 1 403 0
 1861 0818 00C0      		rjmp .L44
 1862               	.LVL181:
 1863               	.L38:
 146:main.c        ****         g_state = VERDE_IDLE_PRIM;
 1864               		.loc 1 146 0
 1865 081a 1092 0000 		sts main_vt_flag,__zero_reg__
 147:main.c        ****         break;
 1866               		.loc 1 147 0
 1867 081e 9092 0000 		sts g_state,r9
 148:main.c        ****       case VERDE_IDLE_PRIM:
 1868               		.loc 1 148 0
 1869 0822 00C0      		rjmp .L44
 1870               	.LVL182:
 1871               	.L63:
 282:main.c        ****         while (flag_amb_sec) {
 1872               		.loc 1 282 0
 1873 0824 1092 0000 		sts main_vt_flag,__zero_reg__
 283:main.c        ****           ev = dequeue();
 1874               		.loc 1 283 0
 1875 0828 DD20      		tst r13
 1876 082a 01F0      		breq .L70
 1877               	.LVL183:
 1878               	.L71:
 284:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1879               		.loc 1 284 0
 1880 082c 0E94 0000 		call dequeue
 1881               	.LVL184:
 285:main.c        ****             flag_amb_sec = 0;
 1882               		.loc 1 285 0
 1883 0830 0497      		sbiw r24,4
 1884 0832 01F4      		brne .L71
 1885               	.LVL185:
 1886               	.L70:
 289:main.c        ****         flag_sec = 0;
 1887               		.loc 1 289 0
 1888 0834 85E0      		ldi r24,lo8(5)
 1889 0836 8093 0000 		sts g_state,r24
 1890               	.LVL186:
 291:main.c        ****         break;
 1891               		.loc 1 291 0
 1892 083a 61E0      		ldi r22,lo8(1)
 1893 083c 83E2      		ldi r24,lo8(35)
 1894 083e 90E0      		ldi r25,0
 1895 0840 0E94 0000 		call _pal_lld_setlineid
 1896               	.LVL187:
 1897 0844 0E94 0000 		call _pal_lld_getpadfromline
 1898               	.LVL188:
 1899 0848 D82E      		mov r13,r24
 1900 084a 61E0      		ldi r22,lo8(1)
 1901 084c 83E2      		ldi r24,lo8(35)
 1902 084e 90E0      		ldi r25,0
 1903 0850 0E94 0000 		call _pal_lld_setlineid
 1904               	.LVL189:
 1905 0854 0E94 0000 		call _pal_lld_getportfromline
 1906               	.LVL190:
 1907 0858 FC01      		movw r30,r24
 1908 085a 9281      		ldd r25,Z+2
 1909 085c 9701      		movw r18,r14
 1910 085e 00C0      		rjmp 2f
 1911               		1:
 1912 0860 220F      		lsl r18
 1913 0862 331F      		rol r19
 1914               		2:
 1915 0864 DA94      		dec r13
 1916 0866 02F4      		brpl 1b
 1917 0868 2095      		com r18
 1918 086a 3095      		com r19
 1919 086c 9223      		and r25,r18
 1920 086e 9283      		std Z+2,r25
 290:main.c        ****         palClearLine(SECUNDARIO_VERDE);
 1921               		.loc 1 290 0
 1922 0870 B12C      		mov r11,__zero_reg__
 292:main.c        ****       case AMARELO_PRIM_SEC:
 1923               		.loc 1 292 0
 1924 0872 D12C      		mov r13,__zero_reg__
 1925 0874 00C0      		rjmp .L44
 1926               	.LVL191:
 1927               	.L53:
 230:main.c        ****         g_state = VERDE_LOCKED_PED;
 1928               		.loc 1 230 0
 1929 0876 1092 0000 		sts main_vt_flag,__zero_reg__
 231:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1930               		.loc 1 231 0
 1931 087a 2092 0000 		sts g_state,r2
 232:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 1932               		.loc 1 232 0
 1933 087e 64E0      		ldi r22,lo8(4)
 1934 0880 89E2      		ldi r24,lo8(41)
 1935 0882 90E0      		ldi r25,0
 1936 0884 0E94 0000 		call _pal_lld_setlineid
 1937               	.LVL192:
 1938 0888 0E94 0000 		call _pal_lld_getpadfromline
 1939               	.LVL193:
 1940 088c 782E      		mov r7,r24
 1941 088e 64E0      		ldi r22,lo8(4)
 1942 0890 89E2      		ldi r24,lo8(41)
 1943 0892 90E0      		ldi r25,0
 1944 0894 0E94 0000 		call _pal_lld_setlineid
 1945               	.LVL194:
 1946 0898 0E94 0000 		call _pal_lld_getportfromline
 1947               	.LVL195:
 1948 089c FC01      		movw r30,r24
 1949 089e 9281      		ldd r25,Z+2
 1950 08a0 9701      		movw r18,r14
 1951 08a2 00C0      		rjmp 2f
 1952               		1:
 1953 08a4 220F      		lsl r18
 1954 08a6 331F      		rol r19
 1955               		2:
 1956 08a8 7A94      		dec r7
 1957 08aa 02F4      		brpl 1b
 1958 08ac 2095      		com r18
 1959 08ae 3095      		com r19
 1960 08b0 9223      		and r25,r18
 1961 08b2 9283      		std Z+2,r25
 233:main.c        ****         prev_state = PRIMARIO;
 1962               		.loc 1 233 0
 1963 08b4 66E0      		ldi r22,lo8(6)
 1964 08b6 89E2      		ldi r24,lo8(41)
 1965 08b8 90E0      		ldi r25,0
 1966 08ba 0E94 0000 		call _pal_lld_setlineid
 1967               	.LVL196:
 1968 08be 0E94 0000 		call _pal_lld_getpadfromline
 1969               	.LVL197:
 1970 08c2 782E      		mov r7,r24
 1971 08c4 66E0      		ldi r22,lo8(6)
 1972 08c6 89E2      		ldi r24,lo8(41)
 1973 08c8 90E0      		ldi r25,0
 1974 08ca 0E94 0000 		call _pal_lld_setlineid
 1975               	.LVL198:
 1976 08ce 0E94 0000 		call _pal_lld_getportfromline
 1977               	.LVL199:
 1978 08d2 FC01      		movw r30,r24
 1979 08d4 9281      		ldd r25,Z+2
 1980 08d6 9701      		movw r18,r14
 1981 08d8 00C0      		rjmp 2f
 1982               		1:
 1983 08da 220F      		lsl r18
 1984               		2:
 1985 08dc 7A94      		dec r7
 1986 08de 02F4      		brpl 1b
 1987 08e0 922B      		or r25,r18
 1988 08e2 9283      		std Z+2,r25
 1989               	.LVL200:
 234:main.c        ****         break;
 1990               		.loc 1 234 0
 1991 08e4 F5E0      		ldi r31,lo8(5)
 1992 08e6 F98B      		std Y+17,r31
 235:main.c        ****       case VERDE_LOCKED_SEC:
 1993               		.loc 1 235 0
 1994 08e8 00C0      		rjmp .L44
 1995               	.LVL201:
 1996               	.L49:
 202:main.c        ****         g_state = VERDE_LOCKED_SEC;
 1997               		.loc 1 202 0
 1998 08ea 1092 0000 		sts main_vt_flag,__zero_reg__
 203:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1999               		.loc 1 203 0
 2000 08ee 8092 0000 		sts g_state,r8
 204:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 2001               		.loc 1 204 0
 2002 08f2 64E0      		ldi r22,lo8(4)
 2003 08f4 89E2      		ldi r24,lo8(41)
 2004 08f6 90E0      		ldi r25,0
 2005 08f8 0E94 0000 		call _pal_lld_setlineid
 2006               	.LVL202:
 2007 08fc 0E94 0000 		call _pal_lld_getpadfromline
 2008               	.LVL203:
 2009 0900 782E      		mov r7,r24
 2010 0902 64E0      		ldi r22,lo8(4)
 2011 0904 89E2      		ldi r24,lo8(41)
 2012 0906 90E0      		ldi r25,0
 2013 0908 0E94 0000 		call _pal_lld_setlineid
 2014               	.LVL204:
 2015 090c 0E94 0000 		call _pal_lld_getportfromline
 2016               	.LVL205:
 2017 0910 FC01      		movw r30,r24
 2018 0912 9281      		ldd r25,Z+2
 2019 0914 9701      		movw r18,r14
 2020 0916 00C0      		rjmp 2f
 2021               		1:
 2022 0918 220F      		lsl r18
 2023 091a 331F      		rol r19
 2024               		2:
 2025 091c 7A94      		dec r7
 2026 091e 02F4      		brpl 1b
 2027 0920 2095      		com r18
 2028 0922 3095      		com r19
 2029 0924 9223      		and r25,r18
 2030 0926 9283      		std Z+2,r25
 205:main.c        ****         prev_state = PRIMARIO;
 2031               		.loc 1 205 0
 2032 0928 66E0      		ldi r22,lo8(6)
 2033 092a 89E2      		ldi r24,lo8(41)
 2034 092c 90E0      		ldi r25,0
 2035 092e 0E94 0000 		call _pal_lld_setlineid
 2036               	.LVL206:
 2037 0932 0E94 0000 		call _pal_lld_getpadfromline
 2038               	.LVL207:
 2039 0936 782E      		mov r7,r24
 2040 0938 66E0      		ldi r22,lo8(6)
 2041 093a 89E2      		ldi r24,lo8(41)
 2042 093c 90E0      		ldi r25,0
 2043 093e 0E94 0000 		call _pal_lld_setlineid
 2044               	.LVL208:
 2045 0942 0E94 0000 		call _pal_lld_getportfromline
 2046               	.LVL209:
 2047 0946 FC01      		movw r30,r24
 2048 0948 9281      		ldd r25,Z+2
 2049 094a 9701      		movw r18,r14
 2050 094c 00C0      		rjmp 2f
 2051               		1:
 2052 094e 220F      		lsl r18
 2053               		2:
 2054 0950 7A94      		dec r7
 2055 0952 02F4      		brpl 1b
 2056 0954 922B      		or r25,r18
 2057 0956 9283      		std Z+2,r25
 2058               	.LVL210:
 206:main.c        ****         break;
 2059               		.loc 1 206 0
 2060 0958 E5E0      		ldi r30,lo8(5)
 2061 095a E98B      		std Y+17,r30
 207:main.c        ****       case AMARELO_PED_PRIM:
 2062               		.loc 1 207 0
 2063 095c 00C0      		rjmp .L44
 2064               	.LVL211:
 2065               	.L84:
 372:main.c        ****         g_state = VERDE_LOCKED_SEC;
 2066               		.loc 1 372 0
 2067 095e 1092 0000 		sts main_vt_flag,__zero_reg__
 373:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 2068               		.loc 1 373 0
 2069 0962 8092 0000 		sts g_state,r8
 2070 0966 00C0      		rjmp .L232
 2071               	.LVL212:
 2072               	.L73:
 315:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 2073               		.loc 1 315 0
 2074 0968 1092 0000 		sts main_vt_flag,__zero_reg__
 316:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 2075               		.loc 1 316 0
 2076 096c 1092 0000 		sts g_state,__zero_reg__
 317:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 2077               		.loc 1 317 0
 2078 0970 65E0      		ldi r22,lo8(5)
 2079 0972 89E2      		ldi r24,lo8(41)
 2080 0974 90E0      		ldi r25,0
 2081 0976 0E94 0000 		call _pal_lld_setlineid
 2082               	.LVL213:
 2083 097a 0E94 0000 		call _pal_lld_getpadfromline
 2084               	.LVL214:
 2085 097e 782E      		mov r7,r24
 2086 0980 65E0      		ldi r22,lo8(5)
 2087 0982 89E2      		ldi r24,lo8(41)
 2088 0984 90E0      		ldi r25,0
 2089 0986 0E94 0000 		call _pal_lld_setlineid
 2090               	.LVL215:
 2091 098a 0E94 0000 		call _pal_lld_getportfromline
 2092               	.LVL216:
 2093 098e FC01      		movw r30,r24
 2094 0990 9281      		ldd r25,Z+2
 2095 0992 9701      		movw r18,r14
 2096 0994 00C0      		rjmp 2f
 2097               		1:
 2098 0996 220F      		lsl r18
 2099 0998 331F      		rol r19
 2100               		2:
 2101 099a 7A94      		dec r7
 2102 099c 02F4      		brpl 1b
 2103 099e 2095      		com r18
 2104 09a0 3095      		com r19
 2105 09a2 9223      		and r25,r18
 2106 09a4 9283      		std Z+2,r25
 318:main.c        ****         prev_state = SECUNDARIO;
 2107               		.loc 1 318 0
 2108 09a6 60E0      		ldi r22,0
 2109 09a8 83E2      		ldi r24,lo8(35)
 2110 09aa 90E0      		ldi r25,0
 2111 09ac 0E94 0000 		call _pal_lld_setlineid
 2112               	.LVL217:
 2113 09b0 0E94 0000 		call _pal_lld_getpadfromline
 2114               	.LVL218:
 2115 09b4 782E      		mov r7,r24
 2116 09b6 60E0      		ldi r22,0
 2117 09b8 83E2      		ldi r24,lo8(35)
 2118 09ba 90E0      		ldi r25,0
 2119 09bc 0E94 0000 		call _pal_lld_setlineid
 2120               	.LVL219:
 2121 09c0 0E94 0000 		call _pal_lld_getportfromline
 2122               	.LVL220:
 2123 09c4 FC01      		movw r30,r24
 2124 09c6 9281      		ldd r25,Z+2
 2125 09c8 9701      		movw r18,r14
 2126 09ca 00C0      		rjmp 2f
 2127               		1:
 2128 09cc 220F      		lsl r18
 2129               		2:
 2130 09ce 7A94      		dec r7
 2131 09d0 02F4      		brpl 1b
 2132 09d2 922B      		or r25,r18
 2133 09d4 9283      		std Z+2,r25
 2134               	.LVL221:
 319:main.c        ****         break;
 2135               		.loc 1 319 0
 2136 09d6 E1E0      		ldi r30,lo8(1)
 2137 09d8 E98B      		std Y+17,r30
 320:main.c        ****       case VERDE_LOCKED_PED:
 2138               		.loc 1 320 0
 2139 09da 00C0      		rjmp .L44
 2140               	.LVL222:
 2141               	.L77:
 341:main.c        ****         if (flag_amb_sec || flag_sec) {
 2142               		.loc 1 341 0
 2143 09dc 1092 0000 		sts main_vt_flag,__zero_reg__
 342:main.c        ****           g_state = PISCANDO_SEC;
 2144               		.loc 1 342 0
 2145 09e0 D110      		cpse r13,__zero_reg__
 2146 09e2 00C0      		rjmp .L80
 342:main.c        ****           g_state = PISCANDO_SEC;
 2147               		.loc 1 342 0 is_stmt 0 discriminator 1
 2148 09e4 B110      		cpse r11,__zero_reg__
 2149 09e6 00C0      		rjmp .L80
 345:main.c        ****         }
 2150               		.loc 1 345 0 is_stmt 1
 2151 09e8 88E0      		ldi r24,lo8(8)
 2152 09ea 8093 0000 		sts g_state,r24
 2153               	.L82:
 347:main.c        ****         flag_ped = 0;
 2154               		.loc 1 347 0
 2155 09ee 63E0      		ldi r22,lo8(3)
 2156 09f0 83E2      		ldi r24,lo8(35)
 2157 09f2 90E0      		ldi r25,0
 2158 09f4 0E94 0000 		call _pal_lld_setlineid
 2159               	.LVL223:
 2160 09f8 0E94 0000 		call _pal_lld_getpadfromline
 2161               	.LVL224:
 2162 09fc A82E      		mov r10,r24
 2163 09fe 63E0      		ldi r22,lo8(3)
 2164 0a00 83E2      		ldi r24,lo8(35)
 2165 0a02 90E0      		ldi r25,0
 2166 0a04 0E94 0000 		call _pal_lld_setlineid
 2167               	.LVL225:
 2168 0a08 0E94 0000 		call _pal_lld_getportfromline
 2169               	.LVL226:
 2170 0a0c FC01      		movw r30,r24
 2171 0a0e 9281      		ldd r25,Z+2
 2172 0a10 9701      		movw r18,r14
 2173 0a12 00C0      		rjmp 2f
 2174               		1:
 2175 0a14 220F      		lsl r18
 2176 0a16 331F      		rol r19
 2177               		2:
 2178 0a18 AA94      		dec r10
 2179 0a1a 02F4      		brpl 1b
 2180 0a1c 2095      		com r18
 2181 0a1e 3095      		com r19
 2182 0a20 9223      		and r25,r18
 2183 0a22 9283      		std Z+2,r25
 2184               	.LVL227:
 348:main.c        ****         break;
 2185               		.loc 1 348 0
 2186 0a24 A12C      		mov r10,__zero_reg__
 349:main.c        ****       case PISCANDO_SEC:
 2187               		.loc 1 349 0
 2188 0a26 00C0      		rjmp .L44
 2189               	.LVL228:
 2190               	.L80:
 343:main.c        ****         } else {
 2191               		.loc 1 343 0
 2192 0a28 F7E0      		ldi r31,lo8(7)
 2193 0a2a F093 0000 		sts g_state,r31
 2194 0a2e 00C0      		rjmp .L82
 2195               	.LVL229:
 2196               	.L234:
 2197               	.LBB433:
 2198               	.LBB434:
 2199               	.LBB435:
 2200               	.LBB436:
 430:../../os/common/ports/AVR/chcore.h **** }
 2201               		.loc 3 430 0
 2202               	/* #APP */
 2203               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2204 0a30 F894      		cli
 2205               	 ;  0 "" 2
 2206               	.LVL230:
 2207               	/* #NOAPP */
 2208               	.LBE436:
 2209               	.LBE435:
 2210               	.LBE434:
 2211               	.LBB437:
 2212               	.LBB438:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 2213               		.loc 2 287 0
 2214 0a32 8981      		ldd r24,Y+1
 2215 0a34 9A81      		ldd r25,Y+2
 2216               	.LVL231:
 2217 0a36 892B      		or r24,r25
 2218 0a38 01F0      		breq .L66
 288:../../os/rt/include/chvt.h ****   }
 2219               		.loc 2 288 0
 2220 0a3a CE01      		movw r24,r28
 2221 0a3c 0196      		adiw r24,1
 2222 0a3e 0E94 0000 		call chVTDoResetI
 2223               	.LVL232:
 2224               	.L66:
 2225               	.LBE438:
 2226               	.LBE437:
 2227               	.LBB439:
 2228               	.LBB440:
 2229               	.LBB441:
 2230               	.LBB442:
 2231               		.loc 3 440 0
 2232               	/* #APP */
 2233               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2234 0a42 7894      		sei
 2235               	 ;  0 "" 2
 2236               	.LVL233:
 2237               	/* #NOAPP */
 2238               	.LBE442:
 2239               	.LBE441:
 2240               	.LBE440:
 2241               	.LBE439:
 2242               	.LBE433:
 266:main.c        ****             } 
 2243               		.loc 1 266 0
 2244 0a44 9092 0000 		sts main_vt_flag,r9
 264:main.c        ****               chVTReset(&main_vt);
 2245               		.loc 1 264 0
 2246 0a48 CC24      		clr r12
 2247 0a4a C394      		inc r12
 2248 0a4c 00C0      		rjmp .L64
 2249               	.LVL234:
 2250               	.L103:
 187:main.c        ****             } 
 2251               		.loc 1 187 0
 2252 0a4e CC24      		clr r12
 2253 0a50 C394      		inc r12
 2254               	.LVL235:
 2255 0a52 00C0      		rjmp .L50
 2256               	.LVL236:
 2257               	.L107:
 215:main.c        ****             } 
 2258               		.loc 1 215 0
 2259 0a54 CC24      		clr r12
 2260 0a56 C394      		inc r12
 2261               	.LVL237:
 2262 0a58 00C0      		rjmp .L54
 2263               	.LVL238:
 2264               	.L119:
 329:main.c        ****             } 
 2265               		.loc 1 329 0
 2266 0a5a CC24      		clr r12
 2267 0a5c C394      		inc r12
 2268               	.LVL239:
 2269 0a5e 00C0      		rjmp .L78
 2270               	.LVL240:
 2271               	.L98:
 138:main.c        ****             } 
 2272               		.loc 1 138 0
 2273 0a60 BB24      		clr r11
 2274 0a62 B394      		inc r11
 2275               	.LVL241:
 2276 0a64 00C0      		rjmp .L39
 2277               	.LVL242:
 2278               	.L126:
 383:main.c        ****             } 
 2279               		.loc 1 383 0
 2280 0a66 CC24      		clr r12
 2281 0a68 C394      		inc r12
 2282               	.LVL243:
 2283 0a6a 00C0      		rjmp .L89
 2284               	.LVL244:
 2285               	.L122:
 356:main.c        ****             } 
 2286               		.loc 1 356 0
 2287 0a6c CC24      		clr r12
 2288 0a6e C394      		inc r12
 2289               	.LVL245:
 2290 0a70 00C0      		rjmp .L85
 2291               	.LVL246:
 2292               	.L115:
 300:main.c        ****             } 
 2293               		.loc 1 300 0
 2294 0a72 CC24      		clr r12
 2295 0a74 C394      		inc r12
 2296               	.LVL247:
 2297 0a76 00C0      		rjmp .L74
 2298               	.LVL248:
 2299               	.L116:
 304:main.c        ****             } 
 2300               		.loc 1 304 0
 2301 0a78 BB24      		clr r11
 2302 0a7a B394      		inc r11
 2303               	.LVL249:
 303:main.c        ****               flag_sec = 1;
 2304               		.loc 1 303 0
 2305 0a7c DD24      		clr r13
 2306 0a7e D394      		inc r13
 2307               	.LVL250:
 2308 0a80 00C0      		rjmp .L74
 2309               	.LVL251:
 2310               	.L127:
 387:main.c        ****             } 
 2311               		.loc 1 387 0
 2312 0a82 BB24      		clr r11
 2313 0a84 B394      		inc r11
 2314               	.LVL252:
 386:main.c        ****               flag_sec = 1;
 2315               		.loc 1 386 0
 2316 0a86 DD24      		clr r13
 2317 0a88 D394      		inc r13
 2318               	.LVL253:
 2319 0a8a 00C0      		rjmp .L89
 2320               	.LVL254:
 2321               	.L123:
 360:main.c        ****             } 
 2322               		.loc 1 360 0
 2323 0a8c BB24      		clr r11
 2324 0a8e B394      		inc r11
 2325               	.LVL255:
 359:main.c        ****               flag_sec = 1;
 2326               		.loc 1 359 0
 2327 0a90 DD24      		clr r13
 2328 0a92 D394      		inc r13
 2329               	.LVL256:
 2330 0a94 00C0      		rjmp .L85
 2331               	.LVL257:
 2332               	.L235:
 268:main.c        ****               flag_amb_sec = 1;
 2333               		.loc 1 268 0 discriminator 1
 2334 0a96 D110      		cpse r13,__zero_reg__
 2335 0a98 00C0      		rjmp .L113
 2336               	.LVL258:
 2337               	.LBB443:
 2338               	.LBB444:
 2339               	.LBB445:
 2340               	.LBB446:
 430:../../os/common/ports/AVR/chcore.h **** }
 2341               		.loc 3 430 0
 2342               	/* #APP */
 2343               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2344 0a9a F894      		cli
 2345               	 ;  0 "" 2
 2346               	.LVL259:
 2347               	/* #NOAPP */
 2348               	.LBE446:
 2349               	.LBE445:
 2350               	.LBE444:
 2351               	.LBB447:
 2352               	.LBB448:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 2353               		.loc 2 287 0
 2354 0a9c 8981      		ldd r24,Y+1
 2355 0a9e 9A81      		ldd r25,Y+2
 2356               	.LVL260:
 2357 0aa0 892B      		or r24,r25
 2358 0aa2 01F0      		breq .L68
 288:../../os/rt/include/chvt.h ****   }
 2359               		.loc 2 288 0
 2360 0aa4 CE01      		movw r24,r28
 2361 0aa6 0196      		adiw r24,1
 2362 0aa8 0E94 0000 		call chVTDoResetI
 2363               	.LVL261:
 2364               	.L68:
 2365               	.LBE448:
 2366               	.LBE447:
 2367               	.LBB449:
 2368               	.LBB450:
 2369               	.LBB451:
 2370               	.LBB452:
 2371               		.loc 3 440 0
 2372               	/* #APP */
 2373               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2374 0aac 7894      		sei
 2375               	 ;  0 "" 2
 2376               	.LVL262:
 2377               	/* #NOAPP */
 2378               	.LBE452:
 2379               	.LBE451:
 2380               	.LBE450:
 2381               	.LBE449:
 2382               	.LBE443:
 271:main.c        ****             } 
 2383               		.loc 1 271 0
 2384 0aae 9092 0000 		sts main_vt_flag,r9
 269:main.c        ****               chVTReset(&main_vt);
 2385               		.loc 1 269 0
 2386 0ab2 DD24      		clr r13
 2387 0ab4 D394      		inc r13
 271:main.c        ****             } 
 2388               		.loc 1 271 0
 2389 0ab6 00C0      		rjmp .L64
 2390               	.LVL263:
 2391               	.L104:
 191:main.c        ****             } 
 2392               		.loc 1 191 0
 2393 0ab8 BB24      		clr r11
 2394 0aba B394      		inc r11
 2395               	.LVL264:
 190:main.c        ****               flag_sec = 1;
 2396               		.loc 1 190 0
 2397 0abc DD24      		clr r13
 2398 0abe D394      		inc r13
 2399               	.LVL265:
 2400 0ac0 00C0      		rjmp .L50
 2401               	.LVL266:
 2402               	.L108:
 219:main.c        ****             } 
 2403               		.loc 1 219 0
 2404 0ac2 BB24      		clr r11
 2405 0ac4 B394      		inc r11
 2406               	.LVL267:
 218:main.c        ****               flag_sec = 1;
 2407               		.loc 1 218 0
 2408 0ac6 DD24      		clr r13
 2409 0ac8 D394      		inc r13
 2410               	.LVL268:
 2411 0aca 00C0      		rjmp .L54
 2412               	.LVL269:
 2413               	.L120:
 332:main.c        ****             } 
 2414               		.loc 1 332 0
 2415 0acc DD24      		clr r13
 2416 0ace D394      		inc r13
 2417               	.LVL270:
 2418 0ad0 00C0      		rjmp .L78
 2419               	.LVL271:
 2420               	.L237:
 168:main.c        ****           palClearLine(PRIMARIO_VERDE);
 2421               		.loc 1 168 0
 2422 0ad2 83E0      		ldi r24,lo8(3)
 2423 0ad4 8093 0000 		sts g_state,r24
 169:main.c        ****         } 
 2424               		.loc 1 169 0
 2425 0ad8 67E0      		ldi r22,lo8(7)
 2426 0ada 89E2      		ldi r24,lo8(41)
 2427 0adc 90E0      		ldi r25,0
 2428 0ade 0E94 0000 		call _pal_lld_setlineid
 2429               	.LVL272:
 2430 0ae2 0E94 0000 		call _pal_lld_getpadfromline
 2431               	.LVL273:
 2432 0ae6 D82E      		mov r13,r24
 2433               	.LVL274:
 2434 0ae8 67E0      		ldi r22,lo8(7)
 2435 0aea 89E2      		ldi r24,lo8(41)
 2436 0aec 90E0      		ldi r25,0
 2437 0aee 0E94 0000 		call _pal_lld_setlineid
 2438               	.LVL275:
 2439 0af2 0E94 0000 		call _pal_lld_getportfromline
 2440               	.LVL276:
 2441 0af6 FC01      		movw r30,r24
 2442 0af8 9281      		ldd r25,Z+2
 2443 0afa 9701      		movw r18,r14
 2444 0afc 00C0      		rjmp 2f
 2445               		1:
 2446 0afe 220F      		lsl r18
 2447 0b00 331F      		rol r19
 2448               		2:
 2449 0b02 DA94      		dec r13
 2450 0b04 02F4      		brpl 1b
 2451 0b06 2095      		com r18
 2452 0b08 3095      		com r19
 2453 0b0a 9223      		and r25,r18
 2454 0b0c 9283      		std Z+2,r25
 2455 0b0e DD24      		clr r13
 2456 0b10 D394      		inc r13
 2457 0b12 C12C      		mov r12,__zero_reg__
 2458               	.LVL277:
 2459 0b14 00C0      		rjmp .L44
 2460               	.LVL278:
 2461               	.L236:
 151:main.c        ****           if (ev == AMB_PRIMARIO) {
 2462               		.loc 1 151 0
 2463 0b16 0E94 0000 		call dequeue
 2464               	.LVL279:
 152:main.c        ****           flag_amb_prim = !flag_amb_prim;
 2465               		.loc 1 152 0
 2466 0b1a 8330      		cpi r24,3
 2467 0b1c 9105      		cpc r25,__zero_reg__
 2468 0b1e 01F4      		brne .+2
 2469 0b20 00C0      		rjmp .L99
 155:main.c        ****               flag_amb_sec = 1;
 2470               		.loc 1 155 0
 2471 0b22 8430      		cpi r24,4
 2472 0b24 9105      		cpc r25,__zero_reg__
 2473 0b26 01F4      		brne .+2
 2474 0b28 00C0      		rjmp .L100
 159:main.c        ****               flag_ped = 1;
 2475               		.loc 1 159 0
 2476 0b2a 8230      		cpi r24,2
 2477 0b2c 9105      		cpc r25,__zero_reg__
 2478 0b2e 01F4      		brne .+2
 2479 0b30 00C0      		rjmp .L101
 162:main.c        ****               flag_sec = 1;
 2480               		.loc 1 162 0
 2481 0b32 0197      		sbiw r24,1
 2482 0b34 01F0      		breq .+2
 2483 0b36 00C0      		rjmp .L45
 163:main.c        ****           }
 2484               		.loc 1 163 0
 2485 0b38 BB24      		clr r11
 2486 0b3a B394      		inc r11
 2487               	.LVL280:
 2488 0b3c 00C0      		rjmp .L45
 2489               	.LVL281:
 2490               	.L117:
 307:main.c        ****             } 
 2491               		.loc 1 307 0
 2492 0b3e AA24      		clr r10
 2493 0b40 A394      		inc r10
 2494               	.LVL282:
 2495 0b42 00C0      		rjmp .L74
 2496               	.LVL283:
 2497               	.L128:
 390:main.c        ****             } 
 2498               		.loc 1 390 0
 2499 0b44 AA24      		clr r10
 2500 0b46 A394      		inc r10
 2501               	.LVL284:
 2502 0b48 00C0      		rjmp .L89
 2503               	.LVL285:
 2504               	.L124:
 363:main.c        ****             } 
 2505               		.loc 1 363 0
 2506 0b4a AA24      		clr r10
 2507 0b4c A394      		inc r10
 2508               	.LVL286:
 2509 0b4e 00C0      		rjmp .L85
 2510               	.LVL287:
 2511               	.L105:
 194:main.c        ****             } 
 2512               		.loc 1 194 0
 2513 0b50 AA24      		clr r10
 2514 0b52 A394      		inc r10
 2515               	.LVL288:
 2516 0b54 00C0      		rjmp .L50
 2517               	.LVL289:
 2518               	.L109:
 222:main.c        ****             } 
 2519               		.loc 1 222 0
 2520 0b56 AA24      		clr r10
 2521 0b58 A394      		inc r10
 2522               	.LVL290:
 2523 0b5a 00C0      		rjmp .L54
 2524               	.LVL291:
 2525               	.L238:
 172:main.c        ****           palClearLine(PRIMARIO_VERDE);
 2526               		.loc 1 172 0
 2527 0b5c 82E0      		ldi r24,lo8(2)
 2528 0b5e 8093 0000 		sts g_state,r24
 173:main.c        ****         } 
 2529               		.loc 1 173 0
 2530 0b62 67E0      		ldi r22,lo8(7)
 2531 0b64 89E2      		ldi r24,lo8(41)
 2532 0b66 90E0      		ldi r25,0
 2533 0b68 0E94 0000 		call _pal_lld_setlineid
 2534               	.LVL292:
 2535 0b6c 0E94 0000 		call _pal_lld_getpadfromline
 2536               	.LVL293:
 2537 0b70 C82E      		mov r12,r24
 2538               	.LVL294:
 2539 0b72 67E0      		ldi r22,lo8(7)
 2540 0b74 89E2      		ldi r24,lo8(41)
 2541 0b76 90E0      		ldi r25,0
 2542 0b78 0E94 0000 		call _pal_lld_setlineid
 2543               	.LVL295:
 2544 0b7c 0E94 0000 		call _pal_lld_getportfromline
 2545               	.LVL296:
 2546 0b80 FC01      		movw r30,r24
 2547 0b82 9281      		ldd r25,Z+2
 2548 0b84 9701      		movw r18,r14
 2549 0b86 00C0      		rjmp 2f
 2550               		1:
 2551 0b88 220F      		lsl r18
 2552 0b8a 331F      		rol r19
 2553               		2:
 2554 0b8c CA94      		dec r12
 2555 0b8e 02F4      		brpl 1b
 2556 0b90 2095      		com r18
 2557 0b92 3095      		com r19
 2558 0b94 9223      		and r25,r18
 2559 0b96 9283      		std Z+2,r25
 2560 0b98 AA24      		clr r10
 2561 0b9a A394      		inc r10
 2562               	.LVL297:
 2563 0b9c C12C      		mov r12,__zero_reg__
 2564 0b9e 00C0      		rjmp .L44
 2565               	.LVL298:
 2566               	.L113:
 274:main.c        ****             } 
 2567               		.loc 1 274 0
 2568 0ba0 D12C      		mov r13,__zero_reg__
 2569               	.LVL299:
 2570 0ba2 00C0      		rjmp .L64
 2571               	.LVL300:
 2572               	.L233:
 2573               	.LBB453:
 2574               	.LBB454:
 2575               	.LBB455:
 2576               	.LBB456:
 430:../../os/common/ports/AVR/chcore.h **** }
 2577               		.loc 3 430 0
 2578               	/* #APP */
 2579               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2580 0ba4 F894      		cli
 2581               	 ;  0 "" 2
 2582               	.LVL301:
 2583               	/* #NOAPP */
 2584               	.LBE456:
 2585               	.LBE455:
 2586               	.LBE454:
 2587               	.LBB457:
 2588               	.LBB458:
 2589               	.LBB459:
 2590               	.LBB460:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 2591               		.loc 2 287 0
 2592 0ba6 8981      		ldd r24,Y+1
 2593 0ba8 9A81      		ldd r25,Y+2
 2594 0baa 892B      		or r24,r25
 2595 0bac 01F0      		breq .L57
 288:../../os/rt/include/chvt.h ****   }
 2596               		.loc 2 288 0
 2597 0bae CE01      		movw r24,r28
 2598 0bb0 0196      		adiw r24,1
 2599 0bb2 0E94 0000 		call chVTDoResetI
 2600               	.LVL302:
 2601               	.L57:
 2602               	.LBE460:
 2603               	.LBE459:
 2604               		.loc 2 335 0
 2605 0bb6 8E01      		movw r16,r28
 2606 0bb8 0F5F      		subi r16,-1
 2607 0bba 1F4F      		sbci r17,-1
 2608 0bbc 20E0      		ldi r18,lo8(gs(vt_cb))
 2609 0bbe 30E0      		ldi r19,hi8(gs(vt_cb))
 2610 0bc0 48E2      		ldi r20,lo8(40)
 2611 0bc2 51E3      		ldi r21,lo8(49)
 2612 0bc4 61E0      		ldi r22,lo8(1)
 2613 0bc6 70E0      		ldi r23,0
 2614 0bc8 C801      		movw r24,r16
 2615 0bca 0E94 0000 		call chVTDoSetI
 2616               	.LVL303:
 2617               	.LBE458:
 2618               	.LBE457:
 2619               	.LBB461:
 2620               	.LBB462:
 2621               	.LBB463:
 2622               	.LBB464:
 2623               		.loc 3 440 0
 2624               	/* #APP */
 2625               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2626 0bce 7894      		sei
 2627               	 ;  0 "" 2
 2628               	/* #NOAPP */
 2629               	.LBE464:
 2630               	.LBE463:
 2631               	.LBE462:
 2632               	.LBE461:
 2633               	.LBE453:
 241:main.c        ****             if (qsize > 0) {
 2634               		.loc 1 241 0
 2635 0bd0 8091 0000 		lds r24,main_vt_flag
 2636 0bd4 8823      		tst r24
 2637 0bd6 01F0      		breq .L61
 2638 0bd8 00C0      		rjmp .L58
 2639               	.LVL304:
 2640               	.L59:
 255:main.c        ****           }
 2641               		.loc 1 255 0
 2642 0bda 6BE1      		ldi r22,lo8(27)
 2643 0bdc 76E0      		ldi r23,lo8(6)
 2644 0bde 80E0      		ldi r24,0
 2645 0be0 90E0      		ldi r25,0
 2646 0be2 0E94 0000 		call chThdSleep
 2647               	.LVL305:
 241:main.c        ****             if (qsize > 0) {
 2648               		.loc 1 241 0
 2649 0be6 8091 0000 		lds r24,main_vt_flag
 2650 0bea 8111      		cpse r24,__zero_reg__
 2651 0bec 00C0      		rjmp .L58
 2652               	.L61:
 242:main.c        ****               ev = dequeue();
 2653               		.loc 1 242 0
 2654 0bee 8091 0000 		lds r24,qsize
 2655 0bf2 9091 0000 		lds r25,qsize+1
 2656 0bf6 892B      		or r24,r25
 2657 0bf8 01F0      		breq .L59
 243:main.c        ****               if (ev == AMB_PRIMARIO) {
 2658               		.loc 1 243 0
 2659 0bfa 0E94 0000 		call dequeue
 2660               	.LVL306:
 244:main.c        ****                 flag_amb_prim = 1;
 2661               		.loc 1 244 0
 2662 0bfe 8330      		cpi r24,3
 2663 0c00 9105      		cpc r25,__zero_reg__
 2664 0c02 01F4      		brne .+2
 2665 0c04 00C0      		rjmp .L111
 247:main.c        ****                 flag_amb_sec = !flag_amb_sec;
 2666               		.loc 1 247 0
 2667 0c06 8430      		cpi r24,4
 2668 0c08 9105      		cpc r25,__zero_reg__
 2669 0c0a 01F4      		brne .+2
 2670 0c0c 00C0      		rjmp .L241
 251:main.c        ****                 flag_ped = 1;
 2671               		.loc 1 251 0
 2672 0c0e 0297      		sbiw r24,2
 2673 0c10 01F4      		brne .L59
 252:main.c        ****               } 
 2674               		.loc 1 252 0
 2675 0c12 AA24      		clr r10
 2676 0c14 A394      		inc r10
 2677               	.LVL307:
 2678 0c16 00C0      		rjmp .L59
 2679               	.LVL308:
 2680               	.L58:
 258:main.c        ****         chVTSet(&main_vt, TIME_MS2I((prev_state == PRIMARIO) ? 1000 : 6000), (vtfunc_t)vt_cb, (void
 2681               		.loc 1 258 0
 2682 0c18 1092 0000 		sts main_vt_flag,__zero_reg__
 259:main.c        ****         while (!main_vt_flag) {
 2683               		.loc 1 259 0
 2684 0c1c 88E0      		ldi r24,lo8(8)
 2685 0c1e 482E      		mov r4,r24
 2686 0c20 8DE3      		ldi r24,lo8(61)
 2687 0c22 582E      		mov r5,r24
 2688 0c24 612C      		mov r6,__zero_reg__
 2689 0c26 712C      		mov r7,__zero_reg__
 2690 0c28 00C0      		rjmp .L93
 2691               	.LVL309:
 2692               	.L239:
 2693               	.LBB465:
 2694               	.LBB466:
 2695               	.LBB467:
 2696               	.LBB468:
 430:../../os/common/ports/AVR/chcore.h **** }
 2697               		.loc 3 430 0
 2698               	/* #APP */
 2699               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2700 0c2a F894      		cli
 2701               	 ;  0 "" 2
 2702               	.LVL310:
 2703               	/* #NOAPP */
 2704               	.LBE468:
 2705               	.LBE467:
 2706               	.LBE466:
 2707               	.LBB469:
 2708               	.LBB470:
 2709               	.LBB471:
 2710               	.LBB472:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 2711               		.loc 2 287 0
 2712 0c2c 8981      		ldd r24,Y+1
 2713 0c2e 9A81      		ldd r25,Y+2
 2714 0c30 892B      		or r24,r25
 2715 0c32 01F0      		breq .L32
 288:../../os/rt/include/chvt.h ****   }
 2716               		.loc 2 288 0
 2717 0c34 CE01      		movw r24,r28
 2718 0c36 0196      		adiw r24,1
 2719 0c38 0E94 0000 		call chVTDoResetI
 2720               	.LVL311:
 2721               	.L32:
 2722               	.LBE472:
 2723               	.LBE471:
 2724               		.loc 2 335 0
 2725 0c3c 8E01      		movw r16,r28
 2726 0c3e 0F5F      		subi r16,-1
 2727 0c40 1F4F      		sbci r17,-1
 2728 0c42 20E0      		ldi r18,lo8(gs(vt_cb))
 2729 0c44 30E0      		ldi r19,hi8(gs(vt_cb))
 2730 0c46 48E2      		ldi r20,lo8(40)
 2731 0c48 51E3      		ldi r21,lo8(49)
 2732 0c4a 61E0      		ldi r22,lo8(1)
 2733 0c4c 70E0      		ldi r23,0
 2734 0c4e C801      		movw r24,r16
 2735 0c50 0E94 0000 		call chVTDoSetI
 2736               	.LVL312:
 2737               	.LBE470:
 2738               	.LBE469:
 2739               	.LBB473:
 2740               	.LBB474:
 2741               	.LBB475:
 2742               	.LBB476:
 2743               		.loc 3 440 0
 2744               	/* #APP */
 2745               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2746 0c54 7894      		sei
 2747               	 ;  0 "" 2
 2748               	/* #NOAPP */
 2749               	.LBE476:
 2750               	.LBE475:
 2751               	.LBE474:
 2752               	.LBE473:
 2753               	.LBE465:
 108:main.c        ****             if (qsize > 0) {
 2754               		.loc 1 108 0
 2755 0c56 8091 0000 		lds r24,main_vt_flag
 2756 0c5a 8823      		tst r24
 2757 0c5c 01F0      		breq .L36
 2758 0c5e 00C0      		rjmp .L33
 2759               	.LVL313:
 2760               	.L34:
 121:main.c        ****           }
 2761               		.loc 1 121 0
 2762 0c60 6BE1      		ldi r22,lo8(27)
 2763 0c62 76E0      		ldi r23,lo8(6)
 2764 0c64 80E0      		ldi r24,0
 2765 0c66 90E0      		ldi r25,0
 2766 0c68 0E94 0000 		call chThdSleep
 2767               	.LVL314:
 108:main.c        ****             if (qsize > 0) {
 2768               		.loc 1 108 0
 2769 0c6c 8091 0000 		lds r24,main_vt_flag
 2770 0c70 8111      		cpse r24,__zero_reg__
 2771 0c72 00C0      		rjmp .L33
 2772               	.L36:
 109:main.c        ****               ev = dequeue();
 2773               		.loc 1 109 0
 2774 0c74 8091 0000 		lds r24,qsize
 2775 0c78 9091 0000 		lds r25,qsize+1
 2776 0c7c 892B      		or r24,r25
 2777 0c7e 01F0      		breq .L34
 110:main.c        ****               if (ev == AMB_PRIMARIO) {
 2778               		.loc 1 110 0
 2779 0c80 0E94 0000 		call dequeue
 2780               	.LVL315:
 111:main.c        ****                 flag_amb_prim = !flag_amb_prim;
 2781               		.loc 1 111 0
 2782 0c84 8330      		cpi r24,3
 2783 0c86 9105      		cpc r25,__zero_reg__
 2784 0c88 01F0      		breq .L242
 113:main.c        ****                 flag_amb_sec = 1;
 2785               		.loc 1 113 0
 2786 0c8a 8430      		cpi r24,4
 2787 0c8c 9105      		cpc r25,__zero_reg__
 2788 0c8e 01F0      		breq .L94
 115:main.c        ****                 flag_ped = 1;
 2789               		.loc 1 115 0
 2790 0c90 8230      		cpi r24,2
 2791 0c92 9105      		cpc r25,__zero_reg__
 2792 0c94 01F0      		breq .L95
 117:main.c        ****                 flag_sec = 1;
 2793               		.loc 1 117 0
 2794 0c96 0197      		sbiw r24,1
 2795 0c98 01F4      		brne .L34
 118:main.c        ****               }
 2796               		.loc 1 118 0
 2797 0c9a BB24      		clr r11
 2798 0c9c B394      		inc r11
 2799               	.LVL316:
 2800 0c9e 00C0      		rjmp .L34
 2801               	.LVL317:
 2802               	.L33:
 124:main.c        ****         chVTSet(&main_vt, TIME_MS2I(prev_state == SECUNDARIO ? 5000 : 10000), (vtfunc_t)vt_cb, (voi
 2803               		.loc 1 124 0
 2804 0ca0 1092 0000 		sts main_vt_flag,__zero_reg__
 125:main.c        ****         while (!main_vt_flag) {
 2805               		.loc 1 125 0
 2806 0ca4 28E2      		ldi r18,lo8(40)
 2807 0ca6 422E      		mov r4,r18
 2808 0ca8 21E3      		ldi r18,lo8(49)
 2809 0caa 522E      		mov r5,r18
 2810 0cac 6624      		clr r6
 2811 0cae 6394      		inc r6
 2812 0cb0 712C      		mov r7,__zero_reg__
 2813 0cb2 00C0      		rjmp .L92
 2814               	.LVL318:
 2815               	.L99:
 2816 0cb4 8C2D      		mov r24,r12
 2817               	.LVL319:
 153:main.c        ****           } 
 2818               		.loc 1 153 0
 2819 0cb6 C72C      		mov r12,r7
 2820               	.LVL320:
 2821 0cb8 782E      		mov r7,r24
 2822 0cba 00C0      		rjmp .L45
 2823               	.LVL321:
 2824               	.L100:
 157:main.c        ****           } 
 2825               		.loc 1 157 0
 2826 0cbc BB24      		clr r11
 2827 0cbe B394      		inc r11
 2828               	.LVL322:
 156:main.c        ****               flag_sec = 1;
 2829               		.loc 1 156 0
 2830 0cc0 DD24      		clr r13
 2831 0cc2 D394      		inc r13
 2832               	.LVL323:
 2833 0cc4 00C0      		rjmp .L45
 2834               	.LVL324:
 2835               	.L242:
 2836 0cc6 C324      		eor r12,r3
 2837               	.LVL325:
 2838 0cc8 00C0      		rjmp .L34
 2839               	.LVL326:
 2840               	.L111:
 245:main.c        ****               } 
 2841               		.loc 1 245 0
 2842 0cca CC24      		clr r12
 2843 0ccc C394      		inc r12
 2844               	.LVL327:
 2845 0cce 00C0      		rjmp .L59
 2846               	.LVL328:
 2847               	.L94:
 114:main.c        ****               } else if (ev == PEDESTRE) {
 2848               		.loc 1 114 0
 2849 0cd0 DD24      		clr r13
 2850 0cd2 D394      		inc r13
 2851               	.LVL329:
 2852 0cd4 00C0      		rjmp .L34
 2853               	.LVL330:
 2854               	.L241:
 2855 0cd6 D324      		eor r13,r3
 2856               	.LVL331:
 2857 0cd8 00C0      		rjmp .L59
 2858               	.LVL332:
 2859               	.L101:
 160:main.c        ****           } 
 2860               		.loc 1 160 0
 2861 0cda AA24      		clr r10
 2862 0cdc A394      		inc r10
 2863               	.LVL333:
 2864 0cde 00C0      		rjmp .L45
 2865               	.LVL334:
 2866               	.L95:
 116:main.c        ****               } else if (ev == SECUNDARIO) {
 2867               		.loc 1 116 0
 2868 0ce0 AA24      		clr r10
 2869 0ce2 A394      		inc r10
 2870               	.LVL335:
 2871 0ce4 00C0      		rjmp .L34
 2872               		.cfi_endproc
 2873               	.LFE243:
 2875               		.section	.text.button_check,"ax",@progbits
 2876               	.global	button_check
 2878               	button_check:
 2879               	.LFB248:
 558:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 2880               		.loc 1 558 0
 2881               		.cfi_startproc
 2882               	.LVL336:
 2883 0000 CF92      		push r12
 2884               	.LCFI8:
 2885               		.cfi_def_cfa_offset 3
 2886               		.cfi_offset 12, -2
 2887 0002 DF92      		push r13
 2888               	.LCFI9:
 2889               		.cfi_def_cfa_offset 4
 2890               		.cfi_offset 13, -3
 2891 0004 EF92      		push r14
 2892               	.LCFI10:
 2893               		.cfi_def_cfa_offset 5
 2894               		.cfi_offset 14, -4
 2895 0006 CF93      		push r28
 2896               	.LCFI11:
 2897               		.cfi_def_cfa_offset 6
 2898               		.cfi_offset 28, -5
 2899               	/* prologue: function */
 2900               	/* frame size = 0 */
 2901               	/* stack size = 4 */
 2902               	.L__stack_usage = 4
 2903 0008 6B01      		movw r12,r22
 2904 000a E82E      		mov r14,r24
 562:main.c        ****     x1 = palReadLine(line);
 2905               		.loc 1 562 0
 2906 000c 4130      		cpi r20,lo8(1)
 2907 000e 01F0      		breq .L248
 567:main.c        ****     x2 = palReadLine(line);
 2908               		.loc 1 567 0
 2909 0010 4230      		cpi r20,lo8(2)
 2910 0012 01F4      		brne .+2
 2911 0014 00C0      		rjmp .L249
 572:main.c        ****     x3 = palReadLine(line);
 2912               		.loc 1 572 0
 2913 0016 4330      		cpi r20,lo8(3)
 2914 0018 01F4      		brne .+2
 2915 001a 00C0      		rjmp .L250
 577:main.c        ****     x4 = palReadLine(line);
 2916               		.loc 1 577 0
 2917 001c 4430      		cpi r20,lo8(4)
 2918 001e 01F0      		breq .L251
 2919               	.LVL337:
 584:main.c        **** }
 2920               		.loc 1 584 0
 2921 0020 81E0      		ldi r24,lo8(1)
 2922 0022 8227      		eor r24,r18
 585:main.c        **** 
 2923               		.loc 1 585 0
 2924 0024 8923      		and r24,r25
 2925               	/* epilogue start */
 2926 0026 CF91      		pop r28
 2927 0028 EF90      		pop r14
 2928               	.LVL338:
 2929 002a DF90      		pop r13
 2930 002c CF90      		pop r12
 2931               	.LVL339:
 2932 002e 0895      		ret
 2933               	.LVL340:
 2934               	.L251:
 578:main.c        ****     w = x4^old_x4;
 2935               		.loc 1 578 0
 2936 0030 0E94 0000 		call _pal_lld_getportfromline
 2937               	.LVL341:
 2938 0034 FC01      		movw r30,r24
 2939 0036 C081      		ld r28,Z
 2940 0038 8E2D      		mov r24,r14
 2941 003a B601      		movw r22,r12
 2942 003c 0E94 0000 		call _pal_lld_getpadfromline
 2943               	.LVL342:
 2944 0040 2C2F      		mov r18,r28
 2945 0042 30E0      		ldi r19,0
 2946 0044 00C0      		rjmp 2f
 2947               		1:
 2948 0046 3595      		asr r19
 2949 0048 2795      		ror r18
 2950               		2:
 2951 004a 8A95      		dec r24
 2952 004c 02F4      		brpl 1b
 2953 004e 2170      		andi r18,lo8(1)
 579:main.c        ****     old_x4 = x4;
 2954               		.loc 1 579 0
 2955 0050 9091 0000 		lds r25,old_x4.4170
 2956 0054 9227      		eor r25,r18
 2957               	.LVL343:
 580:main.c        ****     x = x4;
 2958               		.loc 1 580 0
 2959 0056 2093 0000 		sts old_x4.4170,r18
 2960               	.LVL344:
 584:main.c        **** }
 2961               		.loc 1 584 0
 2962 005a 81E0      		ldi r24,lo8(1)
 2963 005c 8227      		eor r24,r18
 585:main.c        **** 
 2964               		.loc 1 585 0
 2965 005e 8923      		and r24,r25
 2966               	/* epilogue start */
 2967 0060 CF91      		pop r28
 2968 0062 EF90      		pop r14
 2969               	.LVL345:
 2970 0064 DF90      		pop r13
 2971 0066 CF90      		pop r12
 2972 0068 0895      		ret
 2973               	.LVL346:
 2974               	.L248:
 563:main.c        ****     w = x1^old_x1;
 2975               		.loc 1 563 0
 2976 006a 0E94 0000 		call _pal_lld_getportfromline
 2977               	.LVL347:
 2978 006e FC01      		movw r30,r24
 2979 0070 C081      		ld r28,Z
 2980 0072 8E2D      		mov r24,r14
 2981 0074 B601      		movw r22,r12
 2982 0076 0E94 0000 		call _pal_lld_getpadfromline
 2983               	.LVL348:
 2984 007a 2C2F      		mov r18,r28
 2985 007c 30E0      		ldi r19,0
 2986 007e 00C0      		rjmp 2f
 2987               		1:
 2988 0080 3595      		asr r19
 2989 0082 2795      		ror r18
 2990               		2:
 2991 0084 8A95      		dec r24
 2992 0086 02F4      		brpl 1b
 2993 0088 2170      		andi r18,lo8(1)
 564:main.c        ****     old_x1 = x1;
 2994               		.loc 1 564 0
 2995 008a 9091 0000 		lds r25,old_x1.4164
 2996 008e 9227      		eor r25,r18
 2997               	.LVL349:
 565:main.c        ****     x = x1;
 2998               		.loc 1 565 0
 2999 0090 2093 0000 		sts old_x1.4164,r18
 3000               	.LVL350:
 584:main.c        **** }
 3001               		.loc 1 584 0
 3002 0094 81E0      		ldi r24,lo8(1)
 3003 0096 8227      		eor r24,r18
 585:main.c        **** 
 3004               		.loc 1 585 0
 3005 0098 8923      		and r24,r25
 3006               	/* epilogue start */
 3007 009a CF91      		pop r28
 3008 009c EF90      		pop r14
 3009               	.LVL351:
 3010 009e DF90      		pop r13
 3011 00a0 CF90      		pop r12
 3012 00a2 0895      		ret
 3013               	.LVL352:
 3014               	.L249:
 568:main.c        ****     w = x2^old_x2;
 3015               		.loc 1 568 0
 3016 00a4 0E94 0000 		call _pal_lld_getportfromline
 3017               	.LVL353:
 3018 00a8 FC01      		movw r30,r24
 3019 00aa C081      		ld r28,Z
 3020 00ac 8E2D      		mov r24,r14
 3021 00ae B601      		movw r22,r12
 3022 00b0 0E94 0000 		call _pal_lld_getpadfromline
 3023               	.LVL354:
 3024 00b4 2C2F      		mov r18,r28
 3025 00b6 30E0      		ldi r19,0
 3026 00b8 00C0      		rjmp 2f
 3027               		1:
 3028 00ba 3595      		asr r19
 3029 00bc 2795      		ror r18
 3030               		2:
 3031 00be 8A95      		dec r24
 3032 00c0 02F4      		brpl 1b
 3033 00c2 2170      		andi r18,lo8(1)
 569:main.c        ****     old_x2 = x2;
 3034               		.loc 1 569 0
 3035 00c4 9091 0000 		lds r25,old_x2.4166
 3036 00c8 9227      		eor r25,r18
 3037               	.LVL355:
 570:main.c        ****     x = x2;
 3038               		.loc 1 570 0
 3039 00ca 2093 0000 		sts old_x2.4166,r18
 3040               	.LVL356:
 584:main.c        **** }
 3041               		.loc 1 584 0
 3042 00ce 81E0      		ldi r24,lo8(1)
 3043 00d0 8227      		eor r24,r18
 585:main.c        **** 
 3044               		.loc 1 585 0
 3045 00d2 8923      		and r24,r25
 3046               	/* epilogue start */
 3047 00d4 CF91      		pop r28
 3048 00d6 EF90      		pop r14
 3049               	.LVL357:
 3050 00d8 DF90      		pop r13
 3051 00da CF90      		pop r12
 3052 00dc 0895      		ret
 3053               	.LVL358:
 3054               	.L250:
 573:main.c        ****     w = x3^old_x3;
 3055               		.loc 1 573 0
 3056 00de 0E94 0000 		call _pal_lld_getportfromline
 3057               	.LVL359:
 3058 00e2 FC01      		movw r30,r24
 3059 00e4 C081      		ld r28,Z
 3060 00e6 8E2D      		mov r24,r14
 3061 00e8 B601      		movw r22,r12
 3062 00ea 0E94 0000 		call _pal_lld_getpadfromline
 3063               	.LVL360:
 3064 00ee 2C2F      		mov r18,r28
 3065 00f0 30E0      		ldi r19,0
 3066 00f2 00C0      		rjmp 2f
 3067               		1:
 3068 00f4 3595      		asr r19
 3069 00f6 2795      		ror r18
 3070               		2:
 3071 00f8 8A95      		dec r24
 3072 00fa 02F4      		brpl 1b
 3073 00fc 2170      		andi r18,lo8(1)
 574:main.c        ****     old_x3 = x3;
 3074               		.loc 1 574 0
 3075 00fe 9091 0000 		lds r25,old_x3.4168
 3076 0102 9227      		eor r25,r18
 3077               	.LVL361:
 575:main.c        ****     x = x3;
 3078               		.loc 1 575 0
 3079 0104 2093 0000 		sts old_x3.4168,r18
 3080               	.LVL362:
 584:main.c        **** }
 3081               		.loc 1 584 0
 3082 0108 81E0      		ldi r24,lo8(1)
 3083 010a 8227      		eor r24,r18
 585:main.c        **** 
 3084               		.loc 1 585 0
 3085 010c 8923      		and r24,r25
 3086               	/* epilogue start */
 3087 010e CF91      		pop r28
 3088 0110 EF90      		pop r14
 3089               	.LVL363:
 3090 0112 DF90      		pop r13
 3091 0114 CF90      		pop r12
 3092 0116 0895      		ret
 3093               		.cfi_endproc
 3094               	.LFE248:
 3096               		.section	.text.startup.main,"ax",@progbits
 3097               	.global	main
 3099               	main:
 3100               	.LFB244:
 415:main.c        ****   SerialConfig config = {.sc_brr = UBRR2x(9600),
 3101               		.loc 1 415 0
 3102               		.cfi_startproc
 3103 0000 CF93      		push r28
 3104               	.LCFI12:
 3105               		.cfi_def_cfa_offset 3
 3106               		.cfi_offset 28, -2
 3107 0002 DF93      		push r29
 3108               	.LCFI13:
 3109               		.cfi_def_cfa_offset 4
 3110               		.cfi_offset 29, -3
 3111 0004 00D0      		rcall .
 3112 0006 1F92      		push __zero_reg__
 3113               	.LCFI14:
 3114               		.cfi_def_cfa_offset 7
 3115 0008 CDB7      		in r28,__SP_L__
 3116 000a DEB7      		in r29,__SP_H__
 3117               	.LCFI15:
 3118               		.cfi_def_cfa_register 28
 3119               	/* prologue: function */
 3120               	/* frame size = 3 */
 3121               	/* stack size = 5 */
 3122               	.L__stack_usage = 5
 416:main.c        ****                          .sc_bits_per_char = USART_CHAR_SIZE_8
 3123               		.loc 1 416 0
 3124 000c 8FEC      		ldi r24,lo8(-49)
 3125 000e 90E0      		ldi r25,0
 3126 0010 9A83      		std Y+2,r25
 3127 0012 8983      		std Y+1,r24
 3128 0014 83E0      		ldi r24,lo8(3)
 3129 0016 8B83      		std Y+3,r24
 420:main.c        ****   /*
 3130               		.loc 1 420 0
 3131 0018 0E94 0000 		call queueInit
 3132               	.LVL364:
 428:main.c        ****   chSysInit();
 3133               		.loc 1 428 0
 3134 001c 0E94 0000 		call halInit
 3135               	.LVL365:
 429:main.c        **** 
 3136               		.loc 1 429 0
 3137 0020 0E94 0000 		call chSysInit
 3138               	.LVL366:
 431:main.c        **** 
 3139               		.loc 1 431 0
 3140 0024 BE01      		movw r22,r28
 3141 0026 6F5F      		subi r22,-1
 3142 0028 7F4F      		sbci r23,-1
 3143 002a 80E0      		ldi r24,lo8(SD1)
 3144 002c 90E0      		ldi r25,hi8(SD1)
 3145 002e 0E94 0000 		call sdStart
 3146               	.LVL367:
 434:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 3147               		.loc 1 434 0
 3148 0032 62E0      		ldi r22,lo8(2)
 3149 0034 86E2      		ldi r24,lo8(38)
 3150 0036 90E0      		ldi r25,0
 3151 0038 0E94 0000 		call _pal_lld_setlineid
 3152               	.LVL368:
 3153 003c 0E94 0000 		call _pal_lld_getpadfromline
 3154               	.LVL369:
 3155 0040 F82E      		mov r15,r24
 3156 0042 62E0      		ldi r22,lo8(2)
 3157 0044 86E2      		ldi r24,lo8(38)
 3158 0046 90E0      		ldi r25,0
 3159 0048 0E94 0000 		call _pal_lld_setlineid
 3160               	.LVL370:
 3161 004c 0E94 0000 		call _pal_lld_getportfromline
 3162               	.LVL371:
 3163 0050 01E0      		ldi r16,lo8(1)
 3164 0052 10E0      		ldi r17,0
 3165 0054 B801      		movw r22,r16
 3166 0056 00C0      		rjmp 2f
 3167               		1:
 3168 0058 660F      		lsl r22
 3169               		2:
 3170 005a FA94      		dec r15
 3171 005c 02F4      		brpl 1b
 3172 005e 43E0      		ldi r20,lo8(3)
 3173 0060 0E94 0000 		call _pal_lld_setgroupmode
 3174               	.LVL372:
 435:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 3175               		.loc 1 435 0
 3176 0064 64E0      		ldi r22,lo8(4)
 3177 0066 86E2      		ldi r24,lo8(38)
 3178 0068 90E0      		ldi r25,0
 3179 006a 0E94 0000 		call _pal_lld_setlineid
 3180               	.LVL373:
 3181 006e 0E94 0000 		call _pal_lld_getpadfromline
 3182               	.LVL374:
 3183 0072 F82E      		mov r15,r24
 3184 0074 64E0      		ldi r22,lo8(4)
 3185 0076 86E2      		ldi r24,lo8(38)
 3186 0078 90E0      		ldi r25,0
 3187 007a 0E94 0000 		call _pal_lld_setlineid
 3188               	.LVL375:
 3189 007e 0E94 0000 		call _pal_lld_getportfromline
 3190               	.LVL376:
 3191 0082 B801      		movw r22,r16
 3192 0084 00C0      		rjmp 2f
 3193               		1:
 3194 0086 660F      		lsl r22
 3195               		2:
 3196 0088 FA94      		dec r15
 3197 008a 02F4      		brpl 1b
 3198 008c 43E0      		ldi r20,lo8(3)
 3199 008e 0E94 0000 		call _pal_lld_setgroupmode
 3200               	.LVL377:
 436:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 3201               		.loc 1 436 0
 3202 0092 63E0      		ldi r22,lo8(3)
 3203 0094 86E2      		ldi r24,lo8(38)
 3204 0096 90E0      		ldi r25,0
 3205 0098 0E94 0000 		call _pal_lld_setlineid
 3206               	.LVL378:
 3207 009c 0E94 0000 		call _pal_lld_getpadfromline
 3208               	.LVL379:
 3209 00a0 F82E      		mov r15,r24
 3210 00a2 63E0      		ldi r22,lo8(3)
 3211 00a4 86E2      		ldi r24,lo8(38)
 3212 00a6 90E0      		ldi r25,0
 3213 00a8 0E94 0000 		call _pal_lld_setlineid
 3214               	.LVL380:
 3215 00ac 0E94 0000 		call _pal_lld_getportfromline
 3216               	.LVL381:
 3217 00b0 B801      		movw r22,r16
 3218 00b2 00C0      		rjmp 2f
 3219               		1:
 3220 00b4 660F      		lsl r22
 3221               		2:
 3222 00b6 FA94      		dec r15
 3223 00b8 02F4      		brpl 1b
 3224 00ba 43E0      		ldi r20,lo8(3)
 3225 00bc 0E94 0000 		call _pal_lld_setgroupmode
 3226               	.LVL382:
 437:main.c        **** 
 3227               		.loc 1 437 0
 3228 00c0 65E0      		ldi r22,lo8(5)
 3229 00c2 86E2      		ldi r24,lo8(38)
 3230 00c4 90E0      		ldi r25,0
 3231 00c6 0E94 0000 		call _pal_lld_setlineid
 3232               	.LVL383:
 3233 00ca 0E94 0000 		call _pal_lld_getpadfromline
 3234               	.LVL384:
 3235 00ce F82E      		mov r15,r24
 3236 00d0 65E0      		ldi r22,lo8(5)
 3237 00d2 86E2      		ldi r24,lo8(38)
 3238 00d4 90E0      		ldi r25,0
 3239 00d6 0E94 0000 		call _pal_lld_setlineid
 3240               	.LVL385:
 3241 00da 0E94 0000 		call _pal_lld_getportfromline
 3242               	.LVL386:
 3243 00de B801      		movw r22,r16
 3244 00e0 00C0      		rjmp 2f
 3245               		1:
 3246 00e2 660F      		lsl r22
 3247               		2:
 3248 00e4 FA94      		dec r15
 3249 00e6 02F4      		brpl 1b
 3250 00e8 43E0      		ldi r20,lo8(3)
 3251 00ea 0E94 0000 		call _pal_lld_setgroupmode
 3252               	.LVL387:
 440:main.c        ****   palClearLine(PEDESTRE_VERDE);
 3253               		.loc 1 440 0
 3254 00ee 63E0      		ldi r22,lo8(3)
 3255 00f0 83E2      		ldi r24,lo8(35)
 3256 00f2 90E0      		ldi r25,0
 3257 00f4 0E94 0000 		call _pal_lld_setlineid
 3258               	.LVL388:
 3259 00f8 0E94 0000 		call _pal_lld_getpadfromline
 3260               	.LVL389:
 3261 00fc F82E      		mov r15,r24
 3262 00fe 63E0      		ldi r22,lo8(3)
 3263 0100 83E2      		ldi r24,lo8(35)
 3264 0102 90E0      		ldi r25,0
 3265 0104 0E94 0000 		call _pal_lld_setlineid
 3266               	.LVL390:
 3267 0108 0E94 0000 		call _pal_lld_getportfromline
 3268               	.LVL391:
 3269 010c B801      		movw r22,r16
 3270 010e 00C0      		rjmp 2f
 3271               		1:
 3272 0110 660F      		lsl r22
 3273               		2:
 3274 0112 FA94      		dec r15
 3275 0114 02F4      		brpl 1b
 3276 0116 46E0      		ldi r20,lo8(6)
 3277 0118 0E94 0000 		call _pal_lld_setgroupmode
 3278               	.LVL392:
 441:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 3279               		.loc 1 441 0
 3280 011c 63E0      		ldi r22,lo8(3)
 3281 011e 83E2      		ldi r24,lo8(35)
 3282 0120 90E0      		ldi r25,0
 3283 0122 0E94 0000 		call _pal_lld_setlineid
 3284               	.LVL393:
 3285 0126 0E94 0000 		call _pal_lld_getpadfromline
 3286               	.LVL394:
 3287 012a F82E      		mov r15,r24
 3288 012c 63E0      		ldi r22,lo8(3)
 3289 012e 83E2      		ldi r24,lo8(35)
 3290 0130 90E0      		ldi r25,0
 3291 0132 0E94 0000 		call _pal_lld_setlineid
 3292               	.LVL395:
 3293 0136 0E94 0000 		call _pal_lld_getportfromline
 3294               	.LVL396:
 3295 013a FC01      		movw r30,r24
 3296 013c 9281      		ldd r25,Z+2
 3297 013e 9801      		movw r18,r16
 3298 0140 00C0      		rjmp 2f
 3299               		1:
 3300 0142 220F      		lsl r18
 3301 0144 331F      		rol r19
 3302               		2:
 3303 0146 FA94      		dec r15
 3304 0148 02F4      		brpl 1b
 3305 014a 2095      		com r18
 3306 014c 3095      		com r19
 3307 014e 9223      		and r25,r18
 3308 0150 9283      		std Z+2,r25
 442:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 3309               		.loc 1 442 0
 3310 0152 62E0      		ldi r22,lo8(2)
 3311 0154 83E2      		ldi r24,lo8(35)
 3312 0156 90E0      		ldi r25,0
 3313 0158 0E94 0000 		call _pal_lld_setlineid
 3314               	.LVL397:
 3315 015c 0E94 0000 		call _pal_lld_getpadfromline
 3316               	.LVL398:
 3317 0160 F82E      		mov r15,r24
 3318 0162 62E0      		ldi r22,lo8(2)
 3319 0164 83E2      		ldi r24,lo8(35)
 3320 0166 90E0      		ldi r25,0
 3321 0168 0E94 0000 		call _pal_lld_setlineid
 3322               	.LVL399:
 3323 016c 0E94 0000 		call _pal_lld_getportfromline
 3324               	.LVL400:
 3325 0170 B801      		movw r22,r16
 3326 0172 00C0      		rjmp 2f
 3327               		1:
 3328 0174 660F      		lsl r22
 3329               		2:
 3330 0176 FA94      		dec r15
 3331 0178 02F4      		brpl 1b
 3332 017a 46E0      		ldi r20,lo8(6)
 3333 017c 0E94 0000 		call _pal_lld_setgroupmode
 3334               	.LVL401:
 443:main.c        **** 
 3335               		.loc 1 443 0
 3336 0180 62E0      		ldi r22,lo8(2)
 3337 0182 83E2      		ldi r24,lo8(35)
 3338 0184 90E0      		ldi r25,0
 3339 0186 0E94 0000 		call _pal_lld_setlineid
 3340               	.LVL402:
 3341 018a 0E94 0000 		call _pal_lld_getpadfromline
 3342               	.LVL403:
 3343 018e F82E      		mov r15,r24
 3344 0190 62E0      		ldi r22,lo8(2)
 3345 0192 83E2      		ldi r24,lo8(35)
 3346 0194 90E0      		ldi r25,0
 3347 0196 0E94 0000 		call _pal_lld_setlineid
 3348               	.LVL404:
 3349 019a 0E94 0000 		call _pal_lld_getportfromline
 3350               	.LVL405:
 3351 019e FC01      		movw r30,r24
 3352 01a0 9281      		ldd r25,Z+2
 3353 01a2 9801      		movw r18,r16
 3354 01a4 00C0      		rjmp 2f
 3355               		1:
 3356 01a6 220F      		lsl r18
 3357 01a8 331F      		rol r19
 3358               		2:
 3359 01aa FA94      		dec r15
 3360 01ac 02F4      		brpl 1b
 3361 01ae 2095      		com r18
 3362 01b0 3095      		com r19
 3363 01b2 9223      		and r25,r18
 3364 01b4 9283      		std Z+2,r25
 446:main.c        ****   palClearLine(PRIMARIO_VERDE);
 3365               		.loc 1 446 0
 3366 01b6 67E0      		ldi r22,lo8(7)
 3367 01b8 89E2      		ldi r24,lo8(41)
 3368 01ba 90E0      		ldi r25,0
 3369 01bc 0E94 0000 		call _pal_lld_setlineid
 3370               	.LVL406:
 3371 01c0 0E94 0000 		call _pal_lld_getpadfromline
 3372               	.LVL407:
 3373 01c4 F82E      		mov r15,r24
 3374 01c6 67E0      		ldi r22,lo8(7)
 3375 01c8 89E2      		ldi r24,lo8(41)
 3376 01ca 90E0      		ldi r25,0
 3377 01cc 0E94 0000 		call _pal_lld_setlineid
 3378               	.LVL408:
 3379 01d0 0E94 0000 		call _pal_lld_getportfromline
 3380               	.LVL409:
 3381 01d4 B801      		movw r22,r16
 3382 01d6 00C0      		rjmp 2f
 3383               		1:
 3384 01d8 660F      		lsl r22
 3385               		2:
 3386 01da FA94      		dec r15
 3387 01dc 02F4      		brpl 1b
 3388 01de 46E0      		ldi r20,lo8(6)
 3389 01e0 0E94 0000 		call _pal_lld_setgroupmode
 3390               	.LVL410:
 447:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 3391               		.loc 1 447 0
 3392 01e4 67E0      		ldi r22,lo8(7)
 3393 01e6 89E2      		ldi r24,lo8(41)
 3394 01e8 90E0      		ldi r25,0
 3395 01ea 0E94 0000 		call _pal_lld_setlineid
 3396               	.LVL411:
 3397 01ee 0E94 0000 		call _pal_lld_getpadfromline
 3398               	.LVL412:
 3399 01f2 F82E      		mov r15,r24
 3400 01f4 67E0      		ldi r22,lo8(7)
 3401 01f6 89E2      		ldi r24,lo8(41)
 3402 01f8 90E0      		ldi r25,0
 3403 01fa 0E94 0000 		call _pal_lld_setlineid
 3404               	.LVL413:
 3405 01fe 0E94 0000 		call _pal_lld_getportfromline
 3406               	.LVL414:
 3407 0202 FC01      		movw r30,r24
 3408 0204 9281      		ldd r25,Z+2
 3409 0206 9801      		movw r18,r16
 3410 0208 00C0      		rjmp 2f
 3411               		1:
 3412 020a 220F      		lsl r18
 3413 020c 331F      		rol r19
 3414               		2:
 3415 020e FA94      		dec r15
 3416 0210 02F4      		brpl 1b
 3417 0212 2095      		com r18
 3418 0214 3095      		com r19
 3419 0216 9223      		and r25,r18
 3420 0218 9283      		std Z+2,r25
 448:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 3421               		.loc 1 448 0
 3422 021a 64E0      		ldi r22,lo8(4)
 3423 021c 89E2      		ldi r24,lo8(41)
 3424 021e 90E0      		ldi r25,0
 3425 0220 0E94 0000 		call _pal_lld_setlineid
 3426               	.LVL415:
 3427 0224 0E94 0000 		call _pal_lld_getpadfromline
 3428               	.LVL416:
 3429 0228 F82E      		mov r15,r24
 3430 022a 64E0      		ldi r22,lo8(4)
 3431 022c 89E2      		ldi r24,lo8(41)
 3432 022e 90E0      		ldi r25,0
 3433 0230 0E94 0000 		call _pal_lld_setlineid
 3434               	.LVL417:
 3435 0234 0E94 0000 		call _pal_lld_getportfromline
 3436               	.LVL418:
 3437 0238 B801      		movw r22,r16
 3438 023a 00C0      		rjmp 2f
 3439               		1:
 3440 023c 660F      		lsl r22
 3441               		2:
 3442 023e FA94      		dec r15
 3443 0240 02F4      		brpl 1b
 3444 0242 46E0      		ldi r20,lo8(6)
 3445 0244 0E94 0000 		call _pal_lld_setgroupmode
 3446               	.LVL419:
 449:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 3447               		.loc 1 449 0
 3448 0248 64E0      		ldi r22,lo8(4)
 3449 024a 89E2      		ldi r24,lo8(41)
 3450 024c 90E0      		ldi r25,0
 3451 024e 0E94 0000 		call _pal_lld_setlineid
 3452               	.LVL420:
 3453 0252 0E94 0000 		call _pal_lld_getpadfromline
 3454               	.LVL421:
 3455 0256 F82E      		mov r15,r24
 3456 0258 64E0      		ldi r22,lo8(4)
 3457 025a 89E2      		ldi r24,lo8(41)
 3458 025c 90E0      		ldi r25,0
 3459 025e 0E94 0000 		call _pal_lld_setlineid
 3460               	.LVL422:
 3461 0262 0E94 0000 		call _pal_lld_getportfromline
 3462               	.LVL423:
 3463 0266 FC01      		movw r30,r24
 3464 0268 9281      		ldd r25,Z+2
 3465 026a 9801      		movw r18,r16
 3466 026c 00C0      		rjmp 2f
 3467               		1:
 3468 026e 220F      		lsl r18
 3469 0270 331F      		rol r19
 3470               		2:
 3471 0272 FA94      		dec r15
 3472 0274 02F4      		brpl 1b
 3473 0276 2095      		com r18
 3474 0278 3095      		com r19
 3475 027a 9223      		and r25,r18
 3476 027c 9283      		std Z+2,r25
 450:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 3477               		.loc 1 450 0
 3478 027e 66E0      		ldi r22,lo8(6)
 3479 0280 89E2      		ldi r24,lo8(41)
 3480 0282 90E0      		ldi r25,0
 3481 0284 0E94 0000 		call _pal_lld_setlineid
 3482               	.LVL424:
 3483 0288 0E94 0000 		call _pal_lld_getpadfromline
 3484               	.LVL425:
 3485 028c F82E      		mov r15,r24
 3486 028e 66E0      		ldi r22,lo8(6)
 3487 0290 89E2      		ldi r24,lo8(41)
 3488 0292 90E0      		ldi r25,0
 3489 0294 0E94 0000 		call _pal_lld_setlineid
 3490               	.LVL426:
 3491 0298 0E94 0000 		call _pal_lld_getportfromline
 3492               	.LVL427:
 3493 029c B801      		movw r22,r16
 3494 029e 00C0      		rjmp 2f
 3495               		1:
 3496 02a0 660F      		lsl r22
 3497               		2:
 3498 02a2 FA94      		dec r15
 3499 02a4 02F4      		brpl 1b
 3500 02a6 46E0      		ldi r20,lo8(6)
 3501 02a8 0E94 0000 		call _pal_lld_setgroupmode
 3502               	.LVL428:
 451:main.c        **** 
 3503               		.loc 1 451 0
 3504 02ac 66E0      		ldi r22,lo8(6)
 3505 02ae 89E2      		ldi r24,lo8(41)
 3506 02b0 90E0      		ldi r25,0
 3507 02b2 0E94 0000 		call _pal_lld_setlineid
 3508               	.LVL429:
 3509 02b6 0E94 0000 		call _pal_lld_getpadfromline
 3510               	.LVL430:
 3511 02ba F82E      		mov r15,r24
 3512 02bc 66E0      		ldi r22,lo8(6)
 3513 02be 89E2      		ldi r24,lo8(41)
 3514 02c0 90E0      		ldi r25,0
 3515 02c2 0E94 0000 		call _pal_lld_setlineid
 3516               	.LVL431:
 3517 02c6 0E94 0000 		call _pal_lld_getportfromline
 3518               	.LVL432:
 3519 02ca FC01      		movw r30,r24
 3520 02cc 9281      		ldd r25,Z+2
 3521 02ce 9801      		movw r18,r16
 3522 02d0 00C0      		rjmp 2f
 3523               		1:
 3524 02d2 220F      		lsl r18
 3525 02d4 331F      		rol r19
 3526               		2:
 3527 02d6 FA94      		dec r15
 3528 02d8 02F4      		brpl 1b
 3529 02da 2095      		com r18
 3530 02dc 3095      		com r19
 3531 02de 9223      		and r25,r18
 3532 02e0 9283      		std Z+2,r25
 454:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 3533               		.loc 1 454 0
 3534 02e2 61E0      		ldi r22,lo8(1)
 3535 02e4 83E2      		ldi r24,lo8(35)
 3536 02e6 90E0      		ldi r25,0
 3537 02e8 0E94 0000 		call _pal_lld_setlineid
 3538               	.LVL433:
 3539 02ec 0E94 0000 		call _pal_lld_getpadfromline
 3540               	.LVL434:
 3541 02f0 F82E      		mov r15,r24
 3542 02f2 61E0      		ldi r22,lo8(1)
 3543 02f4 83E2      		ldi r24,lo8(35)
 3544 02f6 90E0      		ldi r25,0
 3545 02f8 0E94 0000 		call _pal_lld_setlineid
 3546               	.LVL435:
 3547 02fc 0E94 0000 		call _pal_lld_getportfromline
 3548               	.LVL436:
 3549 0300 B801      		movw r22,r16
 3550 0302 00C0      		rjmp 2f
 3551               		1:
 3552 0304 660F      		lsl r22
 3553               		2:
 3554 0306 FA94      		dec r15
 3555 0308 02F4      		brpl 1b
 3556 030a 46E0      		ldi r20,lo8(6)
 3557 030c 0E94 0000 		call _pal_lld_setgroupmode
 3558               	.LVL437:
 455:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 3559               		.loc 1 455 0
 3560 0310 61E0      		ldi r22,lo8(1)
 3561 0312 83E2      		ldi r24,lo8(35)
 3562 0314 90E0      		ldi r25,0
 3563 0316 0E94 0000 		call _pal_lld_setlineid
 3564               	.LVL438:
 3565 031a 0E94 0000 		call _pal_lld_getpadfromline
 3566               	.LVL439:
 3567 031e F82E      		mov r15,r24
 3568 0320 61E0      		ldi r22,lo8(1)
 3569 0322 83E2      		ldi r24,lo8(35)
 3570 0324 90E0      		ldi r25,0
 3571 0326 0E94 0000 		call _pal_lld_setlineid
 3572               	.LVL440:
 3573 032a 0E94 0000 		call _pal_lld_getportfromline
 3574               	.LVL441:
 3575 032e FC01      		movw r30,r24
 3576 0330 9281      		ldd r25,Z+2
 3577 0332 9801      		movw r18,r16
 3578 0334 00C0      		rjmp 2f
 3579               		1:
 3580 0336 220F      		lsl r18
 3581 0338 331F      		rol r19
 3582               		2:
 3583 033a FA94      		dec r15
 3584 033c 02F4      		brpl 1b
 3585 033e 2095      		com r18
 3586 0340 3095      		com r19
 3587 0342 9223      		and r25,r18
 3588 0344 9283      		std Z+2,r25
 456:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 3589               		.loc 1 456 0
 3590 0346 65E0      		ldi r22,lo8(5)
 3591 0348 89E2      		ldi r24,lo8(41)
 3592 034a 90E0      		ldi r25,0
 3593 034c 0E94 0000 		call _pal_lld_setlineid
 3594               	.LVL442:
 3595 0350 0E94 0000 		call _pal_lld_getpadfromline
 3596               	.LVL443:
 3597 0354 F82E      		mov r15,r24
 3598 0356 65E0      		ldi r22,lo8(5)
 3599 0358 89E2      		ldi r24,lo8(41)
 3600 035a 90E0      		ldi r25,0
 3601 035c 0E94 0000 		call _pal_lld_setlineid
 3602               	.LVL444:
 3603 0360 0E94 0000 		call _pal_lld_getportfromline
 3604               	.LVL445:
 3605 0364 B801      		movw r22,r16
 3606 0366 00C0      		rjmp 2f
 3607               		1:
 3608 0368 660F      		lsl r22
 3609               		2:
 3610 036a FA94      		dec r15
 3611 036c 02F4      		brpl 1b
 3612 036e 46E0      		ldi r20,lo8(6)
 3613 0370 0E94 0000 		call _pal_lld_setgroupmode
 3614               	.LVL446:
 457:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 3615               		.loc 1 457 0
 3616 0374 65E0      		ldi r22,lo8(5)
 3617 0376 89E2      		ldi r24,lo8(41)
 3618 0378 90E0      		ldi r25,0
 3619 037a 0E94 0000 		call _pal_lld_setlineid
 3620               	.LVL447:
 3621 037e 0E94 0000 		call _pal_lld_getpadfromline
 3622               	.LVL448:
 3623 0382 F82E      		mov r15,r24
 3624 0384 65E0      		ldi r22,lo8(5)
 3625 0386 89E2      		ldi r24,lo8(41)
 3626 0388 90E0      		ldi r25,0
 3627 038a 0E94 0000 		call _pal_lld_setlineid
 3628               	.LVL449:
 3629 038e 0E94 0000 		call _pal_lld_getportfromline
 3630               	.LVL450:
 3631 0392 FC01      		movw r30,r24
 3632 0394 9281      		ldd r25,Z+2
 3633 0396 9801      		movw r18,r16
 3634 0398 00C0      		rjmp 2f
 3635               		1:
 3636 039a 220F      		lsl r18
 3637 039c 331F      		rol r19
 3638               		2:
 3639 039e FA94      		dec r15
 3640 03a0 02F4      		brpl 1b
 3641 03a2 2095      		com r18
 3642 03a4 3095      		com r19
 3643 03a6 9223      		and r25,r18
 3644 03a8 9283      		std Z+2,r25
 458:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 3645               		.loc 1 458 0
 3646 03aa 60E0      		ldi r22,0
 3647 03ac 83E2      		ldi r24,lo8(35)
 3648 03ae 90E0      		ldi r25,0
 3649 03b0 0E94 0000 		call _pal_lld_setlineid
 3650               	.LVL451:
 3651 03b4 0E94 0000 		call _pal_lld_getpadfromline
 3652               	.LVL452:
 3653 03b8 F82E      		mov r15,r24
 3654 03ba 60E0      		ldi r22,0
 3655 03bc 83E2      		ldi r24,lo8(35)
 3656 03be 90E0      		ldi r25,0
 3657 03c0 0E94 0000 		call _pal_lld_setlineid
 3658               	.LVL453:
 3659 03c4 0E94 0000 		call _pal_lld_getportfromline
 3660               	.LVL454:
 3661 03c8 B801      		movw r22,r16
 3662 03ca 00C0      		rjmp 2f
 3663               		1:
 3664 03cc 660F      		lsl r22
 3665               		2:
 3666 03ce FA94      		dec r15
 3667 03d0 02F4      		brpl 1b
 3668 03d2 46E0      		ldi r20,lo8(6)
 3669 03d4 0E94 0000 		call _pal_lld_setgroupmode
 3670               	.LVL455:
 459:main.c        **** 
 3671               		.loc 1 459 0
 3672 03d8 60E0      		ldi r22,0
 3673 03da 83E2      		ldi r24,lo8(35)
 3674 03dc 90E0      		ldi r25,0
 3675 03de 0E94 0000 		call _pal_lld_setlineid
 3676               	.LVL456:
 3677 03e2 0E94 0000 		call _pal_lld_getpadfromline
 3678               	.LVL457:
 3679 03e6 F82E      		mov r15,r24
 3680 03e8 60E0      		ldi r22,0
 3681 03ea 83E2      		ldi r24,lo8(35)
 3682 03ec 90E0      		ldi r25,0
 3683 03ee 0E94 0000 		call _pal_lld_setlineid
 3684               	.LVL458:
 3685 03f2 0E94 0000 		call _pal_lld_getportfromline
 3686               	.LVL459:
 3687 03f6 FC01      		movw r30,r24
 3688 03f8 9281      		ldd r25,Z+2
 3689 03fa 9801      		movw r18,r16
 3690 03fc 00C0      		rjmp 2f
 3691               		1:
 3692 03fe 220F      		lsl r18
 3693 0400 331F      		rol r19
 3694               		2:
 3695 0402 FA94      		dec r15
 3696 0404 02F4      		brpl 1b
 3697 0406 2095      		com r18
 3698 0408 3095      		com r19
 3699 040a 2923      		and r18,r25
 3700 040c 2283      		std Z+2,r18
 464:main.c        **** 
 3701               		.loc 1 464 0
 3702 040e 10E0      		ldi r17,0
 3703 0410 00E0      		ldi r16,0
 3704 0412 20E0      		ldi r18,lo8(gs(Thread1))
 3705 0414 30E0      		ldi r19,hi8(gs(Thread1))
 3706 0416 40E8      		ldi r20,lo8(-128)
 3707 0418 63E8      		ldi r22,lo8(-125)
 3708 041a 70E0      		ldi r23,0
 3709 041c 80E0      		ldi r24,lo8(waThread1)
 3710 041e 90E0      		ldi r25,hi8(waThread1)
 3711 0420 0E94 0000 		call chThdCreateStatic
 3712               	.LVL460:
 3713 0424 00C0      		rjmp .L257
 3714               	.L261:
 470:main.c        ****     }
 3715               		.loc 1 470 0
 3716 0426 84E0      		ldi r24,lo8(4)
 3717 0428 90E0      		ldi r25,0
 3718 042a 0E94 0000 		call enqueue
 3719               	.LVL461:
 3720               	.L254:
 485:main.c        ****   }
 3721               		.loc 1 485 0
 3722 042e 6EE0      		ldi r22,lo8(14)
 3723 0430 73E0      		ldi r23,lo8(3)
 3724 0432 80E0      		ldi r24,0
 3725 0434 90E0      		ldi r25,0
 3726 0436 0E94 0000 		call chThdSleep
 3727               	.LVL462:
 3728               	.L257:
 468:main.c        ****     {
 3729               		.loc 1 468 0
 3730 043a 65E0      		ldi r22,lo8(5)
 3731 043c 86E2      		ldi r24,lo8(38)
 3732 043e 90E0      		ldi r25,0
 3733 0440 0E94 0000 		call _pal_lld_setlineid
 3734               	.LVL463:
 3735 0444 41E0      		ldi r20,lo8(1)
 3736 0446 0E94 0000 		call button_check
 3737               	.LVL464:
 3738 044a 8111      		cpse r24,__zero_reg__
 3739 044c 00C0      		rjmp .L261
 472:main.c        ****     {
 3740               		.loc 1 472 0
 3741 044e 63E0      		ldi r22,lo8(3)
 3742 0450 86E2      		ldi r24,lo8(38)
 3743 0452 90E0      		ldi r25,0
 3744 0454 0E94 0000 		call _pal_lld_setlineid
 3745               	.LVL465:
 3746 0458 42E0      		ldi r20,lo8(2)
 3747 045a 0E94 0000 		call button_check
 3748               	.LVL466:
 3749 045e 8823      		tst r24
 3750 0460 01F0      		breq .L255
 474:main.c        ****     }
 3751               		.loc 1 474 0
 3752 0462 83E0      		ldi r24,lo8(3)
 3753 0464 90E0      		ldi r25,0
 3754 0466 0E94 0000 		call enqueue
 3755               	.LVL467:
 3756 046a 00C0      		rjmp .L254
 3757               	.L255:
 476:main.c        ****     {
 3758               		.loc 1 476 0
 3759 046c 64E0      		ldi r22,lo8(4)
 3760 046e 86E2      		ldi r24,lo8(38)
 3761 0470 90E0      		ldi r25,0
 3762 0472 0E94 0000 		call _pal_lld_setlineid
 3763               	.LVL468:
 3764 0476 43E0      		ldi r20,lo8(3)
 3765 0478 0E94 0000 		call button_check
 3766               	.LVL469:
 3767 047c 8823      		tst r24
 3768 047e 01F0      		breq .L256
 478:main.c        ****     }
 3769               		.loc 1 478 0
 3770 0480 81E0      		ldi r24,lo8(1)
 3771 0482 90E0      		ldi r25,0
 3772 0484 0E94 0000 		call enqueue
 3773               	.LVL470:
 3774 0488 00C0      		rjmp .L254
 3775               	.L256:
 480:main.c        ****     {
 3776               		.loc 1 480 0
 3777 048a 62E0      		ldi r22,lo8(2)
 3778 048c 86E2      		ldi r24,lo8(38)
 3779 048e 90E0      		ldi r25,0
 3780 0490 0E94 0000 		call _pal_lld_setlineid
 3781               	.LVL471:
 3782 0494 44E0      		ldi r20,lo8(4)
 3783 0496 0E94 0000 		call button_check
 3784               	.LVL472:
 3785 049a 8823      		tst r24
 3786 049c 01F0      		breq .L254
 482:main.c        ****     }
 3787               		.loc 1 482 0
 3788 049e 82E0      		ldi r24,lo8(2)
 3789 04a0 90E0      		ldi r25,0
 3790 04a2 0E94 0000 		call enqueue
 3791               	.LVL473:
 3792 04a6 00C0      		rjmp .L254
 3793               		.cfi_endproc
 3794               	.LFE244:
 3796               		.section	.bss.old_x4.4170,"aw",@nobits
 3799               	old_x4.4170:
 3800 0000 00        		.zero	1
 3801               		.section	.bss.old_x3.4168,"aw",@nobits
 3804               	old_x3.4168:
 3805 0000 00        		.zero	1
 3806               		.section	.bss.old_x2.4166,"aw",@nobits
 3809               	old_x2.4166:
 3810 0000 00        		.zero	1
 3811               		.section	.bss.old_x1.4164,"aw",@nobits
 3814               	old_x1.4164:
 3815 0000 00        		.zero	1
 3816               		.section	.bss.waThread1,"aw",@nobits
 3819               	waThread1:
 3820 0000 0000 0000 		.zero	131
 3820      0000 0000 
 3820      0000 0000 
 3820      0000 0000 
 3820      0000 0000 
 3821               	.global	main_vt_flag
 3822               		.section	.bss.main_vt_flag,"aw",@nobits
 3825               	main_vt_flag:
 3826 0000 00        		.zero	1
 3827               	.global	g_state
 3828               		.section	.bss.g_state,"aw",@nobits
 3831               	g_state:
 3832 0000 00        		.zero	1
 3833               		.section	.bss.qfull,"aw",@nobits
 3836               	qfull:
 3837 0000 0000 0000 		.zero	4
 3838               		.section	.bss.qempty,"aw",@nobits
 3841               	qempty:
 3842 0000 0000 0000 		.zero	4
 3843               		.section	.bss.qmtx,"aw",@nobits
 3846               	qmtx:
 3847 0000 0000 0000 		.zero	8
 3847      0000 0000 
 3848               		.section	.bss.qsize,"aw",@nobits
 3851               	qsize:
 3852 0000 0000      		.zero	2
 3853               		.section	.bss.wrp,"aw",@nobits
 3856               	wrp:
 3857 0000 0000      		.zero	2
 3858               		.section	.bss.rdp,"aw",@nobits
 3861               	rdp:
 3862 0000 0000      		.zero	2
 3863               		.section	.bss.queue,"aw",@nobits
 3866               	queue:
 3867 0000 0000 0000 		.zero	256
 3867      0000 0000 
 3867      0000 0000 
 3867      0000 0000 
 3867      0000 0000 
 3868               		.text
 3869               	.Letext0:
 3870               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 3871               		.file 5 "/usr/lib/avr/include/stdint.h"
 3872               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 3873               		.file 7 "../../os/rt/include/chearly.h"
 3874               		.file 8 "../../os/rt/include/chobjects.h"
 3875               		.file 9 "../../os/rt/include/chrfcu.h"
 3876               		.file 10 "../../os/rt/include/chdebug.h"
 3877               		.file 11 "../../os/rt/include/chtime.h"
 3878               		.file 12 "../../os/rt/include/chlists.h"
 3879               		.file 13 "../../os/rt/include/chsem.h"
 3880               		.file 14 "../../os/rt/include/chmtx.h"
 3881               		.file 15 "../../os/rt/include/chsys.h"
 3882               		.file 16 "../../os/rt/include/chregistry.h"
 3883               		.file 17 "../../os/rt/include/chcond.h"
 3884               		.file 18 "../../os/rt/include/chevents.h"
 3885               		.file 19 "../../os/oslib/include/chmemcore.h"
 3886               		.file 20 "../../os/hal/include/hal_queues.h"
 3887               		.file 21 "../../os/hal/include/hal_pal.h"
 3888               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 3889               		.file 23 "../../os/hal/include/hal_serial.h"
 3890               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 3891               		.file 25 "../../os/hal/include/hal.h"
 3892               		.file 26 "../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cciDYzvC.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cciDYzvC.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cciDYzvC.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cciDYzvC.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cciDYzvC.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cciDYzvC.s:13     .text.vt_cb:0000000000000000 vt_cb
     /tmp/cciDYzvC.s:3825   .bss.main_vt_flag:0000000000000000 main_vt_flag
     /tmp/cciDYzvC.s:36     .text.queueInit:0000000000000000 queueInit
     /tmp/cciDYzvC.s:3846   .bss.qmtx:0000000000000000 qmtx
     /tmp/cciDYzvC.s:3841   .bss.qempty:0000000000000000 qempty
     /tmp/cciDYzvC.s:3836   .bss.qfull:0000000000000000 qfull
     /tmp/cciDYzvC.s:3866   .bss.queue:0000000000000000 queue
     /tmp/cciDYzvC.s:3856   .bss.wrp:0000000000000000 wrp
     /tmp/cciDYzvC.s:3861   .bss.rdp:0000000000000000 rdp
     /tmp/cciDYzvC.s:3851   .bss.qsize:0000000000000000 qsize
     /tmp/cciDYzvC.s:78     .text.enqueue:0000000000000000 enqueue
     /tmp/cciDYzvC.s:168    .text.dequeue:0000000000000000 dequeue
     /tmp/cciDYzvC.s:255    .text.Thread1:0000000000000000 Thread1
     /tmp/cciDYzvC.s:3831   .bss.g_state:0000000000000000 g_state
     /tmp/cciDYzvC.s:2878   .text.button_check:0000000000000000 button_check
     /tmp/cciDYzvC.s:3799   .bss.old_x4.4170:0000000000000000 old_x4.4170
     /tmp/cciDYzvC.s:3814   .bss.old_x1.4164:0000000000000000 old_x1.4164
     /tmp/cciDYzvC.s:3809   .bss.old_x2.4166:0000000000000000 old_x2.4166
     /tmp/cciDYzvC.s:3804   .bss.old_x3.4168:0000000000000000 old_x3.4168
     /tmp/cciDYzvC.s:3099   .text.startup.main:0000000000000000 main
     /tmp/cciDYzvC.s:3819   .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
chMtxObjectInit
chCondObjectInit
chMtxLock
chCondWait
chCondSignal
chMtxUnlock
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
chThdSleep
__tablejump2__
chVTDoResetI
chVTDoSetI
halInit
chSysInit
SD1
sdStart
_pal_lld_setgroupmode
chThdCreateStatic
__do_clear_bss
