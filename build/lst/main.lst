   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb,"ax",@progbits
  11               	.global	vt_cb
  13               	vt_cb:
  14               	.LFB249:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** #include "chprintf.h"
  20:main.c        **** 
  21:main.c        **** #define QUEUE_SIZE 128
  22:main.c        **** 
  23:main.c        **** /* Definições de pinos*/
  24:main.c        **** // LEDS
  25:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  26:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  27:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  28:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  29:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  30:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  31:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  32:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  33:main.c        **** 
  34:main.c        **** // Botões
  35:main.c        **** #define AMB_PRIM PAL_LINE(IOPORT3, 3)
  36:main.c        **** #define AMB_SEC PAL_LINE(IOPORT3, 5)
  37:main.c        **** #define SEC_FLAG PAL_LINE(IOPORT3, 4)
  38:main.c        **** #define PED_FLAG PAL_LINE(IOPORT3, 2)
  39:main.c        **** 
  40:main.c        **** // Buffer
  41:main.c        **** static msg_t queue[QUEUE_SIZE], *rdp, *wrp;
  42:main.c        **** static size_t qsize;
  43:main.c        **** static mutex_t qmtx;
  44:main.c        **** static condition_variable_t qempty;
  45:main.c        **** static condition_variable_t qfull;
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** void queueInit(void);
  49:main.c        **** void enqueue(msg_t msg);
  50:main.c        **** msg_t dequeue(void);
  51:main.c        **** uint8_t button_check(ioline_t line, uint8_t button);
  52:main.c        **** void vt_cb(void *arg);
  53:main.c        **** 
  54:main.c        **** enum
  55:main.c        **** {
  56:main.c        ****   SECUNDARIO = 1,
  57:main.c        ****   PEDESTRE,
  58:main.c        ****   AMB_PRIMARIO,
  59:main.c        ****   AMB_SECUNDARIO,
  60:main.c        **** };
  61:main.c        **** 
  62:main.c        **** enum
  63:main.c        **** {
  64:main.c        ****   VERDE_AMB_PRIM,
  65:main.c        ****   VERDE_LOCKED_PRIM,
  66:main.c        ****   VERDE_IDLE_PRIM,
  67:main.c        ****   AMARELO_PED_PRIM,
  68:main.c        ****   AMARELO_SEC_PRIM,
  69:main.c        ****   VERDE_AMB_SEC,
  70:main.c        ****   VERDE_LOCKED_SEC,
  71:main.c        ****   AMARELO_PED_SEC,
  72:main.c        ****   AMARELO_PRIM_SEC,
  73:main.c        ****   VERDE_AMB_PED,
  74:main.c        ****   VERDE_LOCKED_PED,
  75:main.c        ****   PISCANDO_SEC,
  76:main.c        ****   PISCANDO_PRIM
  77:main.c        **** };
  78:main.c        **** 
  79:main.c        **** /* Estado inicial */
  80:main.c        **** uint8_t g_state = VERDE_LOCKED_PRIM;
  81:main.c        **** 
  82:main.c        **** /* Flags timers */
  83:main.c        **** uint8_t main_vt_flag = 0;
  84:main.c        **** uint8_t flag_red_vt_prim = 1;
  85:main.c        **** uint8_t flag_red_vt_sec= 1;
  86:main.c        **** 
  87:main.c        **** /* Flags ambulancias */
  88:main.c        **** uint8_t flag_amb_prim, flag_amb_sec;
  89:main.c        **** 
  90:main.c        **** /*
  91:main.c        ****  * LED blinker thread, times are in milliseconds.
  92:main.c        ****  */
  93:main.c        **** 
  94:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  95:main.c        **** static THD_FUNCTION(Thread1, arg)
  96:main.c        **** {
  97:main.c        ****   msg_t ev;
  98:main.c        ****   virtual_timer_t main_vt;
  99:main.c        **** 
 100:main.c        ****   chVTObjectInit(&main_vt);
 101:main.c        ****   
 102:main.c        ****   while (1)
 103:main.c        ****   {
 104:main.c        ****     switch (g_state) {
 105:main.c        ****       case VERDE_LOCKED_PRIM:
 106:main.c        ****         //flag_red_vt_prim = 0;
 107:main.c        ****         palClearLine(PRIMARIO_VERMELHO);
 108:main.c        ****         palSetLine(PRIMARIO_VERDE);
 109:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 110:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 111:main.c        ****         chVTSet(&main_vt, TIME_MS2I(10000), (vtfunc_t)vt_cb, (void *)&main_vt);
 112:main.c        ****         while (!main_vt_flag) {
 113:main.c        ****           if ((*rdp == AMB_SECUNDARIO) && flag_red_vt_sec) {
 114:main.c        ****             chVTReset(&main_vt);
 115:main.c        ****             main_vt_flag = 1;
 116:main.c        ****           }
 117:main.c        ****           chThdSleepMilliseconds(100);
 118:main.c        ****         }
 119:main.c        ****         main_vt_flag = 0;
 120:main.c        ****         g_state = VERDE_IDLE_PRIM;
 121:main.c        ****         break;
 122:main.c        ****       case VERDE_IDLE_PRIM:
 123:main.c        ****         chprintf((BaseSequentialStream *)&SD1, "QSIZE1: %d\n", (char)qsize);
 124:main.c        ****         ev = dequeue();
 125:main.c        ****         chprintf((BaseSequentialStream *)&SD1, "QSIZE2: %d\n", (char)qsize);
 126:main.c        ****         if (ev == AMB_PRIMARIO) {
 127:main.c        ****           flag_amb_prim = !flag_amb_prim;
 128:main.c        ****         }
 129:main.c        ****         if ((ev == SECUNDARIO || ev == AMB_SECUNDARIO) &! flag_amb_prim) {
 130:main.c        ****           if (ev == AMB_SECUNDARIO) {
 131:main.c        ****             flag_amb_sec = 1;
 132:main.c        ****           }
 133:main.c        ****           g_state = AMARELO_SEC_PRIM;
 134:main.c        ****           palClearLine(PRIMARIO_VERDE);
 135:main.c        ****         } else if (ev == PEDESTRE &! flag_amb_prim) {
 136:main.c        ****           g_state = AMARELO_PED_PRIM;
 137:main.c        ****           palClearLine(PRIMARIO_VERDE);
 138:main.c        ****         }
 139:main.c        ****         break;
 140:main.c        ****       case AMARELO_SEC_PRIM:
 141:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 142:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 143:main.c        ****         while (!main_vt_flag) {
 144:main.c        ****           chThdSleepMilliseconds(100);
 145:main.c        ****         }
 146:main.c        ****         main_vt_flag = 0;
 147:main.c        ****         g_state = VERDE_LOCKED_SEC;
 148:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 149:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 150:main.c        ****         break;
 151:main.c        ****       case AMARELO_PED_PRIM:
 152:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 153:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 154:main.c        ****         while (!main_vt_flag) {
 155:main.c        ****           chThdSleepMilliseconds(100);
 156:main.c        ****         }
 157:main.c        ****         main_vt_flag = 0;
 158:main.c        ****         g_state = VERDE_LOCKED_PED;
 159:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 160:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 161:main.c        ****         break;
 162:main.c        ****       case VERDE_LOCKED_SEC:
 163:main.c        ****         //flag_red_vt_sec = 0;
 164:main.c        ****         palClearLine(SECUNDARIO_VERMELHO);
 165:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 166:main.c        ****         chVTSet(&main_vt, TIME_MS2I(6000), (vtfunc_t)vt_cb, (void *)&main_vt);
 167:main.c        ****         while (!main_vt_flag) {
 168:main.c        ****           if ((*rdp == AMB_PRIMARIO) && flag_red_vt_prim) {
 169:main.c        ****             flag_amb_prim = 1;
 170:main.c        ****             chVTReset(&main_vt);
 171:main.c        ****             main_vt_flag = 1;
 172:main.c        ****           } else if ((*rdp == AMB_SECUNDARIO) && flag_red_vt_sec && flag_amb_sec == 0) {
 173:main.c        ****             dequeue();
 174:main.c        ****             flag_amb_sec = 1;
 175:main.c        ****             chprintf((BaseSequentialStream *)&SD1, "CHEGUEI AQUI\n", (char)qsize);
 176:main.c        ****           }
 177:main.c        ****           chThdSleepMilliseconds(100);
 178:main.c        ****         }
 179:main.c        ****         chprintf((BaseSequentialStream *)&SD1, "QSIZE3: %d\n", (char)qsize);
 180:main.c        ****         main_vt_flag = 0;
 181:main.c        ****         while (flag_amb_sec) {
 182:main.c        ****           ev = dequeue();
 183:main.c        ****           if (ev == AMB_SECUNDARIO) {
 184:main.c        ****             flag_amb_sec = 0;
 185:main.c        ****           }
 186:main.c        ****         }
 187:main.c        ****         if (qsize > 0) {
 188:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 189:main.c        ****         }
 190:main.c        ****         if (ev == PEDESTRE) {
 191:main.c        ****           g_state = AMARELO_PED_SEC;
 192:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 193:main.c        ****         } else {
 194:main.c        ****           g_state = AMARELO_PRIM_SEC;
 195:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 196:main.c        ****         }
 197:main.c        ****         break;
 198:main.c        ****       case AMARELO_PRIM_SEC:
 199:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 200:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 201:main.c        ****         while (!main_vt_flag) {
 202:main.c        ****           chThdSleepMilliseconds(100);
 203:main.c        ****         }
 204:main.c        ****         main_vt_flag = 0;
 205:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 206:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 207:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 208:main.c        ****         break;
 209:main.c        ****       case AMARELO_PED_SEC:
 210:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 211:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 212:main.c        ****         while (!main_vt_flag) {
 213:main.c        ****           chThdSleepMilliseconds(100);
 214:main.c        ****         }
 215:main.c        ****         main_vt_flag = 0;
 216:main.c        ****         g_state = VERDE_LOCKED_PED;
 217:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 218:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 219:main.c        ****         break;
 220:main.c        ****       case VERDE_LOCKED_PED:
 221:main.c        ****         palClearLine(PEDESTRE_VERMELHO);
 222:main.c        ****         palSetLine(PEDESTRE_VERDE);
 223:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 224:main.c        ****         while (!main_vt_flag) {
 225:main.c        ****           if ((*rdp == AMB_PRIMARIO) && flag_red_vt_prim) {
 226:main.c        ****             flag_amb_prim = 1;
 227:main.c        ****             chVTReset(&main_vt);
 228:main.c        ****             main_vt_flag = 1;
 229:main.c        ****           } else if ((*rdp == AMB_SECUNDARIO) && flag_red_vt_sec) {
 230:main.c        ****             flag_amb_sec = 1;
 231:main.c        ****             chVTReset(&main_vt);
 232:main.c        ****             main_vt_flag = 1;
 233:main.c        ****           }
 234:main.c        ****           chThdSleepMilliseconds(100);
 235:main.c        ****         }
 236:main.c        ****         main_vt_flag = 0;
 237:main.c        ****         if (qsize > 0) {
 238:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 239:main.c        ****         }
 240:main.c        ****         if (ev == SECUNDARIO || ev == AMB_SECUNDARIO) {
 241:main.c        ****           g_state = PISCANDO_SEC;
 242:main.c        ****           palClearLine(PEDESTRE_VERDE);
 243:main.c        ****         } else {
 244:main.c        ****           g_state = PISCANDO_PRIM;
 245:main.c        ****           palClearLine(PEDESTRE_VERDE);
 246:main.c        ****         }
 247:main.c        ****         break;
 248:main.c        ****       case PISCANDO_SEC:
 249:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 250:main.c        ****         while (!main_vt_flag) {
 251:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 252:main.c        ****           chThdSleepMilliseconds(125);
 253:main.c        ****         }
 254:main.c        ****         main_vt_flag = 0;
 255:main.c        ****         g_state = VERDE_LOCKED_SEC;
 256:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 257:main.c        ****         break;
 258:main.c        ****       case PISCANDO_PRIM:
 259:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 260:main.c        ****         while (!main_vt_flag) {
 261:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 262:main.c        ****           chThdSleepMilliseconds(125);
 263:main.c        ****         }
 264:main.c        ****         main_vt_flag = 0;
 265:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 266:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 267:main.c        ****         break;
 268:main.c        ****       default:
 269:main.c        ****         palSetLine(PEDESTRE_VERDE);
 270:main.c        ****     }
 271:main.c        ****     chThdSleepMilliseconds(100);
 272:main.c        ****   }
 273:main.c        **** }
 274:main.c        **** 
 275:main.c        **** /*
 276:main.c        ****  * Application entry point.
 277:main.c        ****  */
 278:main.c        **** int main(void)
 279:main.c        **** {
 280:main.c        ****   SerialConfig config = {.sc_brr = UBRR2x(9600),
 281:main.c        ****                          .sc_bits_per_char = USART_CHAR_SIZE_8
 282:main.c        ****   };
 283:main.c        **** 
 284:main.c        ****   queueInit();
 285:main.c        ****   /*
 286:main.c        ****    * System initializations.
 287:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
 288:main.c        ****    *   and performs the board-specific initializations.
 289:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
 290:main.c        ****    *   RTOS is active.
 291:main.c        ****    */
 292:main.c        ****   halInit();
 293:main.c        ****   chSysInit();
 294:main.c        **** 
 295:main.c        ****   sdStart(&SD1, &config);
 296:main.c        **** 
 297:main.c        ****   /* Configuração dos botões */
 298:main.c        ****   palSetLineMode(PED_FLAG, PAL_MODE_INPUT_PULLUP);
 299:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 300:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 301:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 302:main.c        **** 
 303:main.c        ****   // Pedestre
 304:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 305:main.c        ****   palClearLine(PEDESTRE_VERDE);
 306:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 307:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 308:main.c        **** 
 309:main.c        ****   // Primário
 310:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 311:main.c        ****   palClearLine(PRIMARIO_VERDE);
 312:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 313:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 314:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 315:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 316:main.c        **** 
 317:main.c        ****   // Secundário
 318:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 319:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 320:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 321:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 322:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 323:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 324:main.c        **** 
 325:main.c        ****   /*
 326:main.c        ****    * Starts the LED blinker thread.
 327:main.c        ****    */
 328:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 329:main.c        **** 
 330:main.c        ****   while (1)
 331:main.c        ****   {
 332:main.c        ****     if (button_check(AMB_SEC, 1))
 333:main.c        ****     {
 334:main.c        ****       enqueue(AMB_SECUNDARIO);
 335:main.c        ****     }
 336:main.c        ****     else if (button_check(AMB_PRIM, 2))
 337:main.c        ****     {
 338:main.c        ****       enqueue(AMB_PRIMARIO);
 339:main.c        ****     }
 340:main.c        ****     else if (button_check(SEC_FLAG, 3))
 341:main.c        ****     {
 342:main.c        ****       enqueue(SECUNDARIO);
 343:main.c        ****     }
 344:main.c        ****     else if (button_check(PED_FLAG, 4))
 345:main.c        ****     {
 346:main.c        ****       enqueue(PEDESTRE);
 347:main.c        ****     }
 348:main.c        ****     /* Debouncing. */
 349:main.c        ****     chThdSleepMilliseconds(50);
 350:main.c        ****   }
 351:main.c        **** }
 352:main.c        **** 
 353:main.c        **** /*
 354:main.c        ****  * Synchronized queue initialization.
 355:main.c        ****  */
 356:main.c        **** void queueInit(void) {
 357:main.c        ****  
 358:main.c        ****   chMtxObjectInit(&qmtx);
 359:main.c        ****   chCondObjectInit(&qempty);
 360:main.c        ****   chCondObjectInit(&qfull);
 361:main.c        ****  
 362:main.c        ****   rdp = wrp = &queue[0];
 363:main.c        ****   qsize = 0;
 364:main.c        **** }
 365:main.c        **** 
 366:main.c        **** /*
 367:main.c        ****  * Writes a message into the queue, if the queue is full waits
 368:main.c        ****  * for a free slot.
 369:main.c        ****  */
 370:main.c        **** void enqueue(msg_t msg) {
 371:main.c        ****  
 372:main.c        ****   /* Entering monitor.*/
 373:main.c        ****   chMtxLock(&qmtx);
 374:main.c        ****  
 375:main.c        ****   /* Waiting for space in the queue.*/
 376:main.c        ****   while (qsize >= QUEUE_SIZE)
 377:main.c        ****     chCondWait(&qfull);
 378:main.c        ****  
 379:main.c        ****   /* Writing the message in the queue.*/  
 380:main.c        ****   *wrp = msg;
 381:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 382:main.c        ****     wrp = &queue[0];
 383:main.c        ****   qsize++;
 384:main.c        ****  
 385:main.c        ****   /* Signaling that there is at least a message.*/
 386:main.c        ****   chCondSignal(&qempty);
 387:main.c        ****  
 388:main.c        ****   /* Leaving monitor.*/
 389:main.c        ****   chMtxUnlock(&qmtx);
 390:main.c        **** }
 391:main.c        **** 
 392:main.c        **** /*
 393:main.c        ****  * Reads a message from the queue, if the queue is empty waits
 394:main.c        ****  * for a message.
 395:main.c        ****  */
 396:main.c        **** msg_t dequeue(void) {
 397:main.c        ****   msg_t msg;
 398:main.c        ****  
 399:main.c        ****   /* Entering monitor.*/
 400:main.c        ****   chMtxLock(&qmtx);
 401:main.c        ****  
 402:main.c        ****   /* Waiting for messages in the queue.*/
 403:main.c        ****   while (qsize == 0)
 404:main.c        ****     chCondWait(&qempty);
 405:main.c        ****  
 406:main.c        ****   /* Reading the message from the queue.*/  
 407:main.c        ****   msg = *rdp;
 408:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 409:main.c        ****     rdp = &queue[0];
 410:main.c        ****   qsize--;
 411:main.c        ****  
 412:main.c        ****   /* Signaling that there is at least one free slot.*/
 413:main.c        ****   chCondSignal(&qfull);
 414:main.c        ****  
 415:main.c        ****   /* Leaving monitor.*/
 416:main.c        ****   chMtxUnlock(&qmtx);
 417:main.c        ****  
 418:main.c        ****   return msg;
 419:main.c        **** }
 420:main.c        **** 
 421:main.c        **** /* Ficou muito hard coded */
 422:main.c        **** uint8_t button_check(ioline_t line, uint8_t button) {
 423:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 424:main.c        ****   uint8_t w, x;
 425:main.c        **** 
 426:main.c        ****   if (button == 1) {
 427:main.c        ****     x1 = palReadLine(line);
 428:main.c        ****     w = x1^old_x1;
 429:main.c        ****     old_x1 = x1;
 430:main.c        ****     x = x1;
 431:main.c        ****   } else if (button == 2) {
 432:main.c        ****     x2 = palReadLine(line);
 433:main.c        ****     w = x2^old_x2;
 434:main.c        ****     old_x2 = x2;
 435:main.c        ****     x = x2;
 436:main.c        ****   } else if (button == 3) {
 437:main.c        ****     x3 = palReadLine(line);
 438:main.c        ****     w = x3^old_x3;
 439:main.c        ****     old_x3 = x3;
 440:main.c        ****     x = x3;
 441:main.c        ****   } else if (button == 4) {
 442:main.c        ****     x4 = palReadLine(line);
 443:main.c        ****     w = x4^old_x4;
 444:main.c        ****     old_x4 = x4;
 445:main.c        ****     x = x4;
 446:main.c        ****   }
 447:main.c        ****   
 448:main.c        ****   return w &! x;
 449:main.c        **** }
 450:main.c        **** 
 451:main.c        **** void vt_cb(void *arg)
 452:main.c        **** {
  16               		.loc 1 452 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 453:main.c        ****   chSysLockFromISR();
 454:main.c        ****   main_vt_flag = 1;
  23               		.loc 1 454 0
  24 0000 81E0      		ldi r24,lo8(1)
  25               	.LVL1:
  26 0002 8093 0000 		sts main_vt_flag,r24
  27               	/* epilogue start */
 455:main.c        ****   chSysUnlockFromISR();
 456:main.c        **** }
  28               		.loc 1 456 0
  29 0006 0895      		ret
  30               		.cfi_endproc
  31               	.LFE249:
  33               		.section	.text.queueInit,"ax",@progbits
  34               	.global	queueInit
  36               	queueInit:
  37               	.LFB245:
 356:main.c        ****  
  38               		.loc 1 356 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
 358:main.c        ****   chCondObjectInit(&qempty);
  44               		.loc 1 358 0
  45 0000 80E0      		ldi r24,lo8(qmtx)
  46 0002 90E0      		ldi r25,hi8(qmtx)
  47 0004 0E94 0000 		call chMtxObjectInit
  48               	.LVL2:
 359:main.c        ****   chCondObjectInit(&qfull);
  49               		.loc 1 359 0
  50 0008 80E0      		ldi r24,lo8(qempty)
  51 000a 90E0      		ldi r25,hi8(qempty)
  52 000c 0E94 0000 		call chCondObjectInit
  53               	.LVL3:
 360:main.c        ****  
  54               		.loc 1 360 0
  55 0010 80E0      		ldi r24,lo8(qfull)
  56 0012 90E0      		ldi r25,hi8(qfull)
  57 0014 0E94 0000 		call chCondObjectInit
  58               	.LVL4:
 362:main.c        ****   qsize = 0;
  59               		.loc 1 362 0
  60 0018 80E0      		ldi r24,lo8(queue)
  61 001a 90E0      		ldi r25,hi8(queue)
  62 001c 9093 0000 		sts wrp+1,r25
  63 0020 8093 0000 		sts wrp,r24
  64 0024 9093 0000 		sts rdp+1,r25
  65 0028 8093 0000 		sts rdp,r24
 363:main.c        **** }
  66               		.loc 1 363 0
  67 002c 1092 0000 		sts qsize+1,__zero_reg__
  68 0030 1092 0000 		sts qsize,__zero_reg__
  69               	/* epilogue start */
 364:main.c        **** 
  70               		.loc 1 364 0
  71 0034 0895      		ret
  72               		.cfi_endproc
  73               	.LFE245:
  75               		.section	.text.enqueue,"ax",@progbits
  76               	.global	enqueue
  78               	enqueue:
  79               	.LFB246:
 370:main.c        ****  
  80               		.loc 1 370 0
  81               		.cfi_startproc
  82               	.LVL5:
  83 0000 CF93      		push r28
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 28, -2
  87 0002 DF93      		push r29
  88               	.LCFI1:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 29, -3
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 2 */
  94               	.L__stack_usage = 2
  95 0004 EC01      		movw r28,r24
 373:main.c        ****  
  96               		.loc 1 373 0
  97 0006 80E0      		ldi r24,lo8(qmtx)
  98 0008 90E0      		ldi r25,hi8(qmtx)
  99               	.LVL6:
 100 000a 0E94 0000 		call chMtxLock
 101               	.LVL7:
 376:main.c        ****     chCondWait(&qfull);
 102               		.loc 1 376 0
 103 000e 8091 0000 		lds r24,qsize
 104 0012 9091 0000 		lds r25,qsize+1
 105 0016 8038      		cpi r24,-128
 106 0018 9105      		cpc r25,__zero_reg__
 107 001a 00F0      		brlo .L5
 108               	.L6:
 377:main.c        ****  
 109               		.loc 1 377 0
 110 001c 80E0      		ldi r24,lo8(qfull)
 111 001e 90E0      		ldi r25,hi8(qfull)
 112 0020 0E94 0000 		call chCondWait
 113               	.LVL8:
 376:main.c        ****     chCondWait(&qfull);
 114               		.loc 1 376 0
 115 0024 8091 0000 		lds r24,qsize
 116 0028 9091 0000 		lds r25,qsize+1
 117 002c 8038      		cpi r24,-128
 118 002e 9105      		cpc r25,__zero_reg__
 119 0030 00F4      		brsh .L6
 120               	.L5:
 380:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 121               		.loc 1 380 0
 122 0032 E091 0000 		lds r30,wrp
 123 0036 F091 0000 		lds r31,wrp+1
 124 003a C193      		st Z+,r28
 125 003c D193      		st Z+,r29
 381:main.c        ****     wrp = &queue[0];
 126               		.loc 1 381 0
 127 003e 20E0      		ldi r18,hi8(queue+256)
 128 0040 E030      		cpi r30,lo8(queue+256)
 129 0042 F207      		cpc r31,r18
 130 0044 00F0      		brlo .L10
 382:main.c        ****   qsize++;
 131               		.loc 1 382 0
 132 0046 20E0      		ldi r18,lo8(queue)
 133 0048 30E0      		ldi r19,hi8(queue)
 134 004a 3093 0000 		sts wrp+1,r19
 135 004e 2093 0000 		sts wrp,r18
 136               	.L8:
 383:main.c        ****  
 137               		.loc 1 383 0
 138 0052 0196      		adiw r24,1
 139 0054 9093 0000 		sts qsize+1,r25
 140 0058 8093 0000 		sts qsize,r24
 386:main.c        ****  
 141               		.loc 1 386 0
 142 005c 80E0      		ldi r24,lo8(qempty)
 143 005e 90E0      		ldi r25,hi8(qempty)
 144 0060 0E94 0000 		call chCondSignal
 145               	.LVL9:
 389:main.c        **** }
 146               		.loc 1 389 0
 147 0064 80E0      		ldi r24,lo8(qmtx)
 148 0066 90E0      		ldi r25,hi8(qmtx)
 149               	/* epilogue start */
 390:main.c        **** 
 150               		.loc 1 390 0
 151 0068 DF91      		pop r29
 152 006a CF91      		pop r28
 153               	.LVL10:
 389:main.c        **** }
 154               		.loc 1 389 0
 155 006c 0C94 0000 		jmp chMtxUnlock
 156               	.LVL11:
 157               	.L10:
 381:main.c        ****     wrp = &queue[0];
 158               		.loc 1 381 0
 159 0070 F093 0000 		sts wrp+1,r31
 160 0074 E093 0000 		sts wrp,r30
 161 0078 00C0      		rjmp .L8
 162               		.cfi_endproc
 163               	.LFE246:
 165               		.section	.text.dequeue,"ax",@progbits
 166               	.global	dequeue
 168               	dequeue:
 169               	.LFB247:
 396:main.c        ****   msg_t msg;
 170               		.loc 1 396 0
 171               		.cfi_startproc
 172 0000 CF93      		push r28
 173               	.LCFI2:
 174               		.cfi_def_cfa_offset 3
 175               		.cfi_offset 28, -2
 176 0002 DF93      		push r29
 177               	.LCFI3:
 178               		.cfi_def_cfa_offset 4
 179               		.cfi_offset 29, -3
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 2 */
 183               	.L__stack_usage = 2
 400:main.c        ****  
 184               		.loc 1 400 0
 185 0004 80E0      		ldi r24,lo8(qmtx)
 186 0006 90E0      		ldi r25,hi8(qmtx)
 187 0008 0E94 0000 		call chMtxLock
 188               	.LVL12:
 403:main.c        ****     chCondWait(&qempty);
 189               		.loc 1 403 0
 190 000c 8091 0000 		lds r24,qsize
 191 0010 9091 0000 		lds r25,qsize+1
 192 0014 0097      		sbiw r24,0
 193 0016 01F4      		brne .L12
 194               	.L13:
 404:main.c        ****  
 195               		.loc 1 404 0
 196 0018 80E0      		ldi r24,lo8(qempty)
 197 001a 90E0      		ldi r25,hi8(qempty)
 198 001c 0E94 0000 		call chCondWait
 199               	.LVL13:
 403:main.c        ****     chCondWait(&qempty);
 200               		.loc 1 403 0
 201 0020 8091 0000 		lds r24,qsize
 202 0024 9091 0000 		lds r25,qsize+1
 203 0028 0097      		sbiw r24,0
 204 002a 01F0      		breq .L13
 205               	.L12:
 407:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 206               		.loc 1 407 0
 207 002c E091 0000 		lds r30,rdp
 208 0030 F091 0000 		lds r31,rdp+1
 209 0034 C191      		ld r28,Z+
 210 0036 D191      		ld r29,Z+
 211               	.LVL14:
 408:main.c        ****     rdp = &queue[0];
 212               		.loc 1 408 0
 213 0038 20E0      		ldi r18,hi8(queue+256)
 214 003a E030      		cpi r30,lo8(queue+256)
 215 003c F207      		cpc r31,r18
 216 003e 00F0      		brlo .L18
 409:main.c        ****   qsize--;
 217               		.loc 1 409 0
 218 0040 20E0      		ldi r18,lo8(queue)
 219 0042 30E0      		ldi r19,hi8(queue)
 220 0044 3093 0000 		sts rdp+1,r19
 221 0048 2093 0000 		sts rdp,r18
 222               	.L15:
 410:main.c        ****  
 223               		.loc 1 410 0
 224 004c 0197      		sbiw r24,1
 225 004e 9093 0000 		sts qsize+1,r25
 226 0052 8093 0000 		sts qsize,r24
 413:main.c        ****  
 227               		.loc 1 413 0
 228 0056 80E0      		ldi r24,lo8(qfull)
 229 0058 90E0      		ldi r25,hi8(qfull)
 230 005a 0E94 0000 		call chCondSignal
 231               	.LVL15:
 416:main.c        ****  
 232               		.loc 1 416 0
 233 005e 80E0      		ldi r24,lo8(qmtx)
 234 0060 90E0      		ldi r25,hi8(qmtx)
 235 0062 0E94 0000 		call chMtxUnlock
 236               	.LVL16:
 419:main.c        **** 
 237               		.loc 1 419 0
 238 0066 CE01      		movw r24,r28
 239               	/* epilogue start */
 240 0068 DF91      		pop r29
 241 006a CF91      		pop r28
 242               	.LVL17:
 243 006c 0895      		ret
 244               	.LVL18:
 245               	.L18:
 408:main.c        ****     rdp = &queue[0];
 246               		.loc 1 408 0
 247 006e F093 0000 		sts rdp+1,r31
 248 0072 E093 0000 		sts rdp,r30
 249 0076 00C0      		rjmp .L15
 250               		.cfi_endproc
 251               	.LFE247:
 253               		.section	.rodata.Thread1.str1.1,"aMS",@progbits,1
 254               	.LC0:
 255 0000 5153 495A 		.string	"QSIZE1: %d\n"
 255      4531 3A20 
 255      2564 0A00 
 256               	.LC1:
 257 000c 5153 495A 		.string	"QSIZE2: %d\n"
 257      4532 3A20 
 257      2564 0A00 
 258               	.LC2:
 259 0018 4348 4547 		.string	"CHEGUEI AQUI\n"
 259      5545 4920 
 259      4151 5549 
 259      0A00 
 260               	.LC3:
 261 0026 5153 495A 		.string	"QSIZE3: %d\n"
 261      4533 3A20 
 261      2564 0A00 
 262               		.section	.text.Thread1,"ax",@progbits
 264               	Thread1:
 265               	.LFB243:
  96:main.c        ****   msg_t ev;
 266               		.loc 1 96 0
 267               		.cfi_startproc
 268               	.LVL19:
 269 0000 CF93      		push r28
 270               	.LCFI4:
 271               		.cfi_def_cfa_offset 3
 272               		.cfi_offset 28, -2
 273 0002 DF93      		push r29
 274               	.LCFI5:
 275               		.cfi_def_cfa_offset 4
 276               		.cfi_offset 29, -3
 277 0004 CDB7      		in r28,__SP_L__
 278 0006 DEB7      		in r29,__SP_H__
 279               	.LCFI6:
 280               		.cfi_def_cfa_register 28
 281 0008 6097      		sbiw r28,16
 282               	.LCFI7:
 283               		.cfi_def_cfa_offset 20
 284 000a 0FB6      		in __tmp_reg__,__SREG__
 285 000c F894      		cli
 286 000e DEBF      		out __SP_H__,r29
 287 0010 0FBE      		out __SREG__,__tmp_reg__
 288 0012 CDBF      		out __SP_L__,r28
 289               	/* prologue: function */
 290               	/* frame size = 16 */
 291               	/* stack size = 18 */
 292               	.L__stack_usage = 18
 293               	.LVL20:
 294               	.LBB324:
 295               	.LBB325:
 296               		.file 2 "../../os/rt/include/chvt.h"
   1:../../os/rt/include/chvt.h **** /*
   2:../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chvt.h **** 
   5:../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chvt.h **** 
   7:../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chvt.h **** 
  11:../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chvt.h **** 
  16:../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chvt.h **** */
  19:../../os/rt/include/chvt.h **** 
  20:../../os/rt/include/chvt.h **** /**
  21:../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../os/rt/include/chvt.h ****  *
  24:../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../os/rt/include/chvt.h ****  * @{
  26:../../os/rt/include/chvt.h ****  */
  27:../../os/rt/include/chvt.h **** 
  28:../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../os/rt/include/chvt.h **** 
  31:../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../os/rt/include/chvt.h **** 
  35:../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../os/rt/include/chvt.h **** 
  39:../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../os/rt/include/chvt.h **** 
  43:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../os/rt/include/chvt.h **** #endif
  47:../../os/rt/include/chvt.h **** 
  48:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../os/rt/include/chvt.h **** #endif
  51:../../os/rt/include/chvt.h **** 
  52:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../os/rt/include/chvt.h **** #endif
  55:../../os/rt/include/chvt.h **** 
  56:../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../os/rt/include/chvt.h **** 
  60:../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../os/rt/include/chvt.h **** 
  64:../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../os/rt/include/chvt.h **** 
  68:../../os/rt/include/chvt.h **** /*
  69:../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../os/rt/include/chvt.h ****  */
  71:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../os/rt/include/chvt.h **** extern "C" {
  73:../../os/rt/include/chvt.h **** #endif
  74:../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:../../os/rt/include/chvt.h **** #endif
  85:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  86:../../os/rt/include/chvt.h **** }
  87:../../os/rt/include/chvt.h **** #endif
  88:../../os/rt/include/chvt.h **** 
  89:../../os/rt/include/chvt.h **** /*===========================================================================*/
  90:../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../os/rt/include/chvt.h **** 
  93:../../os/rt/include/chvt.h **** /**
  94:../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:../../os/rt/include/chvt.h ****  *
 100:../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:../../os/rt/include/chvt.h ****  *
 102:../../os/rt/include/chvt.h ****  * @init
 103:../../os/rt/include/chvt.h ****  */
 104:../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:../../os/rt/include/chvt.h **** 
 106:../../os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 297               		.loc 2 106 0
 298 0014 1A82      		std Y+2,__zero_reg__
 299 0016 1982      		std Y+1,__zero_reg__
 300               	.LBE325:
 301               	.LBE324:
 269:main.c        ****     }
 302               		.loc 1 269 0
 303 0018 EE24      		clr r14
 304 001a E394      		inc r14
 305 001c F12C      		mov r15,__zero_reg__
 306               	.LVL21:
 265:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 307               		.loc 1 265 0
 308 001e 3324      		clr r3
 309 0020 3394      		inc r3
 255:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 310               		.loc 1 255 0
 311 0022 96E0      		ldi r25,lo8(6)
 312 0024 292E      		mov r2,r25
 179:main.c        ****         main_vt_flag = 0;
 313               		.loc 1 179 0
 314 0026 20E0      		ldi r18,lo8(.LC3)
 315 0028 622E      		mov r6,r18
 316 002a 20E0      		ldi r18,hi8(.LC3)
 317 002c 722E      		mov r7,r18
 318 002e 30E0      		ldi r19,lo8(SD1)
 319 0030 A32E      		mov r10,r19
 320 0032 30E0      		ldi r19,hi8(SD1)
 321 0034 B32E      		mov r11,r19
 123:main.c        ****         ev = dequeue();
 322               		.loc 1 123 0
 323 0036 40E0      		ldi r20,lo8(.LC0)
 324 0038 842E      		mov r8,r20
 325 003a 40E0      		ldi r20,hi8(.LC0)
 326 003c 942E      		mov r9,r20
 125:main.c        ****         if (ev == AMB_PRIMARIO) {
 327               		.loc 1 125 0
 328 003e 50E0      		ldi r21,lo8(.LC1)
 329 0040 452E      		mov r4,r21
 330 0042 50E0      		ldi r21,hi8(.LC1)
 331 0044 552E      		mov r5,r21
 332 0046 00C0      		rjmp .L83
 333               	.LVL22:
 334               	.L20:
 269:main.c        ****     }
 335               		.loc 1 269 0
 336 0048 63E0      		ldi r22,lo8(3)
 337 004a 83E2      		ldi r24,lo8(35)
 338 004c 90E0      		ldi r25,0
 339 004e 0E94 0000 		call _pal_lld_setlineid
 340               	.LVL23:
 341 0052 0E94 0000 		call _pal_lld_getpadfromline
 342               	.LVL24:
 343 0056 182F      		mov r17,r24
 344 0058 63E0      		ldi r22,lo8(3)
 345               	.L187:
 346 005a 83E2      		ldi r24,lo8(35)
 347 005c 90E0      		ldi r25,0
 348               	.L185:
 349 005e 0E94 0000 		call _pal_lld_setlineid
 350               	.LVL25:
 351 0062 0E94 0000 		call _pal_lld_getportfromline
 352               	.LVL26:
 353 0066 FC01      		movw r30,r24
 354 0068 9281      		ldd r25,Z+2
 355 006a 9701      		movw r18,r14
 356 006c 00C0      		rjmp 2f
 357               		1:
 358 006e 220F      		lsl r18
 359               		2:
 360 0070 1A95      		dec r17
 361 0072 02F4      		brpl 1b
 362 0074 922B      		or r25,r18
 363 0076 9283      		std Z+2,r25
 364               	.L37:
 271:main.c        ****   }
 365               		.loc 1 271 0
 366 0078 6BE1      		ldi r22,lo8(27)
 367 007a 76E0      		ldi r23,lo8(6)
 368 007c 80E0      		ldi r24,0
 369 007e 90E0      		ldi r25,0
 370 0080 0E94 0000 		call chThdSleep
 371               	.LVL27:
 372               	.L83:
 104:main.c        ****       case VERDE_LOCKED_PRIM:
 373               		.loc 1 104 0
 374 0084 E091 0000 		lds r30,g_state
 375 0088 E150      		subi r30,lo8(-(-1))
 376 008a EC30      		cpi r30,lo8(12)
 377 008c 00F4      		brsh .L20
 378 008e F0E0      		ldi r31,0
 379 0090 E050      		subi r30,lo8(-(gs(.L22)))
 380 0092 F040      		sbci r31,hi8(-(gs(.L22)))
 381 0094 0C94 0000 		jmp __tablejump2__
 382               		.p2align	1
 383               	.L22:
 384 0098 0000      		.word gs(.L21)
 385 009a 0000      		.word gs(.L23)
 386 009c 0000      		.word gs(.L24)
 387 009e 0000      		.word gs(.L25)
 388 00a0 0000      		.word gs(.L20)
 389 00a2 0000      		.word gs(.L26)
 390 00a4 0000      		.word gs(.L27)
 391 00a6 0000      		.word gs(.L28)
 392 00a8 0000      		.word gs(.L20)
 393 00aa 0000      		.word gs(.L29)
 394 00ac 0000      		.word gs(.L30)
 395 00ae 0000      		.word gs(.L31)
 396               	.L31:
 397               	.LVL28:
 398               	.LBB326:
 399               	.LBB327:
 400               	.LBB328:
 401               	.LBB329:
 402               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 403               		.loc 3 430 0
 404               	/* #APP */
 405               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 406 00b0 F894      		cli
 407               	 ;  0 "" 2
 408               	.LVL29:
 409               	/* #NOAPP */
 410               	.LBE329:
 411               	.LBE328:
 412               	.LBE327:
 413               	.LBB330:
 414               	.LBB331:
 415               	.LBB332:
 416               	.LBB333:
 107:../../os/rt/include/chvt.h **** }
 108:../../os/rt/include/chvt.h **** 
 109:../../os/rt/include/chvt.h **** /**
 110:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 111:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:../../os/rt/include/chvt.h ****  *          invocation.
 113:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:../../os/rt/include/chvt.h ****  *          @p systime_t size.
 117:../../os/rt/include/chvt.h ****  *
 118:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:../../os/rt/include/chvt.h ****  *
 120:../../os/rt/include/chvt.h ****  * @xclass
 121:../../os/rt/include/chvt.h ****  */
 122:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:../../os/rt/include/chvt.h **** 
 124:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:../../os/rt/include/chvt.h ****   return port_timer_get_time();
 128:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:../../os/rt/include/chvt.h **** }
 130:../../os/rt/include/chvt.h **** 
 131:../../os/rt/include/chvt.h **** /**
 132:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 133:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:../../os/rt/include/chvt.h ****  *          invocation.
 135:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:../../os/rt/include/chvt.h ****  *
 137:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:../../os/rt/include/chvt.h ****  *
 139:../../os/rt/include/chvt.h ****  * @api
 140:../../os/rt/include/chvt.h ****  */
 141:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:../../os/rt/include/chvt.h ****   systime_t systime;
 143:../../os/rt/include/chvt.h **** 
 144:../../os/rt/include/chvt.h ****   chSysLock();
 145:../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:../../os/rt/include/chvt.h ****   chSysUnlock();
 147:../../os/rt/include/chvt.h **** 
 148:../../os/rt/include/chvt.h ****   return systime;
 149:../../os/rt/include/chvt.h **** }
 150:../../os/rt/include/chvt.h **** 
 151:../../os/rt/include/chvt.h **** /**
 152:../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:../../os/rt/include/chvt.h ****  *
 154:../../os/rt/include/chvt.h ****  * @param[in] start     start time
 155:../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:../../os/rt/include/chvt.h ****  *
 157:../../os/rt/include/chvt.h ****  * @xclass
 158:../../os/rt/include/chvt.h ****  */
 159:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:../../os/rt/include/chvt.h **** 
 161:../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:../../os/rt/include/chvt.h **** }
 163:../../os/rt/include/chvt.h **** 
 164:../../os/rt/include/chvt.h **** /**
 165:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:../../os/rt/include/chvt.h ****  *          window.
 167:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:../../os/rt/include/chvt.h ****  *          time window has zero size.
 169:../../os/rt/include/chvt.h ****  *
 170:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:../../os/rt/include/chvt.h ****  *
 175:../../os/rt/include/chvt.h ****  * @xclass
 176:../../os/rt/include/chvt.h ****  */
 177:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:../../os/rt/include/chvt.h **** 
 179:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:../../os/rt/include/chvt.h **** }
 181:../../os/rt/include/chvt.h **** 
 182:../../os/rt/include/chvt.h **** /**
 183:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:../../os/rt/include/chvt.h ****  *          window.
 185:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:../../os/rt/include/chvt.h ****  *          time window has zero size.
 187:../../os/rt/include/chvt.h ****  *
 188:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:../../os/rt/include/chvt.h ****  *
 193:../../os/rt/include/chvt.h ****  * @api
 194:../../os/rt/include/chvt.h ****  */
 195:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:../../os/rt/include/chvt.h **** 
 197:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:../../os/rt/include/chvt.h **** }
 199:../../os/rt/include/chvt.h **** 
 200:../../os/rt/include/chvt.h **** /**
 201:../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:../../os/rt/include/chvt.h ****  *
 207:../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:../../os/rt/include/chvt.h ****  *
 214:../../os/rt/include/chvt.h ****  * @iclass
 215:../../os/rt/include/chvt.h ****  */
 216:../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:../../os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:../../os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:../../os/rt/include/chvt.h **** 
 220:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:../../os/rt/include/chvt.h **** 
 222:../../os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:../../os/rt/include/chvt.h ****     return false;
 224:../../os/rt/include/chvt.h ****   }
 225:../../os/rt/include/chvt.h **** 
 226:../../os/rt/include/chvt.h ****   if (timep != NULL) {
 227:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:../../os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:../../os/rt/include/chvt.h **** #else
 230:../../os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:../../os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:../../os/rt/include/chvt.h **** #endif
 233:../../os/rt/include/chvt.h ****   }
 234:../../os/rt/include/chvt.h **** 
 235:../../os/rt/include/chvt.h ****   return true;
 236:../../os/rt/include/chvt.h **** }
 237:../../os/rt/include/chvt.h **** 
 238:../../os/rt/include/chvt.h **** /**
 239:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:../../os/rt/include/chvt.h ****  *
 243:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:../../os/rt/include/chvt.h ****  *
 246:../../os/rt/include/chvt.h ****  * @iclass
 247:../../os/rt/include/chvt.h ****  */
 248:../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:../../os/rt/include/chvt.h **** 
 250:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:../../os/rt/include/chvt.h **** 
 252:../../os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:../../os/rt/include/chvt.h **** }
 254:../../os/rt/include/chvt.h **** 
 255:../../os/rt/include/chvt.h **** /**
 256:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:../../os/rt/include/chvt.h ****  *
 260:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:../../os/rt/include/chvt.h ****  *
 263:../../os/rt/include/chvt.h ****  * @api
 264:../../os/rt/include/chvt.h ****  */
 265:../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:../../os/rt/include/chvt.h ****   bool b;
 267:../../os/rt/include/chvt.h **** 
 268:../../os/rt/include/chvt.h ****   chSysLock();
 269:../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:../../os/rt/include/chvt.h ****   chSysUnlock();
 271:../../os/rt/include/chvt.h **** 
 272:../../os/rt/include/chvt.h ****   return b;
 273:../../os/rt/include/chvt.h **** }
 274:../../os/rt/include/chvt.h **** 
 275:../../os/rt/include/chvt.h **** /**
 276:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:../../os/rt/include/chvt.h ****  *
 281:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:../../os/rt/include/chvt.h ****  *
 283:../../os/rt/include/chvt.h ****  * @iclass
 284:../../os/rt/include/chvt.h ****  */
 285:../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:../../os/rt/include/chvt.h **** 
 287:../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 417               		.loc 2 287 0
 418 00b2 8981      		ldd r24,Y+1
 419 00b4 9A81      		ldd r25,Y+2
 420 00b6 892B      		or r24,r25
 421 00b8 01F0      		breq .L80
 288:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 422               		.loc 2 288 0
 423 00ba CE01      		movw r24,r28
 424 00bc 0196      		adiw r24,1
 425 00be 0E94 0000 		call chVTDoResetI
 426               	.LVL30:
 427               	.L80:
 428               	.LBE333:
 429               	.LBE332:
 289:../../os/rt/include/chvt.h ****   }
 290:../../os/rt/include/chvt.h **** }
 291:../../os/rt/include/chvt.h **** 
 292:../../os/rt/include/chvt.h **** /**
 293:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:../../os/rt/include/chvt.h ****  *
 298:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:../../os/rt/include/chvt.h ****  *
 300:../../os/rt/include/chvt.h ****  * @api
 301:../../os/rt/include/chvt.h ****  */
 302:../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:../../os/rt/include/chvt.h **** 
 304:../../os/rt/include/chvt.h ****   chSysLock();
 305:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:../../os/rt/include/chvt.h ****   chSysUnlock();
 307:../../os/rt/include/chvt.h **** }
 308:../../os/rt/include/chvt.h **** 
 309:../../os/rt/include/chvt.h **** /**
 310:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:../../os/rt/include/chvt.h ****  *          using the new parameters.
 313:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:../../os/rt/include/chvt.h ****  *
 316:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:../../os/rt/include/chvt.h ****  *                        normal time specification.
 321:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:../../os/rt/include/chvt.h ****  *                      .
 323:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../os/rt/include/chvt.h ****  *                      function
 328:../../os/rt/include/chvt.h ****  *
 329:../../os/rt/include/chvt.h ****  * @iclass
 330:../../os/rt/include/chvt.h ****  */
 331:../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:../../os/rt/include/chvt.h **** 
 334:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 430               		.loc 2 335 0
 431 00c2 8E01      		movw r16,r28
 432 00c4 0F5F      		subi r16,-1
 433 00c6 1F4F      		sbci r17,-1
 434 00c8 20E0      		ldi r18,lo8(gs(vt_cb))
 435 00ca 30E0      		ldi r19,hi8(gs(vt_cb))
 436 00cc 40E1      		ldi r20,lo8(16)
 437 00ce 5AE7      		ldi r21,lo8(122)
 438 00d0 60E0      		ldi r22,0
 439 00d2 70E0      		ldi r23,0
 440 00d4 C801      		movw r24,r16
 441 00d6 0E94 0000 		call chVTDoSetI
 442               	.LVL31:
 443               	.LBE331:
 444               	.LBE330:
 445               	.LBB334:
 446               	.LBB335:
 447               	.LBB336:
 448               	.LBB337:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 449               		.loc 3 440 0
 450               	/* #APP */
 451               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 452 00da 7894      		sei
 453               	 ;  0 "" 2
 454               	/* #NOAPP */
 455               	.LBE337:
 456               	.LBE336:
 457               	.LBE335:
 458               	.LBE334:
 459               	.LBE326:
 260:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 460               		.loc 1 260 0
 461 00dc 8091 0000 		lds r24,main_vt_flag
 462 00e0 8111      		cpse r24,__zero_reg__
 463 00e2 00C0      		rjmp .L81
 464               	.L82:
 261:main.c        ****           chThdSleepMilliseconds(125);
 465               		.loc 1 261 0
 466 00e4 62E0      		ldi r22,lo8(2)
 467 00e6 83E2      		ldi r24,lo8(35)
 468 00e8 90E0      		ldi r25,0
 469 00ea 0E94 0000 		call _pal_lld_setlineid
 470               	.LVL32:
 471 00ee 0E94 0000 		call _pal_lld_getportfromline
 472               	.LVL33:
 473 00f2 FC01      		movw r30,r24
 474 00f4 1281      		ldd r17,Z+2
 475 00f6 62E0      		ldi r22,lo8(2)
 476 00f8 83E2      		ldi r24,lo8(35)
 477 00fa 90E0      		ldi r25,0
 478 00fc 0E94 0000 		call _pal_lld_setlineid
 479               	.LVL34:
 480 0100 0E94 0000 		call _pal_lld_getpadfromline
 481               	.LVL35:
 482 0104 082F      		mov r16,r24
 483 0106 62E0      		ldi r22,lo8(2)
 484 0108 83E2      		ldi r24,lo8(35)
 485 010a 90E0      		ldi r25,0
 486 010c 0E94 0000 		call _pal_lld_setlineid
 487               	.LVL36:
 488 0110 0E94 0000 		call _pal_lld_getportfromline
 489               	.LVL37:
 490 0114 9701      		movw r18,r14
 491 0116 00C0      		rjmp 2f
 492               		1:
 493 0118 220F      		lsl r18
 494               		2:
 495 011a 0A95      		dec r16
 496 011c 02F4      		brpl 1b
 497 011e 1227      		eor r17,r18
 498 0120 FC01      		movw r30,r24
 499 0122 1283      		std Z+2,r17
 262:main.c        ****         }
 500               		.loc 1 262 0
 501 0124 61EA      		ldi r22,lo8(-95)
 502 0126 77E0      		ldi r23,lo8(7)
 503 0128 80E0      		ldi r24,0
 504 012a 90E0      		ldi r25,0
 505 012c 0E94 0000 		call chThdSleep
 506               	.LVL38:
 260:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 507               		.loc 1 260 0
 508 0130 8091 0000 		lds r24,main_vt_flag
 509 0134 8823      		tst r24
 510 0136 01F0      		breq .L82
 511               	.L81:
 264:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 512               		.loc 1 264 0
 513 0138 1092 0000 		sts main_vt_flag,__zero_reg__
 265:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 514               		.loc 1 265 0
 515 013c 3092 0000 		sts g_state,r3
 516               	.LVL39:
 517               	.L193:
 266:main.c        ****         break;
 518               		.loc 1 266 0
 519 0140 62E0      		ldi r22,lo8(2)
 520 0142 83E2      		ldi r24,lo8(35)
 521 0144 90E0      		ldi r25,0
 522 0146 0E94 0000 		call _pal_lld_setlineid
 523               	.LVL40:
 524 014a 0E94 0000 		call _pal_lld_getpadfromline
 525               	.LVL41:
 526 014e 182F      		mov r17,r24
 527 0150 62E0      		ldi r22,lo8(2)
 528 0152 00C0      		rjmp .L187
 529               	.LVL42:
 530               	.L30:
 531               	.LBB338:
 532               	.LBB339:
 533               	.LBB340:
 534               	.LBB341:
 430:../../os/common/ports/AVR/chcore.h **** }
 535               		.loc 3 430 0
 536               	/* #APP */
 537               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 538 0154 F894      		cli
 539               	 ;  0 "" 2
 540               	.LVL43:
 541               	/* #NOAPP */
 542               	.LBE341:
 543               	.LBE340:
 544               	.LBE339:
 545               	.LBB342:
 546               	.LBB343:
 547               	.LBB344:
 548               	.LBB345:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 549               		.loc 2 287 0
 550 0156 8981      		ldd r24,Y+1
 551 0158 9A81      		ldd r25,Y+2
 552 015a 892B      		or r24,r25
 553 015c 01F0      		breq .L77
 288:../../os/rt/include/chvt.h ****   }
 554               		.loc 2 288 0
 555 015e CE01      		movw r24,r28
 556 0160 0196      		adiw r24,1
 557 0162 0E94 0000 		call chVTDoResetI
 558               	.LVL44:
 559               	.L77:
 560               	.LBE345:
 561               	.LBE344:
 562               		.loc 2 335 0
 563 0166 8E01      		movw r16,r28
 564 0168 0F5F      		subi r16,-1
 565 016a 1F4F      		sbci r17,-1
 566 016c 20E0      		ldi r18,lo8(gs(vt_cb))
 567 016e 30E0      		ldi r19,hi8(gs(vt_cb))
 568 0170 40E1      		ldi r20,lo8(16)
 569 0172 5AE7      		ldi r21,lo8(122)
 570 0174 60E0      		ldi r22,0
 571 0176 70E0      		ldi r23,0
 572 0178 C801      		movw r24,r16
 573 017a 0E94 0000 		call chVTDoSetI
 574               	.LVL45:
 575               	.LBE343:
 576               	.LBE342:
 577               	.LBB346:
 578               	.LBB347:
 579               	.LBB348:
 580               	.LBB349:
 581               		.loc 3 440 0
 582               	/* #APP */
 583               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 584 017e 7894      		sei
 585               	 ;  0 "" 2
 586               	/* #NOAPP */
 587               	.LBE349:
 588               	.LBE348:
 589               	.LBE347:
 590               	.LBE346:
 591               	.LBE338:
 250:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 592               		.loc 1 250 0
 593 0180 8091 0000 		lds r24,main_vt_flag
 594 0184 8111      		cpse r24,__zero_reg__
 595 0186 00C0      		rjmp .L78
 596               	.L79:
 251:main.c        ****           chThdSleepMilliseconds(125);
 597               		.loc 1 251 0
 598 0188 62E0      		ldi r22,lo8(2)
 599 018a 83E2      		ldi r24,lo8(35)
 600 018c 90E0      		ldi r25,0
 601 018e 0E94 0000 		call _pal_lld_setlineid
 602               	.LVL46:
 603 0192 0E94 0000 		call _pal_lld_getportfromline
 604               	.LVL47:
 605 0196 FC01      		movw r30,r24
 606 0198 1281      		ldd r17,Z+2
 607 019a 62E0      		ldi r22,lo8(2)
 608 019c 83E2      		ldi r24,lo8(35)
 609 019e 90E0      		ldi r25,0
 610 01a0 0E94 0000 		call _pal_lld_setlineid
 611               	.LVL48:
 612 01a4 0E94 0000 		call _pal_lld_getpadfromline
 613               	.LVL49:
 614 01a8 082F      		mov r16,r24
 615 01aa 62E0      		ldi r22,lo8(2)
 616 01ac 83E2      		ldi r24,lo8(35)
 617 01ae 90E0      		ldi r25,0
 618 01b0 0E94 0000 		call _pal_lld_setlineid
 619               	.LVL50:
 620 01b4 0E94 0000 		call _pal_lld_getportfromline
 621               	.LVL51:
 622 01b8 9701      		movw r18,r14
 623 01ba 00C0      		rjmp 2f
 624               		1:
 625 01bc 220F      		lsl r18
 626               		2:
 627 01be 0A95      		dec r16
 628 01c0 02F4      		brpl 1b
 629 01c2 1227      		eor r17,r18
 630 01c4 FC01      		movw r30,r24
 631 01c6 1283      		std Z+2,r17
 252:main.c        ****         }
 632               		.loc 1 252 0
 633 01c8 61EA      		ldi r22,lo8(-95)
 634 01ca 77E0      		ldi r23,lo8(7)
 635 01cc 80E0      		ldi r24,0
 636 01ce 90E0      		ldi r25,0
 637 01d0 0E94 0000 		call chThdSleep
 638               	.LVL52:
 250:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 639               		.loc 1 250 0
 640 01d4 8091 0000 		lds r24,main_vt_flag
 641 01d8 8823      		tst r24
 642 01da 01F0      		breq .L79
 643               	.L78:
 254:main.c        ****         g_state = VERDE_LOCKED_SEC;
 644               		.loc 1 254 0
 645 01dc 1092 0000 		sts main_vt_flag,__zero_reg__
 255:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 646               		.loc 1 255 0
 647 01e0 2092 0000 		sts g_state,r2
 648 01e4 00C0      		rjmp .L193
 649               	.LVL53:
 650               	.L29:
 221:main.c        ****         palSetLine(PEDESTRE_VERDE);
 651               		.loc 1 221 0
 652 01e6 62E0      		ldi r22,lo8(2)
 653 01e8 83E2      		ldi r24,lo8(35)
 654 01ea 90E0      		ldi r25,0
 655 01ec 0E94 0000 		call _pal_lld_setlineid
 656               	.LVL54:
 657 01f0 0E94 0000 		call _pal_lld_getpadfromline
 658               	.LVL55:
 659 01f4 182F      		mov r17,r24
 660 01f6 62E0      		ldi r22,lo8(2)
 661 01f8 83E2      		ldi r24,lo8(35)
 662 01fa 90E0      		ldi r25,0
 663 01fc 0E94 0000 		call _pal_lld_setlineid
 664               	.LVL56:
 665 0200 0E94 0000 		call _pal_lld_getportfromline
 666               	.LVL57:
 667 0204 FC01      		movw r30,r24
 668 0206 9281      		ldd r25,Z+2
 669 0208 9701      		movw r18,r14
 670 020a 00C0      		rjmp 2f
 671               		1:
 672 020c 220F      		lsl r18
 673 020e 331F      		rol r19
 674               		2:
 675 0210 1A95      		dec r17
 676 0212 02F4      		brpl 1b
 677 0214 2095      		com r18
 678 0216 3095      		com r19
 679 0218 9223      		and r25,r18
 680 021a 9283      		std Z+2,r25
 222:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 681               		.loc 1 222 0
 682 021c 63E0      		ldi r22,lo8(3)
 683 021e 83E2      		ldi r24,lo8(35)
 684 0220 90E0      		ldi r25,0
 685 0222 0E94 0000 		call _pal_lld_setlineid
 686               	.LVL58:
 687 0226 0E94 0000 		call _pal_lld_getpadfromline
 688               	.LVL59:
 689 022a 182F      		mov r17,r24
 690 022c 63E0      		ldi r22,lo8(3)
 691 022e 83E2      		ldi r24,lo8(35)
 692 0230 90E0      		ldi r25,0
 693 0232 0E94 0000 		call _pal_lld_setlineid
 694               	.LVL60:
 695 0236 0E94 0000 		call _pal_lld_getportfromline
 696               	.LVL61:
 697 023a FC01      		movw r30,r24
 698 023c 9281      		ldd r25,Z+2
 699 023e 9701      		movw r18,r14
 700 0240 00C0      		rjmp 2f
 701               		1:
 702 0242 220F      		lsl r18
 703               		2:
 704 0244 1A95      		dec r17
 705 0246 02F4      		brpl 1b
 706 0248 922B      		or r25,r18
 707 024a 9283      		std Z+2,r25
 708               	.LVL62:
 709               	.LBB350:
 710               	.LBB351:
 711               	.LBB352:
 712               	.LBB353:
 430:../../os/common/ports/AVR/chcore.h **** }
 713               		.loc 3 430 0
 714               	/* #APP */
 715               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 716 024c F894      		cli
 717               	 ;  0 "" 2
 718               	.LVL63:
 719               	/* #NOAPP */
 720               	.LBE353:
 721               	.LBE352:
 722               	.LBE351:
 723               	.LBB354:
 724               	.LBB355:
 725               	.LBB356:
 726               	.LBB357:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 727               		.loc 2 287 0
 728 024e 8981      		ldd r24,Y+1
 729 0250 9A81      		ldd r25,Y+2
 730 0252 892B      		or r24,r25
 731 0254 01F0      		breq .L67
 288:../../os/rt/include/chvt.h ****   }
 732               		.loc 2 288 0
 733 0256 CE01      		movw r24,r28
 734 0258 0196      		adiw r24,1
 735 025a 0E94 0000 		call chVTDoResetI
 736               	.LVL64:
 737               	.L67:
 738               	.LBE357:
 739               	.LBE356:
 740               		.loc 2 335 0
 741 025e 8E01      		movw r16,r28
 742 0260 0F5F      		subi r16,-1
 743 0262 1F4F      		sbci r17,-1
 744 0264 20E0      		ldi r18,lo8(gs(vt_cb))
 745 0266 30E0      		ldi r19,hi8(gs(vt_cb))
 746 0268 48E1      		ldi r20,lo8(24)
 747 026a 57EB      		ldi r21,lo8(-73)
 748 026c 60E0      		ldi r22,0
 749 026e 70E0      		ldi r23,0
 750 0270 C801      		movw r24,r16
 751 0272 0E94 0000 		call chVTDoSetI
 752               	.LVL65:
 753               	.LBE355:
 754               	.LBE354:
 755               	.LBB358:
 756               	.LBB359:
 757               	.LBB360:
 758               	.LBB361:
 759               		.loc 3 440 0
 760               	/* #APP */
 761               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 762 0276 7894      		sei
 763               	 ;  0 "" 2
 764               	/* #NOAPP */
 765               	.LBE361:
 766               	.LBE360:
 767               	.LBE359:
 768               	.LBE358:
 769               	.LBE350:
 224:main.c        ****           if ((*rdp == AMB_PRIMARIO) && flag_red_vt_prim) {
 770               		.loc 1 224 0
 771 0278 8091 0000 		lds r24,main_vt_flag
 772 027c 8823      		tst r24
 773 027e 01F0      		breq .L73
 774 0280 00C0      		rjmp .L68
 775               	.L69:
 229:main.c        ****             flag_amb_sec = 1;
 776               		.loc 1 229 0
 777 0282 0497      		sbiw r24,4
 778 0284 01F4      		brne .+2
 779 0286 00C0      		rjmp .L195
 780               	.L70:
 234:main.c        ****         }
 781               		.loc 1 234 0
 782 0288 6BE1      		ldi r22,lo8(27)
 783 028a 76E0      		ldi r23,lo8(6)
 784 028c 80E0      		ldi r24,0
 785 028e 90E0      		ldi r25,0
 786 0290 0E94 0000 		call chThdSleep
 787               	.LVL66:
 224:main.c        ****           if ((*rdp == AMB_PRIMARIO) && flag_red_vt_prim) {
 788               		.loc 1 224 0
 789 0294 8091 0000 		lds r24,main_vt_flag
 790 0298 8111      		cpse r24,__zero_reg__
 791 029a 00C0      		rjmp .L68
 792               	.L73:
 225:main.c        ****             flag_amb_prim = 1;
 793               		.loc 1 225 0
 794 029c E091 0000 		lds r30,rdp
 795 02a0 F091 0000 		lds r31,rdp+1
 796 02a4 8081      		ld r24,Z
 797 02a6 9181      		ldd r25,Z+1
 798 02a8 8330      		cpi r24,3
 799 02aa 9105      		cpc r25,__zero_reg__
 800 02ac 01F4      		brne .L69
 225:main.c        ****             flag_amb_prim = 1;
 801               		.loc 1 225 0 is_stmt 0 discriminator 1
 802 02ae 8091 0000 		lds r24,flag_red_vt_prim
 803 02b2 8823      		tst r24
 804 02b4 01F0      		breq .L70
 226:main.c        ****             chVTReset(&main_vt);
 805               		.loc 1 226 0 is_stmt 1
 806 02b6 3092 0000 		sts flag_amb_prim,r3
 807               	.LVL67:
 808               	.LBB362:
 809               	.LBB363:
 810               	.LBB364:
 811               	.LBB365:
 430:../../os/common/ports/AVR/chcore.h **** }
 812               		.loc 3 430 0
 813               	/* #APP */
 814               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 815 02ba F894      		cli
 816               	 ;  0 "" 2
 817               	.LVL68:
 818               	/* #NOAPP */
 819               	.LBE365:
 820               	.LBE364:
 821               	.LBE363:
 822               	.LBB366:
 823               	.LBB367:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 824               		.loc 2 287 0
 825 02bc 8981      		ldd r24,Y+1
 826 02be 9A81      		ldd r25,Y+2
 827 02c0 892B      		or r24,r25
 828 02c2 01F0      		breq .L72
 829               	.LVL69:
 830               	.L191:
 831               	.LBE367:
 832               	.LBE366:
 833               	.LBE362:
 834               	.LBB368:
 835               	.LBB369:
 836               	.LBB370:
 288:../../os/rt/include/chvt.h ****   }
 837               		.loc 2 288 0
 838 02c4 CE01      		movw r24,r28
 839 02c6 0196      		adiw r24,1
 840 02c8 0E94 0000 		call chVTDoResetI
 841               	.LVL70:
 842               	.L72:
 843               	.LBE370:
 844               	.LBE369:
 845               	.LBB372:
 846               	.LBB373:
 847               	.LBB374:
 848               	.LBB375:
 849               		.loc 3 440 0
 850               	/* #APP */
 851               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 852 02cc 7894      		sei
 853               	 ;  0 "" 2
 854               	/* #NOAPP */
 855               	.LBE375:
 856               	.LBE374:
 857               	.LBE373:
 858               	.LBE372:
 859               	.LBE368:
 232:main.c        ****           }
 860               		.loc 1 232 0
 861 02ce 3092 0000 		sts main_vt_flag,r3
 862 02d2 00C0      		rjmp .L70
 863               	.LVL71:
 864               	.L25:
 141:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 865               		.loc 1 141 0
 866 02d4 64E0      		ldi r22,lo8(4)
 867 02d6 89E2      		ldi r24,lo8(41)
 868 02d8 90E0      		ldi r25,0
 869 02da 0E94 0000 		call _pal_lld_setlineid
 870               	.LVL72:
 871 02de 0E94 0000 		call _pal_lld_getpadfromline
 872               	.LVL73:
 873 02e2 182F      		mov r17,r24
 874 02e4 64E0      		ldi r22,lo8(4)
 875 02e6 89E2      		ldi r24,lo8(41)
 876 02e8 90E0      		ldi r25,0
 877 02ea 0E94 0000 		call _pal_lld_setlineid
 878               	.LVL74:
 879 02ee 0E94 0000 		call _pal_lld_getportfromline
 880               	.LVL75:
 881 02f2 FC01      		movw r30,r24
 882 02f4 9281      		ldd r25,Z+2
 883 02f6 9701      		movw r18,r14
 884 02f8 00C0      		rjmp 2f
 885               		1:
 886 02fa 220F      		lsl r18
 887               		2:
 888 02fc 1A95      		dec r17
 889 02fe 02F4      		brpl 1b
 890 0300 922B      		or r25,r18
 891 0302 9283      		std Z+2,r25
 892               	.LVL76:
 893               	.LBB380:
 894               	.LBB381:
 895               	.LBB382:
 896               	.LBB383:
 430:../../os/common/ports/AVR/chcore.h **** }
 897               		.loc 3 430 0
 898               	/* #APP */
 899               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 900 0304 F894      		cli
 901               	 ;  0 "" 2
 902               	.LVL77:
 903               	/* #NOAPP */
 904               	.LBE383:
 905               	.LBE382:
 906               	.LBE381:
 907               	.LBB384:
 908               	.LBB385:
 909               	.LBB386:
 910               	.LBB387:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 911               		.loc 2 287 0
 912 0306 8981      		ldd r24,Y+1
 913 0308 9A81      		ldd r25,Y+2
 914 030a 892B      		or r24,r25
 915 030c 01F0      		breq .L43
 288:../../os/rt/include/chvt.h ****   }
 916               		.loc 2 288 0
 917 030e CE01      		movw r24,r28
 918 0310 0196      		adiw r24,1
 919 0312 0E94 0000 		call chVTDoResetI
 920               	.LVL78:
 921               	.L43:
 922               	.LBE387:
 923               	.LBE386:
 924               		.loc 2 335 0
 925 0316 8E01      		movw r16,r28
 926 0318 0F5F      		subi r16,-1
 927 031a 1F4F      		sbci r17,-1
 928 031c 20E0      		ldi r18,lo8(gs(vt_cb))
 929 031e 30E0      		ldi r19,hi8(gs(vt_cb))
 930 0320 40E1      		ldi r20,lo8(16)
 931 0322 5AE7      		ldi r21,lo8(122)
 932 0324 60E0      		ldi r22,0
 933 0326 70E0      		ldi r23,0
 934 0328 C801      		movw r24,r16
 935 032a 0E94 0000 		call chVTDoSetI
 936               	.LVL79:
 937               	.LBE385:
 938               	.LBE384:
 939               	.LBB388:
 940               	.LBB389:
 941               	.LBB390:
 942               	.LBB391:
 943               		.loc 3 440 0
 944               	/* #APP */
 945               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 946 032e 7894      		sei
 947               	 ;  0 "" 2
 948               	/* #NOAPP */
 949               	.LBE391:
 950               	.LBE390:
 951               	.LBE389:
 952               	.LBE388:
 953               	.LBE380:
 143:main.c        ****           chThdSleepMilliseconds(100);
 954               		.loc 1 143 0
 955 0330 8091 0000 		lds r24,main_vt_flag
 956 0334 8111      		cpse r24,__zero_reg__
 957 0336 00C0      		rjmp .L44
 958               	.L45:
 144:main.c        ****         }
 959               		.loc 1 144 0
 960 0338 6BE1      		ldi r22,lo8(27)
 961 033a 76E0      		ldi r23,lo8(6)
 962 033c 80E0      		ldi r24,0
 963 033e 90E0      		ldi r25,0
 964 0340 0E94 0000 		call chThdSleep
 965               	.LVL80:
 143:main.c        ****           chThdSleepMilliseconds(100);
 966               		.loc 1 143 0
 967 0344 8091 0000 		lds r24,main_vt_flag
 968 0348 8823      		tst r24
 969 034a 01F0      		breq .L45
 970               	.L44:
 146:main.c        ****         g_state = VERDE_LOCKED_SEC;
 971               		.loc 1 146 0
 972 034c 1092 0000 		sts main_vt_flag,__zero_reg__
 147:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 973               		.loc 1 147 0
 974 0350 2092 0000 		sts g_state,r2
 975               	.LVL81:
 976               	.L194:
 159:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 977               		.loc 1 159 0
 978 0354 64E0      		ldi r22,lo8(4)
 979 0356 89E2      		ldi r24,lo8(41)
 980 0358 90E0      		ldi r25,0
 981 035a 0E94 0000 		call _pal_lld_setlineid
 982               	.LVL82:
 983 035e 0E94 0000 		call _pal_lld_getpadfromline
 984               	.LVL83:
 985 0362 182F      		mov r17,r24
 986 0364 64E0      		ldi r22,lo8(4)
 987 0366 89E2      		ldi r24,lo8(41)
 988 0368 90E0      		ldi r25,0
 989 036a 0E94 0000 		call _pal_lld_setlineid
 990               	.LVL84:
 991 036e 0E94 0000 		call _pal_lld_getportfromline
 992               	.LVL85:
 993 0372 FC01      		movw r30,r24
 994 0374 9281      		ldd r25,Z+2
 995 0376 9701      		movw r18,r14
 996 0378 00C0      		rjmp 2f
 997               		1:
 998 037a 220F      		lsl r18
 999 037c 331F      		rol r19
 1000               		2:
 1001 037e 1A95      		dec r17
 1002 0380 02F4      		brpl 1b
 1003 0382 2095      		com r18
 1004 0384 3095      		com r19
 1005 0386 9223      		and r25,r18
 1006 0388 9283      		std Z+2,r25
 160:main.c        ****         break;
 1007               		.loc 1 160 0
 1008 038a 66E0      		ldi r22,lo8(6)
 1009 038c 89E2      		ldi r24,lo8(41)
 1010 038e 90E0      		ldi r25,0
 1011 0390 0E94 0000 		call _pal_lld_setlineid
 1012               	.LVL86:
 1013 0394 0E94 0000 		call _pal_lld_getpadfromline
 1014               	.LVL87:
 1015 0398 182F      		mov r17,r24
 1016 039a 66E0      		ldi r22,lo8(6)
 1017 039c 89E2      		ldi r24,lo8(41)
 1018 039e 90E0      		ldi r25,0
 1019 03a0 00C0      		rjmp .L185
 1020               	.LVL88:
 1021               	.L24:
 152:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1022               		.loc 1 152 0
 1023 03a2 64E0      		ldi r22,lo8(4)
 1024 03a4 89E2      		ldi r24,lo8(41)
 1025 03a6 90E0      		ldi r25,0
 1026 03a8 0E94 0000 		call _pal_lld_setlineid
 1027               	.LVL89:
 1028 03ac 0E94 0000 		call _pal_lld_getpadfromline
 1029               	.LVL90:
 1030 03b0 182F      		mov r17,r24
 1031 03b2 64E0      		ldi r22,lo8(4)
 1032 03b4 89E2      		ldi r24,lo8(41)
 1033 03b6 90E0      		ldi r25,0
 1034 03b8 0E94 0000 		call _pal_lld_setlineid
 1035               	.LVL91:
 1036 03bc 0E94 0000 		call _pal_lld_getportfromline
 1037               	.LVL92:
 1038 03c0 FC01      		movw r30,r24
 1039 03c2 9281      		ldd r25,Z+2
 1040 03c4 9701      		movw r18,r14
 1041 03c6 00C0      		rjmp 2f
 1042               		1:
 1043 03c8 220F      		lsl r18
 1044               		2:
 1045 03ca 1A95      		dec r17
 1046 03cc 02F4      		brpl 1b
 1047 03ce 922B      		or r25,r18
 1048 03d0 9283      		std Z+2,r25
 1049               	.LVL93:
 1050               	.LBB392:
 1051               	.LBB393:
 1052               	.LBB394:
 1053               	.LBB395:
 430:../../os/common/ports/AVR/chcore.h **** }
 1054               		.loc 3 430 0
 1055               	/* #APP */
 1056               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1057 03d2 F894      		cli
 1058               	 ;  0 "" 2
 1059               	.LVL94:
 1060               	/* #NOAPP */
 1061               	.LBE395:
 1062               	.LBE394:
 1063               	.LBE393:
 1064               	.LBB396:
 1065               	.LBB397:
 1066               	.LBB398:
 1067               	.LBB399:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1068               		.loc 2 287 0
 1069 03d4 8981      		ldd r24,Y+1
 1070 03d6 9A81      		ldd r25,Y+2
 1071 03d8 892B      		or r24,r25
 1072 03da 01F0      		breq .L46
 288:../../os/rt/include/chvt.h ****   }
 1073               		.loc 2 288 0
 1074 03dc CE01      		movw r24,r28
 1075 03de 0196      		adiw r24,1
 1076 03e0 0E94 0000 		call chVTDoResetI
 1077               	.LVL95:
 1078               	.L46:
 1079               	.LBE399:
 1080               	.LBE398:
 1081               		.loc 2 335 0
 1082 03e4 8E01      		movw r16,r28
 1083 03e6 0F5F      		subi r16,-1
 1084 03e8 1F4F      		sbci r17,-1
 1085 03ea 20E0      		ldi r18,lo8(gs(vt_cb))
 1086 03ec 30E0      		ldi r19,hi8(gs(vt_cb))
 1087 03ee 40E1      		ldi r20,lo8(16)
 1088 03f0 5AE7      		ldi r21,lo8(122)
 1089 03f2 60E0      		ldi r22,0
 1090 03f4 70E0      		ldi r23,0
 1091 03f6 C801      		movw r24,r16
 1092 03f8 0E94 0000 		call chVTDoSetI
 1093               	.LVL96:
 1094               	.LBE397:
 1095               	.LBE396:
 1096               	.LBB400:
 1097               	.LBB401:
 1098               	.LBB402:
 1099               	.LBB403:
 1100               		.loc 3 440 0
 1101               	/* #APP */
 1102               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1103 03fc 7894      		sei
 1104               	 ;  0 "" 2
 1105               	/* #NOAPP */
 1106               	.LBE403:
 1107               	.LBE402:
 1108               	.LBE401:
 1109               	.LBE400:
 1110               	.LBE392:
 154:main.c        ****           chThdSleepMilliseconds(100);
 1111               		.loc 1 154 0
 1112 03fe 8091 0000 		lds r24,main_vt_flag
 1113 0402 8111      		cpse r24,__zero_reg__
 1114 0404 00C0      		rjmp .L47
 1115               	.L48:
 155:main.c        ****         }
 1116               		.loc 1 155 0
 1117 0406 6BE1      		ldi r22,lo8(27)
 1118 0408 76E0      		ldi r23,lo8(6)
 1119 040a 80E0      		ldi r24,0
 1120 040c 90E0      		ldi r25,0
 1121 040e 0E94 0000 		call chThdSleep
 1122               	.LVL97:
 154:main.c        ****           chThdSleepMilliseconds(100);
 1123               		.loc 1 154 0
 1124 0412 8091 0000 		lds r24,main_vt_flag
 1125 0416 8823      		tst r24
 1126 0418 01F0      		breq .L48
 1127               	.L47:
 157:main.c        ****         g_state = VERDE_LOCKED_PED;
 1128               		.loc 1 157 0
 1129 041a 1092 0000 		sts main_vt_flag,__zero_reg__
 158:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1130               		.loc 1 158 0
 1131 041e 2AE0      		ldi r18,lo8(10)
 1132 0420 2093 0000 		sts g_state,r18
 1133 0424 00C0      		rjmp .L194
 1134               	.LVL98:
 1135               	.L23:
 123:main.c        ****         ev = dequeue();
 1136               		.loc 1 123 0
 1137 0426 8091 0000 		lds r24,qsize
 1138 042a 9091 0000 		lds r25,qsize+1
 1139 042e 9927      		clr r25
 1140 0430 9F93      		push r25
 1141 0432 8F93      		push r24
 1142 0434 9F92      		push r9
 1143 0436 8F92      		push r8
 1144 0438 BF92      		push r11
 1145 043a AF92      		push r10
 1146 043c 0E94 0000 		call chprintf
 1147               	.LVL99:
 124:main.c        ****         chprintf((BaseSequentialStream *)&SD1, "QSIZE2: %d\n", (char)qsize);
 1148               		.loc 1 124 0
 1149 0440 0E94 0000 		call dequeue
 1150               	.LVL100:
 1151 0444 6C01      		movw r12,r24
 1152               	.LVL101:
 125:main.c        ****         if (ev == AMB_PRIMARIO) {
 1153               		.loc 1 125 0
 1154 0446 8091 0000 		lds r24,qsize
 1155 044a 9091 0000 		lds r25,qsize+1
 1156 044e 9927      		clr r25
 1157 0450 9F93      		push r25
 1158 0452 8F93      		push r24
 1159 0454 5F92      		push r5
 1160 0456 4F92      		push r4
 1161 0458 BF92      		push r11
 1162 045a AF92      		push r10
 1163 045c 0E94 0000 		call chprintf
 1164               	.LVL102:
 126:main.c        ****           flag_amb_prim = !flag_amb_prim;
 1165               		.loc 1 126 0
 1166 0460 0FB6      		in __tmp_reg__,__SREG__
 1167 0462 F894      		cli
 1168 0464 DEBF      		out __SP_H__,r29
 1169 0466 0FBE      		out __SREG__,__tmp_reg__
 1170 0468 CDBF      		out __SP_L__,r28
 1171 046a 93E0      		ldi r25,3
 1172 046c C916      		cp r12,r25
 1173 046e D104      		cpc r13,__zero_reg__
 1174 0470 01F4      		brne .+2
 1175 0472 00C0      		rjmp .L196
 1176 0474 8091 0000 		lds r24,flag_amb_prim
 129:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1177               		.loc 1 129 0
 1178 0478 E1E0      		ldi r30,1
 1179 047a CE16      		cp r12,r30
 1180 047c D104      		cpc r13,__zero_reg__
 1181 047e 01F4      		brne .+2
 1182 0480 00C0      		rjmp .L40
 129:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1183               		.loc 1 129 0 is_stmt 0 discriminator 2
 1184 0482 F4E0      		ldi r31,4
 1185 0484 CF16      		cp r12,r31
 1186 0486 D104      		cpc r13,__zero_reg__
 1187 0488 01F0      		breq .+2
 1188 048a 00C0      		rjmp .L197
 129:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1189               		.loc 1 129 0
 1190 048c 8111      		cpse r24,__zero_reg__
 1191 048e 00C0      		rjmp .L37
 131:main.c        ****           }
 1192               		.loc 1 131 0 is_stmt 1
 1193 0490 3092 0000 		sts flag_amb_sec,r3
 1194               	.L88:
 133:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1195               		.loc 1 133 0
 1196 0494 84E0      		ldi r24,lo8(4)
 1197               	.L190:
 136:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1198               		.loc 1 136 0
 1199 0496 8093 0000 		sts g_state,r24
 137:main.c        ****         }
 1200               		.loc 1 137 0
 1201 049a 67E0      		ldi r22,lo8(7)
 1202 049c 89E2      		ldi r24,lo8(41)
 1203 049e 90E0      		ldi r25,0
 1204 04a0 0E94 0000 		call _pal_lld_setlineid
 1205               	.LVL103:
 1206 04a4 0E94 0000 		call _pal_lld_getpadfromline
 1207               	.LVL104:
 1208 04a8 182F      		mov r17,r24
 1209 04aa 67E0      		ldi r22,lo8(7)
 1210 04ac 89E2      		ldi r24,lo8(41)
 1211 04ae 90E0      		ldi r25,0
 1212               	.L184:
 192:main.c        ****         } else {
 1213               		.loc 1 192 0
 1214 04b0 0E94 0000 		call _pal_lld_setlineid
 1215               	.LVL105:
 1216 04b4 0E94 0000 		call _pal_lld_getportfromline
 1217               	.LVL106:
 1218 04b8 FC01      		movw r30,r24
 1219 04ba 9281      		ldd r25,Z+2
 1220 04bc 9701      		movw r18,r14
 1221 04be 00C0      		rjmp 2f
 1222               		1:
 1223 04c0 220F      		lsl r18
 1224 04c2 331F      		rol r19
 1225               		2:
 1226 04c4 1A95      		dec r17
 1227 04c6 02F4      		brpl 1b
 1228 04c8 2095      		com r18
 1229 04ca 3095      		com r19
 1230 04cc 9223      		and r25,r18
 1231 04ce 9283      		std Z+2,r25
 1232 04d0 00C0      		rjmp .L37
 1233               	.L21:
 107:main.c        ****         palSetLine(PRIMARIO_VERDE);
 1234               		.loc 1 107 0
 1235 04d2 66E0      		ldi r22,lo8(6)
 1236 04d4 89E2      		ldi r24,lo8(41)
 1237 04d6 90E0      		ldi r25,0
 1238 04d8 0E94 0000 		call _pal_lld_setlineid
 1239               	.LVL107:
 1240 04dc 0E94 0000 		call _pal_lld_getpadfromline
 1241               	.LVL108:
 1242 04e0 182F      		mov r17,r24
 1243 04e2 66E0      		ldi r22,lo8(6)
 1244 04e4 89E2      		ldi r24,lo8(41)
 1245 04e6 90E0      		ldi r25,0
 1246 04e8 0E94 0000 		call _pal_lld_setlineid
 1247               	.LVL109:
 1248 04ec 0E94 0000 		call _pal_lld_getportfromline
 1249               	.LVL110:
 1250 04f0 FC01      		movw r30,r24
 1251 04f2 9281      		ldd r25,Z+2
 1252 04f4 9701      		movw r18,r14
 1253 04f6 00C0      		rjmp 2f
 1254               		1:
 1255 04f8 220F      		lsl r18
 1256 04fa 331F      		rol r19
 1257               		2:
 1258 04fc 1A95      		dec r17
 1259 04fe 02F4      		brpl 1b
 1260 0500 2095      		com r18
 1261 0502 3095      		com r19
 1262 0504 9223      		and r25,r18
 1263 0506 9283      		std Z+2,r25
 108:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 1264               		.loc 1 108 0
 1265 0508 67E0      		ldi r22,lo8(7)
 1266 050a 89E2      		ldi r24,lo8(41)
 1267 050c 90E0      		ldi r25,0
 1268 050e 0E94 0000 		call _pal_lld_setlineid
 1269               	.LVL111:
 1270 0512 0E94 0000 		call _pal_lld_getpadfromline
 1271               	.LVL112:
 1272 0516 182F      		mov r17,r24
 1273 0518 67E0      		ldi r22,lo8(7)
 1274 051a 89E2      		ldi r24,lo8(41)
 1275 051c 90E0      		ldi r25,0
 1276 051e 0E94 0000 		call _pal_lld_setlineid
 1277               	.LVL113:
 1278 0522 0E94 0000 		call _pal_lld_getportfromline
 1279               	.LVL114:
 1280 0526 FC01      		movw r30,r24
 1281 0528 9281      		ldd r25,Z+2
 1282 052a 9701      		movw r18,r14
 1283 052c 00C0      		rjmp 2f
 1284               		1:
 1285 052e 220F      		lsl r18
 1286               		2:
 1287 0530 1A95      		dec r17
 1288 0532 02F4      		brpl 1b
 1289 0534 922B      		or r25,r18
 1290 0536 9283      		std Z+2,r25
 109:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 1291               		.loc 1 109 0
 1292 0538 60E0      		ldi r22,0
 1293 053a 83E2      		ldi r24,lo8(35)
 1294 053c 90E0      		ldi r25,0
 1295 053e 0E94 0000 		call _pal_lld_setlineid
 1296               	.LVL115:
 1297 0542 0E94 0000 		call _pal_lld_getpadfromline
 1298               	.LVL116:
 1299 0546 182F      		mov r17,r24
 1300 0548 60E0      		ldi r22,0
 1301 054a 83E2      		ldi r24,lo8(35)
 1302 054c 90E0      		ldi r25,0
 1303 054e 0E94 0000 		call _pal_lld_setlineid
 1304               	.LVL117:
 1305 0552 0E94 0000 		call _pal_lld_getportfromline
 1306               	.LVL118:
 1307 0556 FC01      		movw r30,r24
 1308 0558 9281      		ldd r25,Z+2
 1309 055a 9701      		movw r18,r14
 1310 055c 00C0      		rjmp 2f
 1311               		1:
 1312 055e 220F      		lsl r18
 1313               		2:
 1314 0560 1A95      		dec r17
 1315 0562 02F4      		brpl 1b
 1316 0564 922B      		or r25,r18
 1317 0566 9283      		std Z+2,r25
 110:main.c        ****         chVTSet(&main_vt, TIME_MS2I(10000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1318               		.loc 1 110 0
 1319 0568 62E0      		ldi r22,lo8(2)
 1320 056a 83E2      		ldi r24,lo8(35)
 1321 056c 90E0      		ldi r25,0
 1322 056e 0E94 0000 		call _pal_lld_setlineid
 1323               	.LVL119:
 1324 0572 0E94 0000 		call _pal_lld_getpadfromline
 1325               	.LVL120:
 1326 0576 182F      		mov r17,r24
 1327 0578 62E0      		ldi r22,lo8(2)
 1328 057a 83E2      		ldi r24,lo8(35)
 1329 057c 90E0      		ldi r25,0
 1330 057e 0E94 0000 		call _pal_lld_setlineid
 1331               	.LVL121:
 1332 0582 0E94 0000 		call _pal_lld_getportfromline
 1333               	.LVL122:
 1334 0586 FC01      		movw r30,r24
 1335 0588 9281      		ldd r25,Z+2
 1336 058a 9701      		movw r18,r14
 1337 058c 00C0      		rjmp 2f
 1338               		1:
 1339 058e 220F      		lsl r18
 1340               		2:
 1341 0590 1A95      		dec r17
 1342 0592 02F4      		brpl 1b
 1343 0594 922B      		or r25,r18
 1344 0596 9283      		std Z+2,r25
 1345               	.LVL123:
 1346               	.LBB404:
 1347               	.LBB405:
 1348               	.LBB406:
 1349               	.LBB407:
 430:../../os/common/ports/AVR/chcore.h **** }
 1350               		.loc 3 430 0
 1351               	/* #APP */
 1352               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1353 0598 F894      		cli
 1354               	 ;  0 "" 2
 1355               	.LVL124:
 1356               	/* #NOAPP */
 1357               	.LBE407:
 1358               	.LBE406:
 1359               	.LBE405:
 1360               	.LBB408:
 1361               	.LBB409:
 1362               	.LBB410:
 1363               	.LBB411:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1364               		.loc 2 287 0
 1365 059a 8981      		ldd r24,Y+1
 1366 059c 9A81      		ldd r25,Y+2
 1367 059e 892B      		or r24,r25
 1368 05a0 01F0      		breq .L32
 288:../../os/rt/include/chvt.h ****   }
 1369               		.loc 2 288 0
 1370 05a2 CE01      		movw r24,r28
 1371 05a4 0196      		adiw r24,1
 1372 05a6 0E94 0000 		call chVTDoResetI
 1373               	.LVL125:
 1374               	.L32:
 1375               	.LBE411:
 1376               	.LBE410:
 1377               		.loc 2 335 0
 1378 05aa 8E01      		movw r16,r28
 1379 05ac 0F5F      		subi r16,-1
 1380 05ae 1F4F      		sbci r17,-1
 1381 05b0 20E0      		ldi r18,lo8(gs(vt_cb))
 1382 05b2 30E0      		ldi r19,hi8(gs(vt_cb))
 1383 05b4 40E5      		ldi r20,lo8(80)
 1384 05b6 52E6      		ldi r21,lo8(98)
 1385 05b8 62E0      		ldi r22,lo8(2)
 1386 05ba 70E0      		ldi r23,0
 1387 05bc C801      		movw r24,r16
 1388 05be 0E94 0000 		call chVTDoSetI
 1389               	.LVL126:
 1390               	.LBE409:
 1391               	.LBE408:
 1392               	.LBB412:
 1393               	.LBB413:
 1394               	.LBB414:
 1395               	.LBB415:
 1396               		.loc 3 440 0
 1397               	/* #APP */
 1398               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1399 05c2 7894      		sei
 1400               	 ;  0 "" 2
 1401               	/* #NOAPP */
 1402               	.LBE415:
 1403               	.LBE414:
 1404               	.LBE413:
 1405               	.LBE412:
 1406               	.LBE404:
 112:main.c        ****           if ((*rdp == AMB_SECUNDARIO) && flag_red_vt_sec) {
 1407               		.loc 1 112 0
 1408 05c4 8091 0000 		lds r24,main_vt_flag
 1409 05c8 8823      		tst r24
 1410 05ca 01F0      		breq .L36
 1411 05cc 00C0      		rjmp .L33
 1412               	.L34:
 117:main.c        ****         }
 1413               		.loc 1 117 0
 1414 05ce 6BE1      		ldi r22,lo8(27)
 1415 05d0 76E0      		ldi r23,lo8(6)
 1416 05d2 80E0      		ldi r24,0
 1417 05d4 90E0      		ldi r25,0
 1418 05d6 0E94 0000 		call chThdSleep
 1419               	.LVL127:
 112:main.c        ****           if ((*rdp == AMB_SECUNDARIO) && flag_red_vt_sec) {
 1420               		.loc 1 112 0
 1421 05da 8091 0000 		lds r24,main_vt_flag
 1422 05de 8111      		cpse r24,__zero_reg__
 1423 05e0 00C0      		rjmp .L33
 1424               	.L36:
 113:main.c        ****             chVTReset(&main_vt);
 1425               		.loc 1 113 0
 1426 05e2 E091 0000 		lds r30,rdp
 1427 05e6 F091 0000 		lds r31,rdp+1
 1428 05ea 8081      		ld r24,Z
 1429 05ec 9181      		ldd r25,Z+1
 1430 05ee 0497      		sbiw r24,4
 1431 05f0 01F4      		brne .L34
 113:main.c        ****             chVTReset(&main_vt);
 1432               		.loc 1 113 0 is_stmt 0 discriminator 1
 1433 05f2 8091 0000 		lds r24,flag_red_vt_sec
 1434 05f6 8823      		tst r24
 1435 05f8 01F0      		breq .L34
 1436               	.LVL128:
 1437               	.LBB416:
 1438               	.LBB417:
 1439               	.LBB418:
 1440               	.LBB419:
 430:../../os/common/ports/AVR/chcore.h **** }
 1441               		.loc 3 430 0 is_stmt 1
 1442               	/* #APP */
 1443               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1444 05fa F894      		cli
 1445               	 ;  0 "" 2
 1446               	.LVL129:
 1447               	/* #NOAPP */
 1448               	.LBE419:
 1449               	.LBE418:
 1450               	.LBE417:
 1451               	.LBB420:
 1452               	.LBB421:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1453               		.loc 2 287 0
 1454 05fc 8981      		ldd r24,Y+1
 1455 05fe 9A81      		ldd r25,Y+2
 1456 0600 892B      		or r24,r25
 1457 0602 01F0      		breq .L35
 288:../../os/rt/include/chvt.h ****   }
 1458               		.loc 2 288 0
 1459 0604 CE01      		movw r24,r28
 1460 0606 0196      		adiw r24,1
 1461 0608 0E94 0000 		call chVTDoResetI
 1462               	.LVL130:
 1463               	.L35:
 1464               	.LBE421:
 1465               	.LBE420:
 1466               	.LBB422:
 1467               	.LBB423:
 1468               	.LBB424:
 1469               	.LBB425:
 1470               		.loc 3 440 0
 1471               	/* #APP */
 1472               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1473 060c 7894      		sei
 1474               	 ;  0 "" 2
 1475               	.LVL131:
 1476               	/* #NOAPP */
 1477               	.LBE425:
 1478               	.LBE424:
 1479               	.LBE423:
 1480               	.LBE422:
 1481               	.LBE416:
 115:main.c        ****           }
 1482               		.loc 1 115 0
 1483 060e 3092 0000 		sts main_vt_flag,r3
 1484 0612 00C0      		rjmp .L34
 1485               	.LVL132:
 1486               	.L27:
 210:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1487               		.loc 1 210 0
 1488 0614 65E0      		ldi r22,lo8(5)
 1489 0616 89E2      		ldi r24,lo8(41)
 1490 0618 90E0      		ldi r25,0
 1491 061a 0E94 0000 		call _pal_lld_setlineid
 1492               	.LVL133:
 1493 061e 0E94 0000 		call _pal_lld_getpadfromline
 1494               	.LVL134:
 1495 0622 182F      		mov r17,r24
 1496 0624 65E0      		ldi r22,lo8(5)
 1497 0626 89E2      		ldi r24,lo8(41)
 1498 0628 90E0      		ldi r25,0
 1499 062a 0E94 0000 		call _pal_lld_setlineid
 1500               	.LVL135:
 1501 062e 0E94 0000 		call _pal_lld_getportfromline
 1502               	.LVL136:
 1503 0632 FC01      		movw r30,r24
 1504 0634 9281      		ldd r25,Z+2
 1505 0636 9701      		movw r18,r14
 1506 0638 00C0      		rjmp 2f
 1507               		1:
 1508 063a 220F      		lsl r18
 1509               		2:
 1510 063c 1A95      		dec r17
 1511 063e 02F4      		brpl 1b
 1512 0640 922B      		or r25,r18
 1513 0642 9283      		std Z+2,r25
 1514               	.LVL137:
 1515               	.LBB426:
 1516               	.LBB427:
 1517               	.LBB428:
 1518               	.LBB429:
 430:../../os/common/ports/AVR/chcore.h **** }
 1519               		.loc 3 430 0
 1520               	/* #APP */
 1521               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1522 0644 F894      		cli
 1523               	 ;  0 "" 2
 1524               	.LVL138:
 1525               	/* #NOAPP */
 1526               	.LBE429:
 1527               	.LBE428:
 1528               	.LBE427:
 1529               	.LBB430:
 1530               	.LBB431:
 1531               	.LBB432:
 1532               	.LBB433:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1533               		.loc 2 287 0
 1534 0646 8981      		ldd r24,Y+1
 1535 0648 9A81      		ldd r25,Y+2
 1536 064a 892B      		or r24,r25
 1537 064c 01F0      		breq .L64
 288:../../os/rt/include/chvt.h ****   }
 1538               		.loc 2 288 0
 1539 064e CE01      		movw r24,r28
 1540 0650 0196      		adiw r24,1
 1541 0652 0E94 0000 		call chVTDoResetI
 1542               	.LVL139:
 1543               	.L64:
 1544               	.LBE433:
 1545               	.LBE432:
 1546               		.loc 2 335 0
 1547 0656 8E01      		movw r16,r28
 1548 0658 0F5F      		subi r16,-1
 1549 065a 1F4F      		sbci r17,-1
 1550 065c 20E0      		ldi r18,lo8(gs(vt_cb))
 1551 065e 30E0      		ldi r19,hi8(gs(vt_cb))
 1552 0660 40E1      		ldi r20,lo8(16)
 1553 0662 5AE7      		ldi r21,lo8(122)
 1554 0664 60E0      		ldi r22,0
 1555 0666 70E0      		ldi r23,0
 1556 0668 C801      		movw r24,r16
 1557 066a 0E94 0000 		call chVTDoSetI
 1558               	.LVL140:
 1559               	.LBE431:
 1560               	.LBE430:
 1561               	.LBB434:
 1562               	.LBB435:
 1563               	.LBB436:
 1564               	.LBB437:
 1565               		.loc 3 440 0
 1566               	/* #APP */
 1567               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1568 066e 7894      		sei
 1569               	 ;  0 "" 2
 1570               	/* #NOAPP */
 1571               	.LBE437:
 1572               	.LBE436:
 1573               	.LBE435:
 1574               	.LBE434:
 1575               	.LBE426:
 212:main.c        ****           chThdSleepMilliseconds(100);
 1576               		.loc 1 212 0
 1577 0670 8091 0000 		lds r24,main_vt_flag
 1578 0674 8111      		cpse r24,__zero_reg__
 1579 0676 00C0      		rjmp .L65
 1580               	.L66:
 213:main.c        ****         }
 1581               		.loc 1 213 0
 1582 0678 6BE1      		ldi r22,lo8(27)
 1583 067a 76E0      		ldi r23,lo8(6)
 1584 067c 80E0      		ldi r24,0
 1585 067e 90E0      		ldi r25,0
 1586 0680 0E94 0000 		call chThdSleep
 1587               	.LVL141:
 212:main.c        ****           chThdSleepMilliseconds(100);
 1588               		.loc 1 212 0
 1589 0684 8091 0000 		lds r24,main_vt_flag
 1590 0688 8823      		tst r24
 1591 068a 01F0      		breq .L66
 1592               	.L65:
 215:main.c        ****         g_state = VERDE_LOCKED_PED;
 1593               		.loc 1 215 0
 1594 068c 1092 0000 		sts main_vt_flag,__zero_reg__
 216:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 1595               		.loc 1 216 0
 1596 0690 8AE0      		ldi r24,lo8(10)
 1597 0692 8093 0000 		sts g_state,r24
 1598               	.LVL142:
 1599               	.L192:
 217:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 1600               		.loc 1 217 0
 1601 0696 65E0      		ldi r22,lo8(5)
 1602 0698 89E2      		ldi r24,lo8(41)
 1603 069a 90E0      		ldi r25,0
 1604 069c 0E94 0000 		call _pal_lld_setlineid
 1605               	.LVL143:
 1606 06a0 0E94 0000 		call _pal_lld_getpadfromline
 1607               	.LVL144:
 1608 06a4 182F      		mov r17,r24
 1609 06a6 65E0      		ldi r22,lo8(5)
 1610 06a8 89E2      		ldi r24,lo8(41)
 1611 06aa 90E0      		ldi r25,0
 1612 06ac 0E94 0000 		call _pal_lld_setlineid
 1613               	.LVL145:
 1614 06b0 0E94 0000 		call _pal_lld_getportfromline
 1615               	.LVL146:
 1616 06b4 FC01      		movw r30,r24
 1617 06b6 9281      		ldd r25,Z+2
 1618 06b8 9701      		movw r18,r14
 1619 06ba 00C0      		rjmp 2f
 1620               		1:
 1621 06bc 220F      		lsl r18
 1622 06be 331F      		rol r19
 1623               		2:
 1624 06c0 1A95      		dec r17
 1625 06c2 02F4      		brpl 1b
 1626 06c4 2095      		com r18
 1627 06c6 3095      		com r19
 1628 06c8 9223      		and r25,r18
 1629 06ca 9283      		std Z+2,r25
 218:main.c        ****         break;
 1630               		.loc 1 218 0
 1631 06cc 60E0      		ldi r22,0
 1632 06ce 83E2      		ldi r24,lo8(35)
 1633 06d0 90E0      		ldi r25,0
 1634 06d2 0E94 0000 		call _pal_lld_setlineid
 1635               	.LVL147:
 1636 06d6 0E94 0000 		call _pal_lld_getpadfromline
 1637               	.LVL148:
 1638 06da 182F      		mov r17,r24
 1639 06dc 60E0      		ldi r22,0
 1640 06de 00C0      		rjmp .L187
 1641               	.LVL149:
 1642               	.L26:
 164:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 1643               		.loc 1 164 0
 1644 06e0 60E0      		ldi r22,0
 1645 06e2 83E2      		ldi r24,lo8(35)
 1646 06e4 90E0      		ldi r25,0
 1647 06e6 0E94 0000 		call _pal_lld_setlineid
 1648               	.LVL150:
 1649 06ea 0E94 0000 		call _pal_lld_getpadfromline
 1650               	.LVL151:
 1651 06ee 182F      		mov r17,r24
 1652 06f0 60E0      		ldi r22,0
 1653 06f2 83E2      		ldi r24,lo8(35)
 1654 06f4 90E0      		ldi r25,0
 1655 06f6 0E94 0000 		call _pal_lld_setlineid
 1656               	.LVL152:
 1657 06fa 0E94 0000 		call _pal_lld_getportfromline
 1658               	.LVL153:
 1659 06fe FC01      		movw r30,r24
 1660 0700 9281      		ldd r25,Z+2
 1661 0702 9701      		movw r18,r14
 1662 0704 00C0      		rjmp 2f
 1663               		1:
 1664 0706 220F      		lsl r18
 1665 0708 331F      		rol r19
 1666               		2:
 1667 070a 1A95      		dec r17
 1668 070c 02F4      		brpl 1b
 1669 070e 2095      		com r18
 1670 0710 3095      		com r19
 1671 0712 9223      		and r25,r18
 1672 0714 9283      		std Z+2,r25
 165:main.c        ****         chVTSet(&main_vt, TIME_MS2I(6000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1673               		.loc 1 165 0
 1674 0716 61E0      		ldi r22,lo8(1)
 1675 0718 83E2      		ldi r24,lo8(35)
 1676 071a 90E0      		ldi r25,0
 1677 071c 0E94 0000 		call _pal_lld_setlineid
 1678               	.LVL154:
 1679 0720 0E94 0000 		call _pal_lld_getpadfromline
 1680               	.LVL155:
 1681 0724 182F      		mov r17,r24
 1682 0726 61E0      		ldi r22,lo8(1)
 1683 0728 83E2      		ldi r24,lo8(35)
 1684 072a 90E0      		ldi r25,0
 1685 072c 0E94 0000 		call _pal_lld_setlineid
 1686               	.LVL156:
 1687 0730 0E94 0000 		call _pal_lld_getportfromline
 1688               	.LVL157:
 1689 0734 FC01      		movw r30,r24
 1690 0736 9281      		ldd r25,Z+2
 1691 0738 9701      		movw r18,r14
 1692 073a 00C0      		rjmp 2f
 1693               		1:
 1694 073c 220F      		lsl r18
 1695               		2:
 1696 073e 1A95      		dec r17
 1697 0740 02F4      		brpl 1b
 1698 0742 922B      		or r25,r18
 1699 0744 9283      		std Z+2,r25
 1700               	.LVL158:
 1701               	.LBB438:
 1702               	.LBB439:
 1703               	.LBB440:
 1704               	.LBB441:
 430:../../os/common/ports/AVR/chcore.h **** }
 1705               		.loc 3 430 0
 1706               	/* #APP */
 1707               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1708 0746 F894      		cli
 1709               	 ;  0 "" 2
 1710               	.LVL159:
 1711               	/* #NOAPP */
 1712               	.LBE441:
 1713               	.LBE440:
 1714               	.LBE439:
 1715               	.LBB442:
 1716               	.LBB443:
 1717               	.LBB444:
 1718               	.LBB445:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1719               		.loc 2 287 0
 1720 0748 8981      		ldd r24,Y+1
 1721 074a 9A81      		ldd r25,Y+2
 1722 074c 892B      		or r24,r25
 1723 074e 01F0      		breq .L49
 288:../../os/rt/include/chvt.h ****   }
 1724               		.loc 2 288 0
 1725 0750 CE01      		movw r24,r28
 1726 0752 0196      		adiw r24,1
 1727 0754 0E94 0000 		call chVTDoResetI
 1728               	.LVL160:
 1729               	.L49:
 1730               	.LBE445:
 1731               	.LBE444:
 1732               		.loc 2 335 0
 1733 0758 8E01      		movw r16,r28
 1734 075a 0F5F      		subi r16,-1
 1735 075c 1F4F      		sbci r17,-1
 1736 075e 20E0      		ldi r18,lo8(gs(vt_cb))
 1737 0760 30E0      		ldi r19,hi8(gs(vt_cb))
 1738 0762 40E3      		ldi r20,lo8(48)
 1739 0764 5EE6      		ldi r21,lo8(110)
 1740 0766 61E0      		ldi r22,lo8(1)
 1741 0768 70E0      		ldi r23,0
 1742 076a C801      		movw r24,r16
 1743 076c 0E94 0000 		call chVTDoSetI
 1744               	.LVL161:
 1745               	.LBE443:
 1746               	.LBE442:
 1747               	.LBB446:
 1748               	.LBB447:
 1749               	.LBB448:
 1750               	.LBB449:
 1751               		.loc 3 440 0
 1752               	/* #APP */
 1753               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1754 0770 7894      		sei
 1755               	 ;  0 "" 2
 1756               	/* #NOAPP */
 1757               	.LBE449:
 1758               	.LBE448:
 1759               	.LBE447:
 1760               	.LBE446:
 1761               	.LBE438:
 167:main.c        ****           if ((*rdp == AMB_PRIMARIO) && flag_red_vt_prim) {
 1762               		.loc 1 167 0
 1763 0772 8091 0000 		lds r24,main_vt_flag
 1764 0776 8823      		tst r24
 1765 0778 01F0      		breq .L54
 1766 077a 00C0      		rjmp .L50
 1767               	.L51:
 172:main.c        ****             dequeue();
 1768               		.loc 1 172 0
 1769 077c 0497      		sbiw r24,4
 1770 077e 01F4      		brne .+2
 1771 0780 00C0      		rjmp .L198
 1772               	.L52:
 177:main.c        ****         }
 1773               		.loc 1 177 0
 1774 0782 6BE1      		ldi r22,lo8(27)
 1775 0784 76E0      		ldi r23,lo8(6)
 1776 0786 80E0      		ldi r24,0
 1777 0788 90E0      		ldi r25,0
 1778 078a 0E94 0000 		call chThdSleep
 1779               	.LVL162:
 167:main.c        ****           if ((*rdp == AMB_PRIMARIO) && flag_red_vt_prim) {
 1780               		.loc 1 167 0
 1781 078e 8091 0000 		lds r24,main_vt_flag
 1782 0792 8111      		cpse r24,__zero_reg__
 1783 0794 00C0      		rjmp .L50
 1784               	.L54:
 168:main.c        ****             flag_amb_prim = 1;
 1785               		.loc 1 168 0
 1786 0796 E091 0000 		lds r30,rdp
 1787 079a F091 0000 		lds r31,rdp+1
 1788 079e 8081      		ld r24,Z
 1789 07a0 9181      		ldd r25,Z+1
 1790 07a2 8330      		cpi r24,3
 1791 07a4 9105      		cpc r25,__zero_reg__
 1792 07a6 01F4      		brne .L51
 168:main.c        ****             flag_amb_prim = 1;
 1793               		.loc 1 168 0 is_stmt 0 discriminator 1
 1794 07a8 8091 0000 		lds r24,flag_red_vt_prim
 1795 07ac 8823      		tst r24
 1796 07ae 01F0      		breq .L52
 169:main.c        ****             chVTReset(&main_vt);
 1797               		.loc 1 169 0 is_stmt 1
 1798 07b0 3092 0000 		sts flag_amb_prim,r3
 1799               	.LVL163:
 1800               	.LBB450:
 1801               	.LBB451:
 1802               	.LBB452:
 1803               	.LBB453:
 430:../../os/common/ports/AVR/chcore.h **** }
 1804               		.loc 3 430 0
 1805               	/* #APP */
 1806               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1807 07b4 F894      		cli
 1808               	 ;  0 "" 2
 1809               	.LVL164:
 1810               	/* #NOAPP */
 1811               	.LBE453:
 1812               	.LBE452:
 1813               	.LBE451:
 1814               	.LBB454:
 1815               	.LBB455:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1816               		.loc 2 287 0
 1817 07b6 8981      		ldd r24,Y+1
 1818 07b8 9A81      		ldd r25,Y+2
 1819 07ba 892B      		or r24,r25
 1820 07bc 01F0      		breq .L53
 288:../../os/rt/include/chvt.h ****   }
 1821               		.loc 2 288 0
 1822 07be CE01      		movw r24,r28
 1823 07c0 0196      		adiw r24,1
 1824 07c2 0E94 0000 		call chVTDoResetI
 1825               	.LVL165:
 1826               	.L53:
 1827               	.LBE455:
 1828               	.LBE454:
 1829               	.LBB456:
 1830               	.LBB457:
 1831               	.LBB458:
 1832               	.LBB459:
 1833               		.loc 3 440 0
 1834               	/* #APP */
 1835               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1836 07c6 7894      		sei
 1837               	 ;  0 "" 2
 1838               	.LVL166:
 1839               	/* #NOAPP */
 1840               	.LBE459:
 1841               	.LBE458:
 1842               	.LBE457:
 1843               	.LBE456:
 1844               	.LBE450:
 171:main.c        ****           } else if ((*rdp == AMB_SECUNDARIO) && flag_red_vt_sec && flag_amb_sec == 0) {
 1845               		.loc 1 171 0
 1846 07c8 3092 0000 		sts main_vt_flag,r3
 1847 07cc 00C0      		rjmp .L52
 1848               	.LVL167:
 1849               	.L28:
 199:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1850               		.loc 1 199 0
 1851 07ce 65E0      		ldi r22,lo8(5)
 1852 07d0 89E2      		ldi r24,lo8(41)
 1853 07d2 90E0      		ldi r25,0
 1854 07d4 0E94 0000 		call _pal_lld_setlineid
 1855               	.LVL168:
 1856 07d8 0E94 0000 		call _pal_lld_getpadfromline
 1857               	.LVL169:
 1858 07dc 182F      		mov r17,r24
 1859 07de 65E0      		ldi r22,lo8(5)
 1860 07e0 89E2      		ldi r24,lo8(41)
 1861 07e2 90E0      		ldi r25,0
 1862 07e4 0E94 0000 		call _pal_lld_setlineid
 1863               	.LVL170:
 1864 07e8 0E94 0000 		call _pal_lld_getportfromline
 1865               	.LVL171:
 1866 07ec FC01      		movw r30,r24
 1867 07ee 9281      		ldd r25,Z+2
 1868 07f0 9701      		movw r18,r14
 1869 07f2 00C0      		rjmp 2f
 1870               		1:
 1871 07f4 220F      		lsl r18
 1872               		2:
 1873 07f6 1A95      		dec r17
 1874 07f8 02F4      		brpl 1b
 1875 07fa 922B      		or r25,r18
 1876 07fc 9283      		std Z+2,r25
 1877               	.LVL172:
 1878               	.LBB460:
 1879               	.LBB461:
 1880               	.LBB462:
 1881               	.LBB463:
 430:../../os/common/ports/AVR/chcore.h **** }
 1882               		.loc 3 430 0
 1883               	/* #APP */
 1884               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1885 07fe F894      		cli
 1886               	 ;  0 "" 2
 1887               	.LVL173:
 1888               	/* #NOAPP */
 1889               	.LBE463:
 1890               	.LBE462:
 1891               	.LBE461:
 1892               	.LBB464:
 1893               	.LBB465:
 1894               	.LBB466:
 1895               	.LBB467:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1896               		.loc 2 287 0
 1897 0800 8981      		ldd r24,Y+1
 1898 0802 9A81      		ldd r25,Y+2
 1899 0804 892B      		or r24,r25
 1900 0806 01F0      		breq .L61
 288:../../os/rt/include/chvt.h ****   }
 1901               		.loc 2 288 0
 1902 0808 CE01      		movw r24,r28
 1903 080a 0196      		adiw r24,1
 1904 080c 0E94 0000 		call chVTDoResetI
 1905               	.LVL174:
 1906               	.L61:
 1907               	.LBE467:
 1908               	.LBE466:
 1909               		.loc 2 335 0
 1910 0810 8E01      		movw r16,r28
 1911 0812 0F5F      		subi r16,-1
 1912 0814 1F4F      		sbci r17,-1
 1913 0816 20E0      		ldi r18,lo8(gs(vt_cb))
 1914 0818 30E0      		ldi r19,hi8(gs(vt_cb))
 1915 081a 40E1      		ldi r20,lo8(16)
 1916 081c 5AE7      		ldi r21,lo8(122)
 1917 081e 60E0      		ldi r22,0
 1918 0820 70E0      		ldi r23,0
 1919 0822 C801      		movw r24,r16
 1920 0824 0E94 0000 		call chVTDoSetI
 1921               	.LVL175:
 1922               	.LBE465:
 1923               	.LBE464:
 1924               	.LBB468:
 1925               	.LBB469:
 1926               	.LBB470:
 1927               	.LBB471:
 1928               		.loc 3 440 0
 1929               	/* #APP */
 1930               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1931 0828 7894      		sei
 1932               	 ;  0 "" 2
 1933               	/* #NOAPP */
 1934               	.LBE471:
 1935               	.LBE470:
 1936               	.LBE469:
 1937               	.LBE468:
 1938               	.LBE460:
 201:main.c        ****           chThdSleepMilliseconds(100);
 1939               		.loc 1 201 0
 1940 082a 8091 0000 		lds r24,main_vt_flag
 1941 082e 8111      		cpse r24,__zero_reg__
 1942 0830 00C0      		rjmp .L62
 1943               	.L63:
 202:main.c        ****         }
 1944               		.loc 1 202 0
 1945 0832 6BE1      		ldi r22,lo8(27)
 1946 0834 76E0      		ldi r23,lo8(6)
 1947 0836 80E0      		ldi r24,0
 1948 0838 90E0      		ldi r25,0
 1949 083a 0E94 0000 		call chThdSleep
 1950               	.LVL176:
 201:main.c        ****           chThdSleepMilliseconds(100);
 1951               		.loc 1 201 0
 1952 083e 8091 0000 		lds r24,main_vt_flag
 1953 0842 8823      		tst r24
 1954 0844 01F0      		breq .L63
 1955               	.L62:
 204:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 1956               		.loc 1 204 0
 1957 0846 1092 0000 		sts main_vt_flag,__zero_reg__
 205:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 1958               		.loc 1 205 0
 1959 084a 3092 0000 		sts g_state,r3
 1960 084e 00C0      		rjmp .L192
 1961               	.LVL177:
 1962               	.L195:
 229:main.c        ****             flag_amb_sec = 1;
 1963               		.loc 1 229 0 discriminator 1
 1964 0850 8091 0000 		lds r24,flag_red_vt_sec
 1965 0854 8823      		tst r24
 1966 0856 01F4      		brne .+2
 1967 0858 00C0      		rjmp .L70
 230:main.c        ****             chVTReset(&main_vt);
 1968               		.loc 1 230 0
 1969 085a 3092 0000 		sts flag_amb_sec,r3
 1970               	.LVL178:
 1971               	.LBB472:
 1972               	.LBB376:
 1973               	.LBB377:
 1974               	.LBB378:
 430:../../os/common/ports/AVR/chcore.h **** }
 1975               		.loc 3 430 0
 1976               	/* #APP */
 1977               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1978 085e F894      		cli
 1979               	 ;  0 "" 2
 1980               	.LVL179:
 1981               	/* #NOAPP */
 1982               	.LBE378:
 1983               	.LBE377:
 1984               	.LBE376:
 1985               	.LBB379:
 1986               	.LBB371:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1987               		.loc 2 287 0
 1988 0860 8981      		ldd r24,Y+1
 1989 0862 9A81      		ldd r25,Y+2
 1990 0864 892B      		or r24,r25
 1991 0866 01F0      		breq .+2
 1992 0868 00C0      		rjmp .L191
 1993 086a 00C0      		rjmp .L72
 1994               	.LVL180:
 1995               	.L198:
 1996               	.LBE371:
 1997               	.LBE379:
 1998               	.LBE472:
 172:main.c        ****             dequeue();
 1999               		.loc 1 172 0 discriminator 1
 2000 086c 8091 0000 		lds r24,flag_red_vt_sec
 2001 0870 8823      		tst r24
 2002 0872 01F4      		brne .+2
 2003 0874 00C0      		rjmp .L52
 172:main.c        ****             dequeue();
 2004               		.loc 1 172 0 is_stmt 0 discriminator 2
 2005 0876 8091 0000 		lds r24,flag_amb_sec
 2006 087a 8111      		cpse r24,__zero_reg__
 2007 087c 00C0      		rjmp .L52
 173:main.c        ****             flag_amb_sec = 1;
 2008               		.loc 1 173 0 is_stmt 1
 2009 087e 0E94 0000 		call dequeue
 2010               	.LVL181:
 174:main.c        ****             chprintf((BaseSequentialStream *)&SD1, "CHEGUEI AQUI\n", (char)qsize);
 2011               		.loc 1 174 0
 2012 0882 3092 0000 		sts flag_amb_sec,r3
 175:main.c        ****           }
 2013               		.loc 1 175 0
 2014 0886 8091 0000 		lds r24,qsize
 2015 088a 9091 0000 		lds r25,qsize+1
 2016 088e 9927      		clr r25
 2017 0890 9F93      		push r25
 2018 0892 8F93      		push r24
 2019 0894 80E0      		ldi r24,lo8(.LC2)
 2020 0896 90E0      		ldi r25,hi8(.LC2)
 2021 0898 9F93      		push r25
 2022 089a 8F93      		push r24
 2023 089c BF92      		push r11
 2024 089e AF92      		push r10
 2025 08a0 0E94 0000 		call chprintf
 2026               	.LVL182:
 2027 08a4 0F90      		pop __tmp_reg__
 2028 08a6 0F90      		pop __tmp_reg__
 2029 08a8 0F90      		pop __tmp_reg__
 2030 08aa 0F90      		pop __tmp_reg__
 2031 08ac 0F90      		pop __tmp_reg__
 2032 08ae 0F90      		pop __tmp_reg__
 2033 08b0 00C0      		rjmp .L52
 2034               	.L50:
 179:main.c        ****         main_vt_flag = 0;
 2035               		.loc 1 179 0
 2036 08b2 8091 0000 		lds r24,qsize
 2037 08b6 9091 0000 		lds r25,qsize+1
 2038 08ba 9927      		clr r25
 2039 08bc 9F93      		push r25
 2040 08be 8F93      		push r24
 2041 08c0 7F92      		push r7
 2042 08c2 6F92      		push r6
 2043 08c4 BF92      		push r11
 2044 08c6 AF92      		push r10
 2045 08c8 0E94 0000 		call chprintf
 2046               	.LVL183:
 180:main.c        ****         while (flag_amb_sec) {
 2047               		.loc 1 180 0
 2048 08cc 1092 0000 		sts main_vt_flag,__zero_reg__
 2049 08d0 8091 0000 		lds r24,flag_amb_sec
 181:main.c        ****           ev = dequeue();
 2050               		.loc 1 181 0
 2051 08d4 0F90      		pop __tmp_reg__
 2052 08d6 0F90      		pop __tmp_reg__
 2053 08d8 0F90      		pop __tmp_reg__
 2054 08da 0F90      		pop __tmp_reg__
 2055 08dc 0F90      		pop __tmp_reg__
 2056 08de 0F90      		pop __tmp_reg__
 2057 08e0 00C0      		rjmp .L57
 2058               	.L58:
 182:main.c        ****           if (ev == AMB_SECUNDARIO) {
 2059               		.loc 1 182 0
 2060 08e2 0E94 0000 		call dequeue
 2061               	.LVL184:
 2062 08e6 6C01      		movw r12,r24
 2063               	.LVL185:
 183:main.c        ****             flag_amb_sec = 0;
 2064               		.loc 1 183 0
 2065 08e8 0497      		sbiw r24,4
 2066 08ea 01F4      		brne .+2
 2067 08ec 00C0      		rjmp .L56
 2068 08ee 8091 0000 		lds r24,flag_amb_sec
 2069               	.L57:
 181:main.c        ****           ev = dequeue();
 2070               		.loc 1 181 0
 2071 08f2 8111      		cpse r24,__zero_reg__
 2072 08f4 00C0      		rjmp .L58
 187:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 2073               		.loc 1 187 0
 2074 08f6 8091 0000 		lds r24,qsize
 2075 08fa 9091 0000 		lds r25,qsize+1
 2076 08fe 892B      		or r24,r25
 2077 0900 01F0      		breq .+2
 2078 0902 00C0      		rjmp .L199
 2079               	.L59:
 194:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 2080               		.loc 1 194 0
 2081 0904 88E0      		ldi r24,lo8(8)
 190:main.c        ****           g_state = AMARELO_PED_SEC;
 2082               		.loc 1 190 0
 2083 0906 22E0      		ldi r18,2
 2084 0908 C216      		cp r12,r18
 2085 090a D104      		cpc r13,__zero_reg__
 2086 090c 01F4      		brne .L186
 191:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 2087               		.loc 1 191 0
 2088 090e 87E0      		ldi r24,lo8(7)
 2089               	.L186:
 2090 0910 8093 0000 		sts g_state,r24
 192:main.c        ****         } else {
 2091               		.loc 1 192 0
 2092 0914 61E0      		ldi r22,lo8(1)
 2093 0916 83E2      		ldi r24,lo8(35)
 2094 0918 90E0      		ldi r25,0
 2095 091a 0E94 0000 		call _pal_lld_setlineid
 2096               	.LVL186:
 2097 091e 0E94 0000 		call _pal_lld_getpadfromline
 2098               	.LVL187:
 2099 0922 182F      		mov r17,r24
 2100 0924 61E0      		ldi r22,lo8(1)
 2101               	.LVL188:
 2102               	.L188:
 2103 0926 83E2      		ldi r24,lo8(35)
 2104 0928 90E0      		ldi r25,0
 2105 092a 00C0      		rjmp .L184
 2106               	.LVL189:
 2107               	.L33:
 119:main.c        ****         g_state = VERDE_IDLE_PRIM;
 2108               		.loc 1 119 0
 2109 092c 1092 0000 		sts main_vt_flag,__zero_reg__
 120:main.c        ****         break;
 2110               		.loc 1 120 0
 2111 0930 82E0      		ldi r24,lo8(2)
 2112 0932 8093 0000 		sts g_state,r24
 121:main.c        ****       case VERDE_IDLE_PRIM:
 2113               		.loc 1 121 0
 2114 0936 00C0      		rjmp .L37
 2115               	.LVL190:
 2116               	.L68:
 236:main.c        ****         if (qsize > 0) {
 2117               		.loc 1 236 0
 2118 0938 1092 0000 		sts main_vt_flag,__zero_reg__
 237:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 2119               		.loc 1 237 0
 2120 093c 8091 0000 		lds r24,qsize
 2121 0940 9091 0000 		lds r25,qsize+1
 2122 0944 892B      		or r24,r25
 2123 0946 01F4      		brne .L200
 2124               	.L74:
 240:main.c        ****           g_state = PISCANDO_SEC;
 2125               		.loc 1 240 0
 2126 0948 91E0      		ldi r25,1
 2127 094a C916      		cp r12,r25
 2128 094c D104      		cpc r13,__zero_reg__
 2129 094e 01F0      		breq .L75
 240:main.c        ****           g_state = PISCANDO_SEC;
 2130               		.loc 1 240 0 is_stmt 0 discriminator 1
 2131 0950 E4E0      		ldi r30,4
 2132 0952 CE16      		cp r12,r30
 2133 0954 D104      		cpc r13,__zero_reg__
 2134 0956 01F0      		breq .L75
 244:main.c        ****           palClearLine(PEDESTRE_VERDE);
 2135               		.loc 1 244 0 is_stmt 1
 2136 0958 2CE0      		ldi r18,lo8(12)
 2137 095a 2093 0000 		sts g_state,r18
 2138               	.L189:
 245:main.c        ****         }
 2139               		.loc 1 245 0
 2140 095e 63E0      		ldi r22,lo8(3)
 2141 0960 83E2      		ldi r24,lo8(35)
 2142 0962 90E0      		ldi r25,0
 2143 0964 0E94 0000 		call _pal_lld_setlineid
 2144               	.LVL191:
 2145 0968 0E94 0000 		call _pal_lld_getpadfromline
 2146               	.LVL192:
 2147 096c 182F      		mov r17,r24
 2148 096e 63E0      		ldi r22,lo8(3)
 2149 0970 00C0      		rjmp .L188
 2150               	.LVL193:
 2151               	.L56:
 184:main.c        ****           }
 2152               		.loc 1 184 0
 2153 0972 1092 0000 		sts flag_amb_sec,__zero_reg__
 187:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 2154               		.loc 1 187 0
 2155 0976 8091 0000 		lds r24,qsize
 2156 097a 9091 0000 		lds r25,qsize+1
 2157 097e 892B      		or r24,r25
 2158 0980 01F0      		breq .L59
 2159               	.L199:
 188:main.c        ****         }
 2160               		.loc 1 188 0
 2161 0982 0E94 0000 		call dequeue
 2162               	.LVL194:
 2163 0986 6C01      		movw r12,r24
 2164               	.LVL195:
 2165 0988 00C0      		rjmp .L59
 2166               	.LVL196:
 2167               	.L75:
 241:main.c        ****           palClearLine(PEDESTRE_VERDE);
 2168               		.loc 1 241 0
 2169 098a FBE0      		ldi r31,lo8(11)
 2170 098c F093 0000 		sts g_state,r31
 2171 0990 00C0      		rjmp .L189
 2172               	.LVL197:
 2173               	.L40:
 129:main.c        ****           if (ev == AMB_SECUNDARIO) {
 2174               		.loc 1 129 0
 2175 0992 8823      		tst r24
 2176 0994 01F4      		brne .+2
 2177 0996 00C0      		rjmp .L88
 2178 0998 00C0      		rjmp .L37
 2179               	.L196:
 127:main.c        ****         }
 2180               		.loc 1 127 0
 2181 099a 81E0      		ldi r24,lo8(1)
 2182 099c 9091 0000 		lds r25,flag_amb_prim
 2183 09a0 9111      		cpse r25,__zero_reg__
 2184 09a2 80E0      		ldi r24,0
 2185               	.L39:
 2186 09a4 8093 0000 		sts flag_amb_prim,r24
 2187 09a8 00C0      		rjmp .L37
 2188               	.LVL198:
 2189               	.L200:
 238:main.c        ****         }
 2190               		.loc 1 238 0
 2191 09aa 0E94 0000 		call dequeue
 2192               	.LVL199:
 2193 09ae 6C01      		movw r12,r24
 2194               	.LVL200:
 2195 09b0 00C0      		rjmp .L74
 2196               	.LVL201:
 2197               	.L197:
 135:main.c        ****           g_state = AMARELO_PED_PRIM;
 2198               		.loc 1 135 0
 2199 09b2 F2E0      		ldi r31,2
 2200 09b4 CF16      		cp r12,r31
 2201 09b6 D104      		cpc r13,__zero_reg__
 2202 09b8 01F0      		breq .+2
 2203 09ba 00C0      		rjmp .L37
 129:main.c        ****           if (ev == AMB_SECUNDARIO) {
 2204               		.loc 1 129 0
 2205 09bc 8111      		cpse r24,__zero_reg__
 2206 09be 00C0      		rjmp .L37
 136:main.c        ****           palClearLine(PRIMARIO_VERDE);
 2207               		.loc 1 136 0
 2208 09c0 83E0      		ldi r24,lo8(3)
 2209 09c2 00C0      		rjmp .L190
 2210               		.cfi_endproc
 2211               	.LFE243:
 2213               		.section	.text.button_check,"ax",@progbits
 2214               	.global	button_check
 2216               	button_check:
 2217               	.LFB248:
 422:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 2218               		.loc 1 422 0
 2219               		.cfi_startproc
 2220               	.LVL202:
 2221 0000 CF92      		push r12
 2222               	.LCFI8:
 2223               		.cfi_def_cfa_offset 3
 2224               		.cfi_offset 12, -2
 2225 0002 DF92      		push r13
 2226               	.LCFI9:
 2227               		.cfi_def_cfa_offset 4
 2228               		.cfi_offset 13, -3
 2229 0004 EF92      		push r14
 2230               	.LCFI10:
 2231               		.cfi_def_cfa_offset 5
 2232               		.cfi_offset 14, -4
 2233 0006 CF93      		push r28
 2234               	.LCFI11:
 2235               		.cfi_def_cfa_offset 6
 2236               		.cfi_offset 28, -5
 2237               	/* prologue: function */
 2238               	/* frame size = 0 */
 2239               	/* stack size = 4 */
 2240               	.L__stack_usage = 4
 2241 0008 6B01      		movw r12,r22
 2242 000a E82E      		mov r14,r24
 426:main.c        ****     x1 = palReadLine(line);
 2243               		.loc 1 426 0
 2244 000c 4130      		cpi r20,lo8(1)
 2245 000e 01F0      		breq .L206
 431:main.c        ****     x2 = palReadLine(line);
 2246               		.loc 1 431 0
 2247 0010 4230      		cpi r20,lo8(2)
 2248 0012 01F4      		brne .+2
 2249 0014 00C0      		rjmp .L207
 436:main.c        ****     x3 = palReadLine(line);
 2250               		.loc 1 436 0
 2251 0016 4330      		cpi r20,lo8(3)
 2252 0018 01F4      		brne .+2
 2253 001a 00C0      		rjmp .L208
 441:main.c        ****     x4 = palReadLine(line);
 2254               		.loc 1 441 0
 2255 001c 4430      		cpi r20,lo8(4)
 2256 001e 01F0      		breq .L209
 2257               	.LVL203:
 448:main.c        **** }
 2258               		.loc 1 448 0
 2259 0020 81E0      		ldi r24,lo8(1)
 2260 0022 8227      		eor r24,r18
 449:main.c        **** 
 2261               		.loc 1 449 0
 2262 0024 8923      		and r24,r25
 2263               	/* epilogue start */
 2264 0026 CF91      		pop r28
 2265 0028 EF90      		pop r14
 2266               	.LVL204:
 2267 002a DF90      		pop r13
 2268 002c CF90      		pop r12
 2269               	.LVL205:
 2270 002e 0895      		ret
 2271               	.LVL206:
 2272               	.L209:
 442:main.c        ****     w = x4^old_x4;
 2273               		.loc 1 442 0
 2274 0030 0E94 0000 		call _pal_lld_getportfromline
 2275               	.LVL207:
 2276 0034 FC01      		movw r30,r24
 2277 0036 C081      		ld r28,Z
 2278 0038 8E2D      		mov r24,r14
 2279 003a B601      		movw r22,r12
 2280 003c 0E94 0000 		call _pal_lld_getpadfromline
 2281               	.LVL208:
 2282 0040 2C2F      		mov r18,r28
 2283 0042 30E0      		ldi r19,0
 2284 0044 00C0      		rjmp 2f
 2285               		1:
 2286 0046 3595      		asr r19
 2287 0048 2795      		ror r18
 2288               		2:
 2289 004a 8A95      		dec r24
 2290 004c 02F4      		brpl 1b
 2291 004e 2170      		andi r18,lo8(1)
 443:main.c        ****     old_x4 = x4;
 2292               		.loc 1 443 0
 2293 0050 9091 0000 		lds r25,old_x4.4170
 2294 0054 9227      		eor r25,r18
 2295               	.LVL209:
 444:main.c        ****     x = x4;
 2296               		.loc 1 444 0
 2297 0056 2093 0000 		sts old_x4.4170,r18
 2298               	.LVL210:
 448:main.c        **** }
 2299               		.loc 1 448 0
 2300 005a 81E0      		ldi r24,lo8(1)
 2301 005c 8227      		eor r24,r18
 449:main.c        **** 
 2302               		.loc 1 449 0
 2303 005e 8923      		and r24,r25
 2304               	/* epilogue start */
 2305 0060 CF91      		pop r28
 2306 0062 EF90      		pop r14
 2307               	.LVL211:
 2308 0064 DF90      		pop r13
 2309 0066 CF90      		pop r12
 2310 0068 0895      		ret
 2311               	.LVL212:
 2312               	.L206:
 427:main.c        ****     w = x1^old_x1;
 2313               		.loc 1 427 0
 2314 006a 0E94 0000 		call _pal_lld_getportfromline
 2315               	.LVL213:
 2316 006e FC01      		movw r30,r24
 2317 0070 C081      		ld r28,Z
 2318 0072 8E2D      		mov r24,r14
 2319 0074 B601      		movw r22,r12
 2320 0076 0E94 0000 		call _pal_lld_getpadfromline
 2321               	.LVL214:
 2322 007a 2C2F      		mov r18,r28
 2323 007c 30E0      		ldi r19,0
 2324 007e 00C0      		rjmp 2f
 2325               		1:
 2326 0080 3595      		asr r19
 2327 0082 2795      		ror r18
 2328               		2:
 2329 0084 8A95      		dec r24
 2330 0086 02F4      		brpl 1b
 2331 0088 2170      		andi r18,lo8(1)
 428:main.c        ****     old_x1 = x1;
 2332               		.loc 1 428 0
 2333 008a 9091 0000 		lds r25,old_x1.4164
 2334 008e 9227      		eor r25,r18
 2335               	.LVL215:
 429:main.c        ****     x = x1;
 2336               		.loc 1 429 0
 2337 0090 2093 0000 		sts old_x1.4164,r18
 2338               	.LVL216:
 448:main.c        **** }
 2339               		.loc 1 448 0
 2340 0094 81E0      		ldi r24,lo8(1)
 2341 0096 8227      		eor r24,r18
 449:main.c        **** 
 2342               		.loc 1 449 0
 2343 0098 8923      		and r24,r25
 2344               	/* epilogue start */
 2345 009a CF91      		pop r28
 2346 009c EF90      		pop r14
 2347               	.LVL217:
 2348 009e DF90      		pop r13
 2349 00a0 CF90      		pop r12
 2350 00a2 0895      		ret
 2351               	.LVL218:
 2352               	.L207:
 432:main.c        ****     w = x2^old_x2;
 2353               		.loc 1 432 0
 2354 00a4 0E94 0000 		call _pal_lld_getportfromline
 2355               	.LVL219:
 2356 00a8 FC01      		movw r30,r24
 2357 00aa C081      		ld r28,Z
 2358 00ac 8E2D      		mov r24,r14
 2359 00ae B601      		movw r22,r12
 2360 00b0 0E94 0000 		call _pal_lld_getpadfromline
 2361               	.LVL220:
 2362 00b4 2C2F      		mov r18,r28
 2363 00b6 30E0      		ldi r19,0
 2364 00b8 00C0      		rjmp 2f
 2365               		1:
 2366 00ba 3595      		asr r19
 2367 00bc 2795      		ror r18
 2368               		2:
 2369 00be 8A95      		dec r24
 2370 00c0 02F4      		brpl 1b
 2371 00c2 2170      		andi r18,lo8(1)
 433:main.c        ****     old_x2 = x2;
 2372               		.loc 1 433 0
 2373 00c4 9091 0000 		lds r25,old_x2.4166
 2374 00c8 9227      		eor r25,r18
 2375               	.LVL221:
 434:main.c        ****     x = x2;
 2376               		.loc 1 434 0
 2377 00ca 2093 0000 		sts old_x2.4166,r18
 2378               	.LVL222:
 448:main.c        **** }
 2379               		.loc 1 448 0
 2380 00ce 81E0      		ldi r24,lo8(1)
 2381 00d0 8227      		eor r24,r18
 449:main.c        **** 
 2382               		.loc 1 449 0
 2383 00d2 8923      		and r24,r25
 2384               	/* epilogue start */
 2385 00d4 CF91      		pop r28
 2386 00d6 EF90      		pop r14
 2387               	.LVL223:
 2388 00d8 DF90      		pop r13
 2389 00da CF90      		pop r12
 2390 00dc 0895      		ret
 2391               	.LVL224:
 2392               	.L208:
 437:main.c        ****     w = x3^old_x3;
 2393               		.loc 1 437 0
 2394 00de 0E94 0000 		call _pal_lld_getportfromline
 2395               	.LVL225:
 2396 00e2 FC01      		movw r30,r24
 2397 00e4 C081      		ld r28,Z
 2398 00e6 8E2D      		mov r24,r14
 2399 00e8 B601      		movw r22,r12
 2400 00ea 0E94 0000 		call _pal_lld_getpadfromline
 2401               	.LVL226:
 2402 00ee 2C2F      		mov r18,r28
 2403 00f0 30E0      		ldi r19,0
 2404 00f2 00C0      		rjmp 2f
 2405               		1:
 2406 00f4 3595      		asr r19
 2407 00f6 2795      		ror r18
 2408               		2:
 2409 00f8 8A95      		dec r24
 2410 00fa 02F4      		brpl 1b
 2411 00fc 2170      		andi r18,lo8(1)
 438:main.c        ****     old_x3 = x3;
 2412               		.loc 1 438 0
 2413 00fe 9091 0000 		lds r25,old_x3.4168
 2414 0102 9227      		eor r25,r18
 2415               	.LVL227:
 439:main.c        ****     x = x3;
 2416               		.loc 1 439 0
 2417 0104 2093 0000 		sts old_x3.4168,r18
 2418               	.LVL228:
 448:main.c        **** }
 2419               		.loc 1 448 0
 2420 0108 81E0      		ldi r24,lo8(1)
 2421 010a 8227      		eor r24,r18
 449:main.c        **** 
 2422               		.loc 1 449 0
 2423 010c 8923      		and r24,r25
 2424               	/* epilogue start */
 2425 010e CF91      		pop r28
 2426 0110 EF90      		pop r14
 2427               	.LVL229:
 2428 0112 DF90      		pop r13
 2429 0114 CF90      		pop r12
 2430 0116 0895      		ret
 2431               		.cfi_endproc
 2432               	.LFE248:
 2434               		.section	.text.startup.main,"ax",@progbits
 2435               	.global	main
 2437               	main:
 2438               	.LFB244:
 279:main.c        ****   SerialConfig config = {.sc_brr = UBRR2x(9600),
 2439               		.loc 1 279 0
 2440               		.cfi_startproc
 2441 0000 CF93      		push r28
 2442               	.LCFI12:
 2443               		.cfi_def_cfa_offset 3
 2444               		.cfi_offset 28, -2
 2445 0002 DF93      		push r29
 2446               	.LCFI13:
 2447               		.cfi_def_cfa_offset 4
 2448               		.cfi_offset 29, -3
 2449 0004 00D0      		rcall .
 2450 0006 1F92      		push __zero_reg__
 2451               	.LCFI14:
 2452               		.cfi_def_cfa_offset 7
 2453 0008 CDB7      		in r28,__SP_L__
 2454 000a DEB7      		in r29,__SP_H__
 2455               	.LCFI15:
 2456               		.cfi_def_cfa_register 28
 2457               	/* prologue: function */
 2458               	/* frame size = 3 */
 2459               	/* stack size = 5 */
 2460               	.L__stack_usage = 5
 280:main.c        ****                          .sc_bits_per_char = USART_CHAR_SIZE_8
 2461               		.loc 1 280 0
 2462 000c 8FEC      		ldi r24,lo8(-49)
 2463 000e 90E0      		ldi r25,0
 2464 0010 9A83      		std Y+2,r25
 2465 0012 8983      		std Y+1,r24
 2466 0014 83E0      		ldi r24,lo8(3)
 2467 0016 8B83      		std Y+3,r24
 284:main.c        ****   /*
 2468               		.loc 1 284 0
 2469 0018 0E94 0000 		call queueInit
 2470               	.LVL230:
 292:main.c        ****   chSysInit();
 2471               		.loc 1 292 0
 2472 001c 0E94 0000 		call halInit
 2473               	.LVL231:
 293:main.c        **** 
 2474               		.loc 1 293 0
 2475 0020 0E94 0000 		call chSysInit
 2476               	.LVL232:
 295:main.c        **** 
 2477               		.loc 1 295 0
 2478 0024 BE01      		movw r22,r28
 2479 0026 6F5F      		subi r22,-1
 2480 0028 7F4F      		sbci r23,-1
 2481 002a 80E0      		ldi r24,lo8(SD1)
 2482 002c 90E0      		ldi r25,hi8(SD1)
 2483 002e 0E94 0000 		call sdStart
 2484               	.LVL233:
 298:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 2485               		.loc 1 298 0
 2486 0032 62E0      		ldi r22,lo8(2)
 2487 0034 86E2      		ldi r24,lo8(38)
 2488 0036 90E0      		ldi r25,0
 2489 0038 0E94 0000 		call _pal_lld_setlineid
 2490               	.LVL234:
 2491 003c 0E94 0000 		call _pal_lld_getpadfromline
 2492               	.LVL235:
 2493 0040 F82E      		mov r15,r24
 2494 0042 62E0      		ldi r22,lo8(2)
 2495 0044 86E2      		ldi r24,lo8(38)
 2496 0046 90E0      		ldi r25,0
 2497 0048 0E94 0000 		call _pal_lld_setlineid
 2498               	.LVL236:
 2499 004c 0E94 0000 		call _pal_lld_getportfromline
 2500               	.LVL237:
 2501 0050 01E0      		ldi r16,lo8(1)
 2502 0052 10E0      		ldi r17,0
 2503 0054 B801      		movw r22,r16
 2504 0056 00C0      		rjmp 2f
 2505               		1:
 2506 0058 660F      		lsl r22
 2507               		2:
 2508 005a FA94      		dec r15
 2509 005c 02F4      		brpl 1b
 2510 005e 43E0      		ldi r20,lo8(3)
 2511 0060 0E94 0000 		call _pal_lld_setgroupmode
 2512               	.LVL238:
 299:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 2513               		.loc 1 299 0
 2514 0064 64E0      		ldi r22,lo8(4)
 2515 0066 86E2      		ldi r24,lo8(38)
 2516 0068 90E0      		ldi r25,0
 2517 006a 0E94 0000 		call _pal_lld_setlineid
 2518               	.LVL239:
 2519 006e 0E94 0000 		call _pal_lld_getpadfromline
 2520               	.LVL240:
 2521 0072 F82E      		mov r15,r24
 2522 0074 64E0      		ldi r22,lo8(4)
 2523 0076 86E2      		ldi r24,lo8(38)
 2524 0078 90E0      		ldi r25,0
 2525 007a 0E94 0000 		call _pal_lld_setlineid
 2526               	.LVL241:
 2527 007e 0E94 0000 		call _pal_lld_getportfromline
 2528               	.LVL242:
 2529 0082 B801      		movw r22,r16
 2530 0084 00C0      		rjmp 2f
 2531               		1:
 2532 0086 660F      		lsl r22
 2533               		2:
 2534 0088 FA94      		dec r15
 2535 008a 02F4      		brpl 1b
 2536 008c 43E0      		ldi r20,lo8(3)
 2537 008e 0E94 0000 		call _pal_lld_setgroupmode
 2538               	.LVL243:
 300:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 2539               		.loc 1 300 0
 2540 0092 63E0      		ldi r22,lo8(3)
 2541 0094 86E2      		ldi r24,lo8(38)
 2542 0096 90E0      		ldi r25,0
 2543 0098 0E94 0000 		call _pal_lld_setlineid
 2544               	.LVL244:
 2545 009c 0E94 0000 		call _pal_lld_getpadfromline
 2546               	.LVL245:
 2547 00a0 F82E      		mov r15,r24
 2548 00a2 63E0      		ldi r22,lo8(3)
 2549 00a4 86E2      		ldi r24,lo8(38)
 2550 00a6 90E0      		ldi r25,0
 2551 00a8 0E94 0000 		call _pal_lld_setlineid
 2552               	.LVL246:
 2553 00ac 0E94 0000 		call _pal_lld_getportfromline
 2554               	.LVL247:
 2555 00b0 B801      		movw r22,r16
 2556 00b2 00C0      		rjmp 2f
 2557               		1:
 2558 00b4 660F      		lsl r22
 2559               		2:
 2560 00b6 FA94      		dec r15
 2561 00b8 02F4      		brpl 1b
 2562 00ba 43E0      		ldi r20,lo8(3)
 2563 00bc 0E94 0000 		call _pal_lld_setgroupmode
 2564               	.LVL248:
 301:main.c        **** 
 2565               		.loc 1 301 0
 2566 00c0 65E0      		ldi r22,lo8(5)
 2567 00c2 86E2      		ldi r24,lo8(38)
 2568 00c4 90E0      		ldi r25,0
 2569 00c6 0E94 0000 		call _pal_lld_setlineid
 2570               	.LVL249:
 2571 00ca 0E94 0000 		call _pal_lld_getpadfromline
 2572               	.LVL250:
 2573 00ce F82E      		mov r15,r24
 2574 00d0 65E0      		ldi r22,lo8(5)
 2575 00d2 86E2      		ldi r24,lo8(38)
 2576 00d4 90E0      		ldi r25,0
 2577 00d6 0E94 0000 		call _pal_lld_setlineid
 2578               	.LVL251:
 2579 00da 0E94 0000 		call _pal_lld_getportfromline
 2580               	.LVL252:
 2581 00de B801      		movw r22,r16
 2582 00e0 00C0      		rjmp 2f
 2583               		1:
 2584 00e2 660F      		lsl r22
 2585               		2:
 2586 00e4 FA94      		dec r15
 2587 00e6 02F4      		brpl 1b
 2588 00e8 43E0      		ldi r20,lo8(3)
 2589 00ea 0E94 0000 		call _pal_lld_setgroupmode
 2590               	.LVL253:
 304:main.c        ****   palClearLine(PEDESTRE_VERDE);
 2591               		.loc 1 304 0
 2592 00ee 63E0      		ldi r22,lo8(3)
 2593 00f0 83E2      		ldi r24,lo8(35)
 2594 00f2 90E0      		ldi r25,0
 2595 00f4 0E94 0000 		call _pal_lld_setlineid
 2596               	.LVL254:
 2597 00f8 0E94 0000 		call _pal_lld_getpadfromline
 2598               	.LVL255:
 2599 00fc F82E      		mov r15,r24
 2600 00fe 63E0      		ldi r22,lo8(3)
 2601 0100 83E2      		ldi r24,lo8(35)
 2602 0102 90E0      		ldi r25,0
 2603 0104 0E94 0000 		call _pal_lld_setlineid
 2604               	.LVL256:
 2605 0108 0E94 0000 		call _pal_lld_getportfromline
 2606               	.LVL257:
 2607 010c B801      		movw r22,r16
 2608 010e 00C0      		rjmp 2f
 2609               		1:
 2610 0110 660F      		lsl r22
 2611               		2:
 2612 0112 FA94      		dec r15
 2613 0114 02F4      		brpl 1b
 2614 0116 46E0      		ldi r20,lo8(6)
 2615 0118 0E94 0000 		call _pal_lld_setgroupmode
 2616               	.LVL258:
 305:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2617               		.loc 1 305 0
 2618 011c 63E0      		ldi r22,lo8(3)
 2619 011e 83E2      		ldi r24,lo8(35)
 2620 0120 90E0      		ldi r25,0
 2621 0122 0E94 0000 		call _pal_lld_setlineid
 2622               	.LVL259:
 2623 0126 0E94 0000 		call _pal_lld_getpadfromline
 2624               	.LVL260:
 2625 012a F82E      		mov r15,r24
 2626 012c 63E0      		ldi r22,lo8(3)
 2627 012e 83E2      		ldi r24,lo8(35)
 2628 0130 90E0      		ldi r25,0
 2629 0132 0E94 0000 		call _pal_lld_setlineid
 2630               	.LVL261:
 2631 0136 0E94 0000 		call _pal_lld_getportfromline
 2632               	.LVL262:
 2633 013a FC01      		movw r30,r24
 2634 013c 9281      		ldd r25,Z+2
 2635 013e 9801      		movw r18,r16
 2636 0140 00C0      		rjmp 2f
 2637               		1:
 2638 0142 220F      		lsl r18
 2639 0144 331F      		rol r19
 2640               		2:
 2641 0146 FA94      		dec r15
 2642 0148 02F4      		brpl 1b
 2643 014a 2095      		com r18
 2644 014c 3095      		com r19
 2645 014e 9223      		and r25,r18
 2646 0150 9283      		std Z+2,r25
 306:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 2647               		.loc 1 306 0
 2648 0152 62E0      		ldi r22,lo8(2)
 2649 0154 83E2      		ldi r24,lo8(35)
 2650 0156 90E0      		ldi r25,0
 2651 0158 0E94 0000 		call _pal_lld_setlineid
 2652               	.LVL263:
 2653 015c 0E94 0000 		call _pal_lld_getpadfromline
 2654               	.LVL264:
 2655 0160 F82E      		mov r15,r24
 2656 0162 62E0      		ldi r22,lo8(2)
 2657 0164 83E2      		ldi r24,lo8(35)
 2658 0166 90E0      		ldi r25,0
 2659 0168 0E94 0000 		call _pal_lld_setlineid
 2660               	.LVL265:
 2661 016c 0E94 0000 		call _pal_lld_getportfromline
 2662               	.LVL266:
 2663 0170 B801      		movw r22,r16
 2664 0172 00C0      		rjmp 2f
 2665               		1:
 2666 0174 660F      		lsl r22
 2667               		2:
 2668 0176 FA94      		dec r15
 2669 0178 02F4      		brpl 1b
 2670 017a 46E0      		ldi r20,lo8(6)
 2671 017c 0E94 0000 		call _pal_lld_setgroupmode
 2672               	.LVL267:
 307:main.c        **** 
 2673               		.loc 1 307 0
 2674 0180 62E0      		ldi r22,lo8(2)
 2675 0182 83E2      		ldi r24,lo8(35)
 2676 0184 90E0      		ldi r25,0
 2677 0186 0E94 0000 		call _pal_lld_setlineid
 2678               	.LVL268:
 2679 018a 0E94 0000 		call _pal_lld_getpadfromline
 2680               	.LVL269:
 2681 018e F82E      		mov r15,r24
 2682 0190 62E0      		ldi r22,lo8(2)
 2683 0192 83E2      		ldi r24,lo8(35)
 2684 0194 90E0      		ldi r25,0
 2685 0196 0E94 0000 		call _pal_lld_setlineid
 2686               	.LVL270:
 2687 019a 0E94 0000 		call _pal_lld_getportfromline
 2688               	.LVL271:
 2689 019e FC01      		movw r30,r24
 2690 01a0 9281      		ldd r25,Z+2
 2691 01a2 9801      		movw r18,r16
 2692 01a4 00C0      		rjmp 2f
 2693               		1:
 2694 01a6 220F      		lsl r18
 2695 01a8 331F      		rol r19
 2696               		2:
 2697 01aa FA94      		dec r15
 2698 01ac 02F4      		brpl 1b
 2699 01ae 2095      		com r18
 2700 01b0 3095      		com r19
 2701 01b2 9223      		and r25,r18
 2702 01b4 9283      		std Z+2,r25
 310:main.c        ****   palClearLine(PRIMARIO_VERDE);
 2703               		.loc 1 310 0
 2704 01b6 67E0      		ldi r22,lo8(7)
 2705 01b8 89E2      		ldi r24,lo8(41)
 2706 01ba 90E0      		ldi r25,0
 2707 01bc 0E94 0000 		call _pal_lld_setlineid
 2708               	.LVL272:
 2709 01c0 0E94 0000 		call _pal_lld_getpadfromline
 2710               	.LVL273:
 2711 01c4 F82E      		mov r15,r24
 2712 01c6 67E0      		ldi r22,lo8(7)
 2713 01c8 89E2      		ldi r24,lo8(41)
 2714 01ca 90E0      		ldi r25,0
 2715 01cc 0E94 0000 		call _pal_lld_setlineid
 2716               	.LVL274:
 2717 01d0 0E94 0000 		call _pal_lld_getportfromline
 2718               	.LVL275:
 2719 01d4 B801      		movw r22,r16
 2720 01d6 00C0      		rjmp 2f
 2721               		1:
 2722 01d8 660F      		lsl r22
 2723               		2:
 2724 01da FA94      		dec r15
 2725 01dc 02F4      		brpl 1b
 2726 01de 46E0      		ldi r20,lo8(6)
 2727 01e0 0E94 0000 		call _pal_lld_setgroupmode
 2728               	.LVL276:
 311:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 2729               		.loc 1 311 0
 2730 01e4 67E0      		ldi r22,lo8(7)
 2731 01e6 89E2      		ldi r24,lo8(41)
 2732 01e8 90E0      		ldi r25,0
 2733 01ea 0E94 0000 		call _pal_lld_setlineid
 2734               	.LVL277:
 2735 01ee 0E94 0000 		call _pal_lld_getpadfromline
 2736               	.LVL278:
 2737 01f2 F82E      		mov r15,r24
 2738 01f4 67E0      		ldi r22,lo8(7)
 2739 01f6 89E2      		ldi r24,lo8(41)
 2740 01f8 90E0      		ldi r25,0
 2741 01fa 0E94 0000 		call _pal_lld_setlineid
 2742               	.LVL279:
 2743 01fe 0E94 0000 		call _pal_lld_getportfromline
 2744               	.LVL280:
 2745 0202 FC01      		movw r30,r24
 2746 0204 9281      		ldd r25,Z+2
 2747 0206 9801      		movw r18,r16
 2748 0208 00C0      		rjmp 2f
 2749               		1:
 2750 020a 220F      		lsl r18
 2751 020c 331F      		rol r19
 2752               		2:
 2753 020e FA94      		dec r15
 2754 0210 02F4      		brpl 1b
 2755 0212 2095      		com r18
 2756 0214 3095      		com r19
 2757 0216 9223      		and r25,r18
 2758 0218 9283      		std Z+2,r25
 312:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 2759               		.loc 1 312 0
 2760 021a 64E0      		ldi r22,lo8(4)
 2761 021c 89E2      		ldi r24,lo8(41)
 2762 021e 90E0      		ldi r25,0
 2763 0220 0E94 0000 		call _pal_lld_setlineid
 2764               	.LVL281:
 2765 0224 0E94 0000 		call _pal_lld_getpadfromline
 2766               	.LVL282:
 2767 0228 F82E      		mov r15,r24
 2768 022a 64E0      		ldi r22,lo8(4)
 2769 022c 89E2      		ldi r24,lo8(41)
 2770 022e 90E0      		ldi r25,0
 2771 0230 0E94 0000 		call _pal_lld_setlineid
 2772               	.LVL283:
 2773 0234 0E94 0000 		call _pal_lld_getportfromline
 2774               	.LVL284:
 2775 0238 B801      		movw r22,r16
 2776 023a 00C0      		rjmp 2f
 2777               		1:
 2778 023c 660F      		lsl r22
 2779               		2:
 2780 023e FA94      		dec r15
 2781 0240 02F4      		brpl 1b
 2782 0242 46E0      		ldi r20,lo8(6)
 2783 0244 0E94 0000 		call _pal_lld_setgroupmode
 2784               	.LVL285:
 313:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2785               		.loc 1 313 0
 2786 0248 64E0      		ldi r22,lo8(4)
 2787 024a 89E2      		ldi r24,lo8(41)
 2788 024c 90E0      		ldi r25,0
 2789 024e 0E94 0000 		call _pal_lld_setlineid
 2790               	.LVL286:
 2791 0252 0E94 0000 		call _pal_lld_getpadfromline
 2792               	.LVL287:
 2793 0256 F82E      		mov r15,r24
 2794 0258 64E0      		ldi r22,lo8(4)
 2795 025a 89E2      		ldi r24,lo8(41)
 2796 025c 90E0      		ldi r25,0
 2797 025e 0E94 0000 		call _pal_lld_setlineid
 2798               	.LVL288:
 2799 0262 0E94 0000 		call _pal_lld_getportfromline
 2800               	.LVL289:
 2801 0266 FC01      		movw r30,r24
 2802 0268 9281      		ldd r25,Z+2
 2803 026a 9801      		movw r18,r16
 2804 026c 00C0      		rjmp 2f
 2805               		1:
 2806 026e 220F      		lsl r18
 2807 0270 331F      		rol r19
 2808               		2:
 2809 0272 FA94      		dec r15
 2810 0274 02F4      		brpl 1b
 2811 0276 2095      		com r18
 2812 0278 3095      		com r19
 2813 027a 9223      		and r25,r18
 2814 027c 9283      		std Z+2,r25
 314:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 2815               		.loc 1 314 0
 2816 027e 66E0      		ldi r22,lo8(6)
 2817 0280 89E2      		ldi r24,lo8(41)
 2818 0282 90E0      		ldi r25,0
 2819 0284 0E94 0000 		call _pal_lld_setlineid
 2820               	.LVL290:
 2821 0288 0E94 0000 		call _pal_lld_getpadfromline
 2822               	.LVL291:
 2823 028c F82E      		mov r15,r24
 2824 028e 66E0      		ldi r22,lo8(6)
 2825 0290 89E2      		ldi r24,lo8(41)
 2826 0292 90E0      		ldi r25,0
 2827 0294 0E94 0000 		call _pal_lld_setlineid
 2828               	.LVL292:
 2829 0298 0E94 0000 		call _pal_lld_getportfromline
 2830               	.LVL293:
 2831 029c B801      		movw r22,r16
 2832 029e 00C0      		rjmp 2f
 2833               		1:
 2834 02a0 660F      		lsl r22
 2835               		2:
 2836 02a2 FA94      		dec r15
 2837 02a4 02F4      		brpl 1b
 2838 02a6 46E0      		ldi r20,lo8(6)
 2839 02a8 0E94 0000 		call _pal_lld_setgroupmode
 2840               	.LVL294:
 315:main.c        **** 
 2841               		.loc 1 315 0
 2842 02ac 66E0      		ldi r22,lo8(6)
 2843 02ae 89E2      		ldi r24,lo8(41)
 2844 02b0 90E0      		ldi r25,0
 2845 02b2 0E94 0000 		call _pal_lld_setlineid
 2846               	.LVL295:
 2847 02b6 0E94 0000 		call _pal_lld_getpadfromline
 2848               	.LVL296:
 2849 02ba F82E      		mov r15,r24
 2850 02bc 66E0      		ldi r22,lo8(6)
 2851 02be 89E2      		ldi r24,lo8(41)
 2852 02c0 90E0      		ldi r25,0
 2853 02c2 0E94 0000 		call _pal_lld_setlineid
 2854               	.LVL297:
 2855 02c6 0E94 0000 		call _pal_lld_getportfromline
 2856               	.LVL298:
 2857 02ca FC01      		movw r30,r24
 2858 02cc 9281      		ldd r25,Z+2
 2859 02ce 9801      		movw r18,r16
 2860 02d0 00C0      		rjmp 2f
 2861               		1:
 2862 02d2 220F      		lsl r18
 2863 02d4 331F      		rol r19
 2864               		2:
 2865 02d6 FA94      		dec r15
 2866 02d8 02F4      		brpl 1b
 2867 02da 2095      		com r18
 2868 02dc 3095      		com r19
 2869 02de 9223      		and r25,r18
 2870 02e0 9283      		std Z+2,r25
 318:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 2871               		.loc 1 318 0
 2872 02e2 61E0      		ldi r22,lo8(1)
 2873 02e4 83E2      		ldi r24,lo8(35)
 2874 02e6 90E0      		ldi r25,0
 2875 02e8 0E94 0000 		call _pal_lld_setlineid
 2876               	.LVL299:
 2877 02ec 0E94 0000 		call _pal_lld_getpadfromline
 2878               	.LVL300:
 2879 02f0 F82E      		mov r15,r24
 2880 02f2 61E0      		ldi r22,lo8(1)
 2881 02f4 83E2      		ldi r24,lo8(35)
 2882 02f6 90E0      		ldi r25,0
 2883 02f8 0E94 0000 		call _pal_lld_setlineid
 2884               	.LVL301:
 2885 02fc 0E94 0000 		call _pal_lld_getportfromline
 2886               	.LVL302:
 2887 0300 B801      		movw r22,r16
 2888 0302 00C0      		rjmp 2f
 2889               		1:
 2890 0304 660F      		lsl r22
 2891               		2:
 2892 0306 FA94      		dec r15
 2893 0308 02F4      		brpl 1b
 2894 030a 46E0      		ldi r20,lo8(6)
 2895 030c 0E94 0000 		call _pal_lld_setgroupmode
 2896               	.LVL303:
 319:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 2897               		.loc 1 319 0
 2898 0310 61E0      		ldi r22,lo8(1)
 2899 0312 83E2      		ldi r24,lo8(35)
 2900 0314 90E0      		ldi r25,0
 2901 0316 0E94 0000 		call _pal_lld_setlineid
 2902               	.LVL304:
 2903 031a 0E94 0000 		call _pal_lld_getpadfromline
 2904               	.LVL305:
 2905 031e F82E      		mov r15,r24
 2906 0320 61E0      		ldi r22,lo8(1)
 2907 0322 83E2      		ldi r24,lo8(35)
 2908 0324 90E0      		ldi r25,0
 2909 0326 0E94 0000 		call _pal_lld_setlineid
 2910               	.LVL306:
 2911 032a 0E94 0000 		call _pal_lld_getportfromline
 2912               	.LVL307:
 2913 032e FC01      		movw r30,r24
 2914 0330 9281      		ldd r25,Z+2
 2915 0332 9801      		movw r18,r16
 2916 0334 00C0      		rjmp 2f
 2917               		1:
 2918 0336 220F      		lsl r18
 2919 0338 331F      		rol r19
 2920               		2:
 2921 033a FA94      		dec r15
 2922 033c 02F4      		brpl 1b
 2923 033e 2095      		com r18
 2924 0340 3095      		com r19
 2925 0342 9223      		and r25,r18
 2926 0344 9283      		std Z+2,r25
 320:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 2927               		.loc 1 320 0
 2928 0346 65E0      		ldi r22,lo8(5)
 2929 0348 89E2      		ldi r24,lo8(41)
 2930 034a 90E0      		ldi r25,0
 2931 034c 0E94 0000 		call _pal_lld_setlineid
 2932               	.LVL308:
 2933 0350 0E94 0000 		call _pal_lld_getpadfromline
 2934               	.LVL309:
 2935 0354 F82E      		mov r15,r24
 2936 0356 65E0      		ldi r22,lo8(5)
 2937 0358 89E2      		ldi r24,lo8(41)
 2938 035a 90E0      		ldi r25,0
 2939 035c 0E94 0000 		call _pal_lld_setlineid
 2940               	.LVL310:
 2941 0360 0E94 0000 		call _pal_lld_getportfromline
 2942               	.LVL311:
 2943 0364 B801      		movw r22,r16
 2944 0366 00C0      		rjmp 2f
 2945               		1:
 2946 0368 660F      		lsl r22
 2947               		2:
 2948 036a FA94      		dec r15
 2949 036c 02F4      		brpl 1b
 2950 036e 46E0      		ldi r20,lo8(6)
 2951 0370 0E94 0000 		call _pal_lld_setgroupmode
 2952               	.LVL312:
 321:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2953               		.loc 1 321 0
 2954 0374 65E0      		ldi r22,lo8(5)
 2955 0376 89E2      		ldi r24,lo8(41)
 2956 0378 90E0      		ldi r25,0
 2957 037a 0E94 0000 		call _pal_lld_setlineid
 2958               	.LVL313:
 2959 037e 0E94 0000 		call _pal_lld_getpadfromline
 2960               	.LVL314:
 2961 0382 F82E      		mov r15,r24
 2962 0384 65E0      		ldi r22,lo8(5)
 2963 0386 89E2      		ldi r24,lo8(41)
 2964 0388 90E0      		ldi r25,0
 2965 038a 0E94 0000 		call _pal_lld_setlineid
 2966               	.LVL315:
 2967 038e 0E94 0000 		call _pal_lld_getportfromline
 2968               	.LVL316:
 2969 0392 FC01      		movw r30,r24
 2970 0394 9281      		ldd r25,Z+2
 2971 0396 9801      		movw r18,r16
 2972 0398 00C0      		rjmp 2f
 2973               		1:
 2974 039a 220F      		lsl r18
 2975 039c 331F      		rol r19
 2976               		2:
 2977 039e FA94      		dec r15
 2978 03a0 02F4      		brpl 1b
 2979 03a2 2095      		com r18
 2980 03a4 3095      		com r19
 2981 03a6 9223      		and r25,r18
 2982 03a8 9283      		std Z+2,r25
 322:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 2983               		.loc 1 322 0
 2984 03aa 60E0      		ldi r22,0
 2985 03ac 83E2      		ldi r24,lo8(35)
 2986 03ae 90E0      		ldi r25,0
 2987 03b0 0E94 0000 		call _pal_lld_setlineid
 2988               	.LVL317:
 2989 03b4 0E94 0000 		call _pal_lld_getpadfromline
 2990               	.LVL318:
 2991 03b8 F82E      		mov r15,r24
 2992 03ba 60E0      		ldi r22,0
 2993 03bc 83E2      		ldi r24,lo8(35)
 2994 03be 90E0      		ldi r25,0
 2995 03c0 0E94 0000 		call _pal_lld_setlineid
 2996               	.LVL319:
 2997 03c4 0E94 0000 		call _pal_lld_getportfromline
 2998               	.LVL320:
 2999 03c8 B801      		movw r22,r16
 3000 03ca 00C0      		rjmp 2f
 3001               		1:
 3002 03cc 660F      		lsl r22
 3003               		2:
 3004 03ce FA94      		dec r15
 3005 03d0 02F4      		brpl 1b
 3006 03d2 46E0      		ldi r20,lo8(6)
 3007 03d4 0E94 0000 		call _pal_lld_setgroupmode
 3008               	.LVL321:
 323:main.c        **** 
 3009               		.loc 1 323 0
 3010 03d8 60E0      		ldi r22,0
 3011 03da 83E2      		ldi r24,lo8(35)
 3012 03dc 90E0      		ldi r25,0
 3013 03de 0E94 0000 		call _pal_lld_setlineid
 3014               	.LVL322:
 3015 03e2 0E94 0000 		call _pal_lld_getpadfromline
 3016               	.LVL323:
 3017 03e6 F82E      		mov r15,r24
 3018 03e8 60E0      		ldi r22,0
 3019 03ea 83E2      		ldi r24,lo8(35)
 3020 03ec 90E0      		ldi r25,0
 3021 03ee 0E94 0000 		call _pal_lld_setlineid
 3022               	.LVL324:
 3023 03f2 0E94 0000 		call _pal_lld_getportfromline
 3024               	.LVL325:
 3025 03f6 FC01      		movw r30,r24
 3026 03f8 9281      		ldd r25,Z+2
 3027 03fa 9801      		movw r18,r16
 3028 03fc 00C0      		rjmp 2f
 3029               		1:
 3030 03fe 220F      		lsl r18
 3031 0400 331F      		rol r19
 3032               		2:
 3033 0402 FA94      		dec r15
 3034 0404 02F4      		brpl 1b
 3035 0406 2095      		com r18
 3036 0408 3095      		com r19
 3037 040a 2923      		and r18,r25
 3038 040c 2283      		std Z+2,r18
 328:main.c        **** 
 3039               		.loc 1 328 0
 3040 040e 10E0      		ldi r17,0
 3041 0410 00E0      		ldi r16,0
 3042 0412 20E0      		ldi r18,lo8(gs(Thread1))
 3043 0414 30E0      		ldi r19,hi8(gs(Thread1))
 3044 0416 40E8      		ldi r20,lo8(-128)
 3045 0418 63E8      		ldi r22,lo8(-125)
 3046 041a 70E0      		ldi r23,0
 3047 041c 80E0      		ldi r24,lo8(waThread1)
 3048 041e 90E0      		ldi r25,hi8(waThread1)
 3049 0420 0E94 0000 		call chThdCreateStatic
 3050               	.LVL326:
 3051 0424 00C0      		rjmp .L215
 3052               	.L219:
 334:main.c        ****     }
 3053               		.loc 1 334 0
 3054 0426 84E0      		ldi r24,lo8(4)
 3055 0428 90E0      		ldi r25,0
 3056 042a 0E94 0000 		call enqueue
 3057               	.LVL327:
 3058               	.L212:
 349:main.c        ****   }
 3059               		.loc 1 349 0
 3060 042e 6EE0      		ldi r22,lo8(14)
 3061 0430 73E0      		ldi r23,lo8(3)
 3062 0432 80E0      		ldi r24,0
 3063 0434 90E0      		ldi r25,0
 3064 0436 0E94 0000 		call chThdSleep
 3065               	.LVL328:
 3066               	.L215:
 332:main.c        ****     {
 3067               		.loc 1 332 0
 3068 043a 65E0      		ldi r22,lo8(5)
 3069 043c 86E2      		ldi r24,lo8(38)
 3070 043e 90E0      		ldi r25,0
 3071 0440 0E94 0000 		call _pal_lld_setlineid
 3072               	.LVL329:
 3073 0444 41E0      		ldi r20,lo8(1)
 3074 0446 0E94 0000 		call button_check
 3075               	.LVL330:
 3076 044a 8111      		cpse r24,__zero_reg__
 3077 044c 00C0      		rjmp .L219
 336:main.c        ****     {
 3078               		.loc 1 336 0
 3079 044e 63E0      		ldi r22,lo8(3)
 3080 0450 86E2      		ldi r24,lo8(38)
 3081 0452 90E0      		ldi r25,0
 3082 0454 0E94 0000 		call _pal_lld_setlineid
 3083               	.LVL331:
 3084 0458 42E0      		ldi r20,lo8(2)
 3085 045a 0E94 0000 		call button_check
 3086               	.LVL332:
 3087 045e 8823      		tst r24
 3088 0460 01F0      		breq .L213
 338:main.c        ****     }
 3089               		.loc 1 338 0
 3090 0462 83E0      		ldi r24,lo8(3)
 3091 0464 90E0      		ldi r25,0
 3092 0466 0E94 0000 		call enqueue
 3093               	.LVL333:
 3094 046a 00C0      		rjmp .L212
 3095               	.L213:
 340:main.c        ****     {
 3096               		.loc 1 340 0
 3097 046c 64E0      		ldi r22,lo8(4)
 3098 046e 86E2      		ldi r24,lo8(38)
 3099 0470 90E0      		ldi r25,0
 3100 0472 0E94 0000 		call _pal_lld_setlineid
 3101               	.LVL334:
 3102 0476 43E0      		ldi r20,lo8(3)
 3103 0478 0E94 0000 		call button_check
 3104               	.LVL335:
 3105 047c 8823      		tst r24
 3106 047e 01F0      		breq .L214
 342:main.c        ****     }
 3107               		.loc 1 342 0
 3108 0480 81E0      		ldi r24,lo8(1)
 3109 0482 90E0      		ldi r25,0
 3110 0484 0E94 0000 		call enqueue
 3111               	.LVL336:
 3112 0488 00C0      		rjmp .L212
 3113               	.L214:
 344:main.c        ****     {
 3114               		.loc 1 344 0
 3115 048a 62E0      		ldi r22,lo8(2)
 3116 048c 86E2      		ldi r24,lo8(38)
 3117 048e 90E0      		ldi r25,0
 3118 0490 0E94 0000 		call _pal_lld_setlineid
 3119               	.LVL337:
 3120 0494 44E0      		ldi r20,lo8(4)
 3121 0496 0E94 0000 		call button_check
 3122               	.LVL338:
 3123 049a 8823      		tst r24
 3124 049c 01F0      		breq .L212
 346:main.c        ****     }
 3125               		.loc 1 346 0
 3126 049e 82E0      		ldi r24,lo8(2)
 3127 04a0 90E0      		ldi r25,0
 3128 04a2 0E94 0000 		call enqueue
 3129               	.LVL339:
 3130 04a6 00C0      		rjmp .L212
 3131               		.cfi_endproc
 3132               	.LFE244:
 3134               		.section	.bss.old_x4.4170,"aw",@nobits
 3137               	old_x4.4170:
 3138 0000 00        		.zero	1
 3139               		.section	.bss.old_x3.4168,"aw",@nobits
 3142               	old_x3.4168:
 3143 0000 00        		.zero	1
 3144               		.section	.bss.old_x2.4166,"aw",@nobits
 3147               	old_x2.4166:
 3148 0000 00        		.zero	1
 3149               		.section	.bss.old_x1.4164,"aw",@nobits
 3152               	old_x1.4164:
 3153 0000 00        		.zero	1
 3154               		.section	.bss.waThread1,"aw",@nobits
 3157               	waThread1:
 3158 0000 0000 0000 		.zero	131
 3158      0000 0000 
 3158      0000 0000 
 3158      0000 0000 
 3158      0000 0000 
 3159               		.comm	flag_amb_sec,1,1
 3160               		.comm	flag_amb_prim,1,1
 3161               	.global	flag_red_vt_sec
 3162               		.section	.data.flag_red_vt_sec,"aw",@progbits
 3165               	flag_red_vt_sec:
 3166 0000 01        		.byte	1
 3167               	.global	flag_red_vt_prim
 3168               		.section	.data.flag_red_vt_prim,"aw",@progbits
 3171               	flag_red_vt_prim:
 3172 0000 01        		.byte	1
 3173               	.global	main_vt_flag
 3174               		.section	.bss.main_vt_flag,"aw",@nobits
 3177               	main_vt_flag:
 3178 0000 00        		.zero	1
 3179               	.global	g_state
 3180               		.section	.data.g_state,"aw",@progbits
 3183               	g_state:
 3184 0000 01        		.byte	1
 3185               		.section	.bss.qfull,"aw",@nobits
 3188               	qfull:
 3189 0000 0000 0000 		.zero	4
 3190               		.section	.bss.qempty,"aw",@nobits
 3193               	qempty:
 3194 0000 0000 0000 		.zero	4
 3195               		.section	.bss.qmtx,"aw",@nobits
 3198               	qmtx:
 3199 0000 0000 0000 		.zero	8
 3199      0000 0000 
 3200               		.section	.bss.qsize,"aw",@nobits
 3203               	qsize:
 3204 0000 0000      		.zero	2
 3205               		.section	.bss.wrp,"aw",@nobits
 3208               	wrp:
 3209 0000 0000      		.zero	2
 3210               		.section	.bss.rdp,"aw",@nobits
 3213               	rdp:
 3214 0000 0000      		.zero	2
 3215               		.section	.bss.queue,"aw",@nobits
 3218               	queue:
 3219 0000 0000 0000 		.zero	256
 3219      0000 0000 
 3219      0000 0000 
 3219      0000 0000 
 3219      0000 0000 
 3220               		.text
 3221               	.Letext0:
 3222               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 3223               		.file 5 "/usr/lib/avr/include/stdint.h"
 3224               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 3225               		.file 7 "../../os/rt/include/chearly.h"
 3226               		.file 8 "../../os/rt/include/chobjects.h"
 3227               		.file 9 "../../os/rt/include/chrfcu.h"
 3228               		.file 10 "../../os/rt/include/chdebug.h"
 3229               		.file 11 "../../os/rt/include/chtime.h"
 3230               		.file 12 "../../os/rt/include/chlists.h"
 3231               		.file 13 "../../os/rt/include/chsem.h"
 3232               		.file 14 "../../os/rt/include/chmtx.h"
 3233               		.file 15 "../../os/rt/include/chsys.h"
 3234               		.file 16 "../../os/rt/include/chregistry.h"
 3235               		.file 17 "../../os/rt/include/chcond.h"
 3236               		.file 18 "../../os/rt/include/chevents.h"
 3237               		.file 19 "../../os/oslib/include/chmemcore.h"
 3238               		.file 20 "../../os/hal/include/hal_streams.h"
 3239               		.file 21 "../../os/hal/include/hal_queues.h"
 3240               		.file 22 "../../os/hal/include/hal_pal.h"
 3241               		.file 23 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 3242               		.file 24 "../../os/hal/include/hal_serial.h"
 3243               		.file 25 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 3244               		.file 26 "../../os/hal/include/hal.h"
 3245               		.file 27 "../../os/rt/include/chthreads.h"
 3246               		.file 28 "../../os/hal/lib/streams/chprintf.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc5bYI4x.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc5bYI4x.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc5bYI4x.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc5bYI4x.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc5bYI4x.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc5bYI4x.s:13     .text.vt_cb:0000000000000000 vt_cb
     /tmp/cc5bYI4x.s:3177   .bss.main_vt_flag:0000000000000000 main_vt_flag
     /tmp/cc5bYI4x.s:36     .text.queueInit:0000000000000000 queueInit
     /tmp/cc5bYI4x.s:3198   .bss.qmtx:0000000000000000 qmtx
     /tmp/cc5bYI4x.s:3193   .bss.qempty:0000000000000000 qempty
     /tmp/cc5bYI4x.s:3188   .bss.qfull:0000000000000000 qfull
     /tmp/cc5bYI4x.s:3218   .bss.queue:0000000000000000 queue
     /tmp/cc5bYI4x.s:3208   .bss.wrp:0000000000000000 wrp
     /tmp/cc5bYI4x.s:3213   .bss.rdp:0000000000000000 rdp
     /tmp/cc5bYI4x.s:3203   .bss.qsize:0000000000000000 qsize
     /tmp/cc5bYI4x.s:78     .text.enqueue:0000000000000000 enqueue
     /tmp/cc5bYI4x.s:168    .text.dequeue:0000000000000000 dequeue
     /tmp/cc5bYI4x.s:264    .text.Thread1:0000000000000000 Thread1
     /tmp/cc5bYI4x.s:3183   .data.g_state:0000000000000000 g_state
     /tmp/cc5bYI4x.s:3171   .data.flag_red_vt_prim:0000000000000000 flag_red_vt_prim
                            *COM*:0000000000000001 flag_amb_prim
                            *COM*:0000000000000001 flag_amb_sec
     /tmp/cc5bYI4x.s:3165   .data.flag_red_vt_sec:0000000000000000 flag_red_vt_sec
     /tmp/cc5bYI4x.s:2216   .text.button_check:0000000000000000 button_check
     /tmp/cc5bYI4x.s:3137   .bss.old_x4.4170:0000000000000000 old_x4.4170
     /tmp/cc5bYI4x.s:3152   .bss.old_x1.4164:0000000000000000 old_x1.4164
     /tmp/cc5bYI4x.s:3147   .bss.old_x2.4166:0000000000000000 old_x2.4166
     /tmp/cc5bYI4x.s:3142   .bss.old_x3.4168:0000000000000000 old_x3.4168
     /tmp/cc5bYI4x.s:2437   .text.startup.main:0000000000000000 main
     /tmp/cc5bYI4x.s:3157   .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
chMtxObjectInit
chCondObjectInit
chMtxLock
chCondWait
chCondSignal
chMtxUnlock
SD1
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
chThdSleep
__tablejump2__
chVTDoResetI
chVTDoSetI
chprintf
halInit
chSysInit
sdStart
_pal_lld_setgroupmode
chThdCreateStatic
__do_copy_data
__do_clear_bss
