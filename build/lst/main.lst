   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb,"ax",@progbits
  11               	.global	vt_cb
  13               	vt_cb:
  14               	.LFB249:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** 
  20:main.c        **** #define QUEUE_SIZE 128
  21:main.c        **** 
  22:main.c        **** /* Definições de pinos*/
  23:main.c        **** // LEDS
  24:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  25:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  26:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  27:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  28:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  29:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  30:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  31:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  32:main.c        **** 
  33:main.c        **** // Botões
  34:main.c        **** #define AMB_PRIM PAL_LINE(IOPORT3, 3)
  35:main.c        **** #define AMB_SEC PAL_LINE(IOPORT3, 5)
  36:main.c        **** #define SEC_FLAG PAL_LINE(IOPORT3, 4)
  37:main.c        **** #define PED_FLAG PAL_LINE(IOPORT3, 2)
  38:main.c        **** 
  39:main.c        **** // Buffer
  40:main.c        **** static msg_t queue[QUEUE_SIZE], *rdp, *wrp;
  41:main.c        **** static size_t qsize;
  42:main.c        **** static mutex_t qmtx;
  43:main.c        **** static condition_variable_t qempty;
  44:main.c        **** static condition_variable_t qfull;
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** void queueInit(void);
  48:main.c        **** void enqueue(msg_t msg);
  49:main.c        **** msg_t dequeue(void);
  50:main.c        **** uint8_t button_check(ioline_t line, uint8_t button);
  51:main.c        **** void vt_cb(void *arg);
  52:main.c        **** 
  53:main.c        **** enum
  54:main.c        **** {
  55:main.c        ****   SECUNDARIO = 1,
  56:main.c        ****   PEDESTRE,
  57:main.c        ****   AMB_PRIMARIO,
  58:main.c        ****   AMB_SECUNDARIO,
  59:main.c        ****   START,
  60:main.c        ****   SWITCH
  61:main.c        **** };
  62:main.c        **** 
  63:main.c        **** enum
  64:main.c        **** {
  65:main.c        ****   VERDE_AMB_PRIM,
  66:main.c        ****   VERDE_LOCKED_PRIM,
  67:main.c        ****   VERDE_IDLE_PRIM,
  68:main.c        ****   AMARELO_PED_PRIM,
  69:main.c        ****   AMARELO_SEC_PRIM,
  70:main.c        ****   VERDE_AMB_SEC,
  71:main.c        ****   VERDE_LOCKED_SEC,
  72:main.c        ****   AMARELO_PED_SEC,
  73:main.c        ****   AMARELO_PRIM_SEC,
  74:main.c        ****   VERDE_AMB_PED,
  75:main.c        ****   VERDE_LOCKED_PED,
  76:main.c        ****   PISCANDO_SEC,
  77:main.c        ****   PISCANDO_PRIM
  78:main.c        **** };
  79:main.c        **** 
  80:main.c        **** /* Estado inicial */
  81:main.c        **** uint8_t g_state = VERDE_LOCKED_PRIM;
  82:main.c        **** 
  83:main.c        **** /* Flags timers */
  84:main.c        **** uint8_t main_vt_flag = 0;
  85:main.c        **** 
  86:main.c        **** 
  87:main.c        **** /*
  88:main.c        ****  * LED blinker thread, times are in milliseconds.
  89:main.c        ****  */
  90:main.c        **** 
  91:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  92:main.c        **** static THD_FUNCTION(Thread1, arg)
  93:main.c        **** {
  94:main.c        ****   msg_t ev;
  95:main.c        ****   virtual_timer_t main_vt;
  96:main.c        **** 
  97:main.c        ****   chVTObjectInit(&main_vt);
  98:main.c        **** 
  99:main.c        ****   while (1)
 100:main.c        ****   {
 101:main.c        ****     switch (g_state) {
 102:main.c        ****       case VERDE_LOCKED_PRIM:
 103:main.c        ****         palClearLine(PRIMARIO_VERMELHO);
 104:main.c        ****         palSetLine(PRIMARIO_VERDE);
 105:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 106:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 107:main.c        ****         chVTSet(&main_vt, TIME_MS2I(10000), (vtfunc_t)vt_cb, (void *)&main_vt);
 108:main.c        ****         while (!main_vt_flag) {
 109:main.c        ****           chThdSleepMilliseconds(100);
 110:main.c        ****         }
 111:main.c        ****         main_vt_flag = 0;
 112:main.c        ****         g_state = VERDE_IDLE_PRIM;
 113:main.c        ****         break;
 114:main.c        ****       case VERDE_IDLE_PRIM:
 115:main.c        ****         ev = dequeue();
 116:main.c        ****         if (ev == SECUNDARIO || ev == AMB_SECUNDARIO) {
 117:main.c        ****           g_state = AMARELO_SEC_PRIM;
 118:main.c        ****           palClearLine(PRIMARIO_VERDE);
 119:main.c        ****         } else if (ev == PEDESTRE) {
 120:main.c        ****           g_state = AMARELO_PED_PRIM;
 121:main.c        ****           palClearLine(PRIMARIO_VERDE);
 122:main.c        ****         }
 123:main.c        ****         break;
 124:main.c        ****       case AMARELO_SEC_PRIM:
 125:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 126:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 127:main.c        ****         while (!main_vt_flag) {
 128:main.c        ****           chThdSleepMilliseconds(100);
 129:main.c        ****         }
 130:main.c        ****         main_vt_flag = 0;
 131:main.c        ****         g_state = VERDE_LOCKED_SEC;
 132:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 133:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 134:main.c        ****         break;
 135:main.c        ****       case AMARELO_PED_PRIM:
 136:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 137:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 138:main.c        ****         while (!main_vt_flag) {
 139:main.c        ****           chThdSleepMilliseconds(100);
 140:main.c        ****         }
 141:main.c        ****         main_vt_flag = 0;
 142:main.c        ****         g_state = VERDE_LOCKED_PED;
 143:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 144:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 145:main.c        ****         break;
 146:main.c        ****       case VERDE_LOCKED_SEC:
 147:main.c        ****         palClearLine(SECUNDARIO_VERMELHO);
 148:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 149:main.c        ****         chVTSet(&main_vt, TIME_MS2I(6000), (vtfunc_t)vt_cb, (void *)&main_vt);
 150:main.c        ****         while (!main_vt_flag) {
 151:main.c        ****           chThdSleepMilliseconds(100);
 152:main.c        ****         }
 153:main.c        ****         main_vt_flag = 0;
 154:main.c        ****         if (qsize > 0) {
 155:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 156:main.c        ****         }
 157:main.c        ****         if (ev == PEDESTRE) {
 158:main.c        ****           g_state = AMARELO_PED_SEC;
 159:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 160:main.c        ****         } else {
 161:main.c        ****           g_state = AMARELO_PRIM_SEC;
 162:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 163:main.c        ****         }
 164:main.c        ****         break;
 165:main.c        ****       case AMARELO_PRIM_SEC:
 166:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 167:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 168:main.c        ****         while (!main_vt_flag) {
 169:main.c        ****           chThdSleepMilliseconds(100);
 170:main.c        ****         }
 171:main.c        ****         main_vt_flag = 0;
 172:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 173:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 174:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 175:main.c        ****         break;
 176:main.c        ****       case AMARELO_PED_SEC:
 177:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 178:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 179:main.c        ****         while (!main_vt_flag) {
 180:main.c        ****           chThdSleepMilliseconds(100);
 181:main.c        ****         }
 182:main.c        ****         main_vt_flag = 0;
 183:main.c        ****         g_state = VERDE_LOCKED_PED;
 184:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 185:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 186:main.c        ****         break;
 187:main.c        ****       case VERDE_LOCKED_PED:
 188:main.c        ****         palClearLine(PEDESTRE_VERMELHO);
 189:main.c        ****         palSetLine(PEDESTRE_VERDE);
 190:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 191:main.c        ****         while (!main_vt_flag) {
 192:main.c        ****           chThdSleepMilliseconds(100);
 193:main.c        ****         }
 194:main.c        ****         main_vt_flag = 0;
 195:main.c        ****         if (qsize > 0) {
 196:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 197:main.c        ****         }
 198:main.c        ****         if (ev == SECUNDARIO) {
 199:main.c        ****           g_state = PISCANDO_SEC;
 200:main.c        ****           palClearLine(PEDESTRE_VERDE);
 201:main.c        ****         } else {
 202:main.c        ****           g_state = PISCANDO_PRIM;
 203:main.c        ****           palClearLine(PEDESTRE_VERDE);
 204:main.c        ****         }
 205:main.c        ****         break;
 206:main.c        ****       case PISCANDO_SEC:
 207:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 208:main.c        ****         while (!main_vt_flag) {
 209:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 210:main.c        ****           chThdSleepMilliseconds(250);
 211:main.c        ****         }
 212:main.c        ****         main_vt_flag = 0;
 213:main.c        ****         g_state = VERDE_LOCKED_SEC;
 214:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 215:main.c        ****         break;
 216:main.c        ****       case PISCANDO_PRIM:
 217:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 218:main.c        ****         while (!main_vt_flag) {
 219:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 220:main.c        ****           chThdSleepMilliseconds(250);
 221:main.c        ****         }
 222:main.c        ****         main_vt_flag = 0;
 223:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 224:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 225:main.c        ****         break;
 226:main.c        ****       default:
 227:main.c        ****         palSetLine(PEDESTRE_VERDE);
 228:main.c        ****     }
 229:main.c        ****     chThdSleepMilliseconds(100);
 230:main.c        ****   }
 231:main.c        **** }
 232:main.c        **** 
 233:main.c        **** /*
 234:main.c        ****  * Application entry point.
 235:main.c        ****  */
 236:main.c        **** int main(void)
 237:main.c        **** {
 238:main.c        ****   queueInit();
 239:main.c        ****   /*
 240:main.c        ****    * System initializations.
 241:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
 242:main.c        ****    *   and performs the board-specific initializations.
 243:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
 244:main.c        ****    *   RTOS is active.
 245:main.c        ****    */
 246:main.c        ****   halInit();
 247:main.c        ****   chSysInit();
 248:main.c        **** 
 249:main.c        ****   /* Configuração dos botões */
 250:main.c        ****   palSetLineMode(PED_FLAG, PAL_MODE_INPUT_PULLUP);
 251:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 252:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 253:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 254:main.c        **** 
 255:main.c        ****   // Pedestre
 256:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 257:main.c        ****   palClearLine(PEDESTRE_VERDE);
 258:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 259:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 260:main.c        **** 
 261:main.c        ****   // Primário
 262:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 263:main.c        ****   palClearLine(PRIMARIO_VERDE);
 264:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 265:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 266:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 267:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 268:main.c        **** 
 269:main.c        ****   // Secundário
 270:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 271:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 272:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 273:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 274:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 275:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 276:main.c        **** 
 277:main.c        ****   /*
 278:main.c        ****    * Starts the LED blinker thread.
 279:main.c        ****    */
 280:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 281:main.c        **** 
 282:main.c        ****   while (1)
 283:main.c        ****   {
 284:main.c        ****     if (button_check(AMB_SEC, 1))
 285:main.c        ****     {
 286:main.c        ****       enqueue(AMB_SECUNDARIO);
 287:main.c        ****     }
 288:main.c        ****     else if (button_check(AMB_PRIM, 2))
 289:main.c        ****     {
 290:main.c        ****       enqueue(AMB_PRIMARIO);
 291:main.c        ****     }
 292:main.c        ****     else if (button_check(SEC_FLAG, 3))
 293:main.c        ****     {
 294:main.c        ****       enqueue(SECUNDARIO);
 295:main.c        ****     }
 296:main.c        ****     else if (button_check(PED_FLAG, 4))
 297:main.c        ****     {
 298:main.c        ****       enqueue(PEDESTRE);
 299:main.c        ****     }
 300:main.c        ****     /* Debouncing. */
 301:main.c        ****     chThdSleepMilliseconds(50);
 302:main.c        ****   }
 303:main.c        **** }
 304:main.c        **** 
 305:main.c        **** /*
 306:main.c        ****  * Synchronized queue initialization.
 307:main.c        ****  */
 308:main.c        **** void queueInit(void) {
 309:main.c        ****  
 310:main.c        ****   chMtxObjectInit(&qmtx);
 311:main.c        ****   chCondObjectInit(&qempty);
 312:main.c        ****   chCondObjectInit(&qfull);
 313:main.c        ****  
 314:main.c        ****   rdp = wrp = &queue[0];
 315:main.c        ****   qsize = 0;
 316:main.c        **** }
 317:main.c        **** 
 318:main.c        **** /*
 319:main.c        ****  * Writes a message into the queue, if the queue is full waits
 320:main.c        ****  * for a free slot.
 321:main.c        ****  */
 322:main.c        **** void enqueue(msg_t msg) {
 323:main.c        ****  
 324:main.c        ****   /* Entering monitor.*/
 325:main.c        ****   chMtxLock(&qmtx);
 326:main.c        ****  
 327:main.c        ****   /* Waiting for space in the queue.*/
 328:main.c        ****   while (qsize >= QUEUE_SIZE)
 329:main.c        ****     chCondWait(&qfull);
 330:main.c        ****  
 331:main.c        ****   /* Writing the message in the queue.*/  
 332:main.c        ****   *wrp = msg;
 333:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 334:main.c        ****     wrp = &queue[0];
 335:main.c        ****   qsize++;
 336:main.c        ****  
 337:main.c        ****   /* Signaling that there is at least a message.*/
 338:main.c        ****   chCondSignal(&qempty);
 339:main.c        ****  
 340:main.c        ****   /* Leaving monitor.*/
 341:main.c        ****   chMtxUnlock(&qmtx);
 342:main.c        **** }
 343:main.c        **** 
 344:main.c        **** /*
 345:main.c        ****  * Reads a message from the queue, if the queue is empty waits
 346:main.c        ****  * for a message.
 347:main.c        ****  */
 348:main.c        **** msg_t dequeue(void) {
 349:main.c        ****   msg_t msg;
 350:main.c        ****  
 351:main.c        ****   /* Entering monitor.*/
 352:main.c        ****   chMtxLock(&qmtx);
 353:main.c        ****  
 354:main.c        ****   /* Waiting for messages in the queue.*/
 355:main.c        ****   while (qsize == 0)
 356:main.c        ****     chCondWait(&qempty);
 357:main.c        ****  
 358:main.c        ****   /* Reading the message from the queue.*/  
 359:main.c        ****   msg = *rdp;
 360:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 361:main.c        ****     rdp = &queue[0];
 362:main.c        ****   qsize--;
 363:main.c        ****  
 364:main.c        ****   /* Signaling that there is at least one free slot.*/
 365:main.c        ****   chCondSignal(&qfull);
 366:main.c        ****  
 367:main.c        ****   /* Leaving monitor.*/
 368:main.c        ****   chMtxUnlock(&qmtx);
 369:main.c        ****  
 370:main.c        ****   return msg;
 371:main.c        **** }
 372:main.c        **** 
 373:main.c        **** /* Ficou muito hard coded */
 374:main.c        **** uint8_t button_check(ioline_t line, uint8_t button) {
 375:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 376:main.c        ****   uint8_t w, x;
 377:main.c        **** 
 378:main.c        ****   if (button == 1) {
 379:main.c        ****     x1 = palReadLine(line);
 380:main.c        ****     w = x1^old_x1;
 381:main.c        ****     old_x1 = x1;
 382:main.c        ****     x = x1;
 383:main.c        ****   } else if (button == 2) {
 384:main.c        ****     x2 = palReadLine(line);
 385:main.c        ****     w = x2^old_x2;
 386:main.c        ****     old_x2 = x2;
 387:main.c        ****     x = x2;
 388:main.c        ****   } else if (button == 3) {
 389:main.c        ****     x3 = palReadLine(line);
 390:main.c        ****     w = x3^old_x3;
 391:main.c        ****     old_x3 = x3;
 392:main.c        ****     x = x3;
 393:main.c        ****   } else if (button == 4) {
 394:main.c        ****     x4 = palReadLine(line);
 395:main.c        ****     w = x4^old_x4;
 396:main.c        ****     old_x4 = x4;
 397:main.c        ****     x = x4;
 398:main.c        ****   }
 399:main.c        ****   
 400:main.c        ****   return w &! x;
 401:main.c        **** }
 402:main.c        **** 
 403:main.c        **** void vt_cb(void *arg)
 404:main.c        **** {
  16               		.loc 1 404 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 405:main.c        ****   chSysLockFromISR();
 406:main.c        ****   main_vt_flag = 1;
  23               		.loc 1 406 0
  24 0000 81E0      		ldi r24,lo8(1)
  25               	.LVL1:
  26 0002 8093 0000 		sts main_vt_flag,r24
  27               	/* epilogue start */
 407:main.c        ****   chSysUnlockFromISR();
 408:main.c        **** }
  28               		.loc 1 408 0
  29 0006 0895      		ret
  30               		.cfi_endproc
  31               	.LFE249:
  33               		.section	.text.queueInit,"ax",@progbits
  34               	.global	queueInit
  36               	queueInit:
  37               	.LFB245:
 308:main.c        ****  
  38               		.loc 1 308 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
 310:main.c        ****   chCondObjectInit(&qempty);
  44               		.loc 1 310 0
  45 0000 80E0      		ldi r24,lo8(qmtx)
  46 0002 90E0      		ldi r25,hi8(qmtx)
  47 0004 0E94 0000 		call chMtxObjectInit
  48               	.LVL2:
 311:main.c        ****   chCondObjectInit(&qfull);
  49               		.loc 1 311 0
  50 0008 80E0      		ldi r24,lo8(qempty)
  51 000a 90E0      		ldi r25,hi8(qempty)
  52 000c 0E94 0000 		call chCondObjectInit
  53               	.LVL3:
 312:main.c        ****  
  54               		.loc 1 312 0
  55 0010 80E0      		ldi r24,lo8(qfull)
  56 0012 90E0      		ldi r25,hi8(qfull)
  57 0014 0E94 0000 		call chCondObjectInit
  58               	.LVL4:
 314:main.c        ****   qsize = 0;
  59               		.loc 1 314 0
  60 0018 80E0      		ldi r24,lo8(queue)
  61 001a 90E0      		ldi r25,hi8(queue)
  62 001c 9093 0000 		sts wrp+1,r25
  63 0020 8093 0000 		sts wrp,r24
  64 0024 9093 0000 		sts rdp+1,r25
  65 0028 8093 0000 		sts rdp,r24
 315:main.c        **** }
  66               		.loc 1 315 0
  67 002c 1092 0000 		sts qsize+1,__zero_reg__
  68 0030 1092 0000 		sts qsize,__zero_reg__
  69               	/* epilogue start */
 316:main.c        **** 
  70               		.loc 1 316 0
  71 0034 0895      		ret
  72               		.cfi_endproc
  73               	.LFE245:
  75               		.section	.text.enqueue,"ax",@progbits
  76               	.global	enqueue
  78               	enqueue:
  79               	.LFB246:
 322:main.c        ****  
  80               		.loc 1 322 0
  81               		.cfi_startproc
  82               	.LVL5:
  83 0000 CF93      		push r28
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 28, -2
  87 0002 DF93      		push r29
  88               	.LCFI1:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 29, -3
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 2 */
  94               	.L__stack_usage = 2
  95 0004 EC01      		movw r28,r24
 325:main.c        ****  
  96               		.loc 1 325 0
  97 0006 80E0      		ldi r24,lo8(qmtx)
  98 0008 90E0      		ldi r25,hi8(qmtx)
  99               	.LVL6:
 100 000a 0E94 0000 		call chMtxLock
 101               	.LVL7:
 328:main.c        ****     chCondWait(&qfull);
 102               		.loc 1 328 0
 103 000e 8091 0000 		lds r24,qsize
 104 0012 9091 0000 		lds r25,qsize+1
 105 0016 8038      		cpi r24,-128
 106 0018 9105      		cpc r25,__zero_reg__
 107 001a 00F0      		brlo .L5
 108               	.L6:
 329:main.c        ****  
 109               		.loc 1 329 0
 110 001c 80E0      		ldi r24,lo8(qfull)
 111 001e 90E0      		ldi r25,hi8(qfull)
 112 0020 0E94 0000 		call chCondWait
 113               	.LVL8:
 328:main.c        ****     chCondWait(&qfull);
 114               		.loc 1 328 0
 115 0024 8091 0000 		lds r24,qsize
 116 0028 9091 0000 		lds r25,qsize+1
 117 002c 8038      		cpi r24,-128
 118 002e 9105      		cpc r25,__zero_reg__
 119 0030 00F4      		brsh .L6
 120               	.L5:
 332:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 121               		.loc 1 332 0
 122 0032 E091 0000 		lds r30,wrp
 123 0036 F091 0000 		lds r31,wrp+1
 124 003a C193      		st Z+,r28
 125 003c D193      		st Z+,r29
 333:main.c        ****     wrp = &queue[0];
 126               		.loc 1 333 0
 127 003e 20E0      		ldi r18,hi8(queue+256)
 128 0040 E030      		cpi r30,lo8(queue+256)
 129 0042 F207      		cpc r31,r18
 130 0044 00F0      		brlo .L10
 334:main.c        ****   qsize++;
 131               		.loc 1 334 0
 132 0046 20E0      		ldi r18,lo8(queue)
 133 0048 30E0      		ldi r19,hi8(queue)
 134 004a 3093 0000 		sts wrp+1,r19
 135 004e 2093 0000 		sts wrp,r18
 136               	.L8:
 335:main.c        ****  
 137               		.loc 1 335 0
 138 0052 0196      		adiw r24,1
 139 0054 9093 0000 		sts qsize+1,r25
 140 0058 8093 0000 		sts qsize,r24
 338:main.c        ****  
 141               		.loc 1 338 0
 142 005c 80E0      		ldi r24,lo8(qempty)
 143 005e 90E0      		ldi r25,hi8(qempty)
 144 0060 0E94 0000 		call chCondSignal
 145               	.LVL9:
 341:main.c        **** }
 146               		.loc 1 341 0
 147 0064 80E0      		ldi r24,lo8(qmtx)
 148 0066 90E0      		ldi r25,hi8(qmtx)
 149               	/* epilogue start */
 342:main.c        **** 
 150               		.loc 1 342 0
 151 0068 DF91      		pop r29
 152 006a CF91      		pop r28
 153               	.LVL10:
 341:main.c        **** }
 154               		.loc 1 341 0
 155 006c 0C94 0000 		jmp chMtxUnlock
 156               	.LVL11:
 157               	.L10:
 333:main.c        ****     wrp = &queue[0];
 158               		.loc 1 333 0
 159 0070 F093 0000 		sts wrp+1,r31
 160 0074 E093 0000 		sts wrp,r30
 161 0078 00C0      		rjmp .L8
 162               		.cfi_endproc
 163               	.LFE246:
 165               		.section	.text.dequeue,"ax",@progbits
 166               	.global	dequeue
 168               	dequeue:
 169               	.LFB247:
 348:main.c        ****   msg_t msg;
 170               		.loc 1 348 0
 171               		.cfi_startproc
 172 0000 CF93      		push r28
 173               	.LCFI2:
 174               		.cfi_def_cfa_offset 3
 175               		.cfi_offset 28, -2
 176 0002 DF93      		push r29
 177               	.LCFI3:
 178               		.cfi_def_cfa_offset 4
 179               		.cfi_offset 29, -3
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 2 */
 183               	.L__stack_usage = 2
 352:main.c        ****  
 184               		.loc 1 352 0
 185 0004 80E0      		ldi r24,lo8(qmtx)
 186 0006 90E0      		ldi r25,hi8(qmtx)
 187 0008 0E94 0000 		call chMtxLock
 188               	.LVL12:
 355:main.c        ****     chCondWait(&qempty);
 189               		.loc 1 355 0
 190 000c 8091 0000 		lds r24,qsize
 191 0010 9091 0000 		lds r25,qsize+1
 192 0014 0097      		sbiw r24,0
 193 0016 01F4      		brne .L12
 194               	.L13:
 356:main.c        ****  
 195               		.loc 1 356 0
 196 0018 80E0      		ldi r24,lo8(qempty)
 197 001a 90E0      		ldi r25,hi8(qempty)
 198 001c 0E94 0000 		call chCondWait
 199               	.LVL13:
 355:main.c        ****     chCondWait(&qempty);
 200               		.loc 1 355 0
 201 0020 8091 0000 		lds r24,qsize
 202 0024 9091 0000 		lds r25,qsize+1
 203 0028 0097      		sbiw r24,0
 204 002a 01F0      		breq .L13
 205               	.L12:
 359:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 206               		.loc 1 359 0
 207 002c E091 0000 		lds r30,rdp
 208 0030 F091 0000 		lds r31,rdp+1
 209 0034 C191      		ld r28,Z+
 210 0036 D191      		ld r29,Z+
 211               	.LVL14:
 360:main.c        ****     rdp = &queue[0];
 212               		.loc 1 360 0
 213 0038 20E0      		ldi r18,hi8(queue+256)
 214 003a E030      		cpi r30,lo8(queue+256)
 215 003c F207      		cpc r31,r18
 216 003e 00F0      		brlo .L18
 361:main.c        ****   qsize--;
 217               		.loc 1 361 0
 218 0040 20E0      		ldi r18,lo8(queue)
 219 0042 30E0      		ldi r19,hi8(queue)
 220 0044 3093 0000 		sts rdp+1,r19
 221 0048 2093 0000 		sts rdp,r18
 222               	.L15:
 362:main.c        ****  
 223               		.loc 1 362 0
 224 004c 0197      		sbiw r24,1
 225 004e 9093 0000 		sts qsize+1,r25
 226 0052 8093 0000 		sts qsize,r24
 365:main.c        ****  
 227               		.loc 1 365 0
 228 0056 80E0      		ldi r24,lo8(qfull)
 229 0058 90E0      		ldi r25,hi8(qfull)
 230 005a 0E94 0000 		call chCondSignal
 231               	.LVL15:
 368:main.c        ****  
 232               		.loc 1 368 0
 233 005e 80E0      		ldi r24,lo8(qmtx)
 234 0060 90E0      		ldi r25,hi8(qmtx)
 235 0062 0E94 0000 		call chMtxUnlock
 236               	.LVL16:
 371:main.c        **** 
 237               		.loc 1 371 0
 238 0066 CE01      		movw r24,r28
 239               	/* epilogue start */
 240 0068 DF91      		pop r29
 241 006a CF91      		pop r28
 242               	.LVL17:
 243 006c 0895      		ret
 244               	.LVL18:
 245               	.L18:
 360:main.c        ****     rdp = &queue[0];
 246               		.loc 1 360 0
 247 006e F093 0000 		sts rdp+1,r31
 248 0072 E093 0000 		sts rdp,r30
 249 0076 00C0      		rjmp .L15
 250               		.cfi_endproc
 251               	.LFE247:
 253               		.section	.text.Thread1,"ax",@progbits
 255               	Thread1:
 256               	.LFB243:
  93:main.c        ****   msg_t ev;
 257               		.loc 1 93 0
 258               		.cfi_startproc
 259               	.LVL19:
 260 0000 CF93      		push r28
 261               	.LCFI4:
 262               		.cfi_def_cfa_offset 3
 263               		.cfi_offset 28, -2
 264 0002 DF93      		push r29
 265               	.LCFI5:
 266               		.cfi_def_cfa_offset 4
 267               		.cfi_offset 29, -3
 268 0004 CDB7      		in r28,__SP_L__
 269 0006 DEB7      		in r29,__SP_H__
 270               	.LCFI6:
 271               		.cfi_def_cfa_register 28
 272 0008 6097      		sbiw r28,16
 273               	.LCFI7:
 274               		.cfi_def_cfa_offset 20
 275 000a 0FB6      		in __tmp_reg__,__SREG__
 276 000c F894      		cli
 277 000e DEBF      		out __SP_H__,r29
 278 0010 0FBE      		out __SREG__,__tmp_reg__
 279 0012 CDBF      		out __SP_L__,r28
 280               	/* prologue: function */
 281               	/* frame size = 16 */
 282               	/* stack size = 18 */
 283               	.L__stack_usage = 18
 284               	.LVL20:
 285               	.LBB230:
 286               	.LBB231:
 287               		.file 2 "../../os/rt/include/chvt.h"
   1:../../os/rt/include/chvt.h **** /*
   2:../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chvt.h **** 
   5:../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chvt.h **** 
   7:../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chvt.h **** 
  11:../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chvt.h **** 
  16:../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chvt.h **** */
  19:../../os/rt/include/chvt.h **** 
  20:../../os/rt/include/chvt.h **** /**
  21:../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../os/rt/include/chvt.h ****  *
  24:../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../os/rt/include/chvt.h ****  * @{
  26:../../os/rt/include/chvt.h ****  */
  27:../../os/rt/include/chvt.h **** 
  28:../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../os/rt/include/chvt.h **** 
  31:../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../os/rt/include/chvt.h **** 
  35:../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../os/rt/include/chvt.h **** 
  39:../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../os/rt/include/chvt.h **** 
  43:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../os/rt/include/chvt.h **** #endif
  47:../../os/rt/include/chvt.h **** 
  48:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../os/rt/include/chvt.h **** #endif
  51:../../os/rt/include/chvt.h **** 
  52:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../os/rt/include/chvt.h **** #endif
  55:../../os/rt/include/chvt.h **** 
  56:../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../os/rt/include/chvt.h **** 
  60:../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../os/rt/include/chvt.h **** 
  64:../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../os/rt/include/chvt.h **** 
  68:../../os/rt/include/chvt.h **** /*
  69:../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../os/rt/include/chvt.h ****  */
  71:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../os/rt/include/chvt.h **** extern "C" {
  73:../../os/rt/include/chvt.h **** #endif
  74:../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:../../os/rt/include/chvt.h **** #endif
  85:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  86:../../os/rt/include/chvt.h **** }
  87:../../os/rt/include/chvt.h **** #endif
  88:../../os/rt/include/chvt.h **** 
  89:../../os/rt/include/chvt.h **** /*===========================================================================*/
  90:../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../os/rt/include/chvt.h **** 
  93:../../os/rt/include/chvt.h **** /**
  94:../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:../../os/rt/include/chvt.h ****  *
 100:../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:../../os/rt/include/chvt.h ****  *
 102:../../os/rt/include/chvt.h ****  * @init
 103:../../os/rt/include/chvt.h ****  */
 104:../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:../../os/rt/include/chvt.h **** 
 106:../../os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 288               		.loc 2 106 0
 289 0014 1A82      		std Y+2,__zero_reg__
 290 0016 1982      		std Y+1,__zero_reg__
 291               	.LBE231:
 292               	.LBE230:
 227:main.c        ****     }
 293               		.loc 1 227 0
 294 0018 EE24      		clr r14
 295 001a E394      		inc r14
 296 001c F12C      		mov r15,__zero_reg__
 297               	.LVL21:
 223:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 298               		.loc 1 223 0
 299 001e 9924      		clr r9
 300 0020 9394      		inc r9
 213:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 301               		.loc 1 213 0
 302 0022 96E0      		ldi r25,lo8(6)
 303 0024 A92E      		mov r10,r25
 202:main.c        ****           palClearLine(PEDESTRE_VERDE);
 304               		.loc 1 202 0
 305 0026 2CE0      		ldi r18,lo8(12)
 306 0028 722E      		mov r7,r18
 199:main.c        ****           palClearLine(PEDESTRE_VERDE);
 307               		.loc 1 199 0
 308 002a 3BE0      		ldi r19,lo8(11)
 309 002c 532E      		mov r5,r19
 183:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 310               		.loc 1 183 0
 311 002e 4AE0      		ldi r20,lo8(10)
 312 0030 B42E      		mov r11,r20
 161:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 313               		.loc 1 161 0
 314 0032 58E0      		ldi r21,lo8(8)
 315 0034 852E      		mov r8,r21
 158:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 316               		.loc 1 158 0
 317 0036 67E0      		ldi r22,lo8(7)
 318 0038 662E      		mov r6,r22
 319 003a 00C0      		rjmp .L66
 320               	.LVL22:
 321               	.L20:
 227:main.c        ****     }
 322               		.loc 1 227 0
 323 003c 63E0      		ldi r22,lo8(3)
 324 003e 83E2      		ldi r24,lo8(35)
 325 0040 90E0      		ldi r25,0
 326 0042 0E94 0000 		call _pal_lld_setlineid
 327               	.LVL23:
 328 0046 0E94 0000 		call _pal_lld_getpadfromline
 329               	.LVL24:
 330 004a 182F      		mov r17,r24
 331 004c 63E0      		ldi r22,lo8(3)
 332               	.L121:
 333 004e 83E2      		ldi r24,lo8(35)
 334 0050 90E0      		ldi r25,0
 335               	.L122:
 336 0052 0E94 0000 		call _pal_lld_setlineid
 337               	.LVL25:
 338 0056 0E94 0000 		call _pal_lld_getportfromline
 339               	.LVL26:
 340 005a FC01      		movw r30,r24
 341 005c 9281      		ldd r25,Z+2
 342 005e 9701      		movw r18,r14
 343 0060 00C0      		rjmp 2f
 344               		1:
 345 0062 220F      		lsl r18
 346               		2:
 347 0064 1A95      		dec r17
 348 0066 02F4      		brpl 1b
 349 0068 922B      		or r25,r18
 350 006a 9283      		std Z+2,r25
 351               	.L35:
 229:main.c        ****   }
 352               		.loc 1 229 0
 353 006c 6BE1      		ldi r22,lo8(27)
 354 006e 76E0      		ldi r23,lo8(6)
 355 0070 80E0      		ldi r24,0
 356 0072 90E0      		ldi r25,0
 357 0074 0E94 0000 		call chThdSleep
 358               	.LVL27:
 359               	.L66:
 101:main.c        ****       case VERDE_LOCKED_PRIM:
 360               		.loc 1 101 0
 361 0078 E091 0000 		lds r30,g_state
 362 007c E150      		subi r30,lo8(-(-1))
 363 007e EC30      		cpi r30,lo8(12)
 364 0080 00F4      		brsh .L20
 365 0082 F0E0      		ldi r31,0
 366 0084 E050      		subi r30,lo8(-(gs(.L22)))
 367 0086 F040      		sbci r31,hi8(-(gs(.L22)))
 368 0088 0C94 0000 		jmp __tablejump2__
 369               		.p2align	1
 370               	.L22:
 371 008c 0000      		.word gs(.L21)
 372 008e 0000      		.word gs(.L23)
 373 0090 0000      		.word gs(.L24)
 374 0092 0000      		.word gs(.L25)
 375 0094 0000      		.word gs(.L20)
 376 0096 0000      		.word gs(.L26)
 377 0098 0000      		.word gs(.L27)
 378 009a 0000      		.word gs(.L28)
 379 009c 0000      		.word gs(.L20)
 380 009e 0000      		.word gs(.L29)
 381 00a0 0000      		.word gs(.L30)
 382 00a2 0000      		.word gs(.L31)
 383               	.L31:
 384               	.LVL28:
 385               	.LBB232:
 386               	.LBB233:
 387               	.LBB234:
 388               	.LBB235:
 389               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 390               		.loc 3 430 0
 391               	/* #APP */
 392               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 393 00a4 F894      		cli
 394               	 ;  0 "" 2
 395               	.LVL29:
 396               	/* #NOAPP */
 397               	.LBE235:
 398               	.LBE234:
 399               	.LBE233:
 400               	.LBB236:
 401               	.LBB237:
 402               	.LBB238:
 403               	.LBB239:
 107:../../os/rt/include/chvt.h **** }
 108:../../os/rt/include/chvt.h **** 
 109:../../os/rt/include/chvt.h **** /**
 110:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 111:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:../../os/rt/include/chvt.h ****  *          invocation.
 113:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:../../os/rt/include/chvt.h ****  *          @p systime_t size.
 117:../../os/rt/include/chvt.h ****  *
 118:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:../../os/rt/include/chvt.h ****  *
 120:../../os/rt/include/chvt.h ****  * @xclass
 121:../../os/rt/include/chvt.h ****  */
 122:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:../../os/rt/include/chvt.h **** 
 124:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:../../os/rt/include/chvt.h ****   return port_timer_get_time();
 128:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:../../os/rt/include/chvt.h **** }
 130:../../os/rt/include/chvt.h **** 
 131:../../os/rt/include/chvt.h **** /**
 132:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 133:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:../../os/rt/include/chvt.h ****  *          invocation.
 135:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:../../os/rt/include/chvt.h ****  *
 137:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:../../os/rt/include/chvt.h ****  *
 139:../../os/rt/include/chvt.h ****  * @api
 140:../../os/rt/include/chvt.h ****  */
 141:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:../../os/rt/include/chvt.h ****   systime_t systime;
 143:../../os/rt/include/chvt.h **** 
 144:../../os/rt/include/chvt.h ****   chSysLock();
 145:../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:../../os/rt/include/chvt.h ****   chSysUnlock();
 147:../../os/rt/include/chvt.h **** 
 148:../../os/rt/include/chvt.h ****   return systime;
 149:../../os/rt/include/chvt.h **** }
 150:../../os/rt/include/chvt.h **** 
 151:../../os/rt/include/chvt.h **** /**
 152:../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:../../os/rt/include/chvt.h ****  *
 154:../../os/rt/include/chvt.h ****  * @param[in] start     start time
 155:../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:../../os/rt/include/chvt.h ****  *
 157:../../os/rt/include/chvt.h ****  * @xclass
 158:../../os/rt/include/chvt.h ****  */
 159:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:../../os/rt/include/chvt.h **** 
 161:../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:../../os/rt/include/chvt.h **** }
 163:../../os/rt/include/chvt.h **** 
 164:../../os/rt/include/chvt.h **** /**
 165:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:../../os/rt/include/chvt.h ****  *          window.
 167:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:../../os/rt/include/chvt.h ****  *          time window has zero size.
 169:../../os/rt/include/chvt.h ****  *
 170:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:../../os/rt/include/chvt.h ****  *
 175:../../os/rt/include/chvt.h ****  * @xclass
 176:../../os/rt/include/chvt.h ****  */
 177:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:../../os/rt/include/chvt.h **** 
 179:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:../../os/rt/include/chvt.h **** }
 181:../../os/rt/include/chvt.h **** 
 182:../../os/rt/include/chvt.h **** /**
 183:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:../../os/rt/include/chvt.h ****  *          window.
 185:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:../../os/rt/include/chvt.h ****  *          time window has zero size.
 187:../../os/rt/include/chvt.h ****  *
 188:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:../../os/rt/include/chvt.h ****  *
 193:../../os/rt/include/chvt.h ****  * @api
 194:../../os/rt/include/chvt.h ****  */
 195:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:../../os/rt/include/chvt.h **** 
 197:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:../../os/rt/include/chvt.h **** }
 199:../../os/rt/include/chvt.h **** 
 200:../../os/rt/include/chvt.h **** /**
 201:../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:../../os/rt/include/chvt.h ****  *
 207:../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:../../os/rt/include/chvt.h ****  *
 214:../../os/rt/include/chvt.h ****  * @iclass
 215:../../os/rt/include/chvt.h ****  */
 216:../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:../../os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:../../os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:../../os/rt/include/chvt.h **** 
 220:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:../../os/rt/include/chvt.h **** 
 222:../../os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:../../os/rt/include/chvt.h ****     return false;
 224:../../os/rt/include/chvt.h ****   }
 225:../../os/rt/include/chvt.h **** 
 226:../../os/rt/include/chvt.h ****   if (timep != NULL) {
 227:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:../../os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:../../os/rt/include/chvt.h **** #else
 230:../../os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:../../os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:../../os/rt/include/chvt.h **** #endif
 233:../../os/rt/include/chvt.h ****   }
 234:../../os/rt/include/chvt.h **** 
 235:../../os/rt/include/chvt.h ****   return true;
 236:../../os/rt/include/chvt.h **** }
 237:../../os/rt/include/chvt.h **** 
 238:../../os/rt/include/chvt.h **** /**
 239:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:../../os/rt/include/chvt.h ****  *
 243:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:../../os/rt/include/chvt.h ****  *
 246:../../os/rt/include/chvt.h ****  * @iclass
 247:../../os/rt/include/chvt.h ****  */
 248:../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:../../os/rt/include/chvt.h **** 
 250:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:../../os/rt/include/chvt.h **** 
 252:../../os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:../../os/rt/include/chvt.h **** }
 254:../../os/rt/include/chvt.h **** 
 255:../../os/rt/include/chvt.h **** /**
 256:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:../../os/rt/include/chvt.h ****  *
 260:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:../../os/rt/include/chvt.h ****  *
 263:../../os/rt/include/chvt.h ****  * @api
 264:../../os/rt/include/chvt.h ****  */
 265:../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:../../os/rt/include/chvt.h ****   bool b;
 267:../../os/rt/include/chvt.h **** 
 268:../../os/rt/include/chvt.h ****   chSysLock();
 269:../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:../../os/rt/include/chvt.h ****   chSysUnlock();
 271:../../os/rt/include/chvt.h **** 
 272:../../os/rt/include/chvt.h ****   return b;
 273:../../os/rt/include/chvt.h **** }
 274:../../os/rt/include/chvt.h **** 
 275:../../os/rt/include/chvt.h **** /**
 276:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:../../os/rt/include/chvt.h ****  *
 281:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:../../os/rt/include/chvt.h ****  *
 283:../../os/rt/include/chvt.h ****  * @iclass
 284:../../os/rt/include/chvt.h ****  */
 285:../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:../../os/rt/include/chvt.h **** 
 287:../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 404               		.loc 2 287 0
 405 00a6 8981      		ldd r24,Y+1
 406 00a8 9A81      		ldd r25,Y+2
 407 00aa 892B      		or r24,r25
 408 00ac 01F0      		breq .L63
 288:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 409               		.loc 2 288 0
 410 00ae CE01      		movw r24,r28
 411 00b0 0196      		adiw r24,1
 412 00b2 0E94 0000 		call chVTDoResetI
 413               	.LVL30:
 414               	.L63:
 415               	.LBE239:
 416               	.LBE238:
 289:../../os/rt/include/chvt.h ****   }
 290:../../os/rt/include/chvt.h **** }
 291:../../os/rt/include/chvt.h **** 
 292:../../os/rt/include/chvt.h **** /**
 293:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:../../os/rt/include/chvt.h ****  *
 298:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:../../os/rt/include/chvt.h ****  *
 300:../../os/rt/include/chvt.h ****  * @api
 301:../../os/rt/include/chvt.h ****  */
 302:../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:../../os/rt/include/chvt.h **** 
 304:../../os/rt/include/chvt.h ****   chSysLock();
 305:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:../../os/rt/include/chvt.h ****   chSysUnlock();
 307:../../os/rt/include/chvt.h **** }
 308:../../os/rt/include/chvt.h **** 
 309:../../os/rt/include/chvt.h **** /**
 310:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:../../os/rt/include/chvt.h ****  *          using the new parameters.
 313:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:../../os/rt/include/chvt.h ****  *
 316:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:../../os/rt/include/chvt.h ****  *                        normal time specification.
 321:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:../../os/rt/include/chvt.h ****  *                      .
 323:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../os/rt/include/chvt.h ****  *                      function
 328:../../os/rt/include/chvt.h ****  *
 329:../../os/rt/include/chvt.h ****  * @iclass
 330:../../os/rt/include/chvt.h ****  */
 331:../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:../../os/rt/include/chvt.h **** 
 334:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 417               		.loc 2 335 0
 418 00b6 8E01      		movw r16,r28
 419 00b8 0F5F      		subi r16,-1
 420 00ba 1F4F      		sbci r17,-1
 421 00bc 20E0      		ldi r18,lo8(gs(vt_cb))
 422 00be 30E0      		ldi r19,hi8(gs(vt_cb))
 423 00c0 40E1      		ldi r20,lo8(16)
 424 00c2 5AE7      		ldi r21,lo8(122)
 425 00c4 60E0      		ldi r22,0
 426 00c6 70E0      		ldi r23,0
 427 00c8 C801      		movw r24,r16
 428 00ca 0E94 0000 		call chVTDoSetI
 429               	.LVL31:
 430               	.LBE237:
 431               	.LBE236:
 432               	.LBB240:
 433               	.LBB241:
 434               	.LBB242:
 435               	.LBB243:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 436               		.loc 3 440 0
 437               	/* #APP */
 438               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 439 00ce 7894      		sei
 440               	 ;  0 "" 2
 441               	/* #NOAPP */
 442               	.LBE243:
 443               	.LBE242:
 444               	.LBE241:
 445               	.LBE240:
 446               	.LBE232:
 218:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 447               		.loc 1 218 0
 448 00d0 8091 0000 		lds r24,main_vt_flag
 449 00d4 8111      		cpse r24,__zero_reg__
 450 00d6 00C0      		rjmp .L64
 451               	.L65:
 219:main.c        ****           chThdSleepMilliseconds(250);
 452               		.loc 1 219 0
 453 00d8 62E0      		ldi r22,lo8(2)
 454 00da 83E2      		ldi r24,lo8(35)
 455 00dc 90E0      		ldi r25,0
 456 00de 0E94 0000 		call _pal_lld_setlineid
 457               	.LVL32:
 458 00e2 0E94 0000 		call _pal_lld_getportfromline
 459               	.LVL33:
 460 00e6 FC01      		movw r30,r24
 461 00e8 1281      		ldd r17,Z+2
 462 00ea 62E0      		ldi r22,lo8(2)
 463 00ec 83E2      		ldi r24,lo8(35)
 464 00ee 90E0      		ldi r25,0
 465 00f0 0E94 0000 		call _pal_lld_setlineid
 466               	.LVL34:
 467 00f4 0E94 0000 		call _pal_lld_getpadfromline
 468               	.LVL35:
 469 00f8 082F      		mov r16,r24
 470 00fa 62E0      		ldi r22,lo8(2)
 471 00fc 83E2      		ldi r24,lo8(35)
 472 00fe 90E0      		ldi r25,0
 473 0100 0E94 0000 		call _pal_lld_setlineid
 474               	.LVL36:
 475 0104 0E94 0000 		call _pal_lld_getportfromline
 476               	.LVL37:
 477 0108 9701      		movw r18,r14
 478 010a 00C0      		rjmp 2f
 479               		1:
 480 010c 220F      		lsl r18
 481               		2:
 482 010e 0A95      		dec r16
 483 0110 02F4      		brpl 1b
 484 0112 1227      		eor r17,r18
 485 0114 FC01      		movw r30,r24
 486 0116 1283      		std Z+2,r17
 220:main.c        ****         }
 487               		.loc 1 220 0
 488 0118 62E4      		ldi r22,lo8(66)
 489 011a 7FE0      		ldi r23,lo8(15)
 490 011c 80E0      		ldi r24,0
 491 011e 90E0      		ldi r25,0
 492 0120 0E94 0000 		call chThdSleep
 493               	.LVL38:
 218:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 494               		.loc 1 218 0
 495 0124 8091 0000 		lds r24,main_vt_flag
 496 0128 8823      		tst r24
 497 012a 01F0      		breq .L65
 498               	.L64:
 222:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 499               		.loc 1 222 0
 500 012c 1092 0000 		sts main_vt_flag,__zero_reg__
 223:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 501               		.loc 1 223 0
 502 0130 9092 0000 		sts g_state,r9
 503               	.LVL39:
 504               	.L126:
 224:main.c        ****         break;
 505               		.loc 1 224 0
 506 0134 62E0      		ldi r22,lo8(2)
 507 0136 83E2      		ldi r24,lo8(35)
 508 0138 90E0      		ldi r25,0
 509 013a 0E94 0000 		call _pal_lld_setlineid
 510               	.LVL40:
 511 013e 0E94 0000 		call _pal_lld_getpadfromline
 512               	.LVL41:
 513 0142 182F      		mov r17,r24
 514 0144 62E0      		ldi r22,lo8(2)
 515 0146 00C0      		rjmp .L121
 516               	.LVL42:
 517               	.L30:
 518               	.LBB244:
 519               	.LBB245:
 520               	.LBB246:
 521               	.LBB247:
 430:../../os/common/ports/AVR/chcore.h **** }
 522               		.loc 3 430 0
 523               	/* #APP */
 524               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 525 0148 F894      		cli
 526               	 ;  0 "" 2
 527               	.LVL43:
 528               	/* #NOAPP */
 529               	.LBE247:
 530               	.LBE246:
 531               	.LBE245:
 532               	.LBB248:
 533               	.LBB249:
 534               	.LBB250:
 535               	.LBB251:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 536               		.loc 2 287 0
 537 014a 8981      		ldd r24,Y+1
 538 014c 9A81      		ldd r25,Y+2
 539 014e 892B      		or r24,r25
 540 0150 01F0      		breq .L60
 288:../../os/rt/include/chvt.h ****   }
 541               		.loc 2 288 0
 542 0152 CE01      		movw r24,r28
 543 0154 0196      		adiw r24,1
 544 0156 0E94 0000 		call chVTDoResetI
 545               	.LVL44:
 546               	.L60:
 547               	.LBE251:
 548               	.LBE250:
 549               		.loc 2 335 0
 550 015a 8E01      		movw r16,r28
 551 015c 0F5F      		subi r16,-1
 552 015e 1F4F      		sbci r17,-1
 553 0160 20E0      		ldi r18,lo8(gs(vt_cb))
 554 0162 30E0      		ldi r19,hi8(gs(vt_cb))
 555 0164 40E1      		ldi r20,lo8(16)
 556 0166 5AE7      		ldi r21,lo8(122)
 557 0168 60E0      		ldi r22,0
 558 016a 70E0      		ldi r23,0
 559 016c C801      		movw r24,r16
 560 016e 0E94 0000 		call chVTDoSetI
 561               	.LVL45:
 562               	.LBE249:
 563               	.LBE248:
 564               	.LBB252:
 565               	.LBB253:
 566               	.LBB254:
 567               	.LBB255:
 568               		.loc 3 440 0
 569               	/* #APP */
 570               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 571 0172 7894      		sei
 572               	 ;  0 "" 2
 573               	/* #NOAPP */
 574               	.LBE255:
 575               	.LBE254:
 576               	.LBE253:
 577               	.LBE252:
 578               	.LBE244:
 208:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 579               		.loc 1 208 0
 580 0174 8091 0000 		lds r24,main_vt_flag
 581 0178 8111      		cpse r24,__zero_reg__
 582 017a 00C0      		rjmp .L61
 583               	.L62:
 209:main.c        ****           chThdSleepMilliseconds(250);
 584               		.loc 1 209 0
 585 017c 62E0      		ldi r22,lo8(2)
 586 017e 83E2      		ldi r24,lo8(35)
 587 0180 90E0      		ldi r25,0
 588 0182 0E94 0000 		call _pal_lld_setlineid
 589               	.LVL46:
 590 0186 0E94 0000 		call _pal_lld_getportfromline
 591               	.LVL47:
 592 018a FC01      		movw r30,r24
 593 018c 1281      		ldd r17,Z+2
 594 018e 62E0      		ldi r22,lo8(2)
 595 0190 83E2      		ldi r24,lo8(35)
 596 0192 90E0      		ldi r25,0
 597 0194 0E94 0000 		call _pal_lld_setlineid
 598               	.LVL48:
 599 0198 0E94 0000 		call _pal_lld_getpadfromline
 600               	.LVL49:
 601 019c 082F      		mov r16,r24
 602 019e 62E0      		ldi r22,lo8(2)
 603 01a0 83E2      		ldi r24,lo8(35)
 604 01a2 90E0      		ldi r25,0
 605 01a4 0E94 0000 		call _pal_lld_setlineid
 606               	.LVL50:
 607 01a8 0E94 0000 		call _pal_lld_getportfromline
 608               	.LVL51:
 609 01ac 9701      		movw r18,r14
 610 01ae 00C0      		rjmp 2f
 611               		1:
 612 01b0 220F      		lsl r18
 613               		2:
 614 01b2 0A95      		dec r16
 615 01b4 02F4      		brpl 1b
 616 01b6 1227      		eor r17,r18
 617 01b8 FC01      		movw r30,r24
 618 01ba 1283      		std Z+2,r17
 210:main.c        ****         }
 619               		.loc 1 210 0
 620 01bc 62E4      		ldi r22,lo8(66)
 621 01be 7FE0      		ldi r23,lo8(15)
 622 01c0 80E0      		ldi r24,0
 623 01c2 90E0      		ldi r25,0
 624 01c4 0E94 0000 		call chThdSleep
 625               	.LVL52:
 208:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 626               		.loc 1 208 0
 627 01c8 8091 0000 		lds r24,main_vt_flag
 628 01cc 8823      		tst r24
 629 01ce 01F0      		breq .L62
 630               	.L61:
 212:main.c        ****         g_state = VERDE_LOCKED_SEC;
 631               		.loc 1 212 0
 632 01d0 1092 0000 		sts main_vt_flag,__zero_reg__
 213:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 633               		.loc 1 213 0
 634 01d4 A092 0000 		sts g_state,r10
 635 01d8 00C0      		rjmp .L126
 636               	.LVL53:
 637               	.L29:
 188:main.c        ****         palSetLine(PEDESTRE_VERDE);
 638               		.loc 1 188 0
 639 01da 62E0      		ldi r22,lo8(2)
 640 01dc 83E2      		ldi r24,lo8(35)
 641 01de 90E0      		ldi r25,0
 642 01e0 0E94 0000 		call _pal_lld_setlineid
 643               	.LVL54:
 644 01e4 0E94 0000 		call _pal_lld_getpadfromline
 645               	.LVL55:
 646 01e8 182F      		mov r17,r24
 647 01ea 62E0      		ldi r22,lo8(2)
 648 01ec 83E2      		ldi r24,lo8(35)
 649 01ee 90E0      		ldi r25,0
 650 01f0 0E94 0000 		call _pal_lld_setlineid
 651               	.LVL56:
 652 01f4 0E94 0000 		call _pal_lld_getportfromline
 653               	.LVL57:
 654 01f8 FC01      		movw r30,r24
 655 01fa 9281      		ldd r25,Z+2
 656 01fc 9701      		movw r18,r14
 657 01fe 00C0      		rjmp 2f
 658               		1:
 659 0200 220F      		lsl r18
 660 0202 331F      		rol r19
 661               		2:
 662 0204 1A95      		dec r17
 663 0206 02F4      		brpl 1b
 664 0208 2095      		com r18
 665 020a 3095      		com r19
 666 020c 9223      		and r25,r18
 667 020e 9283      		std Z+2,r25
 189:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 668               		.loc 1 189 0
 669 0210 63E0      		ldi r22,lo8(3)
 670 0212 83E2      		ldi r24,lo8(35)
 671 0214 90E0      		ldi r25,0
 672 0216 0E94 0000 		call _pal_lld_setlineid
 673               	.LVL58:
 674 021a 0E94 0000 		call _pal_lld_getpadfromline
 675               	.LVL59:
 676 021e 182F      		mov r17,r24
 677 0220 63E0      		ldi r22,lo8(3)
 678 0222 83E2      		ldi r24,lo8(35)
 679 0224 90E0      		ldi r25,0
 680 0226 0E94 0000 		call _pal_lld_setlineid
 681               	.LVL60:
 682 022a 0E94 0000 		call _pal_lld_getportfromline
 683               	.LVL61:
 684 022e FC01      		movw r30,r24
 685 0230 9281      		ldd r25,Z+2
 686 0232 9701      		movw r18,r14
 687 0234 00C0      		rjmp 2f
 688               		1:
 689 0236 220F      		lsl r18
 690               		2:
 691 0238 1A95      		dec r17
 692 023a 02F4      		brpl 1b
 693 023c 922B      		or r25,r18
 694 023e 9283      		std Z+2,r25
 695               	.LVL62:
 696               	.LBB256:
 697               	.LBB257:
 698               	.LBB258:
 699               	.LBB259:
 430:../../os/common/ports/AVR/chcore.h **** }
 700               		.loc 3 430 0
 701               	/* #APP */
 702               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 703 0240 F894      		cli
 704               	 ;  0 "" 2
 705               	.LVL63:
 706               	/* #NOAPP */
 707               	.LBE259:
 708               	.LBE258:
 709               	.LBE257:
 710               	.LBB260:
 711               	.LBB261:
 712               	.LBB262:
 713               	.LBB263:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 714               		.loc 2 287 0
 715 0242 8981      		ldd r24,Y+1
 716 0244 9A81      		ldd r25,Y+2
 717 0246 892B      		or r24,r25
 718 0248 01F0      		breq .L55
 288:../../os/rt/include/chvt.h ****   }
 719               		.loc 2 288 0
 720 024a CE01      		movw r24,r28
 721 024c 0196      		adiw r24,1
 722 024e 0E94 0000 		call chVTDoResetI
 723               	.LVL64:
 724               	.L55:
 725               	.LBE263:
 726               	.LBE262:
 727               		.loc 2 335 0
 728 0252 8E01      		movw r16,r28
 729 0254 0F5F      		subi r16,-1
 730 0256 1F4F      		sbci r17,-1
 731 0258 20E0      		ldi r18,lo8(gs(vt_cb))
 732 025a 30E0      		ldi r19,hi8(gs(vt_cb))
 733 025c 48E1      		ldi r20,lo8(24)
 734 025e 57EB      		ldi r21,lo8(-73)
 735 0260 60E0      		ldi r22,0
 736 0262 70E0      		ldi r23,0
 737 0264 C801      		movw r24,r16
 738 0266 0E94 0000 		call chVTDoSetI
 739               	.LVL65:
 740               	.LBE261:
 741               	.LBE260:
 742               	.LBB264:
 743               	.LBB265:
 744               	.LBB266:
 745               	.LBB267:
 746               		.loc 3 440 0
 747               	/* #APP */
 748               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 749 026a 7894      		sei
 750               	 ;  0 "" 2
 751               	/* #NOAPP */
 752               	.LBE267:
 753               	.LBE266:
 754               	.LBE265:
 755               	.LBE264:
 756               	.LBE256:
 191:main.c        ****           chThdSleepMilliseconds(100);
 757               		.loc 1 191 0
 758 026c 8091 0000 		lds r24,main_vt_flag
 759 0270 8111      		cpse r24,__zero_reg__
 760 0272 00C0      		rjmp .L56
 761               	.L57:
 192:main.c        ****         }
 762               		.loc 1 192 0
 763 0274 6BE1      		ldi r22,lo8(27)
 764 0276 76E0      		ldi r23,lo8(6)
 765 0278 80E0      		ldi r24,0
 766 027a 90E0      		ldi r25,0
 767 027c 0E94 0000 		call chThdSleep
 768               	.LVL66:
 191:main.c        ****           chThdSleepMilliseconds(100);
 769               		.loc 1 191 0
 770 0280 8091 0000 		lds r24,main_vt_flag
 771 0284 8823      		tst r24
 772 0286 01F0      		breq .L57
 773               	.L56:
 194:main.c        ****         if (qsize > 0) {
 774               		.loc 1 194 0
 775 0288 1092 0000 		sts main_vt_flag,__zero_reg__
 195:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 776               		.loc 1 195 0
 777 028c 8091 0000 		lds r24,qsize
 778 0290 9091 0000 		lds r25,qsize+1
 779 0294 892B      		or r24,r25
 780 0296 01F0      		breq .+2
 781 0298 00C0      		rjmp .L129
 782               	.L58:
 198:main.c        ****           g_state = PISCANDO_SEC;
 783               		.loc 1 198 0
 784 029a E1E0      		ldi r30,1
 785 029c CE16      		cp r12,r30
 786 029e D104      		cpc r13,__zero_reg__
 787 02a0 01F4      		brne .+2
 788 02a2 00C0      		rjmp .L130
 202:main.c        ****           palClearLine(PEDESTRE_VERDE);
 789               		.loc 1 202 0
 790 02a4 7092 0000 		sts g_state,r7
 203:main.c        ****         }
 791               		.loc 1 203 0
 792 02a8 63E0      		ldi r22,lo8(3)
 793 02aa 83E2      		ldi r24,lo8(35)
 794 02ac 90E0      		ldi r25,0
 795 02ae 0E94 0000 		call _pal_lld_setlineid
 796               	.LVL67:
 797 02b2 0E94 0000 		call _pal_lld_getpadfromline
 798               	.LVL68:
 799 02b6 182F      		mov r17,r24
 800 02b8 63E0      		ldi r22,lo8(3)
 801 02ba 83E2      		ldi r24,lo8(35)
 802 02bc 90E0      		ldi r25,0
 803               	.LVL69:
 804               	.L124:
 121:main.c        ****         }
 805               		.loc 1 121 0
 806 02be 0E94 0000 		call _pal_lld_setlineid
 807               	.LVL70:
 808 02c2 0E94 0000 		call _pal_lld_getportfromline
 809               	.LVL71:
 810 02c6 FC01      		movw r30,r24
 811 02c8 9281      		ldd r25,Z+2
 812 02ca 9701      		movw r18,r14
 813 02cc 00C0      		rjmp 2f
 814               		1:
 815 02ce 220F      		lsl r18
 816 02d0 331F      		rol r19
 817               		2:
 818 02d2 1A95      		dec r17
 819 02d4 02F4      		brpl 1b
 820 02d6 2095      		com r18
 821 02d8 3095      		com r19
 822 02da 9223      		and r25,r18
 823 02dc 9283      		std Z+2,r25
 824 02de 00C0      		rjmp .L35
 825               	.L28:
 166:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 826               		.loc 1 166 0
 827 02e0 65E0      		ldi r22,lo8(5)
 828 02e2 89E2      		ldi r24,lo8(41)
 829 02e4 90E0      		ldi r25,0
 830 02e6 0E94 0000 		call _pal_lld_setlineid
 831               	.LVL72:
 832 02ea 0E94 0000 		call _pal_lld_getpadfromline
 833               	.LVL73:
 834 02ee 182F      		mov r17,r24
 835 02f0 65E0      		ldi r22,lo8(5)
 836 02f2 89E2      		ldi r24,lo8(41)
 837 02f4 90E0      		ldi r25,0
 838 02f6 0E94 0000 		call _pal_lld_setlineid
 839               	.LVL74:
 840 02fa 0E94 0000 		call _pal_lld_getportfromline
 841               	.LVL75:
 842 02fe FC01      		movw r30,r24
 843 0300 9281      		ldd r25,Z+2
 844 0302 9701      		movw r18,r14
 845 0304 00C0      		rjmp 2f
 846               		1:
 847 0306 220F      		lsl r18
 848               		2:
 849 0308 1A95      		dec r17
 850 030a 02F4      		brpl 1b
 851 030c 922B      		or r25,r18
 852 030e 9283      		std Z+2,r25
 853               	.LVL76:
 854               	.LBB268:
 855               	.LBB269:
 856               	.LBB270:
 857               	.LBB271:
 430:../../os/common/ports/AVR/chcore.h **** }
 858               		.loc 3 430 0
 859               	/* #APP */
 860               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 861 0310 F894      		cli
 862               	 ;  0 "" 2
 863               	.LVL77:
 864               	/* #NOAPP */
 865               	.LBE271:
 866               	.LBE270:
 867               	.LBE269:
 868               	.LBB272:
 869               	.LBB273:
 870               	.LBB274:
 871               	.LBB275:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 872               		.loc 2 287 0
 873 0312 8981      		ldd r24,Y+1
 874 0314 9A81      		ldd r25,Y+2
 875 0316 892B      		or r24,r25
 876 0318 01F0      		breq .L49
 288:../../os/rt/include/chvt.h ****   }
 877               		.loc 2 288 0
 878 031a CE01      		movw r24,r28
 879 031c 0196      		adiw r24,1
 880 031e 0E94 0000 		call chVTDoResetI
 881               	.LVL78:
 882               	.L49:
 883               	.LBE275:
 884               	.LBE274:
 885               		.loc 2 335 0
 886 0322 8E01      		movw r16,r28
 887 0324 0F5F      		subi r16,-1
 888 0326 1F4F      		sbci r17,-1
 889 0328 20E0      		ldi r18,lo8(gs(vt_cb))
 890 032a 30E0      		ldi r19,hi8(gs(vt_cb))
 891 032c 40E1      		ldi r20,lo8(16)
 892 032e 5AE7      		ldi r21,lo8(122)
 893 0330 60E0      		ldi r22,0
 894 0332 70E0      		ldi r23,0
 895 0334 C801      		movw r24,r16
 896 0336 0E94 0000 		call chVTDoSetI
 897               	.LVL79:
 898               	.LBE273:
 899               	.LBE272:
 900               	.LBB276:
 901               	.LBB277:
 902               	.LBB278:
 903               	.LBB279:
 904               		.loc 3 440 0
 905               	/* #APP */
 906               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 907 033a 7894      		sei
 908               	 ;  0 "" 2
 909               	/* #NOAPP */
 910               	.LBE279:
 911               	.LBE278:
 912               	.LBE277:
 913               	.LBE276:
 914               	.LBE268:
 168:main.c        ****           chThdSleepMilliseconds(100);
 915               		.loc 1 168 0
 916 033c 8091 0000 		lds r24,main_vt_flag
 917 0340 8111      		cpse r24,__zero_reg__
 918 0342 00C0      		rjmp .L50
 919               	.L51:
 169:main.c        ****         }
 920               		.loc 1 169 0
 921 0344 6BE1      		ldi r22,lo8(27)
 922 0346 76E0      		ldi r23,lo8(6)
 923 0348 80E0      		ldi r24,0
 924 034a 90E0      		ldi r25,0
 925 034c 0E94 0000 		call chThdSleep
 926               	.LVL80:
 168:main.c        ****           chThdSleepMilliseconds(100);
 927               		.loc 1 168 0
 928 0350 8091 0000 		lds r24,main_vt_flag
 929 0354 8823      		tst r24
 930 0356 01F0      		breq .L51
 931               	.L50:
 171:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 932               		.loc 1 171 0
 933 0358 1092 0000 		sts main_vt_flag,__zero_reg__
 172:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 934               		.loc 1 172 0
 935 035c 9092 0000 		sts g_state,r9
 936               	.LVL81:
 937               	.L127:
 184:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 938               		.loc 1 184 0
 939 0360 65E0      		ldi r22,lo8(5)
 940 0362 89E2      		ldi r24,lo8(41)
 941 0364 90E0      		ldi r25,0
 942 0366 0E94 0000 		call _pal_lld_setlineid
 943               	.LVL82:
 944 036a 0E94 0000 		call _pal_lld_getpadfromline
 945               	.LVL83:
 946 036e 182F      		mov r17,r24
 947 0370 65E0      		ldi r22,lo8(5)
 948 0372 89E2      		ldi r24,lo8(41)
 949 0374 90E0      		ldi r25,0
 950 0376 0E94 0000 		call _pal_lld_setlineid
 951               	.LVL84:
 952 037a 0E94 0000 		call _pal_lld_getportfromline
 953               	.LVL85:
 954 037e FC01      		movw r30,r24
 955 0380 9281      		ldd r25,Z+2
 956 0382 9701      		movw r18,r14
 957 0384 00C0      		rjmp 2f
 958               		1:
 959 0386 220F      		lsl r18
 960 0388 331F      		rol r19
 961               		2:
 962 038a 1A95      		dec r17
 963 038c 02F4      		brpl 1b
 964 038e 2095      		com r18
 965 0390 3095      		com r19
 966 0392 9223      		and r25,r18
 967 0394 9283      		std Z+2,r25
 185:main.c        ****         break;
 968               		.loc 1 185 0
 969 0396 60E0      		ldi r22,0
 970 0398 83E2      		ldi r24,lo8(35)
 971 039a 90E0      		ldi r25,0
 972 039c 0E94 0000 		call _pal_lld_setlineid
 973               	.LVL86:
 974 03a0 0E94 0000 		call _pal_lld_getpadfromline
 975               	.LVL87:
 976 03a4 182F      		mov r17,r24
 977 03a6 60E0      		ldi r22,0
 978 03a8 00C0      		rjmp .L121
 979               	.LVL88:
 980               	.L27:
 177:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 981               		.loc 1 177 0
 982 03aa 65E0      		ldi r22,lo8(5)
 983 03ac 89E2      		ldi r24,lo8(41)
 984 03ae 90E0      		ldi r25,0
 985 03b0 0E94 0000 		call _pal_lld_setlineid
 986               	.LVL89:
 987 03b4 0E94 0000 		call _pal_lld_getpadfromline
 988               	.LVL90:
 989 03b8 182F      		mov r17,r24
 990 03ba 65E0      		ldi r22,lo8(5)
 991 03bc 89E2      		ldi r24,lo8(41)
 992 03be 90E0      		ldi r25,0
 993 03c0 0E94 0000 		call _pal_lld_setlineid
 994               	.LVL91:
 995 03c4 0E94 0000 		call _pal_lld_getportfromline
 996               	.LVL92:
 997 03c8 FC01      		movw r30,r24
 998 03ca 9281      		ldd r25,Z+2
 999 03cc 9701      		movw r18,r14
 1000 03ce 00C0      		rjmp 2f
 1001               		1:
 1002 03d0 220F      		lsl r18
 1003               		2:
 1004 03d2 1A95      		dec r17
 1005 03d4 02F4      		brpl 1b
 1006 03d6 922B      		or r25,r18
 1007 03d8 9283      		std Z+2,r25
 1008               	.LVL93:
 1009               	.LBB280:
 1010               	.LBB281:
 1011               	.LBB282:
 1012               	.LBB283:
 430:../../os/common/ports/AVR/chcore.h **** }
 1013               		.loc 3 430 0
 1014               	/* #APP */
 1015               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1016 03da F894      		cli
 1017               	 ;  0 "" 2
 1018               	.LVL94:
 1019               	/* #NOAPP */
 1020               	.LBE283:
 1021               	.LBE282:
 1022               	.LBE281:
 1023               	.LBB284:
 1024               	.LBB285:
 1025               	.LBB286:
 1026               	.LBB287:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1027               		.loc 2 287 0
 1028 03dc 8981      		ldd r24,Y+1
 1029 03de 9A81      		ldd r25,Y+2
 1030 03e0 892B      		or r24,r25
 1031 03e2 01F0      		breq .L52
 288:../../os/rt/include/chvt.h ****   }
 1032               		.loc 2 288 0
 1033 03e4 CE01      		movw r24,r28
 1034 03e6 0196      		adiw r24,1
 1035 03e8 0E94 0000 		call chVTDoResetI
 1036               	.LVL95:
 1037               	.L52:
 1038               	.LBE287:
 1039               	.LBE286:
 1040               		.loc 2 335 0
 1041 03ec 8E01      		movw r16,r28
 1042 03ee 0F5F      		subi r16,-1
 1043 03f0 1F4F      		sbci r17,-1
 1044 03f2 20E0      		ldi r18,lo8(gs(vt_cb))
 1045 03f4 30E0      		ldi r19,hi8(gs(vt_cb))
 1046 03f6 40E1      		ldi r20,lo8(16)
 1047 03f8 5AE7      		ldi r21,lo8(122)
 1048 03fa 60E0      		ldi r22,0
 1049 03fc 70E0      		ldi r23,0
 1050 03fe C801      		movw r24,r16
 1051 0400 0E94 0000 		call chVTDoSetI
 1052               	.LVL96:
 1053               	.LBE285:
 1054               	.LBE284:
 1055               	.LBB288:
 1056               	.LBB289:
 1057               	.LBB290:
 1058               	.LBB291:
 1059               		.loc 3 440 0
 1060               	/* #APP */
 1061               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1062 0404 7894      		sei
 1063               	 ;  0 "" 2
 1064               	/* #NOAPP */
 1065               	.LBE291:
 1066               	.LBE290:
 1067               	.LBE289:
 1068               	.LBE288:
 1069               	.LBE280:
 179:main.c        ****           chThdSleepMilliseconds(100);
 1070               		.loc 1 179 0
 1071 0406 8091 0000 		lds r24,main_vt_flag
 1072 040a 8111      		cpse r24,__zero_reg__
 1073 040c 00C0      		rjmp .L53
 1074               	.L54:
 180:main.c        ****         }
 1075               		.loc 1 180 0
 1076 040e 6BE1      		ldi r22,lo8(27)
 1077 0410 76E0      		ldi r23,lo8(6)
 1078 0412 80E0      		ldi r24,0
 1079 0414 90E0      		ldi r25,0
 1080 0416 0E94 0000 		call chThdSleep
 1081               	.LVL97:
 179:main.c        ****           chThdSleepMilliseconds(100);
 1082               		.loc 1 179 0
 1083 041a 8091 0000 		lds r24,main_vt_flag
 1084 041e 8823      		tst r24
 1085 0420 01F0      		breq .L54
 1086               	.L53:
 182:main.c        ****         g_state = VERDE_LOCKED_PED;
 1087               		.loc 1 182 0
 1088 0422 1092 0000 		sts main_vt_flag,__zero_reg__
 183:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 1089               		.loc 1 183 0
 1090 0426 B092 0000 		sts g_state,r11
 1091 042a 00C0      		rjmp .L127
 1092               	.LVL98:
 1093               	.L26:
 147:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 1094               		.loc 1 147 0
 1095 042c 60E0      		ldi r22,0
 1096 042e 83E2      		ldi r24,lo8(35)
 1097 0430 90E0      		ldi r25,0
 1098 0432 0E94 0000 		call _pal_lld_setlineid
 1099               	.LVL99:
 1100 0436 0E94 0000 		call _pal_lld_getpadfromline
 1101               	.LVL100:
 1102 043a 182F      		mov r17,r24
 1103 043c 60E0      		ldi r22,0
 1104 043e 83E2      		ldi r24,lo8(35)
 1105 0440 90E0      		ldi r25,0
 1106 0442 0E94 0000 		call _pal_lld_setlineid
 1107               	.LVL101:
 1108 0446 0E94 0000 		call _pal_lld_getportfromline
 1109               	.LVL102:
 1110 044a FC01      		movw r30,r24
 1111 044c 9281      		ldd r25,Z+2
 1112 044e 9701      		movw r18,r14
 1113 0450 00C0      		rjmp 2f
 1114               		1:
 1115 0452 220F      		lsl r18
 1116 0454 331F      		rol r19
 1117               		2:
 1118 0456 1A95      		dec r17
 1119 0458 02F4      		brpl 1b
 1120 045a 2095      		com r18
 1121 045c 3095      		com r19
 1122 045e 9223      		and r25,r18
 1123 0460 9283      		std Z+2,r25
 148:main.c        ****         chVTSet(&main_vt, TIME_MS2I(6000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1124               		.loc 1 148 0
 1125 0462 61E0      		ldi r22,lo8(1)
 1126 0464 83E2      		ldi r24,lo8(35)
 1127 0466 90E0      		ldi r25,0
 1128 0468 0E94 0000 		call _pal_lld_setlineid
 1129               	.LVL103:
 1130 046c 0E94 0000 		call _pal_lld_getpadfromline
 1131               	.LVL104:
 1132 0470 182F      		mov r17,r24
 1133 0472 61E0      		ldi r22,lo8(1)
 1134 0474 83E2      		ldi r24,lo8(35)
 1135 0476 90E0      		ldi r25,0
 1136 0478 0E94 0000 		call _pal_lld_setlineid
 1137               	.LVL105:
 1138 047c 0E94 0000 		call _pal_lld_getportfromline
 1139               	.LVL106:
 1140 0480 FC01      		movw r30,r24
 1141 0482 9281      		ldd r25,Z+2
 1142 0484 9701      		movw r18,r14
 1143 0486 00C0      		rjmp 2f
 1144               		1:
 1145 0488 220F      		lsl r18
 1146               		2:
 1147 048a 1A95      		dec r17
 1148 048c 02F4      		brpl 1b
 1149 048e 922B      		or r25,r18
 1150 0490 9283      		std Z+2,r25
 1151               	.LVL107:
 1152               	.LBB292:
 1153               	.LBB293:
 1154               	.LBB294:
 1155               	.LBB295:
 430:../../os/common/ports/AVR/chcore.h **** }
 1156               		.loc 3 430 0
 1157               	/* #APP */
 1158               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1159 0492 F894      		cli
 1160               	 ;  0 "" 2
 1161               	.LVL108:
 1162               	/* #NOAPP */
 1163               	.LBE295:
 1164               	.LBE294:
 1165               	.LBE293:
 1166               	.LBB296:
 1167               	.LBB297:
 1168               	.LBB298:
 1169               	.LBB299:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1170               		.loc 2 287 0
 1171 0494 8981      		ldd r24,Y+1
 1172 0496 9A81      		ldd r25,Y+2
 1173 0498 892B      		or r24,r25
 1174 049a 01F0      		breq .L44
 288:../../os/rt/include/chvt.h ****   }
 1175               		.loc 2 288 0
 1176 049c CE01      		movw r24,r28
 1177 049e 0196      		adiw r24,1
 1178 04a0 0E94 0000 		call chVTDoResetI
 1179               	.LVL109:
 1180               	.L44:
 1181               	.LBE299:
 1182               	.LBE298:
 1183               		.loc 2 335 0
 1184 04a4 8E01      		movw r16,r28
 1185 04a6 0F5F      		subi r16,-1
 1186 04a8 1F4F      		sbci r17,-1
 1187 04aa 20E0      		ldi r18,lo8(gs(vt_cb))
 1188 04ac 30E0      		ldi r19,hi8(gs(vt_cb))
 1189 04ae 40E3      		ldi r20,lo8(48)
 1190 04b0 5EE6      		ldi r21,lo8(110)
 1191 04b2 61E0      		ldi r22,lo8(1)
 1192 04b4 70E0      		ldi r23,0
 1193 04b6 C801      		movw r24,r16
 1194 04b8 0E94 0000 		call chVTDoSetI
 1195               	.LVL110:
 1196               	.LBE297:
 1197               	.LBE296:
 1198               	.LBB300:
 1199               	.LBB301:
 1200               	.LBB302:
 1201               	.LBB303:
 1202               		.loc 3 440 0
 1203               	/* #APP */
 1204               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1205 04bc 7894      		sei
 1206               	 ;  0 "" 2
 1207               	/* #NOAPP */
 1208               	.LBE303:
 1209               	.LBE302:
 1210               	.LBE301:
 1211               	.LBE300:
 1212               	.LBE292:
 150:main.c        ****           chThdSleepMilliseconds(100);
 1213               		.loc 1 150 0
 1214 04be 8091 0000 		lds r24,main_vt_flag
 1215 04c2 8111      		cpse r24,__zero_reg__
 1216 04c4 00C0      		rjmp .L45
 1217               	.L46:
 151:main.c        ****         }
 1218               		.loc 1 151 0
 1219 04c6 6BE1      		ldi r22,lo8(27)
 1220 04c8 76E0      		ldi r23,lo8(6)
 1221 04ca 80E0      		ldi r24,0
 1222 04cc 90E0      		ldi r25,0
 1223 04ce 0E94 0000 		call chThdSleep
 1224               	.LVL111:
 150:main.c        ****           chThdSleepMilliseconds(100);
 1225               		.loc 1 150 0
 1226 04d2 8091 0000 		lds r24,main_vt_flag
 1227 04d6 8823      		tst r24
 1228 04d8 01F0      		breq .L46
 1229               	.L45:
 153:main.c        ****         if (qsize > 0) {
 1230               		.loc 1 153 0
 1231 04da 1092 0000 		sts main_vt_flag,__zero_reg__
 154:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 1232               		.loc 1 154 0
 1233 04de 8091 0000 		lds r24,qsize
 1234 04e2 9091 0000 		lds r25,qsize+1
 1235 04e6 892B      		or r24,r25
 1236 04e8 01F0      		breq .+2
 1237 04ea 00C0      		rjmp .L131
 1238               	.L47:
 157:main.c        ****           g_state = AMARELO_PED_SEC;
 1239               		.loc 1 157 0
 1240 04ec 82E0      		ldi r24,2
 1241 04ee C816      		cp r12,r24
 1242 04f0 D104      		cpc r13,__zero_reg__
 1243 04f2 01F4      		brne .+2
 1244 04f4 00C0      		rjmp .L132
 161:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 1245               		.loc 1 161 0
 1246 04f6 8092 0000 		sts g_state,r8
 1247               	.L125:
 162:main.c        ****         }
 1248               		.loc 1 162 0
 1249 04fa 61E0      		ldi r22,lo8(1)
 1250 04fc 83E2      		ldi r24,lo8(35)
 1251 04fe 90E0      		ldi r25,0
 1252 0500 0E94 0000 		call _pal_lld_setlineid
 1253               	.LVL112:
 1254 0504 0E94 0000 		call _pal_lld_getpadfromline
 1255               	.LVL113:
 1256 0508 182F      		mov r17,r24
 1257 050a 61E0      		ldi r22,lo8(1)
 1258 050c 83E2      		ldi r24,lo8(35)
 1259 050e 90E0      		ldi r25,0
 1260 0510 00C0      		rjmp .L124
 1261               	.LVL114:
 1262               	.L25:
 125:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1263               		.loc 1 125 0
 1264 0512 64E0      		ldi r22,lo8(4)
 1265 0514 89E2      		ldi r24,lo8(41)
 1266 0516 90E0      		ldi r25,0
 1267 0518 0E94 0000 		call _pal_lld_setlineid
 1268               	.LVL115:
 1269 051c 0E94 0000 		call _pal_lld_getpadfromline
 1270               	.LVL116:
 1271 0520 182F      		mov r17,r24
 1272 0522 64E0      		ldi r22,lo8(4)
 1273 0524 89E2      		ldi r24,lo8(41)
 1274 0526 90E0      		ldi r25,0
 1275 0528 0E94 0000 		call _pal_lld_setlineid
 1276               	.LVL117:
 1277 052c 0E94 0000 		call _pal_lld_getportfromline
 1278               	.LVL118:
 1279 0530 FC01      		movw r30,r24
 1280 0532 9281      		ldd r25,Z+2
 1281 0534 9701      		movw r18,r14
 1282 0536 00C0      		rjmp 2f
 1283               		1:
 1284 0538 220F      		lsl r18
 1285               		2:
 1286 053a 1A95      		dec r17
 1287 053c 02F4      		brpl 1b
 1288 053e 922B      		or r25,r18
 1289 0540 9283      		std Z+2,r25
 1290               	.LVL119:
 1291               	.LBB304:
 1292               	.LBB305:
 1293               	.LBB306:
 1294               	.LBB307:
 430:../../os/common/ports/AVR/chcore.h **** }
 1295               		.loc 3 430 0
 1296               	/* #APP */
 1297               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1298 0542 F894      		cli
 1299               	 ;  0 "" 2
 1300               	.LVL120:
 1301               	/* #NOAPP */
 1302               	.LBE307:
 1303               	.LBE306:
 1304               	.LBE305:
 1305               	.LBB308:
 1306               	.LBB309:
 1307               	.LBB310:
 1308               	.LBB311:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1309               		.loc 2 287 0
 1310 0544 8981      		ldd r24,Y+1
 1311 0546 9A81      		ldd r25,Y+2
 1312 0548 892B      		or r24,r25
 1313 054a 01F0      		breq .L38
 288:../../os/rt/include/chvt.h ****   }
 1314               		.loc 2 288 0
 1315 054c CE01      		movw r24,r28
 1316 054e 0196      		adiw r24,1
 1317 0550 0E94 0000 		call chVTDoResetI
 1318               	.LVL121:
 1319               	.L38:
 1320               	.LBE311:
 1321               	.LBE310:
 1322               		.loc 2 335 0
 1323 0554 8E01      		movw r16,r28
 1324 0556 0F5F      		subi r16,-1
 1325 0558 1F4F      		sbci r17,-1
 1326 055a 20E0      		ldi r18,lo8(gs(vt_cb))
 1327 055c 30E0      		ldi r19,hi8(gs(vt_cb))
 1328 055e 40E1      		ldi r20,lo8(16)
 1329 0560 5AE7      		ldi r21,lo8(122)
 1330 0562 60E0      		ldi r22,0
 1331 0564 70E0      		ldi r23,0
 1332 0566 C801      		movw r24,r16
 1333 0568 0E94 0000 		call chVTDoSetI
 1334               	.LVL122:
 1335               	.LBE309:
 1336               	.LBE308:
 1337               	.LBB312:
 1338               	.LBB313:
 1339               	.LBB314:
 1340               	.LBB315:
 1341               		.loc 3 440 0
 1342               	/* #APP */
 1343               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1344 056c 7894      		sei
 1345               	 ;  0 "" 2
 1346               	/* #NOAPP */
 1347               	.LBE315:
 1348               	.LBE314:
 1349               	.LBE313:
 1350               	.LBE312:
 1351               	.LBE304:
 127:main.c        ****           chThdSleepMilliseconds(100);
 1352               		.loc 1 127 0
 1353 056e 8091 0000 		lds r24,main_vt_flag
 1354 0572 8111      		cpse r24,__zero_reg__
 1355 0574 00C0      		rjmp .L39
 1356               	.L40:
 128:main.c        ****         }
 1357               		.loc 1 128 0
 1358 0576 6BE1      		ldi r22,lo8(27)
 1359 0578 76E0      		ldi r23,lo8(6)
 1360 057a 80E0      		ldi r24,0
 1361 057c 90E0      		ldi r25,0
 1362 057e 0E94 0000 		call chThdSleep
 1363               	.LVL123:
 127:main.c        ****           chThdSleepMilliseconds(100);
 1364               		.loc 1 127 0
 1365 0582 8091 0000 		lds r24,main_vt_flag
 1366 0586 8823      		tst r24
 1367 0588 01F0      		breq .L40
 1368               	.L39:
 130:main.c        ****         g_state = VERDE_LOCKED_SEC;
 1369               		.loc 1 130 0
 1370 058a 1092 0000 		sts main_vt_flag,__zero_reg__
 131:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1371               		.loc 1 131 0
 1372 058e A092 0000 		sts g_state,r10
 1373               	.LVL124:
 1374               	.L128:
 143:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 1375               		.loc 1 143 0
 1376 0592 64E0      		ldi r22,lo8(4)
 1377 0594 89E2      		ldi r24,lo8(41)
 1378 0596 90E0      		ldi r25,0
 1379 0598 0E94 0000 		call _pal_lld_setlineid
 1380               	.LVL125:
 1381 059c 0E94 0000 		call _pal_lld_getpadfromline
 1382               	.LVL126:
 1383 05a0 182F      		mov r17,r24
 1384 05a2 64E0      		ldi r22,lo8(4)
 1385 05a4 89E2      		ldi r24,lo8(41)
 1386 05a6 90E0      		ldi r25,0
 1387 05a8 0E94 0000 		call _pal_lld_setlineid
 1388               	.LVL127:
 1389 05ac 0E94 0000 		call _pal_lld_getportfromline
 1390               	.LVL128:
 1391 05b0 FC01      		movw r30,r24
 1392 05b2 9281      		ldd r25,Z+2
 1393 05b4 9701      		movw r18,r14
 1394 05b6 00C0      		rjmp 2f
 1395               		1:
 1396 05b8 220F      		lsl r18
 1397 05ba 331F      		rol r19
 1398               		2:
 1399 05bc 1A95      		dec r17
 1400 05be 02F4      		brpl 1b
 1401 05c0 2095      		com r18
 1402 05c2 3095      		com r19
 1403 05c4 9223      		and r25,r18
 1404 05c6 9283      		std Z+2,r25
 144:main.c        ****         break;
 1405               		.loc 1 144 0
 1406 05c8 66E0      		ldi r22,lo8(6)
 1407 05ca 89E2      		ldi r24,lo8(41)
 1408 05cc 90E0      		ldi r25,0
 1409 05ce 0E94 0000 		call _pal_lld_setlineid
 1410               	.LVL129:
 1411 05d2 0E94 0000 		call _pal_lld_getpadfromline
 1412               	.LVL130:
 1413 05d6 182F      		mov r17,r24
 1414 05d8 66E0      		ldi r22,lo8(6)
 1415 05da 89E2      		ldi r24,lo8(41)
 1416 05dc 90E0      		ldi r25,0
 1417 05de 00C0      		rjmp .L122
 1418               	.LVL131:
 1419               	.L24:
 136:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1420               		.loc 1 136 0
 1421 05e0 64E0      		ldi r22,lo8(4)
 1422 05e2 89E2      		ldi r24,lo8(41)
 1423 05e4 90E0      		ldi r25,0
 1424 05e6 0E94 0000 		call _pal_lld_setlineid
 1425               	.LVL132:
 1426 05ea 0E94 0000 		call _pal_lld_getpadfromline
 1427               	.LVL133:
 1428 05ee 182F      		mov r17,r24
 1429 05f0 64E0      		ldi r22,lo8(4)
 1430 05f2 89E2      		ldi r24,lo8(41)
 1431 05f4 90E0      		ldi r25,0
 1432 05f6 0E94 0000 		call _pal_lld_setlineid
 1433               	.LVL134:
 1434 05fa 0E94 0000 		call _pal_lld_getportfromline
 1435               	.LVL135:
 1436 05fe FC01      		movw r30,r24
 1437 0600 9281      		ldd r25,Z+2
 1438 0602 9701      		movw r18,r14
 1439 0604 00C0      		rjmp 2f
 1440               		1:
 1441 0606 220F      		lsl r18
 1442               		2:
 1443 0608 1A95      		dec r17
 1444 060a 02F4      		brpl 1b
 1445 060c 922B      		or r25,r18
 1446 060e 9283      		std Z+2,r25
 1447               	.LVL136:
 1448               	.LBB316:
 1449               	.LBB317:
 1450               	.LBB318:
 1451               	.LBB319:
 430:../../os/common/ports/AVR/chcore.h **** }
 1452               		.loc 3 430 0
 1453               	/* #APP */
 1454               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1455 0610 F894      		cli
 1456               	 ;  0 "" 2
 1457               	.LVL137:
 1458               	/* #NOAPP */
 1459               	.LBE319:
 1460               	.LBE318:
 1461               	.LBE317:
 1462               	.LBB320:
 1463               	.LBB321:
 1464               	.LBB322:
 1465               	.LBB323:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1466               		.loc 2 287 0
 1467 0612 8981      		ldd r24,Y+1
 1468 0614 9A81      		ldd r25,Y+2
 1469 0616 892B      		or r24,r25
 1470 0618 01F0      		breq .L41
 288:../../os/rt/include/chvt.h ****   }
 1471               		.loc 2 288 0
 1472 061a CE01      		movw r24,r28
 1473 061c 0196      		adiw r24,1
 1474 061e 0E94 0000 		call chVTDoResetI
 1475               	.LVL138:
 1476               	.L41:
 1477               	.LBE323:
 1478               	.LBE322:
 1479               		.loc 2 335 0
 1480 0622 8E01      		movw r16,r28
 1481 0624 0F5F      		subi r16,-1
 1482 0626 1F4F      		sbci r17,-1
 1483 0628 20E0      		ldi r18,lo8(gs(vt_cb))
 1484 062a 30E0      		ldi r19,hi8(gs(vt_cb))
 1485 062c 40E1      		ldi r20,lo8(16)
 1486 062e 5AE7      		ldi r21,lo8(122)
 1487 0630 60E0      		ldi r22,0
 1488 0632 70E0      		ldi r23,0
 1489 0634 C801      		movw r24,r16
 1490 0636 0E94 0000 		call chVTDoSetI
 1491               	.LVL139:
 1492               	.LBE321:
 1493               	.LBE320:
 1494               	.LBB324:
 1495               	.LBB325:
 1496               	.LBB326:
 1497               	.LBB327:
 1498               		.loc 3 440 0
 1499               	/* #APP */
 1500               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1501 063a 7894      		sei
 1502               	 ;  0 "" 2
 1503               	/* #NOAPP */
 1504               	.LBE327:
 1505               	.LBE326:
 1506               	.LBE325:
 1507               	.LBE324:
 1508               	.LBE316:
 138:main.c        ****           chThdSleepMilliseconds(100);
 1509               		.loc 1 138 0
 1510 063c 8091 0000 		lds r24,main_vt_flag
 1511 0640 8111      		cpse r24,__zero_reg__
 1512 0642 00C0      		rjmp .L42
 1513               	.L43:
 139:main.c        ****         }
 1514               		.loc 1 139 0
 1515 0644 6BE1      		ldi r22,lo8(27)
 1516 0646 76E0      		ldi r23,lo8(6)
 1517 0648 80E0      		ldi r24,0
 1518 064a 90E0      		ldi r25,0
 1519 064c 0E94 0000 		call chThdSleep
 1520               	.LVL140:
 138:main.c        ****           chThdSleepMilliseconds(100);
 1521               		.loc 1 138 0
 1522 0650 8091 0000 		lds r24,main_vt_flag
 1523 0654 8823      		tst r24
 1524 0656 01F0      		breq .L43
 1525               	.L42:
 141:main.c        ****         g_state = VERDE_LOCKED_PED;
 1526               		.loc 1 141 0
 1527 0658 1092 0000 		sts main_vt_flag,__zero_reg__
 142:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1528               		.loc 1 142 0
 1529 065c B092 0000 		sts g_state,r11
 1530 0660 00C0      		rjmp .L128
 1531               	.LVL141:
 1532               	.L23:
 115:main.c        ****         if (ev == SECUNDARIO || ev == AMB_SECUNDARIO) {
 1533               		.loc 1 115 0
 1534 0662 0E94 0000 		call dequeue
 1535               	.LVL142:
 1536 0666 6C01      		movw r12,r24
 1537               	.LVL143:
 116:main.c        ****           g_state = AMARELO_SEC_PRIM;
 1538               		.loc 1 116 0
 1539 0668 81E0      		ldi r24,1
 1540 066a C816      		cp r12,r24
 1541 066c D104      		cpc r13,__zero_reg__
 1542 066e 01F4      		brne .+2
 1543 0670 00C0      		rjmp .L36
 116:main.c        ****           g_state = AMARELO_SEC_PRIM;
 1544               		.loc 1 116 0 is_stmt 0 discriminator 1
 1545 0672 E4E0      		ldi r30,4
 1546 0674 CE16      		cp r12,r30
 1547 0676 D104      		cpc r13,__zero_reg__
 1548 0678 01F4      		brne .+2
 1549 067a 00C0      		rjmp .L36
 119:main.c        ****           g_state = AMARELO_PED_PRIM;
 1550               		.loc 1 119 0 is_stmt 1
 1551 067c F2E0      		ldi r31,2
 1552 067e CF16      		cp r12,r31
 1553 0680 D104      		cpc r13,__zero_reg__
 1554 0682 01F0      		breq .+2
 1555 0684 00C0      		rjmp .L35
 120:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1556               		.loc 1 120 0
 1557 0686 83E0      		ldi r24,lo8(3)
 1558               	.L123:
 1559 0688 8093 0000 		sts g_state,r24
 121:main.c        ****         }
 1560               		.loc 1 121 0
 1561 068c 67E0      		ldi r22,lo8(7)
 1562 068e 89E2      		ldi r24,lo8(41)
 1563 0690 90E0      		ldi r25,0
 1564 0692 0E94 0000 		call _pal_lld_setlineid
 1565               	.LVL144:
 1566 0696 0E94 0000 		call _pal_lld_getpadfromline
 1567               	.LVL145:
 1568 069a 182F      		mov r17,r24
 1569 069c 67E0      		ldi r22,lo8(7)
 1570 069e 89E2      		ldi r24,lo8(41)
 1571 06a0 90E0      		ldi r25,0
 1572 06a2 00C0      		rjmp .L124
 1573               	.L21:
 103:main.c        ****         palSetLine(PRIMARIO_VERDE);
 1574               		.loc 1 103 0
 1575 06a4 66E0      		ldi r22,lo8(6)
 1576 06a6 89E2      		ldi r24,lo8(41)
 1577 06a8 90E0      		ldi r25,0
 1578 06aa 0E94 0000 		call _pal_lld_setlineid
 1579               	.LVL146:
 1580 06ae 0E94 0000 		call _pal_lld_getpadfromline
 1581               	.LVL147:
 1582 06b2 182F      		mov r17,r24
 1583 06b4 66E0      		ldi r22,lo8(6)
 1584 06b6 89E2      		ldi r24,lo8(41)
 1585 06b8 90E0      		ldi r25,0
 1586 06ba 0E94 0000 		call _pal_lld_setlineid
 1587               	.LVL148:
 1588 06be 0E94 0000 		call _pal_lld_getportfromline
 1589               	.LVL149:
 1590 06c2 FC01      		movw r30,r24
 1591 06c4 9281      		ldd r25,Z+2
 1592 06c6 9701      		movw r18,r14
 1593 06c8 00C0      		rjmp 2f
 1594               		1:
 1595 06ca 220F      		lsl r18
 1596 06cc 331F      		rol r19
 1597               		2:
 1598 06ce 1A95      		dec r17
 1599 06d0 02F4      		brpl 1b
 1600 06d2 2095      		com r18
 1601 06d4 3095      		com r19
 1602 06d6 9223      		and r25,r18
 1603 06d8 9283      		std Z+2,r25
 104:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 1604               		.loc 1 104 0
 1605 06da 67E0      		ldi r22,lo8(7)
 1606 06dc 89E2      		ldi r24,lo8(41)
 1607 06de 90E0      		ldi r25,0
 1608 06e0 0E94 0000 		call _pal_lld_setlineid
 1609               	.LVL150:
 1610 06e4 0E94 0000 		call _pal_lld_getpadfromline
 1611               	.LVL151:
 1612 06e8 182F      		mov r17,r24
 1613 06ea 67E0      		ldi r22,lo8(7)
 1614 06ec 89E2      		ldi r24,lo8(41)
 1615 06ee 90E0      		ldi r25,0
 1616 06f0 0E94 0000 		call _pal_lld_setlineid
 1617               	.LVL152:
 1618 06f4 0E94 0000 		call _pal_lld_getportfromline
 1619               	.LVL153:
 1620 06f8 FC01      		movw r30,r24
 1621 06fa 9281      		ldd r25,Z+2
 1622 06fc 9701      		movw r18,r14
 1623 06fe 00C0      		rjmp 2f
 1624               		1:
 1625 0700 220F      		lsl r18
 1626               		2:
 1627 0702 1A95      		dec r17
 1628 0704 02F4      		brpl 1b
 1629 0706 922B      		or r25,r18
 1630 0708 9283      		std Z+2,r25
 105:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 1631               		.loc 1 105 0
 1632 070a 60E0      		ldi r22,0
 1633 070c 83E2      		ldi r24,lo8(35)
 1634 070e 90E0      		ldi r25,0
 1635 0710 0E94 0000 		call _pal_lld_setlineid
 1636               	.LVL154:
 1637 0714 0E94 0000 		call _pal_lld_getpadfromline
 1638               	.LVL155:
 1639 0718 182F      		mov r17,r24
 1640 071a 60E0      		ldi r22,0
 1641 071c 83E2      		ldi r24,lo8(35)
 1642 071e 90E0      		ldi r25,0
 1643 0720 0E94 0000 		call _pal_lld_setlineid
 1644               	.LVL156:
 1645 0724 0E94 0000 		call _pal_lld_getportfromline
 1646               	.LVL157:
 1647 0728 FC01      		movw r30,r24
 1648 072a 9281      		ldd r25,Z+2
 1649 072c 9701      		movw r18,r14
 1650 072e 00C0      		rjmp 2f
 1651               		1:
 1652 0730 220F      		lsl r18
 1653               		2:
 1654 0732 1A95      		dec r17
 1655 0734 02F4      		brpl 1b
 1656 0736 922B      		or r25,r18
 1657 0738 9283      		std Z+2,r25
 106:main.c        ****         chVTSet(&main_vt, TIME_MS2I(10000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1658               		.loc 1 106 0
 1659 073a 62E0      		ldi r22,lo8(2)
 1660 073c 83E2      		ldi r24,lo8(35)
 1661 073e 90E0      		ldi r25,0
 1662 0740 0E94 0000 		call _pal_lld_setlineid
 1663               	.LVL158:
 1664 0744 0E94 0000 		call _pal_lld_getpadfromline
 1665               	.LVL159:
 1666 0748 182F      		mov r17,r24
 1667 074a 62E0      		ldi r22,lo8(2)
 1668 074c 83E2      		ldi r24,lo8(35)
 1669 074e 90E0      		ldi r25,0
 1670 0750 0E94 0000 		call _pal_lld_setlineid
 1671               	.LVL160:
 1672 0754 0E94 0000 		call _pal_lld_getportfromline
 1673               	.LVL161:
 1674 0758 FC01      		movw r30,r24
 1675 075a 9281      		ldd r25,Z+2
 1676 075c 9701      		movw r18,r14
 1677 075e 00C0      		rjmp 2f
 1678               		1:
 1679 0760 220F      		lsl r18
 1680               		2:
 1681 0762 1A95      		dec r17
 1682 0764 02F4      		brpl 1b
 1683 0766 922B      		or r25,r18
 1684 0768 9283      		std Z+2,r25
 1685               	.LVL162:
 1686               	.LBB328:
 1687               	.LBB329:
 1688               	.LBB330:
 1689               	.LBB331:
 430:../../os/common/ports/AVR/chcore.h **** }
 1690               		.loc 3 430 0
 1691               	/* #APP */
 1692               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1693 076a F894      		cli
 1694               	 ;  0 "" 2
 1695               	.LVL163:
 1696               	/* #NOAPP */
 1697               	.LBE331:
 1698               	.LBE330:
 1699               	.LBE329:
 1700               	.LBB332:
 1701               	.LBB333:
 1702               	.LBB334:
 1703               	.LBB335:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1704               		.loc 2 287 0
 1705 076c 8981      		ldd r24,Y+1
 1706 076e 9A81      		ldd r25,Y+2
 1707 0770 892B      		or r24,r25
 1708 0772 01F0      		breq .L32
 288:../../os/rt/include/chvt.h ****   }
 1709               		.loc 2 288 0
 1710 0774 CE01      		movw r24,r28
 1711 0776 0196      		adiw r24,1
 1712 0778 0E94 0000 		call chVTDoResetI
 1713               	.LVL164:
 1714               	.L32:
 1715               	.LBE335:
 1716               	.LBE334:
 1717               		.loc 2 335 0
 1718 077c 8E01      		movw r16,r28
 1719 077e 0F5F      		subi r16,-1
 1720 0780 1F4F      		sbci r17,-1
 1721 0782 20E0      		ldi r18,lo8(gs(vt_cb))
 1722 0784 30E0      		ldi r19,hi8(gs(vt_cb))
 1723 0786 40E5      		ldi r20,lo8(80)
 1724 0788 52E6      		ldi r21,lo8(98)
 1725 078a 62E0      		ldi r22,lo8(2)
 1726 078c 70E0      		ldi r23,0
 1727 078e C801      		movw r24,r16
 1728 0790 0E94 0000 		call chVTDoSetI
 1729               	.LVL165:
 1730               	.LBE333:
 1731               	.LBE332:
 1732               	.LBB336:
 1733               	.LBB337:
 1734               	.LBB338:
 1735               	.LBB339:
 1736               		.loc 3 440 0
 1737               	/* #APP */
 1738               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1739 0794 7894      		sei
 1740               	 ;  0 "" 2
 1741               	/* #NOAPP */
 1742               	.LBE339:
 1743               	.LBE338:
 1744               	.LBE337:
 1745               	.LBE336:
 1746               	.LBE328:
 108:main.c        ****           chThdSleepMilliseconds(100);
 1747               		.loc 1 108 0
 1748 0796 8091 0000 		lds r24,main_vt_flag
 1749 079a 8111      		cpse r24,__zero_reg__
 1750 079c 00C0      		rjmp .L33
 1751               	.L34:
 109:main.c        ****         }
 1752               		.loc 1 109 0
 1753 079e 6BE1      		ldi r22,lo8(27)
 1754 07a0 76E0      		ldi r23,lo8(6)
 1755 07a2 80E0      		ldi r24,0
 1756 07a4 90E0      		ldi r25,0
 1757 07a6 0E94 0000 		call chThdSleep
 1758               	.LVL166:
 108:main.c        ****           chThdSleepMilliseconds(100);
 1759               		.loc 1 108 0
 1760 07aa 8091 0000 		lds r24,main_vt_flag
 1761 07ae 8823      		tst r24
 1762 07b0 01F0      		breq .L34
 1763               	.L33:
 111:main.c        ****         g_state = VERDE_IDLE_PRIM;
 1764               		.loc 1 111 0
 1765 07b2 1092 0000 		sts main_vt_flag,__zero_reg__
 112:main.c        ****         break;
 1766               		.loc 1 112 0
 1767 07b6 82E0      		ldi r24,lo8(2)
 1768 07b8 8093 0000 		sts g_state,r24
 113:main.c        ****       case VERDE_IDLE_PRIM:
 1769               		.loc 1 113 0
 1770 07bc 00C0      		rjmp .L35
 1771               	.LVL167:
 1772               	.L36:
 117:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1773               		.loc 1 117 0
 1774 07be 84E0      		ldi r24,lo8(4)
 1775 07c0 00C0      		rjmp .L123
 1776               	.LVL168:
 1777               	.L130:
 199:main.c        ****           palClearLine(PEDESTRE_VERDE);
 1778               		.loc 1 199 0
 1779 07c2 5092 0000 		sts g_state,r5
 200:main.c        ****         } else {
 1780               		.loc 1 200 0
 1781 07c6 63E0      		ldi r22,lo8(3)
 1782 07c8 83E2      		ldi r24,lo8(35)
 1783 07ca 90E0      		ldi r25,0
 1784 07cc 0E94 0000 		call _pal_lld_setlineid
 1785               	.LVL169:
 1786 07d0 0E94 0000 		call _pal_lld_getpadfromline
 1787               	.LVL170:
 1788 07d4 182F      		mov r17,r24
 1789 07d6 63E0      		ldi r22,lo8(3)
 1790 07d8 83E2      		ldi r24,lo8(35)
 1791 07da 90E0      		ldi r25,0
 1792 07dc 0E94 0000 		call _pal_lld_setlineid
 1793               	.LVL171:
 1794 07e0 0E94 0000 		call _pal_lld_getportfromline
 1795               	.LVL172:
 1796 07e4 FC01      		movw r30,r24
 1797 07e6 9281      		ldd r25,Z+2
 1798 07e8 9601      		movw r18,r12
 1799 07ea 00C0      		rjmp 2f
 1800               		1:
 1801 07ec 220F      		lsl r18
 1802 07ee 331F      		rol r19
 1803               		2:
 1804 07f0 1A95      		dec r17
 1805 07f2 02F4      		brpl 1b
 1806 07f4 2095      		com r18
 1807 07f6 3095      		com r19
 1808 07f8 9223      		and r25,r18
 1809 07fa 9283      		std Z+2,r25
 1810 07fc 00C0      		rjmp .L35
 1811               	.LVL173:
 1812               	.L132:
 158:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 1813               		.loc 1 158 0
 1814 07fe 6092 0000 		sts g_state,r6
 1815 0802 00C0      		rjmp .L125
 1816               	.LVL174:
 1817               	.L129:
 196:main.c        ****         }
 1818               		.loc 1 196 0
 1819 0804 0E94 0000 		call dequeue
 1820               	.LVL175:
 1821 0808 6C01      		movw r12,r24
 1822               	.LVL176:
 1823 080a 00C0      		rjmp .L58
 1824               	.LVL177:
 1825               	.L131:
 155:main.c        ****         }
 1826               		.loc 1 155 0
 1827 080c 0E94 0000 		call dequeue
 1828               	.LVL178:
 1829 0810 6C01      		movw r12,r24
 1830               	.LVL179:
 1831 0812 00C0      		rjmp .L47
 1832               		.cfi_endproc
 1833               	.LFE243:
 1835               		.section	.text.button_check,"ax",@progbits
 1836               	.global	button_check
 1838               	button_check:
 1839               	.LFB248:
 374:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 1840               		.loc 1 374 0
 1841               		.cfi_startproc
 1842               	.LVL180:
 1843 0000 CF92      		push r12
 1844               	.LCFI8:
 1845               		.cfi_def_cfa_offset 3
 1846               		.cfi_offset 12, -2
 1847 0002 DF92      		push r13
 1848               	.LCFI9:
 1849               		.cfi_def_cfa_offset 4
 1850               		.cfi_offset 13, -3
 1851 0004 EF92      		push r14
 1852               	.LCFI10:
 1853               		.cfi_def_cfa_offset 5
 1854               		.cfi_offset 14, -4
 1855 0006 CF93      		push r28
 1856               	.LCFI11:
 1857               		.cfi_def_cfa_offset 6
 1858               		.cfi_offset 28, -5
 1859               	/* prologue: function */
 1860               	/* frame size = 0 */
 1861               	/* stack size = 4 */
 1862               	.L__stack_usage = 4
 1863 0008 6B01      		movw r12,r22
 1864 000a E82E      		mov r14,r24
 378:main.c        ****     x1 = palReadLine(line);
 1865               		.loc 1 378 0
 1866 000c 4130      		cpi r20,lo8(1)
 1867 000e 01F0      		breq .L138
 383:main.c        ****     x2 = palReadLine(line);
 1868               		.loc 1 383 0
 1869 0010 4230      		cpi r20,lo8(2)
 1870 0012 01F4      		brne .+2
 1871 0014 00C0      		rjmp .L139
 388:main.c        ****     x3 = palReadLine(line);
 1872               		.loc 1 388 0
 1873 0016 4330      		cpi r20,lo8(3)
 1874 0018 01F4      		brne .+2
 1875 001a 00C0      		rjmp .L140
 393:main.c        ****     x4 = palReadLine(line);
 1876               		.loc 1 393 0
 1877 001c 4430      		cpi r20,lo8(4)
 1878 001e 01F0      		breq .L141
 1879               	.LVL181:
 400:main.c        **** }
 1880               		.loc 1 400 0
 1881 0020 81E0      		ldi r24,lo8(1)
 1882 0022 8227      		eor r24,r18
 401:main.c        **** 
 1883               		.loc 1 401 0
 1884 0024 8923      		and r24,r25
 1885               	/* epilogue start */
 1886 0026 CF91      		pop r28
 1887 0028 EF90      		pop r14
 1888               	.LVL182:
 1889 002a DF90      		pop r13
 1890 002c CF90      		pop r12
 1891               	.LVL183:
 1892 002e 0895      		ret
 1893               	.LVL184:
 1894               	.L141:
 394:main.c        ****     w = x4^old_x4;
 1895               		.loc 1 394 0
 1896 0030 0E94 0000 		call _pal_lld_getportfromline
 1897               	.LVL185:
 1898 0034 FC01      		movw r30,r24
 1899 0036 C081      		ld r28,Z
 1900 0038 8E2D      		mov r24,r14
 1901 003a B601      		movw r22,r12
 1902 003c 0E94 0000 		call _pal_lld_getpadfromline
 1903               	.LVL186:
 1904 0040 2C2F      		mov r18,r28
 1905 0042 30E0      		ldi r19,0
 1906 0044 00C0      		rjmp 2f
 1907               		1:
 1908 0046 3595      		asr r19
 1909 0048 2795      		ror r18
 1910               		2:
 1911 004a 8A95      		dec r24
 1912 004c 02F4      		brpl 1b
 1913 004e 2170      		andi r18,lo8(1)
 395:main.c        ****     old_x4 = x4;
 1914               		.loc 1 395 0
 1915 0050 9091 0000 		lds r25,old_x4.4148
 1916 0054 9227      		eor r25,r18
 1917               	.LVL187:
 396:main.c        ****     x = x4;
 1918               		.loc 1 396 0
 1919 0056 2093 0000 		sts old_x4.4148,r18
 1920               	.LVL188:
 400:main.c        **** }
 1921               		.loc 1 400 0
 1922 005a 81E0      		ldi r24,lo8(1)
 1923 005c 8227      		eor r24,r18
 401:main.c        **** 
 1924               		.loc 1 401 0
 1925 005e 8923      		and r24,r25
 1926               	/* epilogue start */
 1927 0060 CF91      		pop r28
 1928 0062 EF90      		pop r14
 1929               	.LVL189:
 1930 0064 DF90      		pop r13
 1931 0066 CF90      		pop r12
 1932 0068 0895      		ret
 1933               	.LVL190:
 1934               	.L138:
 379:main.c        ****     w = x1^old_x1;
 1935               		.loc 1 379 0
 1936 006a 0E94 0000 		call _pal_lld_getportfromline
 1937               	.LVL191:
 1938 006e FC01      		movw r30,r24
 1939 0070 C081      		ld r28,Z
 1940 0072 8E2D      		mov r24,r14
 1941 0074 B601      		movw r22,r12
 1942 0076 0E94 0000 		call _pal_lld_getpadfromline
 1943               	.LVL192:
 1944 007a 2C2F      		mov r18,r28
 1945 007c 30E0      		ldi r19,0
 1946 007e 00C0      		rjmp 2f
 1947               		1:
 1948 0080 3595      		asr r19
 1949 0082 2795      		ror r18
 1950               		2:
 1951 0084 8A95      		dec r24
 1952 0086 02F4      		brpl 1b
 1953 0088 2170      		andi r18,lo8(1)
 380:main.c        ****     old_x1 = x1;
 1954               		.loc 1 380 0
 1955 008a 9091 0000 		lds r25,old_x1.4142
 1956 008e 9227      		eor r25,r18
 1957               	.LVL193:
 381:main.c        ****     x = x1;
 1958               		.loc 1 381 0
 1959 0090 2093 0000 		sts old_x1.4142,r18
 1960               	.LVL194:
 400:main.c        **** }
 1961               		.loc 1 400 0
 1962 0094 81E0      		ldi r24,lo8(1)
 1963 0096 8227      		eor r24,r18
 401:main.c        **** 
 1964               		.loc 1 401 0
 1965 0098 8923      		and r24,r25
 1966               	/* epilogue start */
 1967 009a CF91      		pop r28
 1968 009c EF90      		pop r14
 1969               	.LVL195:
 1970 009e DF90      		pop r13
 1971 00a0 CF90      		pop r12
 1972 00a2 0895      		ret
 1973               	.LVL196:
 1974               	.L139:
 384:main.c        ****     w = x2^old_x2;
 1975               		.loc 1 384 0
 1976 00a4 0E94 0000 		call _pal_lld_getportfromline
 1977               	.LVL197:
 1978 00a8 FC01      		movw r30,r24
 1979 00aa C081      		ld r28,Z
 1980 00ac 8E2D      		mov r24,r14
 1981 00ae B601      		movw r22,r12
 1982 00b0 0E94 0000 		call _pal_lld_getpadfromline
 1983               	.LVL198:
 1984 00b4 2C2F      		mov r18,r28
 1985 00b6 30E0      		ldi r19,0
 1986 00b8 00C0      		rjmp 2f
 1987               		1:
 1988 00ba 3595      		asr r19
 1989 00bc 2795      		ror r18
 1990               		2:
 1991 00be 8A95      		dec r24
 1992 00c0 02F4      		brpl 1b
 1993 00c2 2170      		andi r18,lo8(1)
 385:main.c        ****     old_x2 = x2;
 1994               		.loc 1 385 0
 1995 00c4 9091 0000 		lds r25,old_x2.4144
 1996 00c8 9227      		eor r25,r18
 1997               	.LVL199:
 386:main.c        ****     x = x2;
 1998               		.loc 1 386 0
 1999 00ca 2093 0000 		sts old_x2.4144,r18
 2000               	.LVL200:
 400:main.c        **** }
 2001               		.loc 1 400 0
 2002 00ce 81E0      		ldi r24,lo8(1)
 2003 00d0 8227      		eor r24,r18
 401:main.c        **** 
 2004               		.loc 1 401 0
 2005 00d2 8923      		and r24,r25
 2006               	/* epilogue start */
 2007 00d4 CF91      		pop r28
 2008 00d6 EF90      		pop r14
 2009               	.LVL201:
 2010 00d8 DF90      		pop r13
 2011 00da CF90      		pop r12
 2012 00dc 0895      		ret
 2013               	.LVL202:
 2014               	.L140:
 389:main.c        ****     w = x3^old_x3;
 2015               		.loc 1 389 0
 2016 00de 0E94 0000 		call _pal_lld_getportfromline
 2017               	.LVL203:
 2018 00e2 FC01      		movw r30,r24
 2019 00e4 C081      		ld r28,Z
 2020 00e6 8E2D      		mov r24,r14
 2021 00e8 B601      		movw r22,r12
 2022 00ea 0E94 0000 		call _pal_lld_getpadfromline
 2023               	.LVL204:
 2024 00ee 2C2F      		mov r18,r28
 2025 00f0 30E0      		ldi r19,0
 2026 00f2 00C0      		rjmp 2f
 2027               		1:
 2028 00f4 3595      		asr r19
 2029 00f6 2795      		ror r18
 2030               		2:
 2031 00f8 8A95      		dec r24
 2032 00fa 02F4      		brpl 1b
 2033 00fc 2170      		andi r18,lo8(1)
 390:main.c        ****     old_x3 = x3;
 2034               		.loc 1 390 0
 2035 00fe 9091 0000 		lds r25,old_x3.4146
 2036 0102 9227      		eor r25,r18
 2037               	.LVL205:
 391:main.c        ****     x = x3;
 2038               		.loc 1 391 0
 2039 0104 2093 0000 		sts old_x3.4146,r18
 2040               	.LVL206:
 400:main.c        **** }
 2041               		.loc 1 400 0
 2042 0108 81E0      		ldi r24,lo8(1)
 2043 010a 8227      		eor r24,r18
 401:main.c        **** 
 2044               		.loc 1 401 0
 2045 010c 8923      		and r24,r25
 2046               	/* epilogue start */
 2047 010e CF91      		pop r28
 2048 0110 EF90      		pop r14
 2049               	.LVL207:
 2050 0112 DF90      		pop r13
 2051 0114 CF90      		pop r12
 2052 0116 0895      		ret
 2053               		.cfi_endproc
 2054               	.LFE248:
 2056               		.section	.text.startup.main,"ax",@progbits
 2057               	.global	main
 2059               	main:
 2060               	.LFB244:
 237:main.c        ****   queueInit();
 2061               		.loc 1 237 0
 2062               		.cfi_startproc
 2063               	/* prologue: function */
 2064               	/* frame size = 0 */
 2065               	/* stack size = 0 */
 2066               	.L__stack_usage = 0
 238:main.c        ****   /*
 2067               		.loc 1 238 0
 2068 0000 0E94 0000 		call queueInit
 2069               	.LVL208:
 246:main.c        ****   chSysInit();
 2070               		.loc 1 246 0
 2071 0004 0E94 0000 		call halInit
 2072               	.LVL209:
 247:main.c        **** 
 2073               		.loc 1 247 0
 2074 0008 0E94 0000 		call chSysInit
 2075               	.LVL210:
 250:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 2076               		.loc 1 250 0
 2077 000c 62E0      		ldi r22,lo8(2)
 2078 000e 86E2      		ldi r24,lo8(38)
 2079 0010 90E0      		ldi r25,0
 2080 0012 0E94 0000 		call _pal_lld_setlineid
 2081               	.LVL211:
 2082 0016 0E94 0000 		call _pal_lld_getpadfromline
 2083               	.LVL212:
 2084 001a 182F      		mov r17,r24
 2085 001c 62E0      		ldi r22,lo8(2)
 2086 001e 86E2      		ldi r24,lo8(38)
 2087 0020 90E0      		ldi r25,0
 2088 0022 0E94 0000 		call _pal_lld_setlineid
 2089               	.LVL213:
 2090 0026 0E94 0000 		call _pal_lld_getportfromline
 2091               	.LVL214:
 2092 002a C1E0      		ldi r28,lo8(1)
 2093 002c D0E0      		ldi r29,0
 2094 002e BE01      		movw r22,r28
 2095 0030 00C0      		rjmp 2f
 2096               		1:
 2097 0032 660F      		lsl r22
 2098               		2:
 2099 0034 1A95      		dec r17
 2100 0036 02F4      		brpl 1b
 2101 0038 43E0      		ldi r20,lo8(3)
 2102 003a 0E94 0000 		call _pal_lld_setgroupmode
 2103               	.LVL215:
 251:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 2104               		.loc 1 251 0
 2105 003e 64E0      		ldi r22,lo8(4)
 2106 0040 86E2      		ldi r24,lo8(38)
 2107 0042 90E0      		ldi r25,0
 2108 0044 0E94 0000 		call _pal_lld_setlineid
 2109               	.LVL216:
 2110 0048 0E94 0000 		call _pal_lld_getpadfromline
 2111               	.LVL217:
 2112 004c 182F      		mov r17,r24
 2113 004e 64E0      		ldi r22,lo8(4)
 2114 0050 86E2      		ldi r24,lo8(38)
 2115 0052 90E0      		ldi r25,0
 2116 0054 0E94 0000 		call _pal_lld_setlineid
 2117               	.LVL218:
 2118 0058 0E94 0000 		call _pal_lld_getportfromline
 2119               	.LVL219:
 2120 005c BE01      		movw r22,r28
 2121 005e 00C0      		rjmp 2f
 2122               		1:
 2123 0060 660F      		lsl r22
 2124               		2:
 2125 0062 1A95      		dec r17
 2126 0064 02F4      		brpl 1b
 2127 0066 43E0      		ldi r20,lo8(3)
 2128 0068 0E94 0000 		call _pal_lld_setgroupmode
 2129               	.LVL220:
 252:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 2130               		.loc 1 252 0
 2131 006c 63E0      		ldi r22,lo8(3)
 2132 006e 86E2      		ldi r24,lo8(38)
 2133 0070 90E0      		ldi r25,0
 2134 0072 0E94 0000 		call _pal_lld_setlineid
 2135               	.LVL221:
 2136 0076 0E94 0000 		call _pal_lld_getpadfromline
 2137               	.LVL222:
 2138 007a 182F      		mov r17,r24
 2139 007c 63E0      		ldi r22,lo8(3)
 2140 007e 86E2      		ldi r24,lo8(38)
 2141 0080 90E0      		ldi r25,0
 2142 0082 0E94 0000 		call _pal_lld_setlineid
 2143               	.LVL223:
 2144 0086 0E94 0000 		call _pal_lld_getportfromline
 2145               	.LVL224:
 2146 008a BE01      		movw r22,r28
 2147 008c 00C0      		rjmp 2f
 2148               		1:
 2149 008e 660F      		lsl r22
 2150               		2:
 2151 0090 1A95      		dec r17
 2152 0092 02F4      		brpl 1b
 2153 0094 43E0      		ldi r20,lo8(3)
 2154 0096 0E94 0000 		call _pal_lld_setgroupmode
 2155               	.LVL225:
 253:main.c        **** 
 2156               		.loc 1 253 0
 2157 009a 65E0      		ldi r22,lo8(5)
 2158 009c 86E2      		ldi r24,lo8(38)
 2159 009e 90E0      		ldi r25,0
 2160 00a0 0E94 0000 		call _pal_lld_setlineid
 2161               	.LVL226:
 2162 00a4 0E94 0000 		call _pal_lld_getpadfromline
 2163               	.LVL227:
 2164 00a8 182F      		mov r17,r24
 2165 00aa 65E0      		ldi r22,lo8(5)
 2166 00ac 86E2      		ldi r24,lo8(38)
 2167 00ae 90E0      		ldi r25,0
 2168 00b0 0E94 0000 		call _pal_lld_setlineid
 2169               	.LVL228:
 2170 00b4 0E94 0000 		call _pal_lld_getportfromline
 2171               	.LVL229:
 2172 00b8 BE01      		movw r22,r28
 2173 00ba 00C0      		rjmp 2f
 2174               		1:
 2175 00bc 660F      		lsl r22
 2176               		2:
 2177 00be 1A95      		dec r17
 2178 00c0 02F4      		brpl 1b
 2179 00c2 43E0      		ldi r20,lo8(3)
 2180 00c4 0E94 0000 		call _pal_lld_setgroupmode
 2181               	.LVL230:
 256:main.c        ****   palClearLine(PEDESTRE_VERDE);
 2182               		.loc 1 256 0
 2183 00c8 63E0      		ldi r22,lo8(3)
 2184 00ca 83E2      		ldi r24,lo8(35)
 2185 00cc 90E0      		ldi r25,0
 2186 00ce 0E94 0000 		call _pal_lld_setlineid
 2187               	.LVL231:
 2188 00d2 0E94 0000 		call _pal_lld_getpadfromline
 2189               	.LVL232:
 2190 00d6 182F      		mov r17,r24
 2191 00d8 63E0      		ldi r22,lo8(3)
 2192 00da 83E2      		ldi r24,lo8(35)
 2193 00dc 90E0      		ldi r25,0
 2194 00de 0E94 0000 		call _pal_lld_setlineid
 2195               	.LVL233:
 2196 00e2 0E94 0000 		call _pal_lld_getportfromline
 2197               	.LVL234:
 2198 00e6 BE01      		movw r22,r28
 2199 00e8 00C0      		rjmp 2f
 2200               		1:
 2201 00ea 660F      		lsl r22
 2202               		2:
 2203 00ec 1A95      		dec r17
 2204 00ee 02F4      		brpl 1b
 2205 00f0 46E0      		ldi r20,lo8(6)
 2206 00f2 0E94 0000 		call _pal_lld_setgroupmode
 2207               	.LVL235:
 257:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2208               		.loc 1 257 0
 2209 00f6 63E0      		ldi r22,lo8(3)
 2210 00f8 83E2      		ldi r24,lo8(35)
 2211 00fa 90E0      		ldi r25,0
 2212 00fc 0E94 0000 		call _pal_lld_setlineid
 2213               	.LVL236:
 2214 0100 0E94 0000 		call _pal_lld_getpadfromline
 2215               	.LVL237:
 2216 0104 182F      		mov r17,r24
 2217 0106 63E0      		ldi r22,lo8(3)
 2218 0108 83E2      		ldi r24,lo8(35)
 2219 010a 90E0      		ldi r25,0
 2220 010c 0E94 0000 		call _pal_lld_setlineid
 2221               	.LVL238:
 2222 0110 0E94 0000 		call _pal_lld_getportfromline
 2223               	.LVL239:
 2224 0114 FC01      		movw r30,r24
 2225 0116 9281      		ldd r25,Z+2
 2226 0118 9E01      		movw r18,r28
 2227 011a 00C0      		rjmp 2f
 2228               		1:
 2229 011c 220F      		lsl r18
 2230 011e 331F      		rol r19
 2231               		2:
 2232 0120 1A95      		dec r17
 2233 0122 02F4      		brpl 1b
 2234 0124 2095      		com r18
 2235 0126 3095      		com r19
 2236 0128 9223      		and r25,r18
 2237 012a 9283      		std Z+2,r25
 258:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 2238               		.loc 1 258 0
 2239 012c 62E0      		ldi r22,lo8(2)
 2240 012e 83E2      		ldi r24,lo8(35)
 2241 0130 90E0      		ldi r25,0
 2242 0132 0E94 0000 		call _pal_lld_setlineid
 2243               	.LVL240:
 2244 0136 0E94 0000 		call _pal_lld_getpadfromline
 2245               	.LVL241:
 2246 013a 182F      		mov r17,r24
 2247 013c 62E0      		ldi r22,lo8(2)
 2248 013e 83E2      		ldi r24,lo8(35)
 2249 0140 90E0      		ldi r25,0
 2250 0142 0E94 0000 		call _pal_lld_setlineid
 2251               	.LVL242:
 2252 0146 0E94 0000 		call _pal_lld_getportfromline
 2253               	.LVL243:
 2254 014a BE01      		movw r22,r28
 2255 014c 00C0      		rjmp 2f
 2256               		1:
 2257 014e 660F      		lsl r22
 2258               		2:
 2259 0150 1A95      		dec r17
 2260 0152 02F4      		brpl 1b
 2261 0154 46E0      		ldi r20,lo8(6)
 2262 0156 0E94 0000 		call _pal_lld_setgroupmode
 2263               	.LVL244:
 259:main.c        **** 
 2264               		.loc 1 259 0
 2265 015a 62E0      		ldi r22,lo8(2)
 2266 015c 83E2      		ldi r24,lo8(35)
 2267 015e 90E0      		ldi r25,0
 2268 0160 0E94 0000 		call _pal_lld_setlineid
 2269               	.LVL245:
 2270 0164 0E94 0000 		call _pal_lld_getpadfromline
 2271               	.LVL246:
 2272 0168 182F      		mov r17,r24
 2273 016a 62E0      		ldi r22,lo8(2)
 2274 016c 83E2      		ldi r24,lo8(35)
 2275 016e 90E0      		ldi r25,0
 2276 0170 0E94 0000 		call _pal_lld_setlineid
 2277               	.LVL247:
 2278 0174 0E94 0000 		call _pal_lld_getportfromline
 2279               	.LVL248:
 2280 0178 FC01      		movw r30,r24
 2281 017a 9281      		ldd r25,Z+2
 2282 017c 9E01      		movw r18,r28
 2283 017e 00C0      		rjmp 2f
 2284               		1:
 2285 0180 220F      		lsl r18
 2286 0182 331F      		rol r19
 2287               		2:
 2288 0184 1A95      		dec r17
 2289 0186 02F4      		brpl 1b
 2290 0188 2095      		com r18
 2291 018a 3095      		com r19
 2292 018c 9223      		and r25,r18
 2293 018e 9283      		std Z+2,r25
 262:main.c        ****   palClearLine(PRIMARIO_VERDE);
 2294               		.loc 1 262 0
 2295 0190 67E0      		ldi r22,lo8(7)
 2296 0192 89E2      		ldi r24,lo8(41)
 2297 0194 90E0      		ldi r25,0
 2298 0196 0E94 0000 		call _pal_lld_setlineid
 2299               	.LVL249:
 2300 019a 0E94 0000 		call _pal_lld_getpadfromline
 2301               	.LVL250:
 2302 019e 182F      		mov r17,r24
 2303 01a0 67E0      		ldi r22,lo8(7)
 2304 01a2 89E2      		ldi r24,lo8(41)
 2305 01a4 90E0      		ldi r25,0
 2306 01a6 0E94 0000 		call _pal_lld_setlineid
 2307               	.LVL251:
 2308 01aa 0E94 0000 		call _pal_lld_getportfromline
 2309               	.LVL252:
 2310 01ae BE01      		movw r22,r28
 2311 01b0 00C0      		rjmp 2f
 2312               		1:
 2313 01b2 660F      		lsl r22
 2314               		2:
 2315 01b4 1A95      		dec r17
 2316 01b6 02F4      		brpl 1b
 2317 01b8 46E0      		ldi r20,lo8(6)
 2318 01ba 0E94 0000 		call _pal_lld_setgroupmode
 2319               	.LVL253:
 263:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 2320               		.loc 1 263 0
 2321 01be 67E0      		ldi r22,lo8(7)
 2322 01c0 89E2      		ldi r24,lo8(41)
 2323 01c2 90E0      		ldi r25,0
 2324 01c4 0E94 0000 		call _pal_lld_setlineid
 2325               	.LVL254:
 2326 01c8 0E94 0000 		call _pal_lld_getpadfromline
 2327               	.LVL255:
 2328 01cc 182F      		mov r17,r24
 2329 01ce 67E0      		ldi r22,lo8(7)
 2330 01d0 89E2      		ldi r24,lo8(41)
 2331 01d2 90E0      		ldi r25,0
 2332 01d4 0E94 0000 		call _pal_lld_setlineid
 2333               	.LVL256:
 2334 01d8 0E94 0000 		call _pal_lld_getportfromline
 2335               	.LVL257:
 2336 01dc FC01      		movw r30,r24
 2337 01de 9281      		ldd r25,Z+2
 2338 01e0 9E01      		movw r18,r28
 2339 01e2 00C0      		rjmp 2f
 2340               		1:
 2341 01e4 220F      		lsl r18
 2342 01e6 331F      		rol r19
 2343               		2:
 2344 01e8 1A95      		dec r17
 2345 01ea 02F4      		brpl 1b
 2346 01ec 2095      		com r18
 2347 01ee 3095      		com r19
 2348 01f0 9223      		and r25,r18
 2349 01f2 9283      		std Z+2,r25
 264:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 2350               		.loc 1 264 0
 2351 01f4 64E0      		ldi r22,lo8(4)
 2352 01f6 89E2      		ldi r24,lo8(41)
 2353 01f8 90E0      		ldi r25,0
 2354 01fa 0E94 0000 		call _pal_lld_setlineid
 2355               	.LVL258:
 2356 01fe 0E94 0000 		call _pal_lld_getpadfromline
 2357               	.LVL259:
 2358 0202 182F      		mov r17,r24
 2359 0204 64E0      		ldi r22,lo8(4)
 2360 0206 89E2      		ldi r24,lo8(41)
 2361 0208 90E0      		ldi r25,0
 2362 020a 0E94 0000 		call _pal_lld_setlineid
 2363               	.LVL260:
 2364 020e 0E94 0000 		call _pal_lld_getportfromline
 2365               	.LVL261:
 2366 0212 BE01      		movw r22,r28
 2367 0214 00C0      		rjmp 2f
 2368               		1:
 2369 0216 660F      		lsl r22
 2370               		2:
 2371 0218 1A95      		dec r17
 2372 021a 02F4      		brpl 1b
 2373 021c 46E0      		ldi r20,lo8(6)
 2374 021e 0E94 0000 		call _pal_lld_setgroupmode
 2375               	.LVL262:
 265:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2376               		.loc 1 265 0
 2377 0222 64E0      		ldi r22,lo8(4)
 2378 0224 89E2      		ldi r24,lo8(41)
 2379 0226 90E0      		ldi r25,0
 2380 0228 0E94 0000 		call _pal_lld_setlineid
 2381               	.LVL263:
 2382 022c 0E94 0000 		call _pal_lld_getpadfromline
 2383               	.LVL264:
 2384 0230 182F      		mov r17,r24
 2385 0232 64E0      		ldi r22,lo8(4)
 2386 0234 89E2      		ldi r24,lo8(41)
 2387 0236 90E0      		ldi r25,0
 2388 0238 0E94 0000 		call _pal_lld_setlineid
 2389               	.LVL265:
 2390 023c 0E94 0000 		call _pal_lld_getportfromline
 2391               	.LVL266:
 2392 0240 FC01      		movw r30,r24
 2393 0242 9281      		ldd r25,Z+2
 2394 0244 9E01      		movw r18,r28
 2395 0246 00C0      		rjmp 2f
 2396               		1:
 2397 0248 220F      		lsl r18
 2398 024a 331F      		rol r19
 2399               		2:
 2400 024c 1A95      		dec r17
 2401 024e 02F4      		brpl 1b
 2402 0250 2095      		com r18
 2403 0252 3095      		com r19
 2404 0254 9223      		and r25,r18
 2405 0256 9283      		std Z+2,r25
 266:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 2406               		.loc 1 266 0
 2407 0258 66E0      		ldi r22,lo8(6)
 2408 025a 89E2      		ldi r24,lo8(41)
 2409 025c 90E0      		ldi r25,0
 2410 025e 0E94 0000 		call _pal_lld_setlineid
 2411               	.LVL267:
 2412 0262 0E94 0000 		call _pal_lld_getpadfromline
 2413               	.LVL268:
 2414 0266 182F      		mov r17,r24
 2415 0268 66E0      		ldi r22,lo8(6)
 2416 026a 89E2      		ldi r24,lo8(41)
 2417 026c 90E0      		ldi r25,0
 2418 026e 0E94 0000 		call _pal_lld_setlineid
 2419               	.LVL269:
 2420 0272 0E94 0000 		call _pal_lld_getportfromline
 2421               	.LVL270:
 2422 0276 BE01      		movw r22,r28
 2423 0278 00C0      		rjmp 2f
 2424               		1:
 2425 027a 660F      		lsl r22
 2426               		2:
 2427 027c 1A95      		dec r17
 2428 027e 02F4      		brpl 1b
 2429 0280 46E0      		ldi r20,lo8(6)
 2430 0282 0E94 0000 		call _pal_lld_setgroupmode
 2431               	.LVL271:
 267:main.c        **** 
 2432               		.loc 1 267 0
 2433 0286 66E0      		ldi r22,lo8(6)
 2434 0288 89E2      		ldi r24,lo8(41)
 2435 028a 90E0      		ldi r25,0
 2436 028c 0E94 0000 		call _pal_lld_setlineid
 2437               	.LVL272:
 2438 0290 0E94 0000 		call _pal_lld_getpadfromline
 2439               	.LVL273:
 2440 0294 182F      		mov r17,r24
 2441 0296 66E0      		ldi r22,lo8(6)
 2442 0298 89E2      		ldi r24,lo8(41)
 2443 029a 90E0      		ldi r25,0
 2444 029c 0E94 0000 		call _pal_lld_setlineid
 2445               	.LVL274:
 2446 02a0 0E94 0000 		call _pal_lld_getportfromline
 2447               	.LVL275:
 2448 02a4 FC01      		movw r30,r24
 2449 02a6 9281      		ldd r25,Z+2
 2450 02a8 9E01      		movw r18,r28
 2451 02aa 00C0      		rjmp 2f
 2452               		1:
 2453 02ac 220F      		lsl r18
 2454 02ae 331F      		rol r19
 2455               		2:
 2456 02b0 1A95      		dec r17
 2457 02b2 02F4      		brpl 1b
 2458 02b4 2095      		com r18
 2459 02b6 3095      		com r19
 2460 02b8 9223      		and r25,r18
 2461 02ba 9283      		std Z+2,r25
 270:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 2462               		.loc 1 270 0
 2463 02bc 61E0      		ldi r22,lo8(1)
 2464 02be 83E2      		ldi r24,lo8(35)
 2465 02c0 90E0      		ldi r25,0
 2466 02c2 0E94 0000 		call _pal_lld_setlineid
 2467               	.LVL276:
 2468 02c6 0E94 0000 		call _pal_lld_getpadfromline
 2469               	.LVL277:
 2470 02ca 182F      		mov r17,r24
 2471 02cc 61E0      		ldi r22,lo8(1)
 2472 02ce 83E2      		ldi r24,lo8(35)
 2473 02d0 90E0      		ldi r25,0
 2474 02d2 0E94 0000 		call _pal_lld_setlineid
 2475               	.LVL278:
 2476 02d6 0E94 0000 		call _pal_lld_getportfromline
 2477               	.LVL279:
 2478 02da BE01      		movw r22,r28
 2479 02dc 00C0      		rjmp 2f
 2480               		1:
 2481 02de 660F      		lsl r22
 2482               		2:
 2483 02e0 1A95      		dec r17
 2484 02e2 02F4      		brpl 1b
 2485 02e4 46E0      		ldi r20,lo8(6)
 2486 02e6 0E94 0000 		call _pal_lld_setgroupmode
 2487               	.LVL280:
 271:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 2488               		.loc 1 271 0
 2489 02ea 61E0      		ldi r22,lo8(1)
 2490 02ec 83E2      		ldi r24,lo8(35)
 2491 02ee 90E0      		ldi r25,0
 2492 02f0 0E94 0000 		call _pal_lld_setlineid
 2493               	.LVL281:
 2494 02f4 0E94 0000 		call _pal_lld_getpadfromline
 2495               	.LVL282:
 2496 02f8 182F      		mov r17,r24
 2497 02fa 61E0      		ldi r22,lo8(1)
 2498 02fc 83E2      		ldi r24,lo8(35)
 2499 02fe 90E0      		ldi r25,0
 2500 0300 0E94 0000 		call _pal_lld_setlineid
 2501               	.LVL283:
 2502 0304 0E94 0000 		call _pal_lld_getportfromline
 2503               	.LVL284:
 2504 0308 FC01      		movw r30,r24
 2505 030a 9281      		ldd r25,Z+2
 2506 030c 9E01      		movw r18,r28
 2507 030e 00C0      		rjmp 2f
 2508               		1:
 2509 0310 220F      		lsl r18
 2510 0312 331F      		rol r19
 2511               		2:
 2512 0314 1A95      		dec r17
 2513 0316 02F4      		brpl 1b
 2514 0318 2095      		com r18
 2515 031a 3095      		com r19
 2516 031c 9223      		and r25,r18
 2517 031e 9283      		std Z+2,r25
 272:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 2518               		.loc 1 272 0
 2519 0320 65E0      		ldi r22,lo8(5)
 2520 0322 89E2      		ldi r24,lo8(41)
 2521 0324 90E0      		ldi r25,0
 2522 0326 0E94 0000 		call _pal_lld_setlineid
 2523               	.LVL285:
 2524 032a 0E94 0000 		call _pal_lld_getpadfromline
 2525               	.LVL286:
 2526 032e 182F      		mov r17,r24
 2527 0330 65E0      		ldi r22,lo8(5)
 2528 0332 89E2      		ldi r24,lo8(41)
 2529 0334 90E0      		ldi r25,0
 2530 0336 0E94 0000 		call _pal_lld_setlineid
 2531               	.LVL287:
 2532 033a 0E94 0000 		call _pal_lld_getportfromline
 2533               	.LVL288:
 2534 033e BE01      		movw r22,r28
 2535 0340 00C0      		rjmp 2f
 2536               		1:
 2537 0342 660F      		lsl r22
 2538               		2:
 2539 0344 1A95      		dec r17
 2540 0346 02F4      		brpl 1b
 2541 0348 46E0      		ldi r20,lo8(6)
 2542 034a 0E94 0000 		call _pal_lld_setgroupmode
 2543               	.LVL289:
 273:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2544               		.loc 1 273 0
 2545 034e 65E0      		ldi r22,lo8(5)
 2546 0350 89E2      		ldi r24,lo8(41)
 2547 0352 90E0      		ldi r25,0
 2548 0354 0E94 0000 		call _pal_lld_setlineid
 2549               	.LVL290:
 2550 0358 0E94 0000 		call _pal_lld_getpadfromline
 2551               	.LVL291:
 2552 035c 182F      		mov r17,r24
 2553 035e 65E0      		ldi r22,lo8(5)
 2554 0360 89E2      		ldi r24,lo8(41)
 2555 0362 90E0      		ldi r25,0
 2556 0364 0E94 0000 		call _pal_lld_setlineid
 2557               	.LVL292:
 2558 0368 0E94 0000 		call _pal_lld_getportfromline
 2559               	.LVL293:
 2560 036c FC01      		movw r30,r24
 2561 036e 9281      		ldd r25,Z+2
 2562 0370 9E01      		movw r18,r28
 2563 0372 00C0      		rjmp 2f
 2564               		1:
 2565 0374 220F      		lsl r18
 2566 0376 331F      		rol r19
 2567               		2:
 2568 0378 1A95      		dec r17
 2569 037a 02F4      		brpl 1b
 2570 037c 2095      		com r18
 2571 037e 3095      		com r19
 2572 0380 9223      		and r25,r18
 2573 0382 9283      		std Z+2,r25
 274:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 2574               		.loc 1 274 0
 2575 0384 60E0      		ldi r22,0
 2576 0386 83E2      		ldi r24,lo8(35)
 2577 0388 90E0      		ldi r25,0
 2578 038a 0E94 0000 		call _pal_lld_setlineid
 2579               	.LVL294:
 2580 038e 0E94 0000 		call _pal_lld_getpadfromline
 2581               	.LVL295:
 2582 0392 182F      		mov r17,r24
 2583 0394 60E0      		ldi r22,0
 2584 0396 83E2      		ldi r24,lo8(35)
 2585 0398 90E0      		ldi r25,0
 2586 039a 0E94 0000 		call _pal_lld_setlineid
 2587               	.LVL296:
 2588 039e 0E94 0000 		call _pal_lld_getportfromline
 2589               	.LVL297:
 2590 03a2 BE01      		movw r22,r28
 2591 03a4 00C0      		rjmp 2f
 2592               		1:
 2593 03a6 660F      		lsl r22
 2594               		2:
 2595 03a8 1A95      		dec r17
 2596 03aa 02F4      		brpl 1b
 2597 03ac 46E0      		ldi r20,lo8(6)
 2598 03ae 0E94 0000 		call _pal_lld_setgroupmode
 2599               	.LVL298:
 275:main.c        **** 
 2600               		.loc 1 275 0
 2601 03b2 60E0      		ldi r22,0
 2602 03b4 83E2      		ldi r24,lo8(35)
 2603 03b6 90E0      		ldi r25,0
 2604 03b8 0E94 0000 		call _pal_lld_setlineid
 2605               	.LVL299:
 2606 03bc 0E94 0000 		call _pal_lld_getpadfromline
 2607               	.LVL300:
 2608 03c0 182F      		mov r17,r24
 2609 03c2 60E0      		ldi r22,0
 2610 03c4 83E2      		ldi r24,lo8(35)
 2611 03c6 90E0      		ldi r25,0
 2612 03c8 0E94 0000 		call _pal_lld_setlineid
 2613               	.LVL301:
 2614 03cc 0E94 0000 		call _pal_lld_getportfromline
 2615               	.LVL302:
 2616 03d0 FC01      		movw r30,r24
 2617 03d2 9281      		ldd r25,Z+2
 2618 03d4 9E01      		movw r18,r28
 2619 03d6 00C0      		rjmp 2f
 2620               		1:
 2621 03d8 220F      		lsl r18
 2622 03da 331F      		rol r19
 2623               		2:
 2624 03dc 1A95      		dec r17
 2625 03de 02F4      		brpl 1b
 2626 03e0 2095      		com r18
 2627 03e2 3095      		com r19
 2628 03e4 2923      		and r18,r25
 2629 03e6 2283      		std Z+2,r18
 280:main.c        **** 
 2630               		.loc 1 280 0
 2631 03e8 10E0      		ldi r17,0
 2632 03ea 00E0      		ldi r16,0
 2633 03ec 20E0      		ldi r18,lo8(gs(Thread1))
 2634 03ee 30E0      		ldi r19,hi8(gs(Thread1))
 2635 03f0 40E8      		ldi r20,lo8(-128)
 2636 03f2 63E8      		ldi r22,lo8(-125)
 2637 03f4 70E0      		ldi r23,0
 2638 03f6 80E0      		ldi r24,lo8(waThread1)
 2639 03f8 90E0      		ldi r25,hi8(waThread1)
 2640 03fa 0E94 0000 		call chThdCreateStatic
 2641               	.LVL303:
 2642 03fe 00C0      		rjmp .L147
 2643               	.L151:
 286:main.c        ****     }
 2644               		.loc 1 286 0
 2645 0400 84E0      		ldi r24,lo8(4)
 2646 0402 90E0      		ldi r25,0
 2647 0404 0E94 0000 		call enqueue
 2648               	.LVL304:
 2649               	.L144:
 301:main.c        ****   }
 2650               		.loc 1 301 0
 2651 0408 6EE0      		ldi r22,lo8(14)
 2652 040a 73E0      		ldi r23,lo8(3)
 2653 040c 80E0      		ldi r24,0
 2654 040e 90E0      		ldi r25,0
 2655 0410 0E94 0000 		call chThdSleep
 2656               	.LVL305:
 2657               	.L147:
 284:main.c        ****     {
 2658               		.loc 1 284 0
 2659 0414 65E0      		ldi r22,lo8(5)
 2660 0416 86E2      		ldi r24,lo8(38)
 2661 0418 90E0      		ldi r25,0
 2662 041a 0E94 0000 		call _pal_lld_setlineid
 2663               	.LVL306:
 2664 041e 41E0      		ldi r20,lo8(1)
 2665 0420 0E94 0000 		call button_check
 2666               	.LVL307:
 2667 0424 8111      		cpse r24,__zero_reg__
 2668 0426 00C0      		rjmp .L151
 288:main.c        ****     {
 2669               		.loc 1 288 0
 2670 0428 63E0      		ldi r22,lo8(3)
 2671 042a 86E2      		ldi r24,lo8(38)
 2672 042c 90E0      		ldi r25,0
 2673 042e 0E94 0000 		call _pal_lld_setlineid
 2674               	.LVL308:
 2675 0432 42E0      		ldi r20,lo8(2)
 2676 0434 0E94 0000 		call button_check
 2677               	.LVL309:
 2678 0438 8823      		tst r24
 2679 043a 01F0      		breq .L145
 290:main.c        ****     }
 2680               		.loc 1 290 0
 2681 043c 83E0      		ldi r24,lo8(3)
 2682 043e 90E0      		ldi r25,0
 2683 0440 0E94 0000 		call enqueue
 2684               	.LVL310:
 2685 0444 00C0      		rjmp .L144
 2686               	.L145:
 292:main.c        ****     {
 2687               		.loc 1 292 0
 2688 0446 64E0      		ldi r22,lo8(4)
 2689 0448 86E2      		ldi r24,lo8(38)
 2690 044a 90E0      		ldi r25,0
 2691 044c 0E94 0000 		call _pal_lld_setlineid
 2692               	.LVL311:
 2693 0450 43E0      		ldi r20,lo8(3)
 2694 0452 0E94 0000 		call button_check
 2695               	.LVL312:
 2696 0456 8823      		tst r24
 2697 0458 01F0      		breq .L146
 294:main.c        ****     }
 2698               		.loc 1 294 0
 2699 045a 81E0      		ldi r24,lo8(1)
 2700 045c 90E0      		ldi r25,0
 2701 045e 0E94 0000 		call enqueue
 2702               	.LVL313:
 2703 0462 00C0      		rjmp .L144
 2704               	.L146:
 296:main.c        ****     {
 2705               		.loc 1 296 0
 2706 0464 62E0      		ldi r22,lo8(2)
 2707 0466 86E2      		ldi r24,lo8(38)
 2708 0468 90E0      		ldi r25,0
 2709 046a 0E94 0000 		call _pal_lld_setlineid
 2710               	.LVL314:
 2711 046e 44E0      		ldi r20,lo8(4)
 2712 0470 0E94 0000 		call button_check
 2713               	.LVL315:
 2714 0474 8823      		tst r24
 2715 0476 01F0      		breq .L144
 298:main.c        ****     }
 2716               		.loc 1 298 0
 2717 0478 82E0      		ldi r24,lo8(2)
 2718 047a 90E0      		ldi r25,0
 2719 047c 0E94 0000 		call enqueue
 2720               	.LVL316:
 2721 0480 00C0      		rjmp .L144
 2722               		.cfi_endproc
 2723               	.LFE244:
 2725               		.section	.bss.old_x4.4148,"aw",@nobits
 2728               	old_x4.4148:
 2729 0000 00        		.zero	1
 2730               		.section	.bss.old_x3.4146,"aw",@nobits
 2733               	old_x3.4146:
 2734 0000 00        		.zero	1
 2735               		.section	.bss.old_x2.4144,"aw",@nobits
 2738               	old_x2.4144:
 2739 0000 00        		.zero	1
 2740               		.section	.bss.old_x1.4142,"aw",@nobits
 2743               	old_x1.4142:
 2744 0000 00        		.zero	1
 2745               		.section	.bss.waThread1,"aw",@nobits
 2748               	waThread1:
 2749 0000 0000 0000 		.zero	131
 2749      0000 0000 
 2749      0000 0000 
 2749      0000 0000 
 2749      0000 0000 
 2750               	.global	main_vt_flag
 2751               		.section	.bss.main_vt_flag,"aw",@nobits
 2754               	main_vt_flag:
 2755 0000 00        		.zero	1
 2756               	.global	g_state
 2757               		.section	.data.g_state,"aw",@progbits
 2760               	g_state:
 2761 0000 01        		.byte	1
 2762               		.section	.bss.qfull,"aw",@nobits
 2765               	qfull:
 2766 0000 0000 0000 		.zero	4
 2767               		.section	.bss.qempty,"aw",@nobits
 2770               	qempty:
 2771 0000 0000 0000 		.zero	4
 2772               		.section	.bss.qmtx,"aw",@nobits
 2775               	qmtx:
 2776 0000 0000 0000 		.zero	8
 2776      0000 0000 
 2777               		.section	.bss.qsize,"aw",@nobits
 2780               	qsize:
 2781 0000 0000      		.zero	2
 2782               		.section	.bss.wrp,"aw",@nobits
 2785               	wrp:
 2786 0000 0000      		.zero	2
 2787               		.section	.bss.rdp,"aw",@nobits
 2790               	rdp:
 2791 0000 0000      		.zero	2
 2792               		.section	.bss.queue,"aw",@nobits
 2795               	queue:
 2796 0000 0000 0000 		.zero	256
 2796      0000 0000 
 2796      0000 0000 
 2796      0000 0000 
 2796      0000 0000 
 2797               		.text
 2798               	.Letext0:
 2799               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 2800               		.file 5 "/usr/lib/avr/include/stdint.h"
 2801               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2802               		.file 7 "../../os/rt/include/chearly.h"
 2803               		.file 8 "../../os/rt/include/chobjects.h"
 2804               		.file 9 "../../os/rt/include/chrfcu.h"
 2805               		.file 10 "../../os/rt/include/chdebug.h"
 2806               		.file 11 "../../os/rt/include/chtime.h"
 2807               		.file 12 "../../os/rt/include/chlists.h"
 2808               		.file 13 "../../os/rt/include/chsem.h"
 2809               		.file 14 "../../os/rt/include/chmtx.h"
 2810               		.file 15 "../../os/rt/include/chsys.h"
 2811               		.file 16 "../../os/rt/include/chregistry.h"
 2812               		.file 17 "../../os/rt/include/chcond.h"
 2813               		.file 18 "../../os/rt/include/chevents.h"
 2814               		.file 19 "../../os/oslib/include/chmemcore.h"
 2815               		.file 20 "../../os/hal/include/hal_queues.h"
 2816               		.file 21 "../../os/hal/include/hal_pal.h"
 2817               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 2818               		.file 23 "../../os/hal/include/hal_serial.h"
 2819               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 2820               		.file 25 "../../os/hal/include/hal.h"
 2821               		.file 26 "../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccKHVglm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccKHVglm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccKHVglm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccKHVglm.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccKHVglm.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccKHVglm.s:13     .text.vt_cb:0000000000000000 vt_cb
     /tmp/ccKHVglm.s:2754   .bss.main_vt_flag:0000000000000000 main_vt_flag
     /tmp/ccKHVglm.s:36     .text.queueInit:0000000000000000 queueInit
     /tmp/ccKHVglm.s:2775   .bss.qmtx:0000000000000000 qmtx
     /tmp/ccKHVglm.s:2770   .bss.qempty:0000000000000000 qempty
     /tmp/ccKHVglm.s:2765   .bss.qfull:0000000000000000 qfull
     /tmp/ccKHVglm.s:2795   .bss.queue:0000000000000000 queue
     /tmp/ccKHVglm.s:2785   .bss.wrp:0000000000000000 wrp
     /tmp/ccKHVglm.s:2790   .bss.rdp:0000000000000000 rdp
     /tmp/ccKHVglm.s:2780   .bss.qsize:0000000000000000 qsize
     /tmp/ccKHVglm.s:78     .text.enqueue:0000000000000000 enqueue
     /tmp/ccKHVglm.s:168    .text.dequeue:0000000000000000 dequeue
     /tmp/ccKHVglm.s:255    .text.Thread1:0000000000000000 Thread1
     /tmp/ccKHVglm.s:2760   .data.g_state:0000000000000000 g_state
     /tmp/ccKHVglm.s:1838   .text.button_check:0000000000000000 button_check
     /tmp/ccKHVglm.s:2728   .bss.old_x4.4148:0000000000000000 old_x4.4148
     /tmp/ccKHVglm.s:2743   .bss.old_x1.4142:0000000000000000 old_x1.4142
     /tmp/ccKHVglm.s:2738   .bss.old_x2.4144:0000000000000000 old_x2.4144
     /tmp/ccKHVglm.s:2733   .bss.old_x3.4146:0000000000000000 old_x3.4146
     /tmp/ccKHVglm.s:2059   .text.startup.main:0000000000000000 main
     /tmp/ccKHVglm.s:2748   .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
chMtxObjectInit
chCondObjectInit
chMtxLock
chCondWait
chCondSignal
chMtxUnlock
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
chThdSleep
__tablejump2__
chVTDoResetI
chVTDoSetI
halInit
chSysInit
_pal_lld_setgroupmode
chThdCreateStatic
__do_copy_data
__do_clear_bss
