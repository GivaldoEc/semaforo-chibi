   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb,"ax",@progbits
  11               	.global	vt_cb
  13               	vt_cb:
  14               	.LFB249:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** 
  20:main.c        **** #define QUEUE_SIZE 128
  21:main.c        **** 
  22:main.c        **** /* Definições de pinos*/
  23:main.c        **** // LEDS
  24:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  25:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  26:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  27:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  28:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  29:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  30:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  31:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  32:main.c        **** 
  33:main.c        **** // Botões
  34:main.c        **** #define AMB_PRIM PAL_LINE(IOPORT3, 3)
  35:main.c        **** #define AMB_SEC PAL_LINE(IOPORT3, 5)
  36:main.c        **** #define SEC_FLAG PAL_LINE(IOPORT3, 4)
  37:main.c        **** #define PED_FLAG PAL_LINE(IOPORT3, 2)
  38:main.c        **** 
  39:main.c        **** // Buffer
  40:main.c        **** static msg_t queue[QUEUE_SIZE], *rdp, *wrp;
  41:main.c        **** static size_t qsize;
  42:main.c        **** static mutex_t qmtx;
  43:main.c        **** static condition_variable_t qempty;
  44:main.c        **** static condition_variable_t qfull;
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** void queueInit(void);
  48:main.c        **** void enqueue(msg_t msg);
  49:main.c        **** msg_t dequeue(void);
  50:main.c        **** uint8_t button_check(ioline_t line, uint8_t button);
  51:main.c        **** void vt_cb(void *arg);
  52:main.c        **** 
  53:main.c        **** enum
  54:main.c        **** {
  55:main.c        ****   SECUNDARIO = 1,
  56:main.c        ****   PEDESTRE,
  57:main.c        ****   AMB_PRIMARIO,
  58:main.c        ****   AMB_SECUNDARIO,
  59:main.c        ****   PRIMARIO
  60:main.c        **** };
  61:main.c        **** 
  62:main.c        **** enum
  63:main.c        **** {
  64:main.c        ****   VERDE_AMB_PRIM,
  65:main.c        ****   VERDE_LOCKED_PRIM,
  66:main.c        ****   VERDE_IDLE_PRIM,
  67:main.c        ****   AMARELO_PED_PRIM,
  68:main.c        ****   AMARELO_SEC_PRIM,
  69:main.c        ****   VERDE_AMB_SEC,
  70:main.c        ****   VERDE_LOCKED_SEC,
  71:main.c        ****   AMARELO_PED_SEC,
  72:main.c        ****   AMARELO_PRIM_SEC,
  73:main.c        ****   VERDE_AMB_PED,
  74:main.c        ****   VERDE_LOCKED_PED,
  75:main.c        ****   PISCANDO_SEC,
  76:main.c        ****   PISCANDO_PRIM
  77:main.c        **** };
  78:main.c        **** 
  79:main.c        **** /* Estado inicial */
  80:main.c        **** uint8_t g_state = VERDE_LOCKED_PRIM;
  81:main.c        **** 
  82:main.c        **** /* Flags timers */
  83:main.c        **** uint8_t main_vt_flag = 0;
  84:main.c        **** 
  85:main.c        **** /* Flags ambulancias */
  86:main.c        **** uint8_t flag_amb_prim, flag_amb_sec;
  87:main.c        **** uint8_t prev_state = PEDESTRE;
  88:main.c        **** 
  89:main.c        **** /*
  90:main.c        ****  * LED blinker thread, times are in milliseconds.
  91:main.c        ****  */
  92:main.c        **** 
  93:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  94:main.c        **** static THD_FUNCTION(Thread1, arg)
  95:main.c        **** {
  96:main.c        ****   msg_t ev;
  97:main.c        ****   virtual_timer_t main_vt;
  98:main.c        **** 
  99:main.c        ****   chVTObjectInit(&main_vt);
 100:main.c        ****   
 101:main.c        ****   while (1)
 102:main.c        ****   {
 103:main.c        ****     switch (g_state) {
 104:main.c        ****       case VERDE_LOCKED_PRIM:
 105:main.c        ****         palClearLine(PRIMARIO_VERMELHO);
 106:main.c        ****         palSetLine(PRIMARIO_VERDE);
 107:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 108:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 109:main.c        ****         if (prev_state == SECUNDARIO) {
 110:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 111:main.c        ****           while (!main_vt_flag) {
 112:main.c        ****             if ((*rdp == AMB_PRIMARIO)) {
 113:main.c        ****               flag_amb_prim = !flag_amb_prim;
 114:main.c        ****             }
 115:main.c        ****             chThdSleepMilliseconds(100);
 116:main.c        ****           }
 117:main.c        ****         }
 118:main.c        ****         chVTSet(&main_vt, TIME_MS2I(prev_state == SECUNDARIO ? 5000 : 10000), (vtfunc_t)vt_cb, (voi
 119:main.c        ****         while (!main_vt_flag) {
 120:main.c        ****           if ((*rdp == AMB_SECUNDARIO)) {
 121:main.c        ****             chVTReset(&main_vt);
 122:main.c        ****             main_vt_flag = 1;
 123:main.c        ****           }
 124:main.c        ****           chThdSleepMilliseconds(100);
 125:main.c        ****         }
 126:main.c        ****         main_vt_flag = 0;
 127:main.c        ****         g_state = VERDE_IDLE_PRIM;
 128:main.c        ****         break;
 129:main.c        ****       case VERDE_IDLE_PRIM:
 130:main.c        ****         ev = dequeue();
 131:main.c        ****         if (ev == AMB_PRIMARIO) {
 132:main.c        ****           flag_amb_prim = !flag_amb_prim;
 133:main.c        ****         }
 134:main.c        ****         if ((ev == SECUNDARIO || ev == AMB_SECUNDARIO) &! flag_amb_prim) {
 135:main.c        ****           if (ev == AMB_SECUNDARIO) {
 136:main.c        ****             flag_amb_sec = 1;
 137:main.c        ****           }
 138:main.c        ****           g_state = AMARELO_SEC_PRIM;
 139:main.c        ****           palClearLine(PRIMARIO_VERDE);
 140:main.c        ****         } else if (ev == PEDESTRE &! flag_amb_prim) {
 141:main.c        ****           g_state = AMARELO_PED_PRIM;
 142:main.c        ****           palClearLine(PRIMARIO_VERDE);
 143:main.c        ****         }
 144:main.c        ****         break;
 145:main.c        ****       case AMARELO_SEC_PRIM:
 146:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 147:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 148:main.c        ****         while (!main_vt_flag) {
 149:main.c        ****           chThdSleepMilliseconds(100);
 150:main.c        ****         }
 151:main.c        ****         main_vt_flag = 0;
 152:main.c        ****         g_state = VERDE_LOCKED_SEC;
 153:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 154:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 155:main.c        ****         prev_state = PRIMARIO;
 156:main.c        ****         break;
 157:main.c        ****       case AMARELO_PED_PRIM:
 158:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 159:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 160:main.c        ****         while (!main_vt_flag) {
 161:main.c        ****           chThdSleepMilliseconds(100);
 162:main.c        ****         }
 163:main.c        ****         main_vt_flag = 0;
 164:main.c        ****         g_state = VERDE_LOCKED_PED;
 165:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 166:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 167:main.c        ****         prev_state = PRIMARIO;
 168:main.c        ****         break;
 169:main.c        ****       case VERDE_LOCKED_SEC:
 170:main.c        ****         palClearLine(SECUNDARIO_VERMELHO);
 171:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 172:main.c        ****         if (prev_state == PRIMARIO) {
 173:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 174:main.c        ****           while (!main_vt_flag) {
 175:main.c        ****             if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 176:main.c        ****               dequeue();
 177:main.c        ****               flag_amb_sec = 1;
 178:main.c        ****             } else if ((*rdp == AMB_PRIMARIO) && flag_amb_prim == 0) {
 179:main.c        ****               dequeue();
 180:main.c        ****               flag_amb_prim = 1;
 181:main.c        ****             }
 182:main.c        ****             chThdSleepMilliseconds(100);
 183:main.c        ****           }
 184:main.c        ****         }
 185:main.c        ****         chVTSet(&main_vt, TIME_MS2I((prev_state == PRIMARIO) ? 1000 : 6000), (vtfunc_t)vt_cb, (void
 186:main.c        ****         while (!main_vt_flag) {
 187:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 188:main.c        ****             flag_amb_prim = 1;
 189:main.c        ****             chVTReset(&main_vt);
 190:main.c        ****             main_vt_flag = 1;
 191:main.c        ****           } else if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 192:main.c        ****             dequeue();
 193:main.c        ****             flag_amb_sec = 1;
 194:main.c        ****           }
 195:main.c        ****           chThdSleepMilliseconds(100);
 196:main.c        ****         }
 197:main.c        ****         main_vt_flag = 0;
 198:main.c        ****         while (flag_amb_sec) {
 199:main.c        ****           ev = dequeue();
 200:main.c        ****           if (ev == AMB_SECUNDARIO) {
 201:main.c        ****             flag_amb_sec = 0;
 202:main.c        ****           }
 203:main.c        ****         }
 204:main.c        ****         if (qsize > 0) {
 205:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 206:main.c        ****         }
 207:main.c        ****         if (ev == PEDESTRE &! flag_amb_prim) {
 208:main.c        ****           g_state = AMARELO_PED_SEC;
 209:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 210:main.c        ****         } else {
 211:main.c        ****           g_state = AMARELO_PRIM_SEC;
 212:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 213:main.c        ****         }
 214:main.c        ****         break;
 215:main.c        ****       case AMARELO_PRIM_SEC:
 216:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 217:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 218:main.c        ****         while (!main_vt_flag) {
 219:main.c        ****           chThdSleepMilliseconds(100);
 220:main.c        ****         }
 221:main.c        ****         main_vt_flag = 0;
 222:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 223:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 224:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 225:main.c        ****         prev_state = SECUNDARIO;
 226:main.c        ****         break;
 227:main.c        ****       case AMARELO_PED_SEC:
 228:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 229:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 230:main.c        ****         while (!main_vt_flag) {
 231:main.c        ****           chThdSleepMilliseconds(100);
 232:main.c        ****         }
 233:main.c        ****         main_vt_flag = 0;
 234:main.c        ****         g_state = VERDE_LOCKED_PED;
 235:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 236:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 237:main.c        ****         prev_state = SECUNDARIO;
 238:main.c        ****         break;
 239:main.c        ****       case VERDE_LOCKED_PED:
 240:main.c        ****         palClearLine(PEDESTRE_VERMELHO);
 241:main.c        ****         palSetLine(PEDESTRE_VERDE);
 242:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 243:main.c        ****         while (!main_vt_flag) {
 244:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 245:main.c        ****             flag_amb_prim = 1;
 246:main.c        ****             //chVTReset(&main_vt);
 247:main.c        ****             //main_vt_flag = 1;
 248:main.c        ****           } else if ((*rdp == AMB_SECUNDARIO)) {
 249:main.c        ****             flag_amb_sec = 1;
 250:main.c        ****             //chVTReset(&main_vt);
 251:main.c        ****             //main_vt_flag = 1;
 252:main.c        ****           }
 253:main.c        ****           chThdSleepMilliseconds(100);
 254:main.c        ****         }
 255:main.c        ****         main_vt_flag = 0;
 256:main.c        ****         if (qsize > 0) {
 257:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 258:main.c        ****         }
 259:main.c        ****         if (ev == SECUNDARIO || ev == AMB_SECUNDARIO) {
 260:main.c        ****           g_state = PISCANDO_SEC;
 261:main.c        ****           palClearLine(PEDESTRE_VERDE);
 262:main.c        ****         } else {
 263:main.c        ****           g_state = PISCANDO_PRIM;
 264:main.c        ****           palClearLine(PEDESTRE_VERDE);
 265:main.c        ****         }
 266:main.c        ****         break;
 267:main.c        ****       case PISCANDO_SEC:
 268:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 269:main.c        ****         while (!main_vt_flag) {
 270:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 271:main.c        ****           chThdSleepMilliseconds(125);
 272:main.c        ****         }
 273:main.c        ****         main_vt_flag = 0;
 274:main.c        ****         g_state = VERDE_LOCKED_SEC;
 275:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 276:main.c        ****         prev_state = PEDESTRE;
 277:main.c        ****         break;
 278:main.c        ****       case PISCANDO_PRIM:
 279:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 280:main.c        ****         while (!main_vt_flag) {
 281:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 282:main.c        ****           chThdSleepMilliseconds(125);
 283:main.c        ****         }
 284:main.c        ****         main_vt_flag = 0;
 285:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 286:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 287:main.c        ****         prev_state = PEDESTRE;
 288:main.c        ****         break;
 289:main.c        ****       default:
 290:main.c        ****         palSetLine(PEDESTRE_VERDE);
 291:main.c        ****     }
 292:main.c        ****     chThdSleepMilliseconds(100);
 293:main.c        ****   }
 294:main.c        **** }
 295:main.c        **** 
 296:main.c        **** /*
 297:main.c        ****  * Application entry point.
 298:main.c        ****  */
 299:main.c        **** int main(void)
 300:main.c        **** {
 301:main.c        ****   SerialConfig config = {.sc_brr = UBRR2x(9600),
 302:main.c        ****                          .sc_bits_per_char = USART_CHAR_SIZE_8
 303:main.c        ****   };
 304:main.c        **** 
 305:main.c        ****   queueInit();
 306:main.c        ****   /*
 307:main.c        ****    * System initializations.
 308:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
 309:main.c        ****    *   and performs the board-specific initializations.
 310:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
 311:main.c        ****    *   RTOS is active.
 312:main.c        ****    */
 313:main.c        ****   halInit();
 314:main.c        ****   chSysInit();
 315:main.c        **** 
 316:main.c        ****   sdStart(&SD1, &config);
 317:main.c        **** 
 318:main.c        ****   /* Configuração dos botões */
 319:main.c        ****   palSetLineMode(PED_FLAG, PAL_MODE_INPUT_PULLUP);
 320:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 321:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 322:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 323:main.c        **** 
 324:main.c        ****   // Pedestre
 325:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 326:main.c        ****   palClearLine(PEDESTRE_VERDE);
 327:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 328:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 329:main.c        **** 
 330:main.c        ****   // Primário
 331:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 332:main.c        ****   palClearLine(PRIMARIO_VERDE);
 333:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 334:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 335:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 336:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 337:main.c        **** 
 338:main.c        ****   // Secundário
 339:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 340:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 341:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 342:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 343:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 344:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 345:main.c        **** 
 346:main.c        ****   /*
 347:main.c        ****    * Starts the LED blinker thread.
 348:main.c        ****    */
 349:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 350:main.c        **** 
 351:main.c        ****   while (1)
 352:main.c        ****   {
 353:main.c        ****     if (button_check(AMB_SEC, 1))
 354:main.c        ****     {
 355:main.c        ****       enqueue(AMB_SECUNDARIO);
 356:main.c        ****     }
 357:main.c        ****     else if (button_check(AMB_PRIM, 2))
 358:main.c        ****     {
 359:main.c        ****       enqueue(AMB_PRIMARIO);
 360:main.c        ****     }
 361:main.c        ****     else if (button_check(SEC_FLAG, 3))
 362:main.c        ****     {
 363:main.c        ****       enqueue(SECUNDARIO);
 364:main.c        ****     }
 365:main.c        ****     else if (button_check(PED_FLAG, 4))
 366:main.c        ****     {
 367:main.c        ****       enqueue(PEDESTRE);
 368:main.c        ****     }
 369:main.c        ****     /* Debouncing. */
 370:main.c        ****     chThdSleepMilliseconds(50);
 371:main.c        ****   }
 372:main.c        **** }
 373:main.c        **** 
 374:main.c        **** /*
 375:main.c        ****  * Synchronized queue initialization.
 376:main.c        ****  */
 377:main.c        **** void queueInit(void) {
 378:main.c        ****  
 379:main.c        ****   chMtxObjectInit(&qmtx);
 380:main.c        ****   chCondObjectInit(&qempty);
 381:main.c        ****   chCondObjectInit(&qfull);
 382:main.c        ****  
 383:main.c        ****   rdp = wrp = &queue[0];
 384:main.c        ****   qsize = 0;
 385:main.c        **** }
 386:main.c        **** 
 387:main.c        **** /*
 388:main.c        ****  * Writes a message into the queue, if the queue is full waits
 389:main.c        ****  * for a free slot.
 390:main.c        ****  */
 391:main.c        **** void enqueue(msg_t msg) {
 392:main.c        ****  
 393:main.c        ****   /* Entering monitor.*/
 394:main.c        ****   chMtxLock(&qmtx);
 395:main.c        ****  
 396:main.c        ****   /* Waiting for space in the queue.*/
 397:main.c        ****   while (qsize >= QUEUE_SIZE)
 398:main.c        ****     chCondWait(&qfull);
 399:main.c        ****  
 400:main.c        ****   /* Writing the message in the queue.*/  
 401:main.c        ****   *wrp = msg;
 402:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 403:main.c        ****     wrp = &queue[0];
 404:main.c        ****   qsize++;
 405:main.c        ****  
 406:main.c        ****   /* Signaling that there is at least a message.*/
 407:main.c        ****   chCondSignal(&qempty);
 408:main.c        ****  
 409:main.c        ****   /* Leaving monitor.*/
 410:main.c        ****   chMtxUnlock(&qmtx);
 411:main.c        **** }
 412:main.c        **** 
 413:main.c        **** /*
 414:main.c        ****  * Reads a message from the queue, if the queue is empty waits
 415:main.c        ****  * for a message.
 416:main.c        ****  */
 417:main.c        **** msg_t dequeue(void) {
 418:main.c        ****   msg_t msg;
 419:main.c        ****  
 420:main.c        ****   /* Entering monitor.*/
 421:main.c        ****   chMtxLock(&qmtx);
 422:main.c        ****  
 423:main.c        ****   /* Waiting for messages in the queue.*/
 424:main.c        ****   while (qsize == 0)
 425:main.c        ****     chCondWait(&qempty);
 426:main.c        ****  
 427:main.c        ****   /* Reading the message from the queue.*/  
 428:main.c        ****   msg = *rdp;
 429:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 430:main.c        ****     rdp = &queue[0];
 431:main.c        ****   qsize--;
 432:main.c        ****  
 433:main.c        ****   /* Signaling that there is at least one free slot.*/
 434:main.c        ****   chCondSignal(&qfull);
 435:main.c        ****  
 436:main.c        ****   /* Leaving monitor.*/
 437:main.c        ****   chMtxUnlock(&qmtx);
 438:main.c        ****  
 439:main.c        ****   return msg;
 440:main.c        **** }
 441:main.c        **** 
 442:main.c        **** /* Ficou muito hard coded */
 443:main.c        **** uint8_t button_check(ioline_t line, uint8_t button) {
 444:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 445:main.c        ****   uint8_t w, x;
 446:main.c        **** 
 447:main.c        ****   if (button == 1) {
 448:main.c        ****     x1 = palReadLine(line);
 449:main.c        ****     w = x1^old_x1;
 450:main.c        ****     old_x1 = x1;
 451:main.c        ****     x = x1;
 452:main.c        ****   } else if (button == 2) {
 453:main.c        ****     x2 = palReadLine(line);
 454:main.c        ****     w = x2^old_x2;
 455:main.c        ****     old_x2 = x2;
 456:main.c        ****     x = x2;
 457:main.c        ****   } else if (button == 3) {
 458:main.c        ****     x3 = palReadLine(line);
 459:main.c        ****     w = x3^old_x3;
 460:main.c        ****     old_x3 = x3;
 461:main.c        ****     x = x3;
 462:main.c        ****   } else if (button == 4) {
 463:main.c        ****     x4 = palReadLine(line);
 464:main.c        ****     w = x4^old_x4;
 465:main.c        ****     old_x4 = x4;
 466:main.c        ****     x = x4;
 467:main.c        ****   }
 468:main.c        ****   
 469:main.c        ****   return w &! x;
 470:main.c        **** }
 471:main.c        **** 
 472:main.c        **** void vt_cb(void *arg)
 473:main.c        **** {
  16               		.loc 1 473 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 474:main.c        ****   chSysLockFromISR();
 475:main.c        ****   main_vt_flag = 1;
  23               		.loc 1 475 0
  24 0000 81E0      		ldi r24,lo8(1)
  25               	.LVL1:
  26 0002 8093 0000 		sts main_vt_flag,r24
  27               	/* epilogue start */
 476:main.c        ****   chSysUnlockFromISR();
 477:main.c        **** }
  28               		.loc 1 477 0
  29 0006 0895      		ret
  30               		.cfi_endproc
  31               	.LFE249:
  33               		.section	.text.queueInit,"ax",@progbits
  34               	.global	queueInit
  36               	queueInit:
  37               	.LFB245:
 377:main.c        ****  
  38               		.loc 1 377 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
 379:main.c        ****   chCondObjectInit(&qempty);
  44               		.loc 1 379 0
  45 0000 80E0      		ldi r24,lo8(qmtx)
  46 0002 90E0      		ldi r25,hi8(qmtx)
  47 0004 0E94 0000 		call chMtxObjectInit
  48               	.LVL2:
 380:main.c        ****   chCondObjectInit(&qfull);
  49               		.loc 1 380 0
  50 0008 80E0      		ldi r24,lo8(qempty)
  51 000a 90E0      		ldi r25,hi8(qempty)
  52 000c 0E94 0000 		call chCondObjectInit
  53               	.LVL3:
 381:main.c        ****  
  54               		.loc 1 381 0
  55 0010 80E0      		ldi r24,lo8(qfull)
  56 0012 90E0      		ldi r25,hi8(qfull)
  57 0014 0E94 0000 		call chCondObjectInit
  58               	.LVL4:
 383:main.c        ****   qsize = 0;
  59               		.loc 1 383 0
  60 0018 80E0      		ldi r24,lo8(queue)
  61 001a 90E0      		ldi r25,hi8(queue)
  62 001c 9093 0000 		sts wrp+1,r25
  63 0020 8093 0000 		sts wrp,r24
  64 0024 9093 0000 		sts rdp+1,r25
  65 0028 8093 0000 		sts rdp,r24
 384:main.c        **** }
  66               		.loc 1 384 0
  67 002c 1092 0000 		sts qsize+1,__zero_reg__
  68 0030 1092 0000 		sts qsize,__zero_reg__
  69               	/* epilogue start */
 385:main.c        **** 
  70               		.loc 1 385 0
  71 0034 0895      		ret
  72               		.cfi_endproc
  73               	.LFE245:
  75               		.section	.text.enqueue,"ax",@progbits
  76               	.global	enqueue
  78               	enqueue:
  79               	.LFB246:
 391:main.c        ****  
  80               		.loc 1 391 0
  81               		.cfi_startproc
  82               	.LVL5:
  83 0000 CF93      		push r28
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 28, -2
  87 0002 DF93      		push r29
  88               	.LCFI1:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 29, -3
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 2 */
  94               	.L__stack_usage = 2
  95 0004 EC01      		movw r28,r24
 394:main.c        ****  
  96               		.loc 1 394 0
  97 0006 80E0      		ldi r24,lo8(qmtx)
  98 0008 90E0      		ldi r25,hi8(qmtx)
  99               	.LVL6:
 100 000a 0E94 0000 		call chMtxLock
 101               	.LVL7:
 397:main.c        ****     chCondWait(&qfull);
 102               		.loc 1 397 0
 103 000e 8091 0000 		lds r24,qsize
 104 0012 9091 0000 		lds r25,qsize+1
 105 0016 8038      		cpi r24,-128
 106 0018 9105      		cpc r25,__zero_reg__
 107 001a 00F0      		brlo .L5
 108               	.L6:
 398:main.c        ****  
 109               		.loc 1 398 0
 110 001c 80E0      		ldi r24,lo8(qfull)
 111 001e 90E0      		ldi r25,hi8(qfull)
 112 0020 0E94 0000 		call chCondWait
 113               	.LVL8:
 397:main.c        ****     chCondWait(&qfull);
 114               		.loc 1 397 0
 115 0024 8091 0000 		lds r24,qsize
 116 0028 9091 0000 		lds r25,qsize+1
 117 002c 8038      		cpi r24,-128
 118 002e 9105      		cpc r25,__zero_reg__
 119 0030 00F4      		brsh .L6
 120               	.L5:
 401:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 121               		.loc 1 401 0
 122 0032 E091 0000 		lds r30,wrp
 123 0036 F091 0000 		lds r31,wrp+1
 124 003a C193      		st Z+,r28
 125 003c D193      		st Z+,r29
 402:main.c        ****     wrp = &queue[0];
 126               		.loc 1 402 0
 127 003e 20E0      		ldi r18,hi8(queue+256)
 128 0040 E030      		cpi r30,lo8(queue+256)
 129 0042 F207      		cpc r31,r18
 130 0044 00F0      		brlo .L10
 403:main.c        ****   qsize++;
 131               		.loc 1 403 0
 132 0046 20E0      		ldi r18,lo8(queue)
 133 0048 30E0      		ldi r19,hi8(queue)
 134 004a 3093 0000 		sts wrp+1,r19
 135 004e 2093 0000 		sts wrp,r18
 136               	.L8:
 404:main.c        ****  
 137               		.loc 1 404 0
 138 0052 0196      		adiw r24,1
 139 0054 9093 0000 		sts qsize+1,r25
 140 0058 8093 0000 		sts qsize,r24
 407:main.c        ****  
 141               		.loc 1 407 0
 142 005c 80E0      		ldi r24,lo8(qempty)
 143 005e 90E0      		ldi r25,hi8(qempty)
 144 0060 0E94 0000 		call chCondSignal
 145               	.LVL9:
 410:main.c        **** }
 146               		.loc 1 410 0
 147 0064 80E0      		ldi r24,lo8(qmtx)
 148 0066 90E0      		ldi r25,hi8(qmtx)
 149               	/* epilogue start */
 411:main.c        **** 
 150               		.loc 1 411 0
 151 0068 DF91      		pop r29
 152 006a CF91      		pop r28
 153               	.LVL10:
 410:main.c        **** }
 154               		.loc 1 410 0
 155 006c 0C94 0000 		jmp chMtxUnlock
 156               	.LVL11:
 157               	.L10:
 402:main.c        ****     wrp = &queue[0];
 158               		.loc 1 402 0
 159 0070 F093 0000 		sts wrp+1,r31
 160 0074 E093 0000 		sts wrp,r30
 161 0078 00C0      		rjmp .L8
 162               		.cfi_endproc
 163               	.LFE246:
 165               		.section	.text.dequeue,"ax",@progbits
 166               	.global	dequeue
 168               	dequeue:
 169               	.LFB247:
 417:main.c        ****   msg_t msg;
 170               		.loc 1 417 0
 171               		.cfi_startproc
 172 0000 CF93      		push r28
 173               	.LCFI2:
 174               		.cfi_def_cfa_offset 3
 175               		.cfi_offset 28, -2
 176 0002 DF93      		push r29
 177               	.LCFI3:
 178               		.cfi_def_cfa_offset 4
 179               		.cfi_offset 29, -3
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 2 */
 183               	.L__stack_usage = 2
 421:main.c        ****  
 184               		.loc 1 421 0
 185 0004 80E0      		ldi r24,lo8(qmtx)
 186 0006 90E0      		ldi r25,hi8(qmtx)
 187 0008 0E94 0000 		call chMtxLock
 188               	.LVL12:
 424:main.c        ****     chCondWait(&qempty);
 189               		.loc 1 424 0
 190 000c 8091 0000 		lds r24,qsize
 191 0010 9091 0000 		lds r25,qsize+1
 192 0014 0097      		sbiw r24,0
 193 0016 01F4      		brne .L12
 194               	.L13:
 425:main.c        ****  
 195               		.loc 1 425 0
 196 0018 80E0      		ldi r24,lo8(qempty)
 197 001a 90E0      		ldi r25,hi8(qempty)
 198 001c 0E94 0000 		call chCondWait
 199               	.LVL13:
 424:main.c        ****     chCondWait(&qempty);
 200               		.loc 1 424 0
 201 0020 8091 0000 		lds r24,qsize
 202 0024 9091 0000 		lds r25,qsize+1
 203 0028 0097      		sbiw r24,0
 204 002a 01F0      		breq .L13
 205               	.L12:
 428:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 206               		.loc 1 428 0
 207 002c E091 0000 		lds r30,rdp
 208 0030 F091 0000 		lds r31,rdp+1
 209 0034 C191      		ld r28,Z+
 210 0036 D191      		ld r29,Z+
 211               	.LVL14:
 429:main.c        ****     rdp = &queue[0];
 212               		.loc 1 429 0
 213 0038 20E0      		ldi r18,hi8(queue+256)
 214 003a E030      		cpi r30,lo8(queue+256)
 215 003c F207      		cpc r31,r18
 216 003e 00F0      		brlo .L18
 430:main.c        ****   qsize--;
 217               		.loc 1 430 0
 218 0040 20E0      		ldi r18,lo8(queue)
 219 0042 30E0      		ldi r19,hi8(queue)
 220 0044 3093 0000 		sts rdp+1,r19
 221 0048 2093 0000 		sts rdp,r18
 222               	.L15:
 431:main.c        ****  
 223               		.loc 1 431 0
 224 004c 0197      		sbiw r24,1
 225 004e 9093 0000 		sts qsize+1,r25
 226 0052 8093 0000 		sts qsize,r24
 434:main.c        ****  
 227               		.loc 1 434 0
 228 0056 80E0      		ldi r24,lo8(qfull)
 229 0058 90E0      		ldi r25,hi8(qfull)
 230 005a 0E94 0000 		call chCondSignal
 231               	.LVL15:
 437:main.c        ****  
 232               		.loc 1 437 0
 233 005e 80E0      		ldi r24,lo8(qmtx)
 234 0060 90E0      		ldi r25,hi8(qmtx)
 235 0062 0E94 0000 		call chMtxUnlock
 236               	.LVL16:
 440:main.c        **** 
 237               		.loc 1 440 0
 238 0066 CE01      		movw r24,r28
 239               	/* epilogue start */
 240 0068 DF91      		pop r29
 241 006a CF91      		pop r28
 242               	.LVL17:
 243 006c 0895      		ret
 244               	.LVL18:
 245               	.L18:
 429:main.c        ****     rdp = &queue[0];
 246               		.loc 1 429 0
 247 006e F093 0000 		sts rdp+1,r31
 248 0072 E093 0000 		sts rdp,r30
 249 0076 00C0      		rjmp .L15
 250               		.cfi_endproc
 251               	.LFE247:
 253               		.section	.text.Thread1,"ax",@progbits
 255               	Thread1:
 256               	.LFB243:
  95:main.c        ****   msg_t ev;
 257               		.loc 1 95 0
 258               		.cfi_startproc
 259               	.LVL19:
 260 0000 CF93      		push r28
 261               	.LCFI4:
 262               		.cfi_def_cfa_offset 3
 263               		.cfi_offset 28, -2
 264 0002 DF93      		push r29
 265               	.LCFI5:
 266               		.cfi_def_cfa_offset 4
 267               		.cfi_offset 29, -3
 268 0004 CDB7      		in r28,__SP_L__
 269 0006 DEB7      		in r29,__SP_H__
 270               	.LCFI6:
 271               		.cfi_def_cfa_register 28
 272 0008 6097      		sbiw r28,16
 273               	.LCFI7:
 274               		.cfi_def_cfa_offset 20
 275 000a 0FB6      		in __tmp_reg__,__SREG__
 276 000c F894      		cli
 277 000e DEBF      		out __SP_H__,r29
 278 0010 0FBE      		out __SREG__,__tmp_reg__
 279 0012 CDBF      		out __SP_L__,r28
 280               	/* prologue: function */
 281               	/* frame size = 16 */
 282               	/* stack size = 18 */
 283               	.L__stack_usage = 18
 284               	.LVL20:
 285               	.LBB326:
 286               	.LBB327:
 287               		.file 2 "../../os/rt/include/chvt.h"
   1:../../os/rt/include/chvt.h **** /*
   2:../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chvt.h **** 
   5:../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chvt.h **** 
   7:../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chvt.h **** 
  11:../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chvt.h **** 
  16:../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chvt.h **** */
  19:../../os/rt/include/chvt.h **** 
  20:../../os/rt/include/chvt.h **** /**
  21:../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../os/rt/include/chvt.h ****  *
  24:../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../os/rt/include/chvt.h ****  * @{
  26:../../os/rt/include/chvt.h ****  */
  27:../../os/rt/include/chvt.h **** 
  28:../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../os/rt/include/chvt.h **** 
  31:../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../os/rt/include/chvt.h **** 
  35:../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../os/rt/include/chvt.h **** 
  39:../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../os/rt/include/chvt.h **** 
  43:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../os/rt/include/chvt.h **** #endif
  47:../../os/rt/include/chvt.h **** 
  48:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../os/rt/include/chvt.h **** #endif
  51:../../os/rt/include/chvt.h **** 
  52:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../os/rt/include/chvt.h **** #endif
  55:../../os/rt/include/chvt.h **** 
  56:../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../os/rt/include/chvt.h **** 
  60:../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../os/rt/include/chvt.h **** 
  64:../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../os/rt/include/chvt.h **** 
  68:../../os/rt/include/chvt.h **** /*
  69:../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../os/rt/include/chvt.h ****  */
  71:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../os/rt/include/chvt.h **** extern "C" {
  73:../../os/rt/include/chvt.h **** #endif
  74:../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:../../os/rt/include/chvt.h **** #endif
  85:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  86:../../os/rt/include/chvt.h **** }
  87:../../os/rt/include/chvt.h **** #endif
  88:../../os/rt/include/chvt.h **** 
  89:../../os/rt/include/chvt.h **** /*===========================================================================*/
  90:../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../os/rt/include/chvt.h **** 
  93:../../os/rt/include/chvt.h **** /**
  94:../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:../../os/rt/include/chvt.h ****  *
 100:../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:../../os/rt/include/chvt.h ****  *
 102:../../os/rt/include/chvt.h ****  * @init
 103:../../os/rt/include/chvt.h ****  */
 104:../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:../../os/rt/include/chvt.h **** 
 106:../../os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 288               		.loc 2 106 0
 289 0014 1A82      		std Y+2,__zero_reg__
 290 0016 1982      		std Y+1,__zero_reg__
 291               	.LBE327:
 292               	.LBE326:
 290:main.c        ****     }
 293               		.loc 1 290 0
 294 0018 EE24      		clr r14
 295 001a E394      		inc r14
 296 001c F12C      		mov r15,__zero_reg__
 285:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 297               		.loc 1 285 0
 298 001e BB24      		clr r11
 299 0020 B394      		inc r11
 274:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 300               		.loc 1 274 0
 301 0022 56E0      		ldi r21,lo8(6)
 302 0024 952E      		mov r9,r21
 260:main.c        ****           palClearLine(PEDESTRE_VERDE);
 303               		.loc 1 260 0
 304 0026 6BE0      		ldi r22,lo8(11)
 305 0028 862E      		mov r8,r22
 234:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 306               		.loc 1 234 0
 307 002a 7AE0      		ldi r23,lo8(10)
 308 002c A72E      		mov r10,r23
 211:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 309               		.loc 1 211 0
 310 002e E8E0      		ldi r30,lo8(8)
 311 0030 2E2E      		mov r2,r30
 208:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 312               		.loc 1 208 0
 313 0032 F7E0      		ldi r31,lo8(7)
 314 0034 3F2E      		mov r3,r31
 315 0036 00C0      		rjmp .L97
 316               	.LVL21:
 317               	.L20:
 290:main.c        ****     }
 318               		.loc 1 290 0
 319 0038 63E0      		ldi r22,lo8(3)
 320 003a 83E2      		ldi r24,lo8(35)
 321 003c 90E0      		ldi r25,0
 322 003e 0E94 0000 		call _pal_lld_setlineid
 323               	.LVL22:
 324 0042 0E94 0000 		call _pal_lld_getpadfromline
 325               	.LVL23:
 326 0046 782E      		mov r7,r24
 327 0048 63E0      		ldi r22,lo8(3)
 328 004a 83E2      		ldi r24,lo8(35)
 329 004c 90E0      		ldi r25,0
 330 004e 0E94 0000 		call _pal_lld_setlineid
 331               	.LVL24:
 332 0052 0E94 0000 		call _pal_lld_getportfromline
 333               	.LVL25:
 334 0056 FC01      		movw r30,r24
 335 0058 9281      		ldd r25,Z+2
 336 005a 9701      		movw r18,r14
 337 005c 00C0      		rjmp 2f
 338               		1:
 339 005e 220F      		lsl r18
 340               		2:
 341 0060 7A94      		dec r7
 342 0062 02F4      		brpl 1b
 343 0064 922B      		or r25,r18
 344 0066 9283      		std Z+2,r25
 345               	.L44:
 292:main.c        ****   }
 346               		.loc 1 292 0
 347 0068 6BE1      		ldi r22,lo8(27)
 348 006a 76E0      		ldi r23,lo8(6)
 349 006c 80E0      		ldi r24,0
 350 006e 90E0      		ldi r25,0
 351 0070 0E94 0000 		call chThdSleep
 352               	.LVL26:
 353               	.L97:
 103:main.c        ****       case VERDE_LOCKED_PRIM:
 354               		.loc 1 103 0
 355 0074 E091 0000 		lds r30,g_state
 356 0078 E150      		subi r30,lo8(-(-1))
 357 007a EC30      		cpi r30,lo8(12)
 358 007c 00F4      		brsh .L20
 359 007e F0E0      		ldi r31,0
 360 0080 E050      		subi r30,lo8(-(gs(.L22)))
 361 0082 F040      		sbci r31,hi8(-(gs(.L22)))
 362 0084 0C94 0000 		jmp __tablejump2__
 363               		.p2align	1
 364               	.L22:
 365 0088 0000      		.word gs(.L21)
 366 008a 0000      		.word gs(.L23)
 367 008c 0000      		.word gs(.L24)
 368 008e 0000      		.word gs(.L25)
 369 0090 0000      		.word gs(.L20)
 370 0092 0000      		.word gs(.L26)
 371 0094 0000      		.word gs(.L27)
 372 0096 0000      		.word gs(.L28)
 373 0098 0000      		.word gs(.L20)
 374 009a 0000      		.word gs(.L29)
 375 009c 0000      		.word gs(.L30)
 376 009e 0000      		.word gs(.L31)
 377               	.L31:
 378               	.LVL27:
 379               	.LBB328:
 380               	.LBB329:
 381               	.LBB330:
 382               	.LBB331:
 383               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 384               		.loc 3 430 0
 385               	/* #APP */
 386               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 387 00a0 F894      		cli
 388               	 ;  0 "" 2
 389               	.LVL28:
 390               	/* #NOAPP */
 391               	.LBE331:
 392               	.LBE330:
 393               	.LBE329:
 394               	.LBB332:
 395               	.LBB333:
 396               	.LBB334:
 397               	.LBB335:
 107:../../os/rt/include/chvt.h **** }
 108:../../os/rt/include/chvt.h **** 
 109:../../os/rt/include/chvt.h **** /**
 110:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 111:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:../../os/rt/include/chvt.h ****  *          invocation.
 113:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:../../os/rt/include/chvt.h ****  *          @p systime_t size.
 117:../../os/rt/include/chvt.h ****  *
 118:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:../../os/rt/include/chvt.h ****  *
 120:../../os/rt/include/chvt.h ****  * @xclass
 121:../../os/rt/include/chvt.h ****  */
 122:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:../../os/rt/include/chvt.h **** 
 124:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:../../os/rt/include/chvt.h ****   return port_timer_get_time();
 128:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:../../os/rt/include/chvt.h **** }
 130:../../os/rt/include/chvt.h **** 
 131:../../os/rt/include/chvt.h **** /**
 132:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 133:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:../../os/rt/include/chvt.h ****  *          invocation.
 135:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:../../os/rt/include/chvt.h ****  *
 137:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:../../os/rt/include/chvt.h ****  *
 139:../../os/rt/include/chvt.h ****  * @api
 140:../../os/rt/include/chvt.h ****  */
 141:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:../../os/rt/include/chvt.h ****   systime_t systime;
 143:../../os/rt/include/chvt.h **** 
 144:../../os/rt/include/chvt.h ****   chSysLock();
 145:../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:../../os/rt/include/chvt.h ****   chSysUnlock();
 147:../../os/rt/include/chvt.h **** 
 148:../../os/rt/include/chvt.h ****   return systime;
 149:../../os/rt/include/chvt.h **** }
 150:../../os/rt/include/chvt.h **** 
 151:../../os/rt/include/chvt.h **** /**
 152:../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:../../os/rt/include/chvt.h ****  *
 154:../../os/rt/include/chvt.h ****  * @param[in] start     start time
 155:../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:../../os/rt/include/chvt.h ****  *
 157:../../os/rt/include/chvt.h ****  * @xclass
 158:../../os/rt/include/chvt.h ****  */
 159:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:../../os/rt/include/chvt.h **** 
 161:../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:../../os/rt/include/chvt.h **** }
 163:../../os/rt/include/chvt.h **** 
 164:../../os/rt/include/chvt.h **** /**
 165:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:../../os/rt/include/chvt.h ****  *          window.
 167:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:../../os/rt/include/chvt.h ****  *          time window has zero size.
 169:../../os/rt/include/chvt.h ****  *
 170:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:../../os/rt/include/chvt.h ****  *
 175:../../os/rt/include/chvt.h ****  * @xclass
 176:../../os/rt/include/chvt.h ****  */
 177:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:../../os/rt/include/chvt.h **** 
 179:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:../../os/rt/include/chvt.h **** }
 181:../../os/rt/include/chvt.h **** 
 182:../../os/rt/include/chvt.h **** /**
 183:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:../../os/rt/include/chvt.h ****  *          window.
 185:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:../../os/rt/include/chvt.h ****  *          time window has zero size.
 187:../../os/rt/include/chvt.h ****  *
 188:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:../../os/rt/include/chvt.h ****  *
 193:../../os/rt/include/chvt.h ****  * @api
 194:../../os/rt/include/chvt.h ****  */
 195:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:../../os/rt/include/chvt.h **** 
 197:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:../../os/rt/include/chvt.h **** }
 199:../../os/rt/include/chvt.h **** 
 200:../../os/rt/include/chvt.h **** /**
 201:../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:../../os/rt/include/chvt.h ****  *
 207:../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:../../os/rt/include/chvt.h ****  *
 214:../../os/rt/include/chvt.h ****  * @iclass
 215:../../os/rt/include/chvt.h ****  */
 216:../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:../../os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:../../os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:../../os/rt/include/chvt.h **** 
 220:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:../../os/rt/include/chvt.h **** 
 222:../../os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:../../os/rt/include/chvt.h ****     return false;
 224:../../os/rt/include/chvt.h ****   }
 225:../../os/rt/include/chvt.h **** 
 226:../../os/rt/include/chvt.h ****   if (timep != NULL) {
 227:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:../../os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:../../os/rt/include/chvt.h **** #else
 230:../../os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:../../os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:../../os/rt/include/chvt.h **** #endif
 233:../../os/rt/include/chvt.h ****   }
 234:../../os/rt/include/chvt.h **** 
 235:../../os/rt/include/chvt.h ****   return true;
 236:../../os/rt/include/chvt.h **** }
 237:../../os/rt/include/chvt.h **** 
 238:../../os/rt/include/chvt.h **** /**
 239:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:../../os/rt/include/chvt.h ****  *
 243:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:../../os/rt/include/chvt.h ****  *
 246:../../os/rt/include/chvt.h ****  * @iclass
 247:../../os/rt/include/chvt.h ****  */
 248:../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:../../os/rt/include/chvt.h **** 
 250:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:../../os/rt/include/chvt.h **** 
 252:../../os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:../../os/rt/include/chvt.h **** }
 254:../../os/rt/include/chvt.h **** 
 255:../../os/rt/include/chvt.h **** /**
 256:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:../../os/rt/include/chvt.h ****  *
 260:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:../../os/rt/include/chvt.h ****  *
 263:../../os/rt/include/chvt.h ****  * @api
 264:../../os/rt/include/chvt.h ****  */
 265:../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:../../os/rt/include/chvt.h ****   bool b;
 267:../../os/rt/include/chvt.h **** 
 268:../../os/rt/include/chvt.h ****   chSysLock();
 269:../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:../../os/rt/include/chvt.h ****   chSysUnlock();
 271:../../os/rt/include/chvt.h **** 
 272:../../os/rt/include/chvt.h ****   return b;
 273:../../os/rt/include/chvt.h **** }
 274:../../os/rt/include/chvt.h **** 
 275:../../os/rt/include/chvt.h **** /**
 276:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:../../os/rt/include/chvt.h ****  *
 281:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:../../os/rt/include/chvt.h ****  *
 283:../../os/rt/include/chvt.h ****  * @iclass
 284:../../os/rt/include/chvt.h ****  */
 285:../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:../../os/rt/include/chvt.h **** 
 287:../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 398               		.loc 2 287 0
 399 00a2 8981      		ldd r24,Y+1
 400 00a4 9A81      		ldd r25,Y+2
 401 00a6 892B      		or r24,r25
 402 00a8 01F0      		breq .L94
 288:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 403               		.loc 2 288 0
 404 00aa CE01      		movw r24,r28
 405 00ac 0196      		adiw r24,1
 406 00ae 0E94 0000 		call chVTDoResetI
 407               	.LVL29:
 408               	.L94:
 409               	.LBE335:
 410               	.LBE334:
 289:../../os/rt/include/chvt.h ****   }
 290:../../os/rt/include/chvt.h **** }
 291:../../os/rt/include/chvt.h **** 
 292:../../os/rt/include/chvt.h **** /**
 293:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:../../os/rt/include/chvt.h ****  *
 298:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:../../os/rt/include/chvt.h ****  *
 300:../../os/rt/include/chvt.h ****  * @api
 301:../../os/rt/include/chvt.h ****  */
 302:../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:../../os/rt/include/chvt.h **** 
 304:../../os/rt/include/chvt.h ****   chSysLock();
 305:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:../../os/rt/include/chvt.h ****   chSysUnlock();
 307:../../os/rt/include/chvt.h **** }
 308:../../os/rt/include/chvt.h **** 
 309:../../os/rt/include/chvt.h **** /**
 310:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:../../os/rt/include/chvt.h ****  *          using the new parameters.
 313:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:../../os/rt/include/chvt.h ****  *
 316:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:../../os/rt/include/chvt.h ****  *                        normal time specification.
 321:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:../../os/rt/include/chvt.h ****  *                      .
 323:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../os/rt/include/chvt.h ****  *                      function
 328:../../os/rt/include/chvt.h ****  *
 329:../../os/rt/include/chvt.h ****  * @iclass
 330:../../os/rt/include/chvt.h ****  */
 331:../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:../../os/rt/include/chvt.h **** 
 334:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 411               		.loc 2 335 0
 412 00b2 8E01      		movw r16,r28
 413 00b4 0F5F      		subi r16,-1
 414 00b6 1F4F      		sbci r17,-1
 415 00b8 20E0      		ldi r18,lo8(gs(vt_cb))
 416 00ba 30E0      		ldi r19,hi8(gs(vt_cb))
 417 00bc 40E1      		ldi r20,lo8(16)
 418 00be 5AE7      		ldi r21,lo8(122)
 419 00c0 60E0      		ldi r22,0
 420 00c2 70E0      		ldi r23,0
 421 00c4 C801      		movw r24,r16
 422 00c6 0E94 0000 		call chVTDoSetI
 423               	.LVL30:
 424               	.LBE333:
 425               	.LBE332:
 426               	.LBB336:
 427               	.LBB337:
 428               	.LBB338:
 429               	.LBB339:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 430               		.loc 3 440 0
 431               	/* #APP */
 432               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 433 00ca 7894      		sei
 434               	 ;  0 "" 2
 435               	/* #NOAPP */
 436               	.LBE339:
 437               	.LBE338:
 438               	.LBE337:
 439               	.LBE336:
 440               	.LBE328:
 280:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 441               		.loc 1 280 0
 442 00cc 8091 0000 		lds r24,main_vt_flag
 443 00d0 8111      		cpse r24,__zero_reg__
 444 00d2 00C0      		rjmp .L95
 445               	.L96:
 281:main.c        ****           chThdSleepMilliseconds(125);
 446               		.loc 1 281 0
 447 00d4 62E0      		ldi r22,lo8(2)
 448 00d6 83E2      		ldi r24,lo8(35)
 449 00d8 90E0      		ldi r25,0
 450 00da 0E94 0000 		call _pal_lld_setlineid
 451               	.LVL31:
 452 00de 0E94 0000 		call _pal_lld_getportfromline
 453               	.LVL32:
 454 00e2 FC01      		movw r30,r24
 455 00e4 7280      		ldd r7,Z+2
 456 00e6 62E0      		ldi r22,lo8(2)
 457 00e8 83E2      		ldi r24,lo8(35)
 458 00ea 90E0      		ldi r25,0
 459 00ec 0E94 0000 		call _pal_lld_setlineid
 460               	.LVL33:
 461 00f0 0E94 0000 		call _pal_lld_getpadfromline
 462               	.LVL34:
 463 00f4 682E      		mov r6,r24
 464 00f6 62E0      		ldi r22,lo8(2)
 465 00f8 83E2      		ldi r24,lo8(35)
 466 00fa 90E0      		ldi r25,0
 467 00fc 0E94 0000 		call _pal_lld_setlineid
 468               	.LVL35:
 469 0100 0E94 0000 		call _pal_lld_getportfromline
 470               	.LVL36:
 471 0104 9701      		movw r18,r14
 472 0106 00C0      		rjmp 2f
 473               		1:
 474 0108 220F      		lsl r18
 475               		2:
 476 010a 6A94      		dec r6
 477 010c 02F4      		brpl 1b
 478 010e 7226      		eor r7,r18
 479 0110 FC01      		movw r30,r24
 480 0112 7282      		std Z+2,r7
 282:main.c        ****         }
 481               		.loc 1 282 0
 482 0114 61EA      		ldi r22,lo8(-95)
 483 0116 77E0      		ldi r23,lo8(7)
 484 0118 80E0      		ldi r24,0
 485 011a 90E0      		ldi r25,0
 486 011c 0E94 0000 		call chThdSleep
 487               	.LVL37:
 280:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 488               		.loc 1 280 0
 489 0120 8091 0000 		lds r24,main_vt_flag
 490 0124 8823      		tst r24
 491 0126 01F0      		breq .L96
 492               	.L95:
 284:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 493               		.loc 1 284 0
 494 0128 1092 0000 		sts main_vt_flag,__zero_reg__
 285:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 495               		.loc 1 285 0
 496 012c B092 0000 		sts g_state,r11
 497               	.LVL38:
 498               	.L203:
 286:main.c        ****         prev_state = PEDESTRE;
 499               		.loc 1 286 0
 500 0130 62E0      		ldi r22,lo8(2)
 501 0132 83E2      		ldi r24,lo8(35)
 502 0134 90E0      		ldi r25,0
 503 0136 0E94 0000 		call _pal_lld_setlineid
 504               	.LVL39:
 505 013a 0E94 0000 		call _pal_lld_getpadfromline
 506               	.LVL40:
 507 013e 782E      		mov r7,r24
 508 0140 62E0      		ldi r22,lo8(2)
 509 0142 83E2      		ldi r24,lo8(35)
 510 0144 90E0      		ldi r25,0
 511 0146 0E94 0000 		call _pal_lld_setlineid
 512               	.LVL41:
 513 014a 0E94 0000 		call _pal_lld_getportfromline
 514               	.LVL42:
 515 014e FC01      		movw r30,r24
 516 0150 9281      		ldd r25,Z+2
 517 0152 9701      		movw r18,r14
 518 0154 00C0      		rjmp 2f
 519               		1:
 520 0156 220F      		lsl r18
 521               		2:
 522 0158 7A94      		dec r7
 523 015a 02F4      		brpl 1b
 524 015c 922B      		or r25,r18
 525 015e 9283      		std Z+2,r25
 287:main.c        ****         break;
 526               		.loc 1 287 0
 527 0160 82E0      		ldi r24,lo8(2)
 528 0162 8093 0000 		sts prev_state,r24
 288:main.c        ****       default:
 529               		.loc 1 288 0
 530 0166 00C0      		rjmp .L44
 531               	.LVL43:
 532               	.L30:
 533               	.LBB340:
 534               	.LBB341:
 535               	.LBB342:
 536               	.LBB343:
 430:../../os/common/ports/AVR/chcore.h **** }
 537               		.loc 3 430 0
 538               	/* #APP */
 539               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 540 0168 F894      		cli
 541               	 ;  0 "" 2
 542               	.LVL44:
 543               	/* #NOAPP */
 544               	.LBE343:
 545               	.LBE342:
 546               	.LBE341:
 547               	.LBB344:
 548               	.LBB345:
 549               	.LBB346:
 550               	.LBB347:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 551               		.loc 2 287 0
 552 016a 8981      		ldd r24,Y+1
 553 016c 9A81      		ldd r25,Y+2
 554 016e 892B      		or r24,r25
 555 0170 01F0      		breq .L91
 288:../../os/rt/include/chvt.h ****   }
 556               		.loc 2 288 0
 557 0172 CE01      		movw r24,r28
 558 0174 0196      		adiw r24,1
 559 0176 0E94 0000 		call chVTDoResetI
 560               	.LVL45:
 561               	.L91:
 562               	.LBE347:
 563               	.LBE346:
 564               		.loc 2 335 0
 565 017a 8E01      		movw r16,r28
 566 017c 0F5F      		subi r16,-1
 567 017e 1F4F      		sbci r17,-1
 568 0180 20E0      		ldi r18,lo8(gs(vt_cb))
 569 0182 30E0      		ldi r19,hi8(gs(vt_cb))
 570 0184 40E1      		ldi r20,lo8(16)
 571 0186 5AE7      		ldi r21,lo8(122)
 572 0188 60E0      		ldi r22,0
 573 018a 70E0      		ldi r23,0
 574 018c C801      		movw r24,r16
 575 018e 0E94 0000 		call chVTDoSetI
 576               	.LVL46:
 577               	.LBE345:
 578               	.LBE344:
 579               	.LBB348:
 580               	.LBB349:
 581               	.LBB350:
 582               	.LBB351:
 583               		.loc 3 440 0
 584               	/* #APP */
 585               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 586 0192 7894      		sei
 587               	 ;  0 "" 2
 588               	/* #NOAPP */
 589               	.LBE351:
 590               	.LBE350:
 591               	.LBE349:
 592               	.LBE348:
 593               	.LBE340:
 269:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 594               		.loc 1 269 0
 595 0194 8091 0000 		lds r24,main_vt_flag
 596 0198 8111      		cpse r24,__zero_reg__
 597 019a 00C0      		rjmp .L92
 598               	.L93:
 270:main.c        ****           chThdSleepMilliseconds(125);
 599               		.loc 1 270 0
 600 019c 62E0      		ldi r22,lo8(2)
 601 019e 83E2      		ldi r24,lo8(35)
 602 01a0 90E0      		ldi r25,0
 603 01a2 0E94 0000 		call _pal_lld_setlineid
 604               	.LVL47:
 605 01a6 0E94 0000 		call _pal_lld_getportfromline
 606               	.LVL48:
 607 01aa FC01      		movw r30,r24
 608 01ac 7280      		ldd r7,Z+2
 609 01ae 62E0      		ldi r22,lo8(2)
 610 01b0 83E2      		ldi r24,lo8(35)
 611 01b2 90E0      		ldi r25,0
 612 01b4 0E94 0000 		call _pal_lld_setlineid
 613               	.LVL49:
 614 01b8 0E94 0000 		call _pal_lld_getpadfromline
 615               	.LVL50:
 616 01bc 682E      		mov r6,r24
 617 01be 62E0      		ldi r22,lo8(2)
 618 01c0 83E2      		ldi r24,lo8(35)
 619 01c2 90E0      		ldi r25,0
 620 01c4 0E94 0000 		call _pal_lld_setlineid
 621               	.LVL51:
 622 01c8 0E94 0000 		call _pal_lld_getportfromline
 623               	.LVL52:
 624 01cc 9701      		movw r18,r14
 625 01ce 00C0      		rjmp 2f
 626               		1:
 627 01d0 220F      		lsl r18
 628               		2:
 629 01d2 6A94      		dec r6
 630 01d4 02F4      		brpl 1b
 631 01d6 7226      		eor r7,r18
 632 01d8 FC01      		movw r30,r24
 633 01da 7282      		std Z+2,r7
 271:main.c        ****         }
 634               		.loc 1 271 0
 635 01dc 61EA      		ldi r22,lo8(-95)
 636 01de 77E0      		ldi r23,lo8(7)
 637 01e0 80E0      		ldi r24,0
 638 01e2 90E0      		ldi r25,0
 639 01e4 0E94 0000 		call chThdSleep
 640               	.LVL53:
 269:main.c        ****           palToggleLine(PEDESTRE_VERMELHO);
 641               		.loc 1 269 0
 642 01e8 8091 0000 		lds r24,main_vt_flag
 643 01ec 8823      		tst r24
 644 01ee 01F0      		breq .L93
 645               	.L92:
 273:main.c        ****         g_state = VERDE_LOCKED_SEC;
 646               		.loc 1 273 0
 647 01f0 1092 0000 		sts main_vt_flag,__zero_reg__
 274:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 648               		.loc 1 274 0
 649 01f4 9092 0000 		sts g_state,r9
 650 01f8 00C0      		rjmp .L203
 651               	.LVL54:
 652               	.L29:
 240:main.c        ****         palSetLine(PEDESTRE_VERDE);
 653               		.loc 1 240 0
 654 01fa 62E0      		ldi r22,lo8(2)
 655 01fc 83E2      		ldi r24,lo8(35)
 656 01fe 90E0      		ldi r25,0
 657 0200 0E94 0000 		call _pal_lld_setlineid
 658               	.LVL55:
 659 0204 0E94 0000 		call _pal_lld_getpadfromline
 660               	.LVL56:
 661 0208 782E      		mov r7,r24
 662 020a 62E0      		ldi r22,lo8(2)
 663 020c 83E2      		ldi r24,lo8(35)
 664 020e 90E0      		ldi r25,0
 665 0210 0E94 0000 		call _pal_lld_setlineid
 666               	.LVL57:
 667 0214 0E94 0000 		call _pal_lld_getportfromline
 668               	.LVL58:
 669 0218 FC01      		movw r30,r24
 670 021a 9281      		ldd r25,Z+2
 671 021c 9701      		movw r18,r14
 672 021e 00C0      		rjmp 2f
 673               		1:
 674 0220 220F      		lsl r18
 675 0222 331F      		rol r19
 676               		2:
 677 0224 7A94      		dec r7
 678 0226 02F4      		brpl 1b
 679 0228 2095      		com r18
 680 022a 3095      		com r19
 681 022c 9223      		and r25,r18
 682 022e 9283      		std Z+2,r25
 241:main.c        ****         chVTSet(&main_vt, TIME_MS2I(3000), (vtfunc_t)vt_cb, (void *)&main_vt);
 683               		.loc 1 241 0
 684 0230 63E0      		ldi r22,lo8(3)
 685 0232 83E2      		ldi r24,lo8(35)
 686 0234 90E0      		ldi r25,0
 687 0236 0E94 0000 		call _pal_lld_setlineid
 688               	.LVL59:
 689 023a 0E94 0000 		call _pal_lld_getpadfromline
 690               	.LVL60:
 691 023e 782E      		mov r7,r24
 692 0240 63E0      		ldi r22,lo8(3)
 693 0242 83E2      		ldi r24,lo8(35)
 694 0244 90E0      		ldi r25,0
 695 0246 0E94 0000 		call _pal_lld_setlineid
 696               	.LVL61:
 697 024a 0E94 0000 		call _pal_lld_getportfromline
 698               	.LVL62:
 699 024e FC01      		movw r30,r24
 700 0250 9281      		ldd r25,Z+2
 701 0252 9701      		movw r18,r14
 702 0254 00C0      		rjmp 2f
 703               		1:
 704 0256 220F      		lsl r18
 705               		2:
 706 0258 7A94      		dec r7
 707 025a 02F4      		brpl 1b
 708 025c 922B      		or r25,r18
 709 025e 9283      		std Z+2,r25
 710               	.LVL63:
 711               	.LBB352:
 712               	.LBB353:
 713               	.LBB354:
 714               	.LBB355:
 430:../../os/common/ports/AVR/chcore.h **** }
 715               		.loc 3 430 0
 716               	/* #APP */
 717               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 718 0260 F894      		cli
 719               	 ;  0 "" 2
 720               	.LVL64:
 721               	/* #NOAPP */
 722               	.LBE355:
 723               	.LBE354:
 724               	.LBE353:
 725               	.LBB356:
 726               	.LBB357:
 727               	.LBB358:
 728               	.LBB359:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 729               		.loc 2 287 0
 730 0262 8981      		ldd r24,Y+1
 731 0264 9A81      		ldd r25,Y+2
 732 0266 892B      		or r24,r25
 733 0268 01F0      		breq .L83
 288:../../os/rt/include/chvt.h ****   }
 734               		.loc 2 288 0
 735 026a CE01      		movw r24,r28
 736 026c 0196      		adiw r24,1
 737 026e 0E94 0000 		call chVTDoResetI
 738               	.LVL65:
 739               	.L83:
 740               	.LBE359:
 741               	.LBE358:
 742               		.loc 2 335 0
 743 0272 8E01      		movw r16,r28
 744 0274 0F5F      		subi r16,-1
 745 0276 1F4F      		sbci r17,-1
 746 0278 20E0      		ldi r18,lo8(gs(vt_cb))
 747 027a 30E0      		ldi r19,hi8(gs(vt_cb))
 748 027c 48E1      		ldi r20,lo8(24)
 749 027e 57EB      		ldi r21,lo8(-73)
 750 0280 60E0      		ldi r22,0
 751 0282 70E0      		ldi r23,0
 752 0284 C801      		movw r24,r16
 753 0286 0E94 0000 		call chVTDoSetI
 754               	.LVL66:
 755               	.LBE357:
 756               	.LBE356:
 757               	.LBB360:
 758               	.LBB361:
 759               	.LBB362:
 760               	.LBB363:
 761               		.loc 3 440 0
 762               	/* #APP */
 763               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 764 028a 7894      		sei
 765               	 ;  0 "" 2
 766               	/* #NOAPP */
 767               	.LBE363:
 768               	.LBE362:
 769               	.LBE361:
 770               	.LBE360:
 771               	.LBE352:
 243:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 772               		.loc 1 243 0
 773 028c 8091 0000 		lds r24,main_vt_flag
 774 0290 8823      		tst r24
 775 0292 01F0      		breq .L87
 776 0294 00C0      		rjmp .L84
 777               	.L85:
 248:main.c        ****             flag_amb_sec = 1;
 778               		.loc 1 248 0
 779 0296 0497      		sbiw r24,4
 780 0298 01F4      		brne .L86
 249:main.c        ****             //chVTReset(&main_vt);
 781               		.loc 1 249 0
 782 029a B092 0000 		sts flag_amb_sec,r11
 783               	.L86:
 253:main.c        ****         }
 784               		.loc 1 253 0
 785 029e 6BE1      		ldi r22,lo8(27)
 786 02a0 76E0      		ldi r23,lo8(6)
 787 02a2 80E0      		ldi r24,0
 788 02a4 90E0      		ldi r25,0
 789 02a6 0E94 0000 		call chThdSleep
 790               	.LVL67:
 243:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 791               		.loc 1 243 0
 792 02aa 8091 0000 		lds r24,main_vt_flag
 793 02ae 8111      		cpse r24,__zero_reg__
 794 02b0 00C0      		rjmp .L84
 795               	.L87:
 244:main.c        ****             flag_amb_prim = 1;
 796               		.loc 1 244 0
 797 02b2 E091 0000 		lds r30,rdp
 798 02b6 F091 0000 		lds r31,rdp+1
 799 02ba 8081      		ld r24,Z
 800 02bc 9181      		ldd r25,Z+1
 801 02be 8330      		cpi r24,3
 802 02c0 9105      		cpc r25,__zero_reg__
 803 02c2 01F4      		brne .L85
 245:main.c        ****             //chVTReset(&main_vt);
 804               		.loc 1 245 0
 805 02c4 B092 0000 		sts flag_amb_prim,r11
 806 02c8 00C0      		rjmp .L86
 807               	.LVL68:
 808               	.L28:
 216:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 809               		.loc 1 216 0
 810 02ca 65E0      		ldi r22,lo8(5)
 811 02cc 89E2      		ldi r24,lo8(41)
 812 02ce 90E0      		ldi r25,0
 813 02d0 0E94 0000 		call _pal_lld_setlineid
 814               	.LVL69:
 815 02d4 0E94 0000 		call _pal_lld_getpadfromline
 816               	.LVL70:
 817 02d8 782E      		mov r7,r24
 818 02da 65E0      		ldi r22,lo8(5)
 819 02dc 89E2      		ldi r24,lo8(41)
 820 02de 90E0      		ldi r25,0
 821 02e0 0E94 0000 		call _pal_lld_setlineid
 822               	.LVL71:
 823 02e4 0E94 0000 		call _pal_lld_getportfromline
 824               	.LVL72:
 825 02e8 FC01      		movw r30,r24
 826 02ea 9281      		ldd r25,Z+2
 827 02ec 9701      		movw r18,r14
 828 02ee 00C0      		rjmp 2f
 829               		1:
 830 02f0 220F      		lsl r18
 831               		2:
 832 02f2 7A94      		dec r7
 833 02f4 02F4      		brpl 1b
 834 02f6 922B      		or r25,r18
 835 02f8 9283      		std Z+2,r25
 836               	.LVL73:
 837               	.LBB364:
 838               	.LBB365:
 839               	.LBB366:
 840               	.LBB367:
 430:../../os/common/ports/AVR/chcore.h **** }
 841               		.loc 3 430 0
 842               	/* #APP */
 843               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 844 02fa F894      		cli
 845               	 ;  0 "" 2
 846               	.LVL74:
 847               	/* #NOAPP */
 848               	.LBE367:
 849               	.LBE366:
 850               	.LBE365:
 851               	.LBB368:
 852               	.LBB369:
 853               	.LBB370:
 854               	.LBB371:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 855               		.loc 2 287 0
 856 02fc 8981      		ldd r24,Y+1
 857 02fe 9A81      		ldd r25,Y+2
 858 0300 892B      		or r24,r25
 859 0302 01F0      		breq .L77
 288:../../os/rt/include/chvt.h ****   }
 860               		.loc 2 288 0
 861 0304 CE01      		movw r24,r28
 862 0306 0196      		adiw r24,1
 863 0308 0E94 0000 		call chVTDoResetI
 864               	.LVL75:
 865               	.L77:
 866               	.LBE371:
 867               	.LBE370:
 868               		.loc 2 335 0
 869 030c 8E01      		movw r16,r28
 870 030e 0F5F      		subi r16,-1
 871 0310 1F4F      		sbci r17,-1
 872 0312 20E0      		ldi r18,lo8(gs(vt_cb))
 873 0314 30E0      		ldi r19,hi8(gs(vt_cb))
 874 0316 40E1      		ldi r20,lo8(16)
 875 0318 5AE7      		ldi r21,lo8(122)
 876 031a 60E0      		ldi r22,0
 877 031c 70E0      		ldi r23,0
 878 031e C801      		movw r24,r16
 879 0320 0E94 0000 		call chVTDoSetI
 880               	.LVL76:
 881               	.LBE369:
 882               	.LBE368:
 883               	.LBB372:
 884               	.LBB373:
 885               	.LBB374:
 886               	.LBB375:
 887               		.loc 3 440 0
 888               	/* #APP */
 889               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 890 0324 7894      		sei
 891               	 ;  0 "" 2
 892               	/* #NOAPP */
 893               	.LBE375:
 894               	.LBE374:
 895               	.LBE373:
 896               	.LBE372:
 897               	.LBE364:
 218:main.c        ****           chThdSleepMilliseconds(100);
 898               		.loc 1 218 0
 899 0326 8091 0000 		lds r24,main_vt_flag
 900 032a 8111      		cpse r24,__zero_reg__
 901 032c 00C0      		rjmp .L78
 902               	.L79:
 219:main.c        ****         }
 903               		.loc 1 219 0
 904 032e 6BE1      		ldi r22,lo8(27)
 905 0330 76E0      		ldi r23,lo8(6)
 906 0332 80E0      		ldi r24,0
 907 0334 90E0      		ldi r25,0
 908 0336 0E94 0000 		call chThdSleep
 909               	.LVL77:
 218:main.c        ****           chThdSleepMilliseconds(100);
 910               		.loc 1 218 0
 911 033a 8091 0000 		lds r24,main_vt_flag
 912 033e 8823      		tst r24
 913 0340 01F0      		breq .L79
 914               	.L78:
 221:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 915               		.loc 1 221 0
 916 0342 1092 0000 		sts main_vt_flag,__zero_reg__
 222:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 917               		.loc 1 222 0
 918 0346 B092 0000 		sts g_state,r11
 919               	.LVL78:
 920               	.L201:
 235:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 921               		.loc 1 235 0
 922 034a 65E0      		ldi r22,lo8(5)
 923 034c 89E2      		ldi r24,lo8(41)
 924 034e 90E0      		ldi r25,0
 925 0350 0E94 0000 		call _pal_lld_setlineid
 926               	.LVL79:
 927 0354 0E94 0000 		call _pal_lld_getpadfromline
 928               	.LVL80:
 929 0358 782E      		mov r7,r24
 930 035a 65E0      		ldi r22,lo8(5)
 931 035c 89E2      		ldi r24,lo8(41)
 932 035e 90E0      		ldi r25,0
 933 0360 0E94 0000 		call _pal_lld_setlineid
 934               	.LVL81:
 935 0364 0E94 0000 		call _pal_lld_getportfromline
 936               	.LVL82:
 937 0368 FC01      		movw r30,r24
 938 036a 9281      		ldd r25,Z+2
 939 036c 9701      		movw r18,r14
 940 036e 00C0      		rjmp 2f
 941               		1:
 942 0370 220F      		lsl r18
 943 0372 331F      		rol r19
 944               		2:
 945 0374 7A94      		dec r7
 946 0376 02F4      		brpl 1b
 947 0378 2095      		com r18
 948 037a 3095      		com r19
 949 037c 9223      		and r25,r18
 950 037e 9283      		std Z+2,r25
 236:main.c        ****         prev_state = SECUNDARIO;
 951               		.loc 1 236 0
 952 0380 60E0      		ldi r22,0
 953 0382 83E2      		ldi r24,lo8(35)
 954 0384 90E0      		ldi r25,0
 955 0386 0E94 0000 		call _pal_lld_setlineid
 956               	.LVL83:
 957 038a 0E94 0000 		call _pal_lld_getpadfromline
 958               	.LVL84:
 959 038e 782E      		mov r7,r24
 960 0390 60E0      		ldi r22,0
 961 0392 83E2      		ldi r24,lo8(35)
 962 0394 90E0      		ldi r25,0
 963 0396 0E94 0000 		call _pal_lld_setlineid
 964               	.LVL85:
 965 039a 0E94 0000 		call _pal_lld_getportfromline
 966               	.LVL86:
 967 039e FC01      		movw r30,r24
 968 03a0 9281      		ldd r25,Z+2
 969 03a2 9701      		movw r18,r14
 970 03a4 00C0      		rjmp 2f
 971               		1:
 972 03a6 220F      		lsl r18
 973               		2:
 974 03a8 7A94      		dec r7
 975 03aa 02F4      		brpl 1b
 976 03ac 922B      		or r25,r18
 977 03ae 9283      		std Z+2,r25
 237:main.c        ****         break;
 978               		.loc 1 237 0
 979 03b0 B092 0000 		sts prev_state,r11
 238:main.c        ****       case VERDE_LOCKED_PED:
 980               		.loc 1 238 0
 981 03b4 00C0      		rjmp .L44
 982               	.LVL87:
 983               	.L27:
 228:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 984               		.loc 1 228 0
 985 03b6 65E0      		ldi r22,lo8(5)
 986 03b8 89E2      		ldi r24,lo8(41)
 987 03ba 90E0      		ldi r25,0
 988 03bc 0E94 0000 		call _pal_lld_setlineid
 989               	.LVL88:
 990 03c0 0E94 0000 		call _pal_lld_getpadfromline
 991               	.LVL89:
 992 03c4 782E      		mov r7,r24
 993 03c6 65E0      		ldi r22,lo8(5)
 994 03c8 89E2      		ldi r24,lo8(41)
 995 03ca 90E0      		ldi r25,0
 996 03cc 0E94 0000 		call _pal_lld_setlineid
 997               	.LVL90:
 998 03d0 0E94 0000 		call _pal_lld_getportfromline
 999               	.LVL91:
 1000 03d4 FC01      		movw r30,r24
 1001 03d6 9281      		ldd r25,Z+2
 1002 03d8 9701      		movw r18,r14
 1003 03da 00C0      		rjmp 2f
 1004               		1:
 1005 03dc 220F      		lsl r18
 1006               		2:
 1007 03de 7A94      		dec r7
 1008 03e0 02F4      		brpl 1b
 1009 03e2 922B      		or r25,r18
 1010 03e4 9283      		std Z+2,r25
 1011               	.LVL92:
 1012               	.LBB376:
 1013               	.LBB377:
 1014               	.LBB378:
 1015               	.LBB379:
 430:../../os/common/ports/AVR/chcore.h **** }
 1016               		.loc 3 430 0
 1017               	/* #APP */
 1018               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1019 03e6 F894      		cli
 1020               	 ;  0 "" 2
 1021               	.LVL93:
 1022               	/* #NOAPP */
 1023               	.LBE379:
 1024               	.LBE378:
 1025               	.LBE377:
 1026               	.LBB380:
 1027               	.LBB381:
 1028               	.LBB382:
 1029               	.LBB383:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1030               		.loc 2 287 0
 1031 03e8 8981      		ldd r24,Y+1
 1032 03ea 9A81      		ldd r25,Y+2
 1033 03ec 892B      		or r24,r25
 1034 03ee 01F0      		breq .L80
 288:../../os/rt/include/chvt.h ****   }
 1035               		.loc 2 288 0
 1036 03f0 CE01      		movw r24,r28
 1037 03f2 0196      		adiw r24,1
 1038 03f4 0E94 0000 		call chVTDoResetI
 1039               	.LVL94:
 1040               	.L80:
 1041               	.LBE383:
 1042               	.LBE382:
 1043               		.loc 2 335 0
 1044 03f8 8E01      		movw r16,r28
 1045 03fa 0F5F      		subi r16,-1
 1046 03fc 1F4F      		sbci r17,-1
 1047 03fe 20E0      		ldi r18,lo8(gs(vt_cb))
 1048 0400 30E0      		ldi r19,hi8(gs(vt_cb))
 1049 0402 40E1      		ldi r20,lo8(16)
 1050 0404 5AE7      		ldi r21,lo8(122)
 1051 0406 60E0      		ldi r22,0
 1052 0408 70E0      		ldi r23,0
 1053 040a C801      		movw r24,r16
 1054 040c 0E94 0000 		call chVTDoSetI
 1055               	.LVL95:
 1056               	.LBE381:
 1057               	.LBE380:
 1058               	.LBB384:
 1059               	.LBB385:
 1060               	.LBB386:
 1061               	.LBB387:
 1062               		.loc 3 440 0
 1063               	/* #APP */
 1064               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1065 0410 7894      		sei
 1066               	 ;  0 "" 2
 1067               	/* #NOAPP */
 1068               	.LBE387:
 1069               	.LBE386:
 1070               	.LBE385:
 1071               	.LBE384:
 1072               	.LBE376:
 230:main.c        ****           chThdSleepMilliseconds(100);
 1073               		.loc 1 230 0
 1074 0412 8091 0000 		lds r24,main_vt_flag
 1075 0416 8111      		cpse r24,__zero_reg__
 1076 0418 00C0      		rjmp .L81
 1077               	.L82:
 231:main.c        ****         }
 1078               		.loc 1 231 0
 1079 041a 6BE1      		ldi r22,lo8(27)
 1080 041c 76E0      		ldi r23,lo8(6)
 1081 041e 80E0      		ldi r24,0
 1082 0420 90E0      		ldi r25,0
 1083 0422 0E94 0000 		call chThdSleep
 1084               	.LVL96:
 230:main.c        ****           chThdSleepMilliseconds(100);
 1085               		.loc 1 230 0
 1086 0426 8091 0000 		lds r24,main_vt_flag
 1087 042a 8823      		tst r24
 1088 042c 01F0      		breq .L82
 1089               	.L81:
 233:main.c        ****         g_state = VERDE_LOCKED_PED;
 1090               		.loc 1 233 0
 1091 042e 1092 0000 		sts main_vt_flag,__zero_reg__
 234:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 1092               		.loc 1 234 0
 1093 0432 A092 0000 		sts g_state,r10
 1094 0436 00C0      		rjmp .L201
 1095               	.LVL97:
 1096               	.L26:
 170:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 1097               		.loc 1 170 0
 1098 0438 60E0      		ldi r22,0
 1099 043a 83E2      		ldi r24,lo8(35)
 1100 043c 90E0      		ldi r25,0
 1101 043e 0E94 0000 		call _pal_lld_setlineid
 1102               	.LVL98:
 1103 0442 0E94 0000 		call _pal_lld_getpadfromline
 1104               	.LVL99:
 1105 0446 782E      		mov r7,r24
 1106 0448 60E0      		ldi r22,0
 1107 044a 83E2      		ldi r24,lo8(35)
 1108 044c 90E0      		ldi r25,0
 1109 044e 0E94 0000 		call _pal_lld_setlineid
 1110               	.LVL100:
 1111 0452 0E94 0000 		call _pal_lld_getportfromline
 1112               	.LVL101:
 1113 0456 FC01      		movw r30,r24
 1114 0458 9281      		ldd r25,Z+2
 1115 045a 9701      		movw r18,r14
 1116 045c 00C0      		rjmp 2f
 1117               		1:
 1118 045e 220F      		lsl r18
 1119 0460 331F      		rol r19
 1120               		2:
 1121 0462 7A94      		dec r7
 1122 0464 02F4      		brpl 1b
 1123 0466 2095      		com r18
 1124 0468 3095      		com r19
 1125 046a 9223      		and r25,r18
 1126 046c 9283      		std Z+2,r25
 171:main.c        ****         if (prev_state == PRIMARIO) {
 1127               		.loc 1 171 0
 1128 046e 61E0      		ldi r22,lo8(1)
 1129 0470 83E2      		ldi r24,lo8(35)
 1130 0472 90E0      		ldi r25,0
 1131 0474 0E94 0000 		call _pal_lld_setlineid
 1132               	.LVL102:
 1133 0478 0E94 0000 		call _pal_lld_getpadfromline
 1134               	.LVL103:
 1135 047c 782E      		mov r7,r24
 1136 047e 61E0      		ldi r22,lo8(1)
 1137 0480 83E2      		ldi r24,lo8(35)
 1138 0482 90E0      		ldi r25,0
 1139 0484 0E94 0000 		call _pal_lld_setlineid
 1140               	.LVL104:
 1141 0488 0E94 0000 		call _pal_lld_getportfromline
 1142               	.LVL105:
 1143 048c FC01      		movw r30,r24
 1144 048e 9281      		ldd r25,Z+2
 1145 0490 9701      		movw r18,r14
 1146 0492 00C0      		rjmp 2f
 1147               		1:
 1148 0494 220F      		lsl r18
 1149               		2:
 1150 0496 7A94      		dec r7
 1151 0498 02F4      		brpl 1b
 1152 049a 922B      		or r25,r18
 1153 049c 9283      		std Z+2,r25
 172:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1154               		.loc 1 172 0
 1155 049e 8091 0000 		lds r24,prev_state
 1156 04a2 8530      		cpi r24,lo8(5)
 1157 04a4 01F4      		brne .+2
 1158 04a6 00C0      		rjmp .L206
 1159               	.L56:
 185:main.c        ****         while (!main_vt_flag) {
 1160               		.loc 1 185 0 discriminator 2
 1161 04a8 90E3      		ldi r25,lo8(48)
 1162 04aa 492E      		mov r4,r25
 1163 04ac 9EE6      		ldi r25,lo8(110)
 1164 04ae 592E      		mov r5,r25
 1165 04b0 6624      		clr r6
 1166 04b2 6394      		inc r6
 1167 04b4 712C      		mov r7,__zero_reg__
 1168               	.L62:
 1169               	.LVL106:
 1170               	.LBB388:
 1171               	.LBB389:
 1172               	.LBB390:
 1173               	.LBB391:
 430:../../os/common/ports/AVR/chcore.h **** }
 1174               		.loc 3 430 0 discriminator 4
 1175               	/* #APP */
 1176               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1177 04b6 F894      		cli
 1178               	 ;  0 "" 2
 1179               	.LVL107:
 1180               	/* #NOAPP */
 1181               	.LBE391:
 1182               	.LBE390:
 1183               	.LBE389:
 1184               	.LBB392:
 1185               	.LBB393:
 1186               	.LBB394:
 1187               	.LBB395:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1188               		.loc 2 287 0 discriminator 4
 1189 04b8 8981      		ldd r24,Y+1
 1190 04ba 9A81      		ldd r25,Y+2
 1191 04bc 892B      		or r24,r25
 1192 04be 01F0      		breq .L63
 288:../../os/rt/include/chvt.h ****   }
 1193               		.loc 2 288 0
 1194 04c0 CE01      		movw r24,r28
 1195 04c2 0196      		adiw r24,1
 1196 04c4 0E94 0000 		call chVTDoResetI
 1197               	.LVL108:
 1198               	.L63:
 1199               	.LBE395:
 1200               	.LBE394:
 1201               		.loc 2 335 0
 1202 04c8 8E01      		movw r16,r28
 1203 04ca 0F5F      		subi r16,-1
 1204 04cc 1F4F      		sbci r17,-1
 1205 04ce 20E0      		ldi r18,lo8(gs(vt_cb))
 1206 04d0 30E0      		ldi r19,hi8(gs(vt_cb))
 1207 04d2 B301      		movw r22,r6
 1208 04d4 A201      		movw r20,r4
 1209 04d6 C801      		movw r24,r16
 1210 04d8 0E94 0000 		call chVTDoSetI
 1211               	.LVL109:
 1212               	.LBE393:
 1213               	.LBE392:
 1214               	.LBB396:
 1215               	.LBB397:
 1216               	.LBB398:
 1217               	.LBB399:
 1218               		.loc 3 440 0
 1219               	/* #APP */
 1220               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1221 04dc 7894      		sei
 1222               	 ;  0 "" 2
 1223               	/* #NOAPP */
 1224               	.LBE399:
 1225               	.LBE398:
 1226               	.LBE397:
 1227               	.LBE396:
 1228               	.LBE388:
 186:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 1229               		.loc 1 186 0
 1230 04de 8091 0000 		lds r24,main_vt_flag
 1231 04e2 8823      		tst r24
 1232 04e4 01F0      		breq .L68
 1233 04e6 00C0      		rjmp .L64
 1234               	.L65:
 191:main.c        ****             dequeue();
 1235               		.loc 1 191 0
 1236 04e8 0497      		sbiw r24,4
 1237 04ea 01F4      		brne .+2
 1238 04ec 00C0      		rjmp .L207
 1239               	.L67:
 195:main.c        ****         }
 1240               		.loc 1 195 0
 1241 04ee 6BE1      		ldi r22,lo8(27)
 1242 04f0 76E0      		ldi r23,lo8(6)
 1243 04f2 80E0      		ldi r24,0
 1244 04f4 90E0      		ldi r25,0
 1245 04f6 0E94 0000 		call chThdSleep
 1246               	.LVL110:
 186:main.c        ****           if ((*rdp == AMB_PRIMARIO)) {
 1247               		.loc 1 186 0
 1248 04fa 8091 0000 		lds r24,main_vt_flag
 1249 04fe 8111      		cpse r24,__zero_reg__
 1250 0500 00C0      		rjmp .L64
 1251               	.L68:
 187:main.c        ****             flag_amb_prim = 1;
 1252               		.loc 1 187 0
 1253 0502 E091 0000 		lds r30,rdp
 1254 0506 F091 0000 		lds r31,rdp+1
 1255 050a 8081      		ld r24,Z
 1256 050c 9181      		ldd r25,Z+1
 1257 050e 8330      		cpi r24,3
 1258 0510 9105      		cpc r25,__zero_reg__
 1259 0512 01F4      		brne .L65
 188:main.c        ****             chVTReset(&main_vt);
 1260               		.loc 1 188 0
 1261 0514 B092 0000 		sts flag_amb_prim,r11
 1262               	.LVL111:
 1263               	.LBB400:
 1264               	.LBB401:
 1265               	.LBB402:
 1266               	.LBB403:
 430:../../os/common/ports/AVR/chcore.h **** }
 1267               		.loc 3 430 0
 1268               	/* #APP */
 1269               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1270 0518 F894      		cli
 1271               	 ;  0 "" 2
 1272               	.LVL112:
 1273               	/* #NOAPP */
 1274               	.LBE403:
 1275               	.LBE402:
 1276               	.LBE401:
 1277               	.LBB404:
 1278               	.LBB405:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1279               		.loc 2 287 0
 1280 051a 8981      		ldd r24,Y+1
 1281 051c 9A81      		ldd r25,Y+2
 1282 051e 892B      		or r24,r25
 1283 0520 01F0      		breq .L66
 288:../../os/rt/include/chvt.h ****   }
 1284               		.loc 2 288 0
 1285 0522 CE01      		movw r24,r28
 1286 0524 0196      		adiw r24,1
 1287 0526 0E94 0000 		call chVTDoResetI
 1288               	.LVL113:
 1289               	.L66:
 1290               	.LBE405:
 1291               	.LBE404:
 1292               	.LBB406:
 1293               	.LBB407:
 1294               	.LBB408:
 1295               	.LBB409:
 1296               		.loc 3 440 0
 1297               	/* #APP */
 1298               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1299 052a 7894      		sei
 1300               	 ;  0 "" 2
 1301               	.LVL114:
 1302               	/* #NOAPP */
 1303               	.LBE409:
 1304               	.LBE408:
 1305               	.LBE407:
 1306               	.LBE406:
 1307               	.LBE400:
 190:main.c        ****           } else if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 1308               		.loc 1 190 0
 1309 052c B092 0000 		sts main_vt_flag,r11
 1310 0530 00C0      		rjmp .L67
 1311               	.LVL115:
 1312               	.L25:
 146:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1313               		.loc 1 146 0
 1314 0532 64E0      		ldi r22,lo8(4)
 1315 0534 89E2      		ldi r24,lo8(41)
 1316 0536 90E0      		ldi r25,0
 1317 0538 0E94 0000 		call _pal_lld_setlineid
 1318               	.LVL116:
 1319 053c 0E94 0000 		call _pal_lld_getpadfromline
 1320               	.LVL117:
 1321 0540 782E      		mov r7,r24
 1322 0542 64E0      		ldi r22,lo8(4)
 1323 0544 89E2      		ldi r24,lo8(41)
 1324 0546 90E0      		ldi r25,0
 1325 0548 0E94 0000 		call _pal_lld_setlineid
 1326               	.LVL118:
 1327 054c 0E94 0000 		call _pal_lld_getportfromline
 1328               	.LVL119:
 1329 0550 FC01      		movw r30,r24
 1330 0552 9281      		ldd r25,Z+2
 1331 0554 9701      		movw r18,r14
 1332 0556 00C0      		rjmp 2f
 1333               		1:
 1334 0558 220F      		lsl r18
 1335               		2:
 1336 055a 7A94      		dec r7
 1337 055c 02F4      		brpl 1b
 1338 055e 922B      		or r25,r18
 1339 0560 9283      		std Z+2,r25
 1340               	.LVL120:
 1341               	.LBB410:
 1342               	.LBB411:
 1343               	.LBB412:
 1344               	.LBB413:
 430:../../os/common/ports/AVR/chcore.h **** }
 1345               		.loc 3 430 0
 1346               	/* #APP */
 1347               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1348 0562 F894      		cli
 1349               	 ;  0 "" 2
 1350               	.LVL121:
 1351               	/* #NOAPP */
 1352               	.LBE413:
 1353               	.LBE412:
 1354               	.LBE411:
 1355               	.LBB414:
 1356               	.LBB415:
 1357               	.LBB416:
 1358               	.LBB417:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1359               		.loc 2 287 0
 1360 0564 8981      		ldd r24,Y+1
 1361 0566 9A81      		ldd r25,Y+2
 1362 0568 892B      		or r24,r25
 1363 056a 01F0      		breq .L50
 288:../../os/rt/include/chvt.h ****   }
 1364               		.loc 2 288 0
 1365 056c CE01      		movw r24,r28
 1366 056e 0196      		adiw r24,1
 1367 0570 0E94 0000 		call chVTDoResetI
 1368               	.LVL122:
 1369               	.L50:
 1370               	.LBE417:
 1371               	.LBE416:
 1372               		.loc 2 335 0
 1373 0574 8E01      		movw r16,r28
 1374 0576 0F5F      		subi r16,-1
 1375 0578 1F4F      		sbci r17,-1
 1376 057a 20E0      		ldi r18,lo8(gs(vt_cb))
 1377 057c 30E0      		ldi r19,hi8(gs(vt_cb))
 1378 057e 40E1      		ldi r20,lo8(16)
 1379 0580 5AE7      		ldi r21,lo8(122)
 1380 0582 60E0      		ldi r22,0
 1381 0584 70E0      		ldi r23,0
 1382 0586 C801      		movw r24,r16
 1383 0588 0E94 0000 		call chVTDoSetI
 1384               	.LVL123:
 1385               	.LBE415:
 1386               	.LBE414:
 1387               	.LBB418:
 1388               	.LBB419:
 1389               	.LBB420:
 1390               	.LBB421:
 1391               		.loc 3 440 0
 1392               	/* #APP */
 1393               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1394 058c 7894      		sei
 1395               	 ;  0 "" 2
 1396               	/* #NOAPP */
 1397               	.LBE421:
 1398               	.LBE420:
 1399               	.LBE419:
 1400               	.LBE418:
 1401               	.LBE410:
 148:main.c        ****           chThdSleepMilliseconds(100);
 1402               		.loc 1 148 0
 1403 058e 8091 0000 		lds r24,main_vt_flag
 1404 0592 8111      		cpse r24,__zero_reg__
 1405 0594 00C0      		rjmp .L51
 1406               	.L52:
 149:main.c        ****         }
 1407               		.loc 1 149 0
 1408 0596 6BE1      		ldi r22,lo8(27)
 1409 0598 76E0      		ldi r23,lo8(6)
 1410 059a 80E0      		ldi r24,0
 1411 059c 90E0      		ldi r25,0
 1412 059e 0E94 0000 		call chThdSleep
 1413               	.LVL124:
 148:main.c        ****           chThdSleepMilliseconds(100);
 1414               		.loc 1 148 0
 1415 05a2 8091 0000 		lds r24,main_vt_flag
 1416 05a6 8823      		tst r24
 1417 05a8 01F0      		breq .L52
 1418               	.L51:
 151:main.c        ****         g_state = VERDE_LOCKED_SEC;
 1419               		.loc 1 151 0
 1420 05aa 1092 0000 		sts main_vt_flag,__zero_reg__
 152:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1421               		.loc 1 152 0
 1422 05ae 9092 0000 		sts g_state,r9
 1423               	.LVL125:
 1424               	.L199:
 165:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 1425               		.loc 1 165 0
 1426 05b2 64E0      		ldi r22,lo8(4)
 1427 05b4 89E2      		ldi r24,lo8(41)
 1428 05b6 90E0      		ldi r25,0
 1429 05b8 0E94 0000 		call _pal_lld_setlineid
 1430               	.LVL126:
 1431 05bc 0E94 0000 		call _pal_lld_getpadfromline
 1432               	.LVL127:
 1433 05c0 782E      		mov r7,r24
 1434 05c2 64E0      		ldi r22,lo8(4)
 1435 05c4 89E2      		ldi r24,lo8(41)
 1436 05c6 90E0      		ldi r25,0
 1437 05c8 0E94 0000 		call _pal_lld_setlineid
 1438               	.LVL128:
 1439 05cc 0E94 0000 		call _pal_lld_getportfromline
 1440               	.LVL129:
 1441 05d0 FC01      		movw r30,r24
 1442 05d2 9281      		ldd r25,Z+2
 1443 05d4 9701      		movw r18,r14
 1444 05d6 00C0      		rjmp 2f
 1445               		1:
 1446 05d8 220F      		lsl r18
 1447 05da 331F      		rol r19
 1448               		2:
 1449 05dc 7A94      		dec r7
 1450 05de 02F4      		brpl 1b
 1451 05e0 2095      		com r18
 1452 05e2 3095      		com r19
 1453 05e4 9223      		and r25,r18
 1454 05e6 9283      		std Z+2,r25
 166:main.c        ****         prev_state = PRIMARIO;
 1455               		.loc 1 166 0
 1456 05e8 66E0      		ldi r22,lo8(6)
 1457 05ea 89E2      		ldi r24,lo8(41)
 1458 05ec 90E0      		ldi r25,0
 1459 05ee 0E94 0000 		call _pal_lld_setlineid
 1460               	.LVL130:
 1461 05f2 0E94 0000 		call _pal_lld_getpadfromline
 1462               	.LVL131:
 1463 05f6 782E      		mov r7,r24
 1464 05f8 66E0      		ldi r22,lo8(6)
 1465 05fa 89E2      		ldi r24,lo8(41)
 1466 05fc 90E0      		ldi r25,0
 1467 05fe 0E94 0000 		call _pal_lld_setlineid
 1468               	.LVL132:
 1469 0602 0E94 0000 		call _pal_lld_getportfromline
 1470               	.LVL133:
 1471 0606 FC01      		movw r30,r24
 1472 0608 9281      		ldd r25,Z+2
 1473 060a 9701      		movw r18,r14
 1474 060c 00C0      		rjmp 2f
 1475               		1:
 1476 060e 220F      		lsl r18
 1477               		2:
 1478 0610 7A94      		dec r7
 1479 0612 02F4      		brpl 1b
 1480 0614 922B      		or r25,r18
 1481 0616 9283      		std Z+2,r25
 167:main.c        ****         break;
 1482               		.loc 1 167 0
 1483 0618 85E0      		ldi r24,lo8(5)
 1484 061a 8093 0000 		sts prev_state,r24
 168:main.c        ****       case VERDE_LOCKED_SEC:
 1485               		.loc 1 168 0
 1486 061e 00C0      		rjmp .L44
 1487               	.LVL134:
 1488               	.L24:
 158:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1489               		.loc 1 158 0
 1490 0620 64E0      		ldi r22,lo8(4)
 1491 0622 89E2      		ldi r24,lo8(41)
 1492 0624 90E0      		ldi r25,0
 1493 0626 0E94 0000 		call _pal_lld_setlineid
 1494               	.LVL135:
 1495 062a 0E94 0000 		call _pal_lld_getpadfromline
 1496               	.LVL136:
 1497 062e 782E      		mov r7,r24
 1498 0630 64E0      		ldi r22,lo8(4)
 1499 0632 89E2      		ldi r24,lo8(41)
 1500 0634 90E0      		ldi r25,0
 1501 0636 0E94 0000 		call _pal_lld_setlineid
 1502               	.LVL137:
 1503 063a 0E94 0000 		call _pal_lld_getportfromline
 1504               	.LVL138:
 1505 063e FC01      		movw r30,r24
 1506 0640 9281      		ldd r25,Z+2
 1507 0642 9701      		movw r18,r14
 1508 0644 00C0      		rjmp 2f
 1509               		1:
 1510 0646 220F      		lsl r18
 1511               		2:
 1512 0648 7A94      		dec r7
 1513 064a 02F4      		brpl 1b
 1514 064c 922B      		or r25,r18
 1515 064e 9283      		std Z+2,r25
 1516               	.LVL139:
 1517               	.LBB422:
 1518               	.LBB423:
 1519               	.LBB424:
 1520               	.LBB425:
 430:../../os/common/ports/AVR/chcore.h **** }
 1521               		.loc 3 430 0
 1522               	/* #APP */
 1523               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1524 0650 F894      		cli
 1525               	 ;  0 "" 2
 1526               	.LVL140:
 1527               	/* #NOAPP */
 1528               	.LBE425:
 1529               	.LBE424:
 1530               	.LBE423:
 1531               	.LBB426:
 1532               	.LBB427:
 1533               	.LBB428:
 1534               	.LBB429:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1535               		.loc 2 287 0
 1536 0652 8981      		ldd r24,Y+1
 1537 0654 9A81      		ldd r25,Y+2
 1538 0656 892B      		or r24,r25
 1539 0658 01F0      		breq .L53
 288:../../os/rt/include/chvt.h ****   }
 1540               		.loc 2 288 0
 1541 065a CE01      		movw r24,r28
 1542 065c 0196      		adiw r24,1
 1543 065e 0E94 0000 		call chVTDoResetI
 1544               	.LVL141:
 1545               	.L53:
 1546               	.LBE429:
 1547               	.LBE428:
 1548               		.loc 2 335 0
 1549 0662 8E01      		movw r16,r28
 1550 0664 0F5F      		subi r16,-1
 1551 0666 1F4F      		sbci r17,-1
 1552 0668 20E0      		ldi r18,lo8(gs(vt_cb))
 1553 066a 30E0      		ldi r19,hi8(gs(vt_cb))
 1554 066c 40E1      		ldi r20,lo8(16)
 1555 066e 5AE7      		ldi r21,lo8(122)
 1556 0670 60E0      		ldi r22,0
 1557 0672 70E0      		ldi r23,0
 1558 0674 C801      		movw r24,r16
 1559 0676 0E94 0000 		call chVTDoSetI
 1560               	.LVL142:
 1561               	.LBE427:
 1562               	.LBE426:
 1563               	.LBB430:
 1564               	.LBB431:
 1565               	.LBB432:
 1566               	.LBB433:
 1567               		.loc 3 440 0
 1568               	/* #APP */
 1569               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1570 067a 7894      		sei
 1571               	 ;  0 "" 2
 1572               	/* #NOAPP */
 1573               	.LBE433:
 1574               	.LBE432:
 1575               	.LBE431:
 1576               	.LBE430:
 1577               	.LBE422:
 160:main.c        ****           chThdSleepMilliseconds(100);
 1578               		.loc 1 160 0
 1579 067c 8091 0000 		lds r24,main_vt_flag
 1580 0680 8111      		cpse r24,__zero_reg__
 1581 0682 00C0      		rjmp .L54
 1582               	.L55:
 161:main.c        ****         }
 1583               		.loc 1 161 0
 1584 0684 6BE1      		ldi r22,lo8(27)
 1585 0686 76E0      		ldi r23,lo8(6)
 1586 0688 80E0      		ldi r24,0
 1587 068a 90E0      		ldi r25,0
 1588 068c 0E94 0000 		call chThdSleep
 1589               	.LVL143:
 160:main.c        ****           chThdSleepMilliseconds(100);
 1590               		.loc 1 160 0
 1591 0690 8091 0000 		lds r24,main_vt_flag
 1592 0694 8823      		tst r24
 1593 0696 01F0      		breq .L55
 1594               	.L54:
 163:main.c        ****         g_state = VERDE_LOCKED_PED;
 1595               		.loc 1 163 0
 1596 0698 1092 0000 		sts main_vt_flag,__zero_reg__
 164:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 1597               		.loc 1 164 0
 1598 069c A092 0000 		sts g_state,r10
 1599 06a0 00C0      		rjmp .L199
 1600               	.LVL144:
 1601               	.L23:
 130:main.c        ****         if (ev == AMB_PRIMARIO) {
 1602               		.loc 1 130 0
 1603 06a2 0E94 0000 		call dequeue
 1604               	.LVL145:
 1605 06a6 6C01      		movw r12,r24
 1606               	.LVL146:
 131:main.c        ****           flag_amb_prim = !flag_amb_prim;
 1607               		.loc 1 131 0
 1608 06a8 83E0      		ldi r24,3
 1609 06aa C816      		cp r12,r24
 1610 06ac D104      		cpc r13,__zero_reg__
 1611 06ae 01F4      		brne .+2
 1612 06b0 00C0      		rjmp .L208
 1613 06b2 8091 0000 		lds r24,flag_amb_prim
 134:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1614               		.loc 1 134 0
 1615 06b6 91E0      		ldi r25,1
 1616 06b8 C916      		cp r12,r25
 1617 06ba D104      		cpc r13,__zero_reg__
 1618 06bc 01F4      		brne .+2
 1619 06be 00C0      		rjmp .L47
 134:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1620               		.loc 1 134 0 is_stmt 0 discriminator 2
 1621 06c0 E4E0      		ldi r30,4
 1622 06c2 CE16      		cp r12,r30
 1623 06c4 D104      		cpc r13,__zero_reg__
 1624 06c6 01F0      		breq .+2
 1625 06c8 00C0      		rjmp .L209
 134:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1626               		.loc 1 134 0
 1627 06ca 8111      		cpse r24,__zero_reg__
 1628 06cc 00C0      		rjmp .L44
 136:main.c        ****           }
 1629               		.loc 1 136 0 is_stmt 1
 1630 06ce B092 0000 		sts flag_amb_sec,r11
 1631               	.L103:
 138:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1632               		.loc 1 138 0
 1633 06d2 84E0      		ldi r24,lo8(4)
 1634               	.L205:
 141:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1635               		.loc 1 141 0
 1636 06d4 8093 0000 		sts g_state,r24
 142:main.c        ****         }
 1637               		.loc 1 142 0
 1638 06d8 67E0      		ldi r22,lo8(7)
 1639 06da 89E2      		ldi r24,lo8(41)
 1640 06dc 90E0      		ldi r25,0
 1641 06de 0E94 0000 		call _pal_lld_setlineid
 1642               	.LVL147:
 1643 06e2 0E94 0000 		call _pal_lld_getpadfromline
 1644               	.LVL148:
 1645 06e6 782E      		mov r7,r24
 1646 06e8 67E0      		ldi r22,lo8(7)
 1647 06ea 89E2      		ldi r24,lo8(41)
 1648 06ec 90E0      		ldi r25,0
 1649               	.L198:
 209:main.c        ****         } else {
 1650               		.loc 1 209 0
 1651 06ee 0E94 0000 		call _pal_lld_setlineid
 1652               	.LVL149:
 1653 06f2 0E94 0000 		call _pal_lld_getportfromline
 1654               	.LVL150:
 1655 06f6 FC01      		movw r30,r24
 1656 06f8 9281      		ldd r25,Z+2
 1657 06fa 9701      		movw r18,r14
 1658 06fc 00C0      		rjmp 2f
 1659               		1:
 1660 06fe 220F      		lsl r18
 1661 0700 331F      		rol r19
 1662               		2:
 1663 0702 7A94      		dec r7
 1664 0704 02F4      		brpl 1b
 1665 0706 2095      		com r18
 1666 0708 3095      		com r19
 1667 070a 9223      		and r25,r18
 1668 070c 9283      		std Z+2,r25
 1669 070e 00C0      		rjmp .L44
 1670               	.L21:
 105:main.c        ****         palSetLine(PRIMARIO_VERDE);
 1671               		.loc 1 105 0
 1672 0710 66E0      		ldi r22,lo8(6)
 1673 0712 89E2      		ldi r24,lo8(41)
 1674 0714 90E0      		ldi r25,0
 1675 0716 0E94 0000 		call _pal_lld_setlineid
 1676               	.LVL151:
 1677 071a 0E94 0000 		call _pal_lld_getpadfromline
 1678               	.LVL152:
 1679 071e 782E      		mov r7,r24
 1680 0720 66E0      		ldi r22,lo8(6)
 1681 0722 89E2      		ldi r24,lo8(41)
 1682 0724 90E0      		ldi r25,0
 1683 0726 0E94 0000 		call _pal_lld_setlineid
 1684               	.LVL153:
 1685 072a 0E94 0000 		call _pal_lld_getportfromline
 1686               	.LVL154:
 1687 072e FC01      		movw r30,r24
 1688 0730 9281      		ldd r25,Z+2
 1689 0732 9701      		movw r18,r14
 1690 0734 00C0      		rjmp 2f
 1691               		1:
 1692 0736 220F      		lsl r18
 1693 0738 331F      		rol r19
 1694               		2:
 1695 073a 7A94      		dec r7
 1696 073c 02F4      		brpl 1b
 1697 073e 2095      		com r18
 1698 0740 3095      		com r19
 1699 0742 9223      		and r25,r18
 1700 0744 9283      		std Z+2,r25
 106:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 1701               		.loc 1 106 0
 1702 0746 67E0      		ldi r22,lo8(7)
 1703 0748 89E2      		ldi r24,lo8(41)
 1704 074a 90E0      		ldi r25,0
 1705 074c 0E94 0000 		call _pal_lld_setlineid
 1706               	.LVL155:
 1707 0750 0E94 0000 		call _pal_lld_getpadfromline
 1708               	.LVL156:
 1709 0754 782E      		mov r7,r24
 1710 0756 67E0      		ldi r22,lo8(7)
 1711 0758 89E2      		ldi r24,lo8(41)
 1712 075a 90E0      		ldi r25,0
 1713 075c 0E94 0000 		call _pal_lld_setlineid
 1714               	.LVL157:
 1715 0760 0E94 0000 		call _pal_lld_getportfromline
 1716               	.LVL158:
 1717 0764 FC01      		movw r30,r24
 1718 0766 9281      		ldd r25,Z+2
 1719 0768 9701      		movw r18,r14
 1720 076a 00C0      		rjmp 2f
 1721               		1:
 1722 076c 220F      		lsl r18
 1723               		2:
 1724 076e 7A94      		dec r7
 1725 0770 02F4      		brpl 1b
 1726 0772 922B      		or r25,r18
 1727 0774 9283      		std Z+2,r25
 107:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 1728               		.loc 1 107 0
 1729 0776 60E0      		ldi r22,0
 1730 0778 83E2      		ldi r24,lo8(35)
 1731 077a 90E0      		ldi r25,0
 1732 077c 0E94 0000 		call _pal_lld_setlineid
 1733               	.LVL159:
 1734 0780 0E94 0000 		call _pal_lld_getpadfromline
 1735               	.LVL160:
 1736 0784 782E      		mov r7,r24
 1737 0786 60E0      		ldi r22,0
 1738 0788 83E2      		ldi r24,lo8(35)
 1739 078a 90E0      		ldi r25,0
 1740 078c 0E94 0000 		call _pal_lld_setlineid
 1741               	.LVL161:
 1742 0790 0E94 0000 		call _pal_lld_getportfromline
 1743               	.LVL162:
 1744 0794 FC01      		movw r30,r24
 1745 0796 9281      		ldd r25,Z+2
 1746 0798 9701      		movw r18,r14
 1747 079a 00C0      		rjmp 2f
 1748               		1:
 1749 079c 220F      		lsl r18
 1750               		2:
 1751 079e 7A94      		dec r7
 1752 07a0 02F4      		brpl 1b
 1753 07a2 922B      		or r25,r18
 1754 07a4 9283      		std Z+2,r25
 108:main.c        ****         if (prev_state == SECUNDARIO) {
 1755               		.loc 1 108 0
 1756 07a6 62E0      		ldi r22,lo8(2)
 1757 07a8 83E2      		ldi r24,lo8(35)
 1758 07aa 90E0      		ldi r25,0
 1759 07ac 0E94 0000 		call _pal_lld_setlineid
 1760               	.LVL163:
 1761 07b0 0E94 0000 		call _pal_lld_getpadfromline
 1762               	.LVL164:
 1763 07b4 782E      		mov r7,r24
 1764 07b6 62E0      		ldi r22,lo8(2)
 1765 07b8 83E2      		ldi r24,lo8(35)
 1766 07ba 90E0      		ldi r25,0
 1767 07bc 0E94 0000 		call _pal_lld_setlineid
 1768               	.LVL165:
 1769 07c0 0E94 0000 		call _pal_lld_getportfromline
 1770               	.LVL166:
 1771 07c4 FC01      		movw r30,r24
 1772 07c6 9281      		ldd r25,Z+2
 1773 07c8 9701      		movw r18,r14
 1774 07ca 00C0      		rjmp 2f
 1775               		1:
 1776 07cc 220F      		lsl r18
 1777               		2:
 1778 07ce 7A94      		dec r7
 1779 07d0 02F4      		brpl 1b
 1780 07d2 922B      		or r25,r18
 1781 07d4 9283      		std Z+2,r25
 109:main.c        ****           chVTSet(&main_vt, TIME_MS2I(5000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1782               		.loc 1 109 0
 1783 07d6 8091 0000 		lds r24,prev_state
 1784 07da 8130      		cpi r24,lo8(1)
 1785 07dc 01F4      		brne .+2
 1786 07de 00C0      		rjmp .L210
 1787               	.L32:
 118:main.c        ****         while (!main_vt_flag) {
 1788               		.loc 1 118 0 discriminator 2
 1789 07e0 30E5      		ldi r19,lo8(80)
 1790 07e2 432E      		mov r4,r19
 1791 07e4 32E6      		ldi r19,lo8(98)
 1792 07e6 532E      		mov r5,r19
 1793 07e8 32E0      		ldi r19,lo8(2)
 1794 07ea 632E      		mov r6,r19
 1795 07ec 712C      		mov r7,__zero_reg__
 1796               	.L38:
 1797               	.LVL167:
 1798               	.LBB434:
 1799               	.LBB435:
 1800               	.LBB436:
 1801               	.LBB437:
 430:../../os/common/ports/AVR/chcore.h **** }
 1802               		.loc 3 430 0 discriminator 4
 1803               	/* #APP */
 1804               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1805 07ee F894      		cli
 1806               	 ;  0 "" 2
 1807               	.LVL168:
 1808               	/* #NOAPP */
 1809               	.LBE437:
 1810               	.LBE436:
 1811               	.LBE435:
 1812               	.LBB438:
 1813               	.LBB439:
 1814               	.LBB440:
 1815               	.LBB441:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1816               		.loc 2 287 0 discriminator 4
 1817 07f0 8981      		ldd r24,Y+1
 1818 07f2 9A81      		ldd r25,Y+2
 1819 07f4 892B      		or r24,r25
 1820 07f6 01F0      		breq .L39
 288:../../os/rt/include/chvt.h ****   }
 1821               		.loc 2 288 0
 1822 07f8 CE01      		movw r24,r28
 1823 07fa 0196      		adiw r24,1
 1824 07fc 0E94 0000 		call chVTDoResetI
 1825               	.LVL169:
 1826               	.L39:
 1827               	.LBE441:
 1828               	.LBE440:
 1829               		.loc 2 335 0
 1830 0800 8E01      		movw r16,r28
 1831 0802 0F5F      		subi r16,-1
 1832 0804 1F4F      		sbci r17,-1
 1833 0806 20E0      		ldi r18,lo8(gs(vt_cb))
 1834 0808 30E0      		ldi r19,hi8(gs(vt_cb))
 1835 080a B301      		movw r22,r6
 1836 080c A201      		movw r20,r4
 1837 080e C801      		movw r24,r16
 1838 0810 0E94 0000 		call chVTDoSetI
 1839               	.LVL170:
 1840               	.LBE439:
 1841               	.LBE438:
 1842               	.LBB442:
 1843               	.LBB443:
 1844               	.LBB444:
 1845               	.LBB445:
 1846               		.loc 3 440 0
 1847               	/* #APP */
 1848               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1849 0814 7894      		sei
 1850               	 ;  0 "" 2
 1851               	/* #NOAPP */
 1852               	.LBE445:
 1853               	.LBE444:
 1854               	.LBE443:
 1855               	.LBE442:
 1856               	.LBE434:
 119:main.c        ****           if ((*rdp == AMB_SECUNDARIO)) {
 1857               		.loc 1 119 0
 1858 0816 8091 0000 		lds r24,main_vt_flag
 1859 081a 8823      		tst r24
 1860 081c 01F0      		breq .L43
 1861 081e 00C0      		rjmp .L40
 1862               	.L41:
 124:main.c        ****         }
 1863               		.loc 1 124 0
 1864 0820 6BE1      		ldi r22,lo8(27)
 1865 0822 76E0      		ldi r23,lo8(6)
 1866 0824 80E0      		ldi r24,0
 1867 0826 90E0      		ldi r25,0
 1868 0828 0E94 0000 		call chThdSleep
 1869               	.LVL171:
 119:main.c        ****           if ((*rdp == AMB_SECUNDARIO)) {
 1870               		.loc 1 119 0
 1871 082c 8091 0000 		lds r24,main_vt_flag
 1872 0830 8111      		cpse r24,__zero_reg__
 1873 0832 00C0      		rjmp .L40
 1874               	.L43:
 120:main.c        ****             chVTReset(&main_vt);
 1875               		.loc 1 120 0
 1876 0834 E091 0000 		lds r30,rdp
 1877 0838 F091 0000 		lds r31,rdp+1
 1878 083c 8081      		ld r24,Z
 1879 083e 9181      		ldd r25,Z+1
 1880 0840 0497      		sbiw r24,4
 1881 0842 01F4      		brne .L41
 1882               	.LVL172:
 1883               	.LBB446:
 1884               	.LBB447:
 1885               	.LBB448:
 1886               	.LBB449:
 430:../../os/common/ports/AVR/chcore.h **** }
 1887               		.loc 3 430 0
 1888               	/* #APP */
 1889               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1890 0844 F894      		cli
 1891               	 ;  0 "" 2
 1892               	.LVL173:
 1893               	/* #NOAPP */
 1894               	.LBE449:
 1895               	.LBE448:
 1896               	.LBE447:
 1897               	.LBB450:
 1898               	.LBB451:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1899               		.loc 2 287 0
 1900 0846 8981      		ldd r24,Y+1
 1901 0848 9A81      		ldd r25,Y+2
 1902 084a 892B      		or r24,r25
 1903 084c 01F0      		breq .L42
 288:../../os/rt/include/chvt.h ****   }
 1904               		.loc 2 288 0
 1905 084e CE01      		movw r24,r28
 1906 0850 0196      		adiw r24,1
 1907 0852 0E94 0000 		call chVTDoResetI
 1908               	.LVL174:
 1909               	.L42:
 1910               	.LBE451:
 1911               	.LBE450:
 1912               	.LBB452:
 1913               	.LBB453:
 1914               	.LBB454:
 1915               	.LBB455:
 1916               		.loc 3 440 0
 1917               	/* #APP */
 1918               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1919 0856 7894      		sei
 1920               	 ;  0 "" 2
 1921               	.LVL175:
 1922               	/* #NOAPP */
 1923               	.LBE455:
 1924               	.LBE454:
 1925               	.LBE453:
 1926               	.LBE452:
 1927               	.LBE446:
 122:main.c        ****           }
 1928               		.loc 1 122 0
 1929 0858 B092 0000 		sts main_vt_flag,r11
 1930 085c 00C0      		rjmp .L41
 1931               	.LVL176:
 1932               	.L207:
 191:main.c        ****             dequeue();
 1933               		.loc 1 191 0 discriminator 1
 1934 085e 8091 0000 		lds r24,flag_amb_sec
 1935 0862 8111      		cpse r24,__zero_reg__
 1936 0864 00C0      		rjmp .L67
 192:main.c        ****             flag_amb_sec = 1;
 1937               		.loc 1 192 0
 1938 0866 0E94 0000 		call dequeue
 1939               	.LVL177:
 193:main.c        ****           }
 1940               		.loc 1 193 0
 1941 086a B092 0000 		sts flag_amb_sec,r11
 1942 086e 00C0      		rjmp .L67
 1943               	.L64:
 197:main.c        ****         while (flag_amb_sec) {
 1944               		.loc 1 197 0
 1945 0870 1092 0000 		sts main_vt_flag,__zero_reg__
 1946 0874 8091 0000 		lds r24,flag_amb_sec
 198:main.c        ****           ev = dequeue();
 1947               		.loc 1 198 0
 1948 0878 00C0      		rjmp .L71
 1949               	.L72:
 199:main.c        ****           if (ev == AMB_SECUNDARIO) {
 1950               		.loc 1 199 0
 1951 087a 0E94 0000 		call dequeue
 1952               	.LVL178:
 1953 087e 6C01      		movw r12,r24
 1954               	.LVL179:
 200:main.c        ****             flag_amb_sec = 0;
 1955               		.loc 1 200 0
 1956 0880 0497      		sbiw r24,4
 1957 0882 01F4      		brne .+2
 1958 0884 00C0      		rjmp .L70
 1959 0886 8091 0000 		lds r24,flag_amb_sec
 1960               	.L71:
 198:main.c        ****           ev = dequeue();
 1961               		.loc 1 198 0
 1962 088a 8111      		cpse r24,__zero_reg__
 1963 088c 00C0      		rjmp .L72
 204:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 1964               		.loc 1 204 0
 1965 088e 8091 0000 		lds r24,qsize
 1966 0892 9091 0000 		lds r25,qsize+1
 1967 0896 892B      		or r24,r25
 1968 0898 01F4      		brne .L211
 1969               	.L73:
 207:main.c        ****           g_state = AMARELO_PED_SEC;
 1970               		.loc 1 207 0
 1971 089a 8091 0000 		lds r24,flag_amb_prim
 1972 089e 8823      		tst r24
 1973 08a0 01F4      		brne .+2
 1974 08a2 00C0      		rjmp .L212
 1975               	.L74:
 211:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 1976               		.loc 1 211 0
 1977 08a4 2092 0000 		sts g_state,r2
 1978               	.L200:
 209:main.c        ****         } else {
 1979               		.loc 1 209 0
 1980 08a8 61E0      		ldi r22,lo8(1)
 1981 08aa 83E2      		ldi r24,lo8(35)
 1982 08ac 90E0      		ldi r25,0
 1983 08ae 0E94 0000 		call _pal_lld_setlineid
 1984               	.LVL180:
 1985 08b2 0E94 0000 		call _pal_lld_getpadfromline
 1986               	.LVL181:
 1987 08b6 782E      		mov r7,r24
 1988 08b8 61E0      		ldi r22,lo8(1)
 1989               	.LVL182:
 1990               	.L202:
 1991 08ba 83E2      		ldi r24,lo8(35)
 1992 08bc 90E0      		ldi r25,0
 1993 08be 00C0      		rjmp .L198
 1994               	.LVL183:
 1995               	.L40:
 126:main.c        ****         g_state = VERDE_IDLE_PRIM;
 1996               		.loc 1 126 0
 1997 08c0 1092 0000 		sts main_vt_flag,__zero_reg__
 127:main.c        ****         break;
 1998               		.loc 1 127 0
 1999 08c4 82E0      		ldi r24,lo8(2)
 2000 08c6 8093 0000 		sts g_state,r24
 128:main.c        ****       case VERDE_IDLE_PRIM:
 2001               		.loc 1 128 0
 2002 08ca 00C0      		rjmp .L44
 2003               	.LVL184:
 2004               	.L84:
 255:main.c        ****         if (qsize > 0) {
 2005               		.loc 1 255 0
 2006 08cc 1092 0000 		sts main_vt_flag,__zero_reg__
 256:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 2007               		.loc 1 256 0
 2008 08d0 8091 0000 		lds r24,qsize
 2009 08d4 9091 0000 		lds r25,qsize+1
 2010 08d8 892B      		or r24,r25
 2011 08da 01F4      		brne .L213
 2012               	.L88:
 259:main.c        ****           g_state = PISCANDO_SEC;
 2013               		.loc 1 259 0
 2014 08dc 91E0      		ldi r25,1
 2015 08de C916      		cp r12,r25
 2016 08e0 D104      		cpc r13,__zero_reg__
 2017 08e2 01F0      		breq .L89
 259:main.c        ****           g_state = PISCANDO_SEC;
 2018               		.loc 1 259 0 is_stmt 0 discriminator 1
 2019 08e4 E4E0      		ldi r30,4
 2020 08e6 CE16      		cp r12,r30
 2021 08e8 D104      		cpc r13,__zero_reg__
 2022 08ea 01F0      		breq .L89
 263:main.c        ****           palClearLine(PEDESTRE_VERDE);
 2023               		.loc 1 263 0 is_stmt 1
 2024 08ec FCE0      		ldi r31,lo8(12)
 2025 08ee F093 0000 		sts g_state,r31
 2026               	.L204:
 264:main.c        ****         }
 2027               		.loc 1 264 0
 2028 08f2 63E0      		ldi r22,lo8(3)
 2029 08f4 83E2      		ldi r24,lo8(35)
 2030 08f6 90E0      		ldi r25,0
 2031 08f8 0E94 0000 		call _pal_lld_setlineid
 2032               	.LVL185:
 2033 08fc 0E94 0000 		call _pal_lld_getpadfromline
 2034               	.LVL186:
 2035 0900 782E      		mov r7,r24
 2036 0902 63E0      		ldi r22,lo8(3)
 2037 0904 00C0      		rjmp .L202
 2038               	.LVL187:
 2039               	.L70:
 201:main.c        ****           }
 2040               		.loc 1 201 0
 2041 0906 1092 0000 		sts flag_amb_sec,__zero_reg__
 204:main.c        ****           ev = dequeue(); /* Caso esse evento nao seja um dos esperados por esse estado, será perd
 2042               		.loc 1 204 0
 2043 090a 8091 0000 		lds r24,qsize
 2044 090e 9091 0000 		lds r25,qsize+1
 2045 0912 892B      		or r24,r25
 2046 0914 01F0      		breq .L73
 2047               	.L211:
 205:main.c        ****         }
 2048               		.loc 1 205 0
 2049 0916 0E94 0000 		call dequeue
 2050               	.LVL188:
 2051 091a 6C01      		movw r12,r24
 2052               	.LVL189:
 207:main.c        ****           g_state = AMARELO_PED_SEC;
 2053               		.loc 1 207 0
 2054 091c 8091 0000 		lds r24,flag_amb_prim
 2055 0920 8111      		cpse r24,__zero_reg__
 2056 0922 00C0      		rjmp .L74
 2057               	.L212:
 2058 0924 82E0      		ldi r24,2
 2059 0926 C816      		cp r12,r24
 2060 0928 D104      		cpc r13,__zero_reg__
 2061 092a 01F0      		breq .+2
 2062 092c 00C0      		rjmp .L74
 208:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 2063               		.loc 1 208 0
 2064 092e 3092 0000 		sts g_state,r3
 2065 0932 00C0      		rjmp .L200
 2066               	.LVL190:
 2067               	.L89:
 260:main.c        ****           palClearLine(PEDESTRE_VERDE);
 2068               		.loc 1 260 0
 2069 0934 8092 0000 		sts g_state,r8
 2070 0938 00C0      		rjmp .L204
 2071               	.LVL191:
 2072               	.L47:
 134:main.c        ****           if (ev == AMB_SECUNDARIO) {
 2073               		.loc 1 134 0
 2074 093a 8823      		tst r24
 2075 093c 01F4      		brne .+2
 2076 093e 00C0      		rjmp .L103
 2077 0940 00C0      		rjmp .L44
 2078               	.L208:
 132:main.c        ****         }
 2079               		.loc 1 132 0
 2080 0942 81E0      		ldi r24,lo8(1)
 2081 0944 9091 0000 		lds r25,flag_amb_prim
 2082 0948 9111      		cpse r25,__zero_reg__
 2083 094a 80E0      		ldi r24,0
 2084               	.L46:
 2085 094c 8093 0000 		sts flag_amb_prim,r24
 2086 0950 00C0      		rjmp .L44
 2087               	.LVL192:
 2088               	.L213:
 257:main.c        ****         }
 2089               		.loc 1 257 0
 2090 0952 0E94 0000 		call dequeue
 2091               	.LVL193:
 2092 0956 6C01      		movw r12,r24
 2093               	.LVL194:
 2094 0958 00C0      		rjmp .L88
 2095               	.LVL195:
 2096               	.L210:
 2097               	.LBB456:
 2098               	.LBB457:
 2099               	.LBB458:
 2100               	.LBB459:
 430:../../os/common/ports/AVR/chcore.h **** }
 2101               		.loc 3 430 0
 2102               	/* #APP */
 2103               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2104 095a F894      		cli
 2105               	 ;  0 "" 2
 2106               	.LVL196:
 2107               	/* #NOAPP */
 2108               	.LBE459:
 2109               	.LBE458:
 2110               	.LBE457:
 2111               	.LBB460:
 2112               	.LBB461:
 2113               	.LBB462:
 2114               	.LBB463:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 2115               		.loc 2 287 0
 2116 095c 8981      		ldd r24,Y+1
 2117 095e 9A81      		ldd r25,Y+2
 2118 0960 892B      		or r24,r25
 2119 0962 01F0      		breq .L33
 288:../../os/rt/include/chvt.h ****   }
 2120               		.loc 2 288 0
 2121 0964 CE01      		movw r24,r28
 2122 0966 0196      		adiw r24,1
 2123 0968 0E94 0000 		call chVTDoResetI
 2124               	.LVL197:
 2125               	.L33:
 2126               	.LBE463:
 2127               	.LBE462:
 2128               		.loc 2 335 0
 2129 096c 8E01      		movw r16,r28
 2130 096e 0F5F      		subi r16,-1
 2131 0970 1F4F      		sbci r17,-1
 2132 0972 20E0      		ldi r18,lo8(gs(vt_cb))
 2133 0974 30E0      		ldi r19,hi8(gs(vt_cb))
 2134 0976 48E2      		ldi r20,lo8(40)
 2135 0978 51E3      		ldi r21,lo8(49)
 2136 097a 61E0      		ldi r22,lo8(1)
 2137 097c 70E0      		ldi r23,0
 2138 097e C801      		movw r24,r16
 2139 0980 0E94 0000 		call chVTDoSetI
 2140               	.LVL198:
 2141               	.LBE461:
 2142               	.LBE460:
 2143               	.LBB464:
 2144               	.LBB465:
 2145               	.LBB466:
 2146               	.LBB467:
 2147               		.loc 3 440 0
 2148               	/* #APP */
 2149               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2150 0984 7894      		sei
 2151               	 ;  0 "" 2
 2152               	/* #NOAPP */
 2153               	.LBE467:
 2154               	.LBE466:
 2155               	.LBE465:
 2156               	.LBE464:
 2157               	.LBE456:
 111:main.c        ****             if ((*rdp == AMB_PRIMARIO)) {
 2158               		.loc 1 111 0
 2159 0986 8091 0000 		lds r24,main_vt_flag
 2160 098a 8823      		tst r24
 2161 098c 01F0      		breq .L37
 2162 098e 00C0      		rjmp .L34
 2163               	.L35:
 115:main.c        ****           }
 2164               		.loc 1 115 0
 2165 0990 6BE1      		ldi r22,lo8(27)
 2166 0992 76E0      		ldi r23,lo8(6)
 2167 0994 80E0      		ldi r24,0
 2168 0996 90E0      		ldi r25,0
 2169 0998 0E94 0000 		call chThdSleep
 2170               	.LVL199:
 111:main.c        ****             if ((*rdp == AMB_PRIMARIO)) {
 2171               		.loc 1 111 0
 2172 099c 8091 0000 		lds r24,main_vt_flag
 2173 09a0 8111      		cpse r24,__zero_reg__
 2174 09a2 00C0      		rjmp .L34
 2175               	.L37:
 112:main.c        ****               flag_amb_prim = !flag_amb_prim;
 2176               		.loc 1 112 0
 2177 09a4 E091 0000 		lds r30,rdp
 2178 09a8 F091 0000 		lds r31,rdp+1
 2179 09ac 8081      		ld r24,Z
 2180 09ae 9181      		ldd r25,Z+1
 2181 09b0 0397      		sbiw r24,3
 2182 09b2 01F4      		brne .L35
 113:main.c        ****             }
 2183               		.loc 1 113 0
 2184 09b4 81E0      		ldi r24,lo8(1)
 2185 09b6 9091 0000 		lds r25,flag_amb_prim
 2186 09ba 9111      		cpse r25,__zero_reg__
 2187 09bc 80E0      		ldi r24,0
 2188               	.L36:
 2189 09be 8093 0000 		sts flag_amb_prim,r24
 2190 09c2 00C0      		rjmp .L35
 2191               	.L34:
 118:main.c        ****         while (!main_vt_flag) {
 2192               		.loc 1 118 0
 2193 09c4 8091 0000 		lds r24,prev_state
 2194 09c8 28E2      		ldi r18,lo8(40)
 2195 09ca 422E      		mov r4,r18
 2196 09cc 21E3      		ldi r18,lo8(49)
 2197 09ce 522E      		mov r5,r18
 2198 09d0 6624      		clr r6
 2199 09d2 6394      		inc r6
 2200 09d4 712C      		mov r7,__zero_reg__
 2201 09d6 8130      		cpi r24,lo8(1)
 2202 09d8 01F4      		brne .+2
 2203 09da 00C0      		rjmp .L38
 2204 09dc 00C0      		rjmp .L32
 2205               	.LVL200:
 2206               	.L206:
 2207               	.LBB468:
 2208               	.LBB469:
 2209               	.LBB470:
 2210               	.LBB471:
 430:../../os/common/ports/AVR/chcore.h **** }
 2211               		.loc 3 430 0
 2212               	/* #APP */
 2213               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2214 09de F894      		cli
 2215               	 ;  0 "" 2
 2216               	.LVL201:
 2217               	/* #NOAPP */
 2218               	.LBE471:
 2219               	.LBE470:
 2220               	.LBE469:
 2221               	.LBB472:
 2222               	.LBB473:
 2223               	.LBB474:
 2224               	.LBB475:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 2225               		.loc 2 287 0
 2226 09e0 8981      		ldd r24,Y+1
 2227 09e2 9A81      		ldd r25,Y+2
 2228 09e4 892B      		or r24,r25
 2229 09e6 01F0      		breq .L57
 288:../../os/rt/include/chvt.h ****   }
 2230               		.loc 2 288 0
 2231 09e8 CE01      		movw r24,r28
 2232 09ea 0196      		adiw r24,1
 2233 09ec 0E94 0000 		call chVTDoResetI
 2234               	.LVL202:
 2235               	.L57:
 2236               	.LBE475:
 2237               	.LBE474:
 2238               		.loc 2 335 0
 2239 09f0 8E01      		movw r16,r28
 2240 09f2 0F5F      		subi r16,-1
 2241 09f4 1F4F      		sbci r17,-1
 2242 09f6 20E0      		ldi r18,lo8(gs(vt_cb))
 2243 09f8 30E0      		ldi r19,hi8(gs(vt_cb))
 2244 09fa 48E2      		ldi r20,lo8(40)
 2245 09fc 51E3      		ldi r21,lo8(49)
 2246 09fe 61E0      		ldi r22,lo8(1)
 2247 0a00 70E0      		ldi r23,0
 2248 0a02 C801      		movw r24,r16
 2249 0a04 0E94 0000 		call chVTDoSetI
 2250               	.LVL203:
 2251               	.LBE473:
 2252               	.LBE472:
 2253               	.LBB476:
 2254               	.LBB477:
 2255               	.LBB478:
 2256               	.LBB479:
 2257               		.loc 3 440 0
 2258               	/* #APP */
 2259               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2260 0a08 7894      		sei
 2261               	 ;  0 "" 2
 2262               	/* #NOAPP */
 2263               	.LBE479:
 2264               	.LBE478:
 2265               	.LBE477:
 2266               	.LBE476:
 2267               	.LBE468:
 174:main.c        ****             if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 2268               		.loc 1 174 0
 2269 0a0a 8091 0000 		lds r24,main_vt_flag
 2270 0a0e 8823      		tst r24
 2271 0a10 01F0      		breq .L61
 2272 0a12 00C0      		rjmp .L58
 2273               	.L59:
 178:main.c        ****               dequeue();
 2274               		.loc 1 178 0
 2275 0a14 0397      		sbiw r24,3
 2276 0a16 01F0      		breq .L214
 2277               	.L60:
 182:main.c        ****           }
 2278               		.loc 1 182 0
 2279 0a18 6BE1      		ldi r22,lo8(27)
 2280 0a1a 76E0      		ldi r23,lo8(6)
 2281 0a1c 80E0      		ldi r24,0
 2282 0a1e 90E0      		ldi r25,0
 2283 0a20 0E94 0000 		call chThdSleep
 2284               	.LVL204:
 174:main.c        ****             if ((*rdp == AMB_SECUNDARIO) && flag_amb_sec == 0) {
 2285               		.loc 1 174 0
 2286 0a24 8091 0000 		lds r24,main_vt_flag
 2287 0a28 8111      		cpse r24,__zero_reg__
 2288 0a2a 00C0      		rjmp .L58
 2289               	.L61:
 175:main.c        ****               dequeue();
 2290               		.loc 1 175 0
 2291 0a2c E091 0000 		lds r30,rdp
 2292 0a30 F091 0000 		lds r31,rdp+1
 2293 0a34 8081      		ld r24,Z
 2294 0a36 9181      		ldd r25,Z+1
 2295 0a38 8430      		cpi r24,4
 2296 0a3a 9105      		cpc r25,__zero_reg__
 2297 0a3c 01F4      		brne .L59
 175:main.c        ****               dequeue();
 2298               		.loc 1 175 0 is_stmt 0 discriminator 1
 2299 0a3e 8091 0000 		lds r24,flag_amb_sec
 2300 0a42 8111      		cpse r24,__zero_reg__
 2301 0a44 00C0      		rjmp .L60
 176:main.c        ****               flag_amb_sec = 1;
 2302               		.loc 1 176 0 is_stmt 1
 2303 0a46 0E94 0000 		call dequeue
 2304               	.LVL205:
 177:main.c        ****             } else if ((*rdp == AMB_PRIMARIO) && flag_amb_prim == 0) {
 2305               		.loc 1 177 0
 2306 0a4a B092 0000 		sts flag_amb_sec,r11
 2307 0a4e 00C0      		rjmp .L60
 2308               	.L214:
 178:main.c        ****               dequeue();
 2309               		.loc 1 178 0 discriminator 1
 2310 0a50 8091 0000 		lds r24,flag_amb_prim
 2311 0a54 8111      		cpse r24,__zero_reg__
 2312 0a56 00C0      		rjmp .L60
 179:main.c        ****               flag_amb_prim = 1;
 2313               		.loc 1 179 0
 2314 0a58 0E94 0000 		call dequeue
 2315               	.LVL206:
 180:main.c        ****             }
 2316               		.loc 1 180 0
 2317 0a5c B092 0000 		sts flag_amb_prim,r11
 2318 0a60 00C0      		rjmp .L60
 2319               	.L58:
 185:main.c        ****         while (!main_vt_flag) {
 2320               		.loc 1 185 0
 2321 0a62 8091 0000 		lds r24,prev_state
 2322 0a66 8530      		cpi r24,lo8(5)
 2323 0a68 01F0      		breq .+2
 2324 0a6a 00C0      		rjmp .L56
 2325 0a6c 88E0      		ldi r24,lo8(8)
 2326 0a6e 482E      		mov r4,r24
 2327 0a70 8DE3      		ldi r24,lo8(61)
 2328 0a72 582E      		mov r5,r24
 2329 0a74 612C      		mov r6,__zero_reg__
 2330 0a76 712C      		mov r7,__zero_reg__
 2331 0a78 00C0      		rjmp .L62
 2332               	.LVL207:
 2333               	.L209:
 134:main.c        ****           if (ev == AMB_SECUNDARIO) {
 2334               		.loc 1 134 0
 2335 0a7a 8111      		cpse r24,__zero_reg__
 2336 0a7c 00C0      		rjmp .L44
 140:main.c        ****           g_state = AMARELO_PED_PRIM;
 2337               		.loc 1 140 0
 2338 0a7e F2E0      		ldi r31,2
 2339 0a80 CF16      		cp r12,r31
 2340 0a82 D104      		cpc r13,__zero_reg__
 2341 0a84 01F0      		breq .+2
 2342 0a86 00C0      		rjmp .L44
 141:main.c        ****           palClearLine(PRIMARIO_VERDE);
 2343               		.loc 1 141 0
 2344 0a88 83E0      		ldi r24,lo8(3)
 2345 0a8a 00C0      		rjmp .L205
 2346               		.cfi_endproc
 2347               	.LFE243:
 2349               		.section	.text.button_check,"ax",@progbits
 2350               	.global	button_check
 2352               	button_check:
 2353               	.LFB248:
 443:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 2354               		.loc 1 443 0
 2355               		.cfi_startproc
 2356               	.LVL208:
 2357 0000 CF92      		push r12
 2358               	.LCFI8:
 2359               		.cfi_def_cfa_offset 3
 2360               		.cfi_offset 12, -2
 2361 0002 DF92      		push r13
 2362               	.LCFI9:
 2363               		.cfi_def_cfa_offset 4
 2364               		.cfi_offset 13, -3
 2365 0004 EF92      		push r14
 2366               	.LCFI10:
 2367               		.cfi_def_cfa_offset 5
 2368               		.cfi_offset 14, -4
 2369 0006 CF93      		push r28
 2370               	.LCFI11:
 2371               		.cfi_def_cfa_offset 6
 2372               		.cfi_offset 28, -5
 2373               	/* prologue: function */
 2374               	/* frame size = 0 */
 2375               	/* stack size = 4 */
 2376               	.L__stack_usage = 4
 2377 0008 6B01      		movw r12,r22
 2378 000a E82E      		mov r14,r24
 447:main.c        ****     x1 = palReadLine(line);
 2379               		.loc 1 447 0
 2380 000c 4130      		cpi r20,lo8(1)
 2381 000e 01F0      		breq .L220
 452:main.c        ****     x2 = palReadLine(line);
 2382               		.loc 1 452 0
 2383 0010 4230      		cpi r20,lo8(2)
 2384 0012 01F4      		brne .+2
 2385 0014 00C0      		rjmp .L221
 457:main.c        ****     x3 = palReadLine(line);
 2386               		.loc 1 457 0
 2387 0016 4330      		cpi r20,lo8(3)
 2388 0018 01F4      		brne .+2
 2389 001a 00C0      		rjmp .L222
 462:main.c        ****     x4 = palReadLine(line);
 2390               		.loc 1 462 0
 2391 001c 4430      		cpi r20,lo8(4)
 2392 001e 01F0      		breq .L223
 2393               	.LVL209:
 469:main.c        **** }
 2394               		.loc 1 469 0
 2395 0020 81E0      		ldi r24,lo8(1)
 2396 0022 8227      		eor r24,r18
 470:main.c        **** 
 2397               		.loc 1 470 0
 2398 0024 8923      		and r24,r25
 2399               	/* epilogue start */
 2400 0026 CF91      		pop r28
 2401 0028 EF90      		pop r14
 2402               	.LVL210:
 2403 002a DF90      		pop r13
 2404 002c CF90      		pop r12
 2405               	.LVL211:
 2406 002e 0895      		ret
 2407               	.LVL212:
 2408               	.L223:
 463:main.c        ****     w = x4^old_x4;
 2409               		.loc 1 463 0
 2410 0030 0E94 0000 		call _pal_lld_getportfromline
 2411               	.LVL213:
 2412 0034 FC01      		movw r30,r24
 2413 0036 C081      		ld r28,Z
 2414 0038 8E2D      		mov r24,r14
 2415 003a B601      		movw r22,r12
 2416 003c 0E94 0000 		call _pal_lld_getpadfromline
 2417               	.LVL214:
 2418 0040 2C2F      		mov r18,r28
 2419 0042 30E0      		ldi r19,0
 2420 0044 00C0      		rjmp 2f
 2421               		1:
 2422 0046 3595      		asr r19
 2423 0048 2795      		ror r18
 2424               		2:
 2425 004a 8A95      		dec r24
 2426 004c 02F4      		brpl 1b
 2427 004e 2170      		andi r18,lo8(1)
 464:main.c        ****     old_x4 = x4;
 2428               		.loc 1 464 0
 2429 0050 9091 0000 		lds r25,old_x4.4160
 2430 0054 9227      		eor r25,r18
 2431               	.LVL215:
 465:main.c        ****     x = x4;
 2432               		.loc 1 465 0
 2433 0056 2093 0000 		sts old_x4.4160,r18
 2434               	.LVL216:
 469:main.c        **** }
 2435               		.loc 1 469 0
 2436 005a 81E0      		ldi r24,lo8(1)
 2437 005c 8227      		eor r24,r18
 470:main.c        **** 
 2438               		.loc 1 470 0
 2439 005e 8923      		and r24,r25
 2440               	/* epilogue start */
 2441 0060 CF91      		pop r28
 2442 0062 EF90      		pop r14
 2443               	.LVL217:
 2444 0064 DF90      		pop r13
 2445 0066 CF90      		pop r12
 2446 0068 0895      		ret
 2447               	.LVL218:
 2448               	.L220:
 448:main.c        ****     w = x1^old_x1;
 2449               		.loc 1 448 0
 2450 006a 0E94 0000 		call _pal_lld_getportfromline
 2451               	.LVL219:
 2452 006e FC01      		movw r30,r24
 2453 0070 C081      		ld r28,Z
 2454 0072 8E2D      		mov r24,r14
 2455 0074 B601      		movw r22,r12
 2456 0076 0E94 0000 		call _pal_lld_getpadfromline
 2457               	.LVL220:
 2458 007a 2C2F      		mov r18,r28
 2459 007c 30E0      		ldi r19,0
 2460 007e 00C0      		rjmp 2f
 2461               		1:
 2462 0080 3595      		asr r19
 2463 0082 2795      		ror r18
 2464               		2:
 2465 0084 8A95      		dec r24
 2466 0086 02F4      		brpl 1b
 2467 0088 2170      		andi r18,lo8(1)
 449:main.c        ****     old_x1 = x1;
 2468               		.loc 1 449 0
 2469 008a 9091 0000 		lds r25,old_x1.4154
 2470 008e 9227      		eor r25,r18
 2471               	.LVL221:
 450:main.c        ****     x = x1;
 2472               		.loc 1 450 0
 2473 0090 2093 0000 		sts old_x1.4154,r18
 2474               	.LVL222:
 469:main.c        **** }
 2475               		.loc 1 469 0
 2476 0094 81E0      		ldi r24,lo8(1)
 2477 0096 8227      		eor r24,r18
 470:main.c        **** 
 2478               		.loc 1 470 0
 2479 0098 8923      		and r24,r25
 2480               	/* epilogue start */
 2481 009a CF91      		pop r28
 2482 009c EF90      		pop r14
 2483               	.LVL223:
 2484 009e DF90      		pop r13
 2485 00a0 CF90      		pop r12
 2486 00a2 0895      		ret
 2487               	.LVL224:
 2488               	.L221:
 453:main.c        ****     w = x2^old_x2;
 2489               		.loc 1 453 0
 2490 00a4 0E94 0000 		call _pal_lld_getportfromline
 2491               	.LVL225:
 2492 00a8 FC01      		movw r30,r24
 2493 00aa C081      		ld r28,Z
 2494 00ac 8E2D      		mov r24,r14
 2495 00ae B601      		movw r22,r12
 2496 00b0 0E94 0000 		call _pal_lld_getpadfromline
 2497               	.LVL226:
 2498 00b4 2C2F      		mov r18,r28
 2499 00b6 30E0      		ldi r19,0
 2500 00b8 00C0      		rjmp 2f
 2501               		1:
 2502 00ba 3595      		asr r19
 2503 00bc 2795      		ror r18
 2504               		2:
 2505 00be 8A95      		dec r24
 2506 00c0 02F4      		brpl 1b
 2507 00c2 2170      		andi r18,lo8(1)
 454:main.c        ****     old_x2 = x2;
 2508               		.loc 1 454 0
 2509 00c4 9091 0000 		lds r25,old_x2.4156
 2510 00c8 9227      		eor r25,r18
 2511               	.LVL227:
 455:main.c        ****     x = x2;
 2512               		.loc 1 455 0
 2513 00ca 2093 0000 		sts old_x2.4156,r18
 2514               	.LVL228:
 469:main.c        **** }
 2515               		.loc 1 469 0
 2516 00ce 81E0      		ldi r24,lo8(1)
 2517 00d0 8227      		eor r24,r18
 470:main.c        **** 
 2518               		.loc 1 470 0
 2519 00d2 8923      		and r24,r25
 2520               	/* epilogue start */
 2521 00d4 CF91      		pop r28
 2522 00d6 EF90      		pop r14
 2523               	.LVL229:
 2524 00d8 DF90      		pop r13
 2525 00da CF90      		pop r12
 2526 00dc 0895      		ret
 2527               	.LVL230:
 2528               	.L222:
 458:main.c        ****     w = x3^old_x3;
 2529               		.loc 1 458 0
 2530 00de 0E94 0000 		call _pal_lld_getportfromline
 2531               	.LVL231:
 2532 00e2 FC01      		movw r30,r24
 2533 00e4 C081      		ld r28,Z
 2534 00e6 8E2D      		mov r24,r14
 2535 00e8 B601      		movw r22,r12
 2536 00ea 0E94 0000 		call _pal_lld_getpadfromline
 2537               	.LVL232:
 2538 00ee 2C2F      		mov r18,r28
 2539 00f0 30E0      		ldi r19,0
 2540 00f2 00C0      		rjmp 2f
 2541               		1:
 2542 00f4 3595      		asr r19
 2543 00f6 2795      		ror r18
 2544               		2:
 2545 00f8 8A95      		dec r24
 2546 00fa 02F4      		brpl 1b
 2547 00fc 2170      		andi r18,lo8(1)
 459:main.c        ****     old_x3 = x3;
 2548               		.loc 1 459 0
 2549 00fe 9091 0000 		lds r25,old_x3.4158
 2550 0102 9227      		eor r25,r18
 2551               	.LVL233:
 460:main.c        ****     x = x3;
 2552               		.loc 1 460 0
 2553 0104 2093 0000 		sts old_x3.4158,r18
 2554               	.LVL234:
 469:main.c        **** }
 2555               		.loc 1 469 0
 2556 0108 81E0      		ldi r24,lo8(1)
 2557 010a 8227      		eor r24,r18
 470:main.c        **** 
 2558               		.loc 1 470 0
 2559 010c 8923      		and r24,r25
 2560               	/* epilogue start */
 2561 010e CF91      		pop r28
 2562 0110 EF90      		pop r14
 2563               	.LVL235:
 2564 0112 DF90      		pop r13
 2565 0114 CF90      		pop r12
 2566 0116 0895      		ret
 2567               		.cfi_endproc
 2568               	.LFE248:
 2570               		.section	.text.startup.main,"ax",@progbits
 2571               	.global	main
 2573               	main:
 2574               	.LFB244:
 300:main.c        ****   SerialConfig config = {.sc_brr = UBRR2x(9600),
 2575               		.loc 1 300 0
 2576               		.cfi_startproc
 2577 0000 CF93      		push r28
 2578               	.LCFI12:
 2579               		.cfi_def_cfa_offset 3
 2580               		.cfi_offset 28, -2
 2581 0002 DF93      		push r29
 2582               	.LCFI13:
 2583               		.cfi_def_cfa_offset 4
 2584               		.cfi_offset 29, -3
 2585 0004 00D0      		rcall .
 2586 0006 1F92      		push __zero_reg__
 2587               	.LCFI14:
 2588               		.cfi_def_cfa_offset 7
 2589 0008 CDB7      		in r28,__SP_L__
 2590 000a DEB7      		in r29,__SP_H__
 2591               	.LCFI15:
 2592               		.cfi_def_cfa_register 28
 2593               	/* prologue: function */
 2594               	/* frame size = 3 */
 2595               	/* stack size = 5 */
 2596               	.L__stack_usage = 5
 301:main.c        ****                          .sc_bits_per_char = USART_CHAR_SIZE_8
 2597               		.loc 1 301 0
 2598 000c 8FEC      		ldi r24,lo8(-49)
 2599 000e 90E0      		ldi r25,0
 2600 0010 9A83      		std Y+2,r25
 2601 0012 8983      		std Y+1,r24
 2602 0014 83E0      		ldi r24,lo8(3)
 2603 0016 8B83      		std Y+3,r24
 305:main.c        ****   /*
 2604               		.loc 1 305 0
 2605 0018 0E94 0000 		call queueInit
 2606               	.LVL236:
 313:main.c        ****   chSysInit();
 2607               		.loc 1 313 0
 2608 001c 0E94 0000 		call halInit
 2609               	.LVL237:
 314:main.c        **** 
 2610               		.loc 1 314 0
 2611 0020 0E94 0000 		call chSysInit
 2612               	.LVL238:
 316:main.c        **** 
 2613               		.loc 1 316 0
 2614 0024 BE01      		movw r22,r28
 2615 0026 6F5F      		subi r22,-1
 2616 0028 7F4F      		sbci r23,-1
 2617 002a 80E0      		ldi r24,lo8(SD1)
 2618 002c 90E0      		ldi r25,hi8(SD1)
 2619 002e 0E94 0000 		call sdStart
 2620               	.LVL239:
 319:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 2621               		.loc 1 319 0
 2622 0032 62E0      		ldi r22,lo8(2)
 2623 0034 86E2      		ldi r24,lo8(38)
 2624 0036 90E0      		ldi r25,0
 2625 0038 0E94 0000 		call _pal_lld_setlineid
 2626               	.LVL240:
 2627 003c 0E94 0000 		call _pal_lld_getpadfromline
 2628               	.LVL241:
 2629 0040 F82E      		mov r15,r24
 2630 0042 62E0      		ldi r22,lo8(2)
 2631 0044 86E2      		ldi r24,lo8(38)
 2632 0046 90E0      		ldi r25,0
 2633 0048 0E94 0000 		call _pal_lld_setlineid
 2634               	.LVL242:
 2635 004c 0E94 0000 		call _pal_lld_getportfromline
 2636               	.LVL243:
 2637 0050 01E0      		ldi r16,lo8(1)
 2638 0052 10E0      		ldi r17,0
 2639 0054 B801      		movw r22,r16
 2640 0056 00C0      		rjmp 2f
 2641               		1:
 2642 0058 660F      		lsl r22
 2643               		2:
 2644 005a FA94      		dec r15
 2645 005c 02F4      		brpl 1b
 2646 005e 43E0      		ldi r20,lo8(3)
 2647 0060 0E94 0000 		call _pal_lld_setgroupmode
 2648               	.LVL244:
 320:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 2649               		.loc 1 320 0
 2650 0064 64E0      		ldi r22,lo8(4)
 2651 0066 86E2      		ldi r24,lo8(38)
 2652 0068 90E0      		ldi r25,0
 2653 006a 0E94 0000 		call _pal_lld_setlineid
 2654               	.LVL245:
 2655 006e 0E94 0000 		call _pal_lld_getpadfromline
 2656               	.LVL246:
 2657 0072 F82E      		mov r15,r24
 2658 0074 64E0      		ldi r22,lo8(4)
 2659 0076 86E2      		ldi r24,lo8(38)
 2660 0078 90E0      		ldi r25,0
 2661 007a 0E94 0000 		call _pal_lld_setlineid
 2662               	.LVL247:
 2663 007e 0E94 0000 		call _pal_lld_getportfromline
 2664               	.LVL248:
 2665 0082 B801      		movw r22,r16
 2666 0084 00C0      		rjmp 2f
 2667               		1:
 2668 0086 660F      		lsl r22
 2669               		2:
 2670 0088 FA94      		dec r15
 2671 008a 02F4      		brpl 1b
 2672 008c 43E0      		ldi r20,lo8(3)
 2673 008e 0E94 0000 		call _pal_lld_setgroupmode
 2674               	.LVL249:
 321:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 2675               		.loc 1 321 0
 2676 0092 63E0      		ldi r22,lo8(3)
 2677 0094 86E2      		ldi r24,lo8(38)
 2678 0096 90E0      		ldi r25,0
 2679 0098 0E94 0000 		call _pal_lld_setlineid
 2680               	.LVL250:
 2681 009c 0E94 0000 		call _pal_lld_getpadfromline
 2682               	.LVL251:
 2683 00a0 F82E      		mov r15,r24
 2684 00a2 63E0      		ldi r22,lo8(3)
 2685 00a4 86E2      		ldi r24,lo8(38)
 2686 00a6 90E0      		ldi r25,0
 2687 00a8 0E94 0000 		call _pal_lld_setlineid
 2688               	.LVL252:
 2689 00ac 0E94 0000 		call _pal_lld_getportfromline
 2690               	.LVL253:
 2691 00b0 B801      		movw r22,r16
 2692 00b2 00C0      		rjmp 2f
 2693               		1:
 2694 00b4 660F      		lsl r22
 2695               		2:
 2696 00b6 FA94      		dec r15
 2697 00b8 02F4      		brpl 1b
 2698 00ba 43E0      		ldi r20,lo8(3)
 2699 00bc 0E94 0000 		call _pal_lld_setgroupmode
 2700               	.LVL254:
 322:main.c        **** 
 2701               		.loc 1 322 0
 2702 00c0 65E0      		ldi r22,lo8(5)
 2703 00c2 86E2      		ldi r24,lo8(38)
 2704 00c4 90E0      		ldi r25,0
 2705 00c6 0E94 0000 		call _pal_lld_setlineid
 2706               	.LVL255:
 2707 00ca 0E94 0000 		call _pal_lld_getpadfromline
 2708               	.LVL256:
 2709 00ce F82E      		mov r15,r24
 2710 00d0 65E0      		ldi r22,lo8(5)
 2711 00d2 86E2      		ldi r24,lo8(38)
 2712 00d4 90E0      		ldi r25,0
 2713 00d6 0E94 0000 		call _pal_lld_setlineid
 2714               	.LVL257:
 2715 00da 0E94 0000 		call _pal_lld_getportfromline
 2716               	.LVL258:
 2717 00de B801      		movw r22,r16
 2718 00e0 00C0      		rjmp 2f
 2719               		1:
 2720 00e2 660F      		lsl r22
 2721               		2:
 2722 00e4 FA94      		dec r15
 2723 00e6 02F4      		brpl 1b
 2724 00e8 43E0      		ldi r20,lo8(3)
 2725 00ea 0E94 0000 		call _pal_lld_setgroupmode
 2726               	.LVL259:
 325:main.c        ****   palClearLine(PEDESTRE_VERDE);
 2727               		.loc 1 325 0
 2728 00ee 63E0      		ldi r22,lo8(3)
 2729 00f0 83E2      		ldi r24,lo8(35)
 2730 00f2 90E0      		ldi r25,0
 2731 00f4 0E94 0000 		call _pal_lld_setlineid
 2732               	.LVL260:
 2733 00f8 0E94 0000 		call _pal_lld_getpadfromline
 2734               	.LVL261:
 2735 00fc F82E      		mov r15,r24
 2736 00fe 63E0      		ldi r22,lo8(3)
 2737 0100 83E2      		ldi r24,lo8(35)
 2738 0102 90E0      		ldi r25,0
 2739 0104 0E94 0000 		call _pal_lld_setlineid
 2740               	.LVL262:
 2741 0108 0E94 0000 		call _pal_lld_getportfromline
 2742               	.LVL263:
 2743 010c B801      		movw r22,r16
 2744 010e 00C0      		rjmp 2f
 2745               		1:
 2746 0110 660F      		lsl r22
 2747               		2:
 2748 0112 FA94      		dec r15
 2749 0114 02F4      		brpl 1b
 2750 0116 46E0      		ldi r20,lo8(6)
 2751 0118 0E94 0000 		call _pal_lld_setgroupmode
 2752               	.LVL264:
 326:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2753               		.loc 1 326 0
 2754 011c 63E0      		ldi r22,lo8(3)
 2755 011e 83E2      		ldi r24,lo8(35)
 2756 0120 90E0      		ldi r25,0
 2757 0122 0E94 0000 		call _pal_lld_setlineid
 2758               	.LVL265:
 2759 0126 0E94 0000 		call _pal_lld_getpadfromline
 2760               	.LVL266:
 2761 012a F82E      		mov r15,r24
 2762 012c 63E0      		ldi r22,lo8(3)
 2763 012e 83E2      		ldi r24,lo8(35)
 2764 0130 90E0      		ldi r25,0
 2765 0132 0E94 0000 		call _pal_lld_setlineid
 2766               	.LVL267:
 2767 0136 0E94 0000 		call _pal_lld_getportfromline
 2768               	.LVL268:
 2769 013a FC01      		movw r30,r24
 2770 013c 9281      		ldd r25,Z+2
 2771 013e 9801      		movw r18,r16
 2772 0140 00C0      		rjmp 2f
 2773               		1:
 2774 0142 220F      		lsl r18
 2775 0144 331F      		rol r19
 2776               		2:
 2777 0146 FA94      		dec r15
 2778 0148 02F4      		brpl 1b
 2779 014a 2095      		com r18
 2780 014c 3095      		com r19
 2781 014e 9223      		and r25,r18
 2782 0150 9283      		std Z+2,r25
 327:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 2783               		.loc 1 327 0
 2784 0152 62E0      		ldi r22,lo8(2)
 2785 0154 83E2      		ldi r24,lo8(35)
 2786 0156 90E0      		ldi r25,0
 2787 0158 0E94 0000 		call _pal_lld_setlineid
 2788               	.LVL269:
 2789 015c 0E94 0000 		call _pal_lld_getpadfromline
 2790               	.LVL270:
 2791 0160 F82E      		mov r15,r24
 2792 0162 62E0      		ldi r22,lo8(2)
 2793 0164 83E2      		ldi r24,lo8(35)
 2794 0166 90E0      		ldi r25,0
 2795 0168 0E94 0000 		call _pal_lld_setlineid
 2796               	.LVL271:
 2797 016c 0E94 0000 		call _pal_lld_getportfromline
 2798               	.LVL272:
 2799 0170 B801      		movw r22,r16
 2800 0172 00C0      		rjmp 2f
 2801               		1:
 2802 0174 660F      		lsl r22
 2803               		2:
 2804 0176 FA94      		dec r15
 2805 0178 02F4      		brpl 1b
 2806 017a 46E0      		ldi r20,lo8(6)
 2807 017c 0E94 0000 		call _pal_lld_setgroupmode
 2808               	.LVL273:
 328:main.c        **** 
 2809               		.loc 1 328 0
 2810 0180 62E0      		ldi r22,lo8(2)
 2811 0182 83E2      		ldi r24,lo8(35)
 2812 0184 90E0      		ldi r25,0
 2813 0186 0E94 0000 		call _pal_lld_setlineid
 2814               	.LVL274:
 2815 018a 0E94 0000 		call _pal_lld_getpadfromline
 2816               	.LVL275:
 2817 018e F82E      		mov r15,r24
 2818 0190 62E0      		ldi r22,lo8(2)
 2819 0192 83E2      		ldi r24,lo8(35)
 2820 0194 90E0      		ldi r25,0
 2821 0196 0E94 0000 		call _pal_lld_setlineid
 2822               	.LVL276:
 2823 019a 0E94 0000 		call _pal_lld_getportfromline
 2824               	.LVL277:
 2825 019e FC01      		movw r30,r24
 2826 01a0 9281      		ldd r25,Z+2
 2827 01a2 9801      		movw r18,r16
 2828 01a4 00C0      		rjmp 2f
 2829               		1:
 2830 01a6 220F      		lsl r18
 2831 01a8 331F      		rol r19
 2832               		2:
 2833 01aa FA94      		dec r15
 2834 01ac 02F4      		brpl 1b
 2835 01ae 2095      		com r18
 2836 01b0 3095      		com r19
 2837 01b2 9223      		and r25,r18
 2838 01b4 9283      		std Z+2,r25
 331:main.c        ****   palClearLine(PRIMARIO_VERDE);
 2839               		.loc 1 331 0
 2840 01b6 67E0      		ldi r22,lo8(7)
 2841 01b8 89E2      		ldi r24,lo8(41)
 2842 01ba 90E0      		ldi r25,0
 2843 01bc 0E94 0000 		call _pal_lld_setlineid
 2844               	.LVL278:
 2845 01c0 0E94 0000 		call _pal_lld_getpadfromline
 2846               	.LVL279:
 2847 01c4 F82E      		mov r15,r24
 2848 01c6 67E0      		ldi r22,lo8(7)
 2849 01c8 89E2      		ldi r24,lo8(41)
 2850 01ca 90E0      		ldi r25,0
 2851 01cc 0E94 0000 		call _pal_lld_setlineid
 2852               	.LVL280:
 2853 01d0 0E94 0000 		call _pal_lld_getportfromline
 2854               	.LVL281:
 2855 01d4 B801      		movw r22,r16
 2856 01d6 00C0      		rjmp 2f
 2857               		1:
 2858 01d8 660F      		lsl r22
 2859               		2:
 2860 01da FA94      		dec r15
 2861 01dc 02F4      		brpl 1b
 2862 01de 46E0      		ldi r20,lo8(6)
 2863 01e0 0E94 0000 		call _pal_lld_setgroupmode
 2864               	.LVL282:
 332:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 2865               		.loc 1 332 0
 2866 01e4 67E0      		ldi r22,lo8(7)
 2867 01e6 89E2      		ldi r24,lo8(41)
 2868 01e8 90E0      		ldi r25,0
 2869 01ea 0E94 0000 		call _pal_lld_setlineid
 2870               	.LVL283:
 2871 01ee 0E94 0000 		call _pal_lld_getpadfromline
 2872               	.LVL284:
 2873 01f2 F82E      		mov r15,r24
 2874 01f4 67E0      		ldi r22,lo8(7)
 2875 01f6 89E2      		ldi r24,lo8(41)
 2876 01f8 90E0      		ldi r25,0
 2877 01fa 0E94 0000 		call _pal_lld_setlineid
 2878               	.LVL285:
 2879 01fe 0E94 0000 		call _pal_lld_getportfromline
 2880               	.LVL286:
 2881 0202 FC01      		movw r30,r24
 2882 0204 9281      		ldd r25,Z+2
 2883 0206 9801      		movw r18,r16
 2884 0208 00C0      		rjmp 2f
 2885               		1:
 2886 020a 220F      		lsl r18
 2887 020c 331F      		rol r19
 2888               		2:
 2889 020e FA94      		dec r15
 2890 0210 02F4      		brpl 1b
 2891 0212 2095      		com r18
 2892 0214 3095      		com r19
 2893 0216 9223      		and r25,r18
 2894 0218 9283      		std Z+2,r25
 333:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 2895               		.loc 1 333 0
 2896 021a 64E0      		ldi r22,lo8(4)
 2897 021c 89E2      		ldi r24,lo8(41)
 2898 021e 90E0      		ldi r25,0
 2899 0220 0E94 0000 		call _pal_lld_setlineid
 2900               	.LVL287:
 2901 0224 0E94 0000 		call _pal_lld_getpadfromline
 2902               	.LVL288:
 2903 0228 F82E      		mov r15,r24
 2904 022a 64E0      		ldi r22,lo8(4)
 2905 022c 89E2      		ldi r24,lo8(41)
 2906 022e 90E0      		ldi r25,0
 2907 0230 0E94 0000 		call _pal_lld_setlineid
 2908               	.LVL289:
 2909 0234 0E94 0000 		call _pal_lld_getportfromline
 2910               	.LVL290:
 2911 0238 B801      		movw r22,r16
 2912 023a 00C0      		rjmp 2f
 2913               		1:
 2914 023c 660F      		lsl r22
 2915               		2:
 2916 023e FA94      		dec r15
 2917 0240 02F4      		brpl 1b
 2918 0242 46E0      		ldi r20,lo8(6)
 2919 0244 0E94 0000 		call _pal_lld_setgroupmode
 2920               	.LVL291:
 334:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 2921               		.loc 1 334 0
 2922 0248 64E0      		ldi r22,lo8(4)
 2923 024a 89E2      		ldi r24,lo8(41)
 2924 024c 90E0      		ldi r25,0
 2925 024e 0E94 0000 		call _pal_lld_setlineid
 2926               	.LVL292:
 2927 0252 0E94 0000 		call _pal_lld_getpadfromline
 2928               	.LVL293:
 2929 0256 F82E      		mov r15,r24
 2930 0258 64E0      		ldi r22,lo8(4)
 2931 025a 89E2      		ldi r24,lo8(41)
 2932 025c 90E0      		ldi r25,0
 2933 025e 0E94 0000 		call _pal_lld_setlineid
 2934               	.LVL294:
 2935 0262 0E94 0000 		call _pal_lld_getportfromline
 2936               	.LVL295:
 2937 0266 FC01      		movw r30,r24
 2938 0268 9281      		ldd r25,Z+2
 2939 026a 9801      		movw r18,r16
 2940 026c 00C0      		rjmp 2f
 2941               		1:
 2942 026e 220F      		lsl r18
 2943 0270 331F      		rol r19
 2944               		2:
 2945 0272 FA94      		dec r15
 2946 0274 02F4      		brpl 1b
 2947 0276 2095      		com r18
 2948 0278 3095      		com r19
 2949 027a 9223      		and r25,r18
 2950 027c 9283      		std Z+2,r25
 335:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 2951               		.loc 1 335 0
 2952 027e 66E0      		ldi r22,lo8(6)
 2953 0280 89E2      		ldi r24,lo8(41)
 2954 0282 90E0      		ldi r25,0
 2955 0284 0E94 0000 		call _pal_lld_setlineid
 2956               	.LVL296:
 2957 0288 0E94 0000 		call _pal_lld_getpadfromline
 2958               	.LVL297:
 2959 028c F82E      		mov r15,r24
 2960 028e 66E0      		ldi r22,lo8(6)
 2961 0290 89E2      		ldi r24,lo8(41)
 2962 0292 90E0      		ldi r25,0
 2963 0294 0E94 0000 		call _pal_lld_setlineid
 2964               	.LVL298:
 2965 0298 0E94 0000 		call _pal_lld_getportfromline
 2966               	.LVL299:
 2967 029c B801      		movw r22,r16
 2968 029e 00C0      		rjmp 2f
 2969               		1:
 2970 02a0 660F      		lsl r22
 2971               		2:
 2972 02a2 FA94      		dec r15
 2973 02a4 02F4      		brpl 1b
 2974 02a6 46E0      		ldi r20,lo8(6)
 2975 02a8 0E94 0000 		call _pal_lld_setgroupmode
 2976               	.LVL300:
 336:main.c        **** 
 2977               		.loc 1 336 0
 2978 02ac 66E0      		ldi r22,lo8(6)
 2979 02ae 89E2      		ldi r24,lo8(41)
 2980 02b0 90E0      		ldi r25,0
 2981 02b2 0E94 0000 		call _pal_lld_setlineid
 2982               	.LVL301:
 2983 02b6 0E94 0000 		call _pal_lld_getpadfromline
 2984               	.LVL302:
 2985 02ba F82E      		mov r15,r24
 2986 02bc 66E0      		ldi r22,lo8(6)
 2987 02be 89E2      		ldi r24,lo8(41)
 2988 02c0 90E0      		ldi r25,0
 2989 02c2 0E94 0000 		call _pal_lld_setlineid
 2990               	.LVL303:
 2991 02c6 0E94 0000 		call _pal_lld_getportfromline
 2992               	.LVL304:
 2993 02ca FC01      		movw r30,r24
 2994 02cc 9281      		ldd r25,Z+2
 2995 02ce 9801      		movw r18,r16
 2996 02d0 00C0      		rjmp 2f
 2997               		1:
 2998 02d2 220F      		lsl r18
 2999 02d4 331F      		rol r19
 3000               		2:
 3001 02d6 FA94      		dec r15
 3002 02d8 02F4      		brpl 1b
 3003 02da 2095      		com r18
 3004 02dc 3095      		com r19
 3005 02de 9223      		and r25,r18
 3006 02e0 9283      		std Z+2,r25
 339:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 3007               		.loc 1 339 0
 3008 02e2 61E0      		ldi r22,lo8(1)
 3009 02e4 83E2      		ldi r24,lo8(35)
 3010 02e6 90E0      		ldi r25,0
 3011 02e8 0E94 0000 		call _pal_lld_setlineid
 3012               	.LVL305:
 3013 02ec 0E94 0000 		call _pal_lld_getpadfromline
 3014               	.LVL306:
 3015 02f0 F82E      		mov r15,r24
 3016 02f2 61E0      		ldi r22,lo8(1)
 3017 02f4 83E2      		ldi r24,lo8(35)
 3018 02f6 90E0      		ldi r25,0
 3019 02f8 0E94 0000 		call _pal_lld_setlineid
 3020               	.LVL307:
 3021 02fc 0E94 0000 		call _pal_lld_getportfromline
 3022               	.LVL308:
 3023 0300 B801      		movw r22,r16
 3024 0302 00C0      		rjmp 2f
 3025               		1:
 3026 0304 660F      		lsl r22
 3027               		2:
 3028 0306 FA94      		dec r15
 3029 0308 02F4      		brpl 1b
 3030 030a 46E0      		ldi r20,lo8(6)
 3031 030c 0E94 0000 		call _pal_lld_setgroupmode
 3032               	.LVL309:
 340:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 3033               		.loc 1 340 0
 3034 0310 61E0      		ldi r22,lo8(1)
 3035 0312 83E2      		ldi r24,lo8(35)
 3036 0314 90E0      		ldi r25,0
 3037 0316 0E94 0000 		call _pal_lld_setlineid
 3038               	.LVL310:
 3039 031a 0E94 0000 		call _pal_lld_getpadfromline
 3040               	.LVL311:
 3041 031e F82E      		mov r15,r24
 3042 0320 61E0      		ldi r22,lo8(1)
 3043 0322 83E2      		ldi r24,lo8(35)
 3044 0324 90E0      		ldi r25,0
 3045 0326 0E94 0000 		call _pal_lld_setlineid
 3046               	.LVL312:
 3047 032a 0E94 0000 		call _pal_lld_getportfromline
 3048               	.LVL313:
 3049 032e FC01      		movw r30,r24
 3050 0330 9281      		ldd r25,Z+2
 3051 0332 9801      		movw r18,r16
 3052 0334 00C0      		rjmp 2f
 3053               		1:
 3054 0336 220F      		lsl r18
 3055 0338 331F      		rol r19
 3056               		2:
 3057 033a FA94      		dec r15
 3058 033c 02F4      		brpl 1b
 3059 033e 2095      		com r18
 3060 0340 3095      		com r19
 3061 0342 9223      		and r25,r18
 3062 0344 9283      		std Z+2,r25
 341:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 3063               		.loc 1 341 0
 3064 0346 65E0      		ldi r22,lo8(5)
 3065 0348 89E2      		ldi r24,lo8(41)
 3066 034a 90E0      		ldi r25,0
 3067 034c 0E94 0000 		call _pal_lld_setlineid
 3068               	.LVL314:
 3069 0350 0E94 0000 		call _pal_lld_getpadfromline
 3070               	.LVL315:
 3071 0354 F82E      		mov r15,r24
 3072 0356 65E0      		ldi r22,lo8(5)
 3073 0358 89E2      		ldi r24,lo8(41)
 3074 035a 90E0      		ldi r25,0
 3075 035c 0E94 0000 		call _pal_lld_setlineid
 3076               	.LVL316:
 3077 0360 0E94 0000 		call _pal_lld_getportfromline
 3078               	.LVL317:
 3079 0364 B801      		movw r22,r16
 3080 0366 00C0      		rjmp 2f
 3081               		1:
 3082 0368 660F      		lsl r22
 3083               		2:
 3084 036a FA94      		dec r15
 3085 036c 02F4      		brpl 1b
 3086 036e 46E0      		ldi r20,lo8(6)
 3087 0370 0E94 0000 		call _pal_lld_setgroupmode
 3088               	.LVL318:
 342:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 3089               		.loc 1 342 0
 3090 0374 65E0      		ldi r22,lo8(5)
 3091 0376 89E2      		ldi r24,lo8(41)
 3092 0378 90E0      		ldi r25,0
 3093 037a 0E94 0000 		call _pal_lld_setlineid
 3094               	.LVL319:
 3095 037e 0E94 0000 		call _pal_lld_getpadfromline
 3096               	.LVL320:
 3097 0382 F82E      		mov r15,r24
 3098 0384 65E0      		ldi r22,lo8(5)
 3099 0386 89E2      		ldi r24,lo8(41)
 3100 0388 90E0      		ldi r25,0
 3101 038a 0E94 0000 		call _pal_lld_setlineid
 3102               	.LVL321:
 3103 038e 0E94 0000 		call _pal_lld_getportfromline
 3104               	.LVL322:
 3105 0392 FC01      		movw r30,r24
 3106 0394 9281      		ldd r25,Z+2
 3107 0396 9801      		movw r18,r16
 3108 0398 00C0      		rjmp 2f
 3109               		1:
 3110 039a 220F      		lsl r18
 3111 039c 331F      		rol r19
 3112               		2:
 3113 039e FA94      		dec r15
 3114 03a0 02F4      		brpl 1b
 3115 03a2 2095      		com r18
 3116 03a4 3095      		com r19
 3117 03a6 9223      		and r25,r18
 3118 03a8 9283      		std Z+2,r25
 343:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 3119               		.loc 1 343 0
 3120 03aa 60E0      		ldi r22,0
 3121 03ac 83E2      		ldi r24,lo8(35)
 3122 03ae 90E0      		ldi r25,0
 3123 03b0 0E94 0000 		call _pal_lld_setlineid
 3124               	.LVL323:
 3125 03b4 0E94 0000 		call _pal_lld_getpadfromline
 3126               	.LVL324:
 3127 03b8 F82E      		mov r15,r24
 3128 03ba 60E0      		ldi r22,0
 3129 03bc 83E2      		ldi r24,lo8(35)
 3130 03be 90E0      		ldi r25,0
 3131 03c0 0E94 0000 		call _pal_lld_setlineid
 3132               	.LVL325:
 3133 03c4 0E94 0000 		call _pal_lld_getportfromline
 3134               	.LVL326:
 3135 03c8 B801      		movw r22,r16
 3136 03ca 00C0      		rjmp 2f
 3137               		1:
 3138 03cc 660F      		lsl r22
 3139               		2:
 3140 03ce FA94      		dec r15
 3141 03d0 02F4      		brpl 1b
 3142 03d2 46E0      		ldi r20,lo8(6)
 3143 03d4 0E94 0000 		call _pal_lld_setgroupmode
 3144               	.LVL327:
 344:main.c        **** 
 3145               		.loc 1 344 0
 3146 03d8 60E0      		ldi r22,0
 3147 03da 83E2      		ldi r24,lo8(35)
 3148 03dc 90E0      		ldi r25,0
 3149 03de 0E94 0000 		call _pal_lld_setlineid
 3150               	.LVL328:
 3151 03e2 0E94 0000 		call _pal_lld_getpadfromline
 3152               	.LVL329:
 3153 03e6 F82E      		mov r15,r24
 3154 03e8 60E0      		ldi r22,0
 3155 03ea 83E2      		ldi r24,lo8(35)
 3156 03ec 90E0      		ldi r25,0
 3157 03ee 0E94 0000 		call _pal_lld_setlineid
 3158               	.LVL330:
 3159 03f2 0E94 0000 		call _pal_lld_getportfromline
 3160               	.LVL331:
 3161 03f6 FC01      		movw r30,r24
 3162 03f8 9281      		ldd r25,Z+2
 3163 03fa 9801      		movw r18,r16
 3164 03fc 00C0      		rjmp 2f
 3165               		1:
 3166 03fe 220F      		lsl r18
 3167 0400 331F      		rol r19
 3168               		2:
 3169 0402 FA94      		dec r15
 3170 0404 02F4      		brpl 1b
 3171 0406 2095      		com r18
 3172 0408 3095      		com r19
 3173 040a 2923      		and r18,r25
 3174 040c 2283      		std Z+2,r18
 349:main.c        **** 
 3175               		.loc 1 349 0
 3176 040e 10E0      		ldi r17,0
 3177 0410 00E0      		ldi r16,0
 3178 0412 20E0      		ldi r18,lo8(gs(Thread1))
 3179 0414 30E0      		ldi r19,hi8(gs(Thread1))
 3180 0416 40E8      		ldi r20,lo8(-128)
 3181 0418 63E8      		ldi r22,lo8(-125)
 3182 041a 70E0      		ldi r23,0
 3183 041c 80E0      		ldi r24,lo8(waThread1)
 3184 041e 90E0      		ldi r25,hi8(waThread1)
 3185 0420 0E94 0000 		call chThdCreateStatic
 3186               	.LVL332:
 3187 0424 00C0      		rjmp .L229
 3188               	.L233:
 355:main.c        ****     }
 3189               		.loc 1 355 0
 3190 0426 84E0      		ldi r24,lo8(4)
 3191 0428 90E0      		ldi r25,0
 3192 042a 0E94 0000 		call enqueue
 3193               	.LVL333:
 3194               	.L226:
 370:main.c        ****   }
 3195               		.loc 1 370 0
 3196 042e 6EE0      		ldi r22,lo8(14)
 3197 0430 73E0      		ldi r23,lo8(3)
 3198 0432 80E0      		ldi r24,0
 3199 0434 90E0      		ldi r25,0
 3200 0436 0E94 0000 		call chThdSleep
 3201               	.LVL334:
 3202               	.L229:
 353:main.c        ****     {
 3203               		.loc 1 353 0
 3204 043a 65E0      		ldi r22,lo8(5)
 3205 043c 86E2      		ldi r24,lo8(38)
 3206 043e 90E0      		ldi r25,0
 3207 0440 0E94 0000 		call _pal_lld_setlineid
 3208               	.LVL335:
 3209 0444 41E0      		ldi r20,lo8(1)
 3210 0446 0E94 0000 		call button_check
 3211               	.LVL336:
 3212 044a 8111      		cpse r24,__zero_reg__
 3213 044c 00C0      		rjmp .L233
 357:main.c        ****     {
 3214               		.loc 1 357 0
 3215 044e 63E0      		ldi r22,lo8(3)
 3216 0450 86E2      		ldi r24,lo8(38)
 3217 0452 90E0      		ldi r25,0
 3218 0454 0E94 0000 		call _pal_lld_setlineid
 3219               	.LVL337:
 3220 0458 42E0      		ldi r20,lo8(2)
 3221 045a 0E94 0000 		call button_check
 3222               	.LVL338:
 3223 045e 8823      		tst r24
 3224 0460 01F0      		breq .L227
 359:main.c        ****     }
 3225               		.loc 1 359 0
 3226 0462 83E0      		ldi r24,lo8(3)
 3227 0464 90E0      		ldi r25,0
 3228 0466 0E94 0000 		call enqueue
 3229               	.LVL339:
 3230 046a 00C0      		rjmp .L226
 3231               	.L227:
 361:main.c        ****     {
 3232               		.loc 1 361 0
 3233 046c 64E0      		ldi r22,lo8(4)
 3234 046e 86E2      		ldi r24,lo8(38)
 3235 0470 90E0      		ldi r25,0
 3236 0472 0E94 0000 		call _pal_lld_setlineid
 3237               	.LVL340:
 3238 0476 43E0      		ldi r20,lo8(3)
 3239 0478 0E94 0000 		call button_check
 3240               	.LVL341:
 3241 047c 8823      		tst r24
 3242 047e 01F0      		breq .L228
 363:main.c        ****     }
 3243               		.loc 1 363 0
 3244 0480 81E0      		ldi r24,lo8(1)
 3245 0482 90E0      		ldi r25,0
 3246 0484 0E94 0000 		call enqueue
 3247               	.LVL342:
 3248 0488 00C0      		rjmp .L226
 3249               	.L228:
 365:main.c        ****     {
 3250               		.loc 1 365 0
 3251 048a 62E0      		ldi r22,lo8(2)
 3252 048c 86E2      		ldi r24,lo8(38)
 3253 048e 90E0      		ldi r25,0
 3254 0490 0E94 0000 		call _pal_lld_setlineid
 3255               	.LVL343:
 3256 0494 44E0      		ldi r20,lo8(4)
 3257 0496 0E94 0000 		call button_check
 3258               	.LVL344:
 3259 049a 8823      		tst r24
 3260 049c 01F0      		breq .L226
 367:main.c        ****     }
 3261               		.loc 1 367 0
 3262 049e 82E0      		ldi r24,lo8(2)
 3263 04a0 90E0      		ldi r25,0
 3264 04a2 0E94 0000 		call enqueue
 3265               	.LVL345:
 3266 04a6 00C0      		rjmp .L226
 3267               		.cfi_endproc
 3268               	.LFE244:
 3270               		.section	.bss.old_x4.4160,"aw",@nobits
 3273               	old_x4.4160:
 3274 0000 00        		.zero	1
 3275               		.section	.bss.old_x3.4158,"aw",@nobits
 3278               	old_x3.4158:
 3279 0000 00        		.zero	1
 3280               		.section	.bss.old_x2.4156,"aw",@nobits
 3283               	old_x2.4156:
 3284 0000 00        		.zero	1
 3285               		.section	.bss.old_x1.4154,"aw",@nobits
 3288               	old_x1.4154:
 3289 0000 00        		.zero	1
 3290               		.section	.bss.waThread1,"aw",@nobits
 3293               	waThread1:
 3294 0000 0000 0000 		.zero	131
 3294      0000 0000 
 3294      0000 0000 
 3294      0000 0000 
 3294      0000 0000 
 3295               	.global	prev_state
 3296               		.section	.data.prev_state,"aw",@progbits
 3299               	prev_state:
 3300 0000 02        		.byte	2
 3301               		.comm	flag_amb_sec,1,1
 3302               		.comm	flag_amb_prim,1,1
 3303               	.global	main_vt_flag
 3304               		.section	.bss.main_vt_flag,"aw",@nobits
 3307               	main_vt_flag:
 3308 0000 00        		.zero	1
 3309               	.global	g_state
 3310               		.section	.data.g_state,"aw",@progbits
 3313               	g_state:
 3314 0000 01        		.byte	1
 3315               		.section	.bss.qfull,"aw",@nobits
 3318               	qfull:
 3319 0000 0000 0000 		.zero	4
 3320               		.section	.bss.qempty,"aw",@nobits
 3323               	qempty:
 3324 0000 0000 0000 		.zero	4
 3325               		.section	.bss.qmtx,"aw",@nobits
 3328               	qmtx:
 3329 0000 0000 0000 		.zero	8
 3329      0000 0000 
 3330               		.section	.bss.qsize,"aw",@nobits
 3333               	qsize:
 3334 0000 0000      		.zero	2
 3335               		.section	.bss.wrp,"aw",@nobits
 3338               	wrp:
 3339 0000 0000      		.zero	2
 3340               		.section	.bss.rdp,"aw",@nobits
 3343               	rdp:
 3344 0000 0000      		.zero	2
 3345               		.section	.bss.queue,"aw",@nobits
 3348               	queue:
 3349 0000 0000 0000 		.zero	256
 3349      0000 0000 
 3349      0000 0000 
 3349      0000 0000 
 3349      0000 0000 
 3350               		.text
 3351               	.Letext0:
 3352               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 3353               		.file 5 "/usr/lib/avr/include/stdint.h"
 3354               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 3355               		.file 7 "../../os/rt/include/chearly.h"
 3356               		.file 8 "../../os/rt/include/chobjects.h"
 3357               		.file 9 "../../os/rt/include/chrfcu.h"
 3358               		.file 10 "../../os/rt/include/chdebug.h"
 3359               		.file 11 "../../os/rt/include/chtime.h"
 3360               		.file 12 "../../os/rt/include/chlists.h"
 3361               		.file 13 "../../os/rt/include/chsem.h"
 3362               		.file 14 "../../os/rt/include/chmtx.h"
 3363               		.file 15 "../../os/rt/include/chsys.h"
 3364               		.file 16 "../../os/rt/include/chregistry.h"
 3365               		.file 17 "../../os/rt/include/chcond.h"
 3366               		.file 18 "../../os/rt/include/chevents.h"
 3367               		.file 19 "../../os/oslib/include/chmemcore.h"
 3368               		.file 20 "../../os/hal/include/hal_queues.h"
 3369               		.file 21 "../../os/hal/include/hal_pal.h"
 3370               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 3371               		.file 23 "../../os/hal/include/hal_serial.h"
 3372               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 3373               		.file 25 "../../os/hal/include/hal.h"
 3374               		.file 26 "../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc8xgxK0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc8xgxK0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc8xgxK0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc8xgxK0.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc8xgxK0.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc8xgxK0.s:13     .text.vt_cb:0000000000000000 vt_cb
     /tmp/cc8xgxK0.s:3307   .bss.main_vt_flag:0000000000000000 main_vt_flag
     /tmp/cc8xgxK0.s:36     .text.queueInit:0000000000000000 queueInit
     /tmp/cc8xgxK0.s:3328   .bss.qmtx:0000000000000000 qmtx
     /tmp/cc8xgxK0.s:3323   .bss.qempty:0000000000000000 qempty
     /tmp/cc8xgxK0.s:3318   .bss.qfull:0000000000000000 qfull
     /tmp/cc8xgxK0.s:3348   .bss.queue:0000000000000000 queue
     /tmp/cc8xgxK0.s:3338   .bss.wrp:0000000000000000 wrp
     /tmp/cc8xgxK0.s:3343   .bss.rdp:0000000000000000 rdp
     /tmp/cc8xgxK0.s:3333   .bss.qsize:0000000000000000 qsize
     /tmp/cc8xgxK0.s:78     .text.enqueue:0000000000000000 enqueue
     /tmp/cc8xgxK0.s:168    .text.dequeue:0000000000000000 dequeue
     /tmp/cc8xgxK0.s:255    .text.Thread1:0000000000000000 Thread1
     /tmp/cc8xgxK0.s:3313   .data.g_state:0000000000000000 g_state
     /tmp/cc8xgxK0.s:3299   .data.prev_state:0000000000000000 prev_state
                            *COM*:0000000000000001 flag_amb_sec
                            *COM*:0000000000000001 flag_amb_prim
     /tmp/cc8xgxK0.s:2352   .text.button_check:0000000000000000 button_check
     /tmp/cc8xgxK0.s:3273   .bss.old_x4.4160:0000000000000000 old_x4.4160
     /tmp/cc8xgxK0.s:3288   .bss.old_x1.4154:0000000000000000 old_x1.4154
     /tmp/cc8xgxK0.s:3283   .bss.old_x2.4156:0000000000000000 old_x2.4156
     /tmp/cc8xgxK0.s:3278   .bss.old_x3.4158:0000000000000000 old_x3.4158
     /tmp/cc8xgxK0.s:2573   .text.startup.main:0000000000000000 main
     /tmp/cc8xgxK0.s:3293   .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
chMtxObjectInit
chCondObjectInit
chMtxLock
chCondWait
chCondSignal
chMtxUnlock
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
chThdSleep
__tablejump2__
chVTDoResetI
chVTDoSetI
halInit
chSysInit
SD1
sdStart
_pal_lld_setgroupmode
chThdCreateStatic
__do_copy_data
__do_clear_bss
