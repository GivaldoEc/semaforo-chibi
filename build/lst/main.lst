   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb,"ax",@progbits
  11               	.global	vt_cb
  13               	vt_cb:
  14               	.LFB249:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** 
  20:main.c        **** #define QUEUE_SIZE 128
  21:main.c        **** 
  22:main.c        **** /* Definições de pinos*/
  23:main.c        **** // LEDS
  24:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  25:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  26:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  27:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  28:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  29:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  30:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  31:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  32:main.c        **** 
  33:main.c        **** // Botões
  34:main.c        **** #define AMB_PRIM PAL_LINE(IOPORT3, 3)
  35:main.c        **** #define AMB_SEC PAL_LINE(IOPORT3, 5)
  36:main.c        **** #define SEC_FLAG PAL_LINE(IOPORT3, 4)
  37:main.c        **** #define PED_FLAG PAL_LINE(IOPORT3, 2)
  38:main.c        **** 
  39:main.c        **** // Buffer
  40:main.c        **** static msg_t queue[QUEUE_SIZE], *rdp, *wrp;
  41:main.c        **** static size_t qsize;
  42:main.c        **** static mutex_t qmtx;
  43:main.c        **** static condition_variable_t qempty;
  44:main.c        **** static condition_variable_t qfull;
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** void queueInit(void);
  48:main.c        **** void enqueue(msg_t msg);
  49:main.c        **** msg_t dequeue(void);
  50:main.c        **** uint8_t button_check(ioline_t line, uint8_t button);
  51:main.c        **** void vt_cb(void *arg);
  52:main.c        **** 
  53:main.c        **** enum
  54:main.c        **** {
  55:main.c        ****   SECUNDARIO = 1,
  56:main.c        ****   PEDESTRE,
  57:main.c        ****   AMB_PRIMARIO,
  58:main.c        ****   AMB_SECUNDARIO,
  59:main.c        ****   START,
  60:main.c        ****   SWITCH
  61:main.c        **** };
  62:main.c        **** 
  63:main.c        **** enum
  64:main.c        **** {
  65:main.c        ****   VERDE_AMB_PRIM,
  66:main.c        ****   VERDE_LOCKED_PRIM,
  67:main.c        ****   VERDE_IDLE_PRIM,
  68:main.c        ****   AMARELO_PED_PRIM,
  69:main.c        ****   AMARELO_SEC_PRIM,
  70:main.c        ****   VERDE_AMB_SEC,
  71:main.c        ****   VERDE_LOCKED_SEC,
  72:main.c        ****   AMARELO_PED_SEC,
  73:main.c        ****   AMARELO_PRIM_SEC,
  74:main.c        ****   VERDE_AMB_PED,
  75:main.c        ****   VERDE_LOCKED_PED,
  76:main.c        ****   PISCANDO_SEC,
  77:main.c        ****   PISCANDO_PRIM
  78:main.c        **** };
  79:main.c        **** 
  80:main.c        **** /* Estado inicial */
  81:main.c        **** uint8_t g_state = VERDE_LOCKED_PRIM;
  82:main.c        **** 
  83:main.c        **** /* Flags timers */
  84:main.c        **** uint8_t main_vt_flag = 0;
  85:main.c        **** 
  86:main.c        **** 
  87:main.c        **** /*
  88:main.c        ****  * LED blinker thread, times are in milliseconds.
  89:main.c        ****  */
  90:main.c        **** 
  91:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  92:main.c        **** static THD_FUNCTION(Thread1, arg)
  93:main.c        **** {
  94:main.c        ****   msg_t ev;
  95:main.c        ****   virtual_timer_t main_vt;
  96:main.c        **** 
  97:main.c        ****   chVTObjectInit(&main_vt);
  98:main.c        **** 
  99:main.c        ****   enqueue(START);
 100:main.c        ****   while (1)
 101:main.c        ****   {
 102:main.c        ****     switch (g_state) {
 103:main.c        ****       case VERDE_LOCKED_PRIM:
 104:main.c        ****         palClearLine(PRIMARIO_VERMELHO);
 105:main.c        ****         palSetLine(PRIMARIO_VERDE);
 106:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 107:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 108:main.c        ****         chVTSet(&main_vt, TIME_MS2I(10000), (vtfunc_t)vt_cb, (void *)&main_vt);
 109:main.c        ****         while (!main_vt_flag) {
 110:main.c        ****           chThdSleepMilliseconds(100);
 111:main.c        ****         }
 112:main.c        ****         main_vt_flag = 0;
 113:main.c        ****         g_state = VERDE_IDLE_PRIM;
 114:main.c        ****         //enqueue(SWITCH);
 115:main.c        ****         break;
 116:main.c        ****       case VERDE_IDLE_PRIM:
 117:main.c        ****         ev = dequeue();
 118:main.c        ****         if (ev == SECUNDARIO || ev == AMB_SECUNDARIO) {
 119:main.c        ****           g_state = AMARELO_SEC_PRIM;
 120:main.c        ****           palClearLine(PRIMARIO_VERDE);
 121:main.c        ****           //enqueue(SWITCH);
 122:main.c        ****         } else if (ev == PEDESTRE) {
 123:main.c        ****           g_state = AMARELO_PED_PRIM;
 124:main.c        ****           palClearLine(PRIMARIO_VERDE);
 125:main.c        ****           //enqueue(SWITCH);
 126:main.c        ****         }
 127:main.c        ****         break;
 128:main.c        ****       case AMARELO_SEC_PRIM:
 129:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 130:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 131:main.c        ****         while (!main_vt_flag) {
 132:main.c        ****           chThdSleepMilliseconds(100);
 133:main.c        ****         }
 134:main.c        ****         main_vt_flag = 0;
 135:main.c        ****         g_state = VERDE_LOCKED_SEC;
 136:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 137:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 138:main.c        ****         //enqueue(SWITCH);
 139:main.c        ****         break;
 140:main.c        ****       case AMARELO_PED_PRIM:
 141:main.c        ****         palSetLine(PRIMARIO_AMARELO);
 142:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 143:main.c        ****         while (!main_vt_flag) {
 144:main.c        ****           chThdSleepMilliseconds(100);
 145:main.c        ****         }
 146:main.c        ****         main_vt_flag = 0;
 147:main.c        ****         g_state = VERDE_LOCKED_PED;
 148:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 149:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 150:main.c        ****         //enqueue(SWITCH);
 151:main.c        ****         break;
 152:main.c        ****       case VERDE_LOCKED_SEC:
 153:main.c        ****         palClearLine(SECUNDARIO_VERMELHO);
 154:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 155:main.c        ****         chVTSet(&main_vt, TIME_MS2I(6000), (vtfunc_t)vt_cb, (void *)&main_vt);
 156:main.c        ****         while (!main_vt_flag) {
 157:main.c        ****           chThdSleepMilliseconds(100);
 158:main.c        ****         }
 159:main.c        ****         main_vt_flag = 0;
 160:main.c        ****         if (qsize > 0) {
 161:main.c        ****           ev = dequeue();
 162:main.c        ****         }
 163:main.c        ****         if (ev == PEDESTRE) {
 164:main.c        ****           g_state = AMARELO_PED_SEC;
 165:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 166:main.c        ****           //enqueue(SWITCH);
 167:main.c        ****         } else {
 168:main.c        ****           g_state = AMARELO_PRIM_SEC;
 169:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 170:main.c        ****           //enqueue(SWITCH);
 171:main.c        ****         }
 172:main.c        ****         break;
 173:main.c        ****       case AMARELO_PRIM_SEC:
 174:main.c        ****         palSetLine(SECUNDARIO_AMARELO);
 175:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 176:main.c        ****         while (!main_vt_flag) {
 177:main.c        ****           chThdSleepMilliseconds(100);
 178:main.c        ****         }
 179:main.c        ****         main_vt_flag = 0;
 180:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 181:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 182:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 183:main.c        ****         //enqueue(SWITCH);
 184:main.c        ****         break;
 185:main.c        ****       default:
 186:main.c        ****         palSetLine(PEDESTRE_VERDE);
 187:main.c        ****     }
 188:main.c        ****     chThdSleepMilliseconds(100);
 189:main.c        ****   }
 190:main.c        **** }
 191:main.c        **** 
 192:main.c        **** /*
 193:main.c        ****  * Application entry point.
 194:main.c        ****  */
 195:main.c        **** int main(void)
 196:main.c        **** {
 197:main.c        ****   queueInit();
 198:main.c        ****   /*
 199:main.c        ****    * System initializations.
 200:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
 201:main.c        ****    *   and performs the board-specific initializations.
 202:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
 203:main.c        ****    *   RTOS is active.
 204:main.c        ****    */
 205:main.c        ****   halInit();
 206:main.c        ****   chSysInit();
 207:main.c        **** 
 208:main.c        ****   /* Configuração dos botões */
 209:main.c        ****   palSetLineMode(PED_FLAG, PAL_MODE_INPUT_PULLUP);
 210:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 211:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 212:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 213:main.c        **** 
 214:main.c        ****   // Pedestre
 215:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 216:main.c        ****   palClearLine(PEDESTRE_VERDE);
 217:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 218:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 219:main.c        **** 
 220:main.c        ****   // Primário
 221:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 222:main.c        ****   palClearLine(PRIMARIO_VERDE);
 223:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 224:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 225:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 226:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 227:main.c        **** 
 228:main.c        ****   // Secundário
 229:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 230:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 231:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 232:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 233:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 234:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 235:main.c        **** 
 236:main.c        ****   /*
 237:main.c        ****    * Starts the LED blinker thread.
 238:main.c        ****    */
 239:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 240:main.c        **** 
 241:main.c        ****   while (1)
 242:main.c        ****   {
 243:main.c        ****     if (button_check(AMB_SEC, 1))
 244:main.c        ****     {
 245:main.c        ****       enqueue(AMB_SECUNDARIO);
 246:main.c        ****     }
 247:main.c        ****     else if (button_check(AMB_PRIM, 2))
 248:main.c        ****     {
 249:main.c        ****       enqueue(AMB_PRIMARIO);
 250:main.c        ****     }
 251:main.c        ****     else if (button_check(SEC_FLAG, 3))
 252:main.c        ****     {
 253:main.c        ****       enqueue(SECUNDARIO);
 254:main.c        ****     }
 255:main.c        ****     else if (button_check(PED_FLAG, 4))
 256:main.c        ****     {
 257:main.c        ****       enqueue(PEDESTRE);
 258:main.c        ****     }
 259:main.c        ****     /* Debouncing. */
 260:main.c        ****     chThdSleepMilliseconds(50);
 261:main.c        ****   }
 262:main.c        **** }
 263:main.c        **** 
 264:main.c        **** /*
 265:main.c        ****  * Synchronized queue initialization.
 266:main.c        ****  */
 267:main.c        **** void queueInit(void) {
 268:main.c        ****  
 269:main.c        ****   chMtxObjectInit(&qmtx);
 270:main.c        ****   chCondObjectInit(&qempty);
 271:main.c        ****   chCondObjectInit(&qfull);
 272:main.c        ****  
 273:main.c        ****   rdp = wrp = &queue[0];
 274:main.c        ****   qsize = 0;
 275:main.c        **** }
 276:main.c        **** 
 277:main.c        **** /*
 278:main.c        ****  * Writes a message into the queue, if the queue is full waits
 279:main.c        ****  * for a free slot.
 280:main.c        ****  */
 281:main.c        **** void enqueue(msg_t msg) {
 282:main.c        ****  
 283:main.c        ****   /* Entering monitor.*/
 284:main.c        ****   chMtxLock(&qmtx);
 285:main.c        ****  
 286:main.c        ****   /* Waiting for space in the queue.*/
 287:main.c        ****   while (qsize >= QUEUE_SIZE)
 288:main.c        ****     chCondWait(&qfull);
 289:main.c        ****  
 290:main.c        ****   /* Writing the message in the queue.*/  
 291:main.c        ****   *wrp = msg;
 292:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 293:main.c        ****     wrp = &queue[0];
 294:main.c        ****   qsize++;
 295:main.c        ****  
 296:main.c        ****   /* Signaling that there is at least a message.*/
 297:main.c        ****   chCondSignal(&qempty);
 298:main.c        ****  
 299:main.c        ****   /* Leaving monitor.*/
 300:main.c        ****   chMtxUnlock(&qmtx);
 301:main.c        **** }
 302:main.c        **** 
 303:main.c        **** /*
 304:main.c        ****  * Reads a message from the queue, if the queue is empty waits
 305:main.c        ****  * for a message.
 306:main.c        ****  */
 307:main.c        **** msg_t dequeue(void) {
 308:main.c        ****   msg_t msg;
 309:main.c        ****  
 310:main.c        ****   /* Entering monitor.*/
 311:main.c        ****   chMtxLock(&qmtx);
 312:main.c        ****  
 313:main.c        ****   /* Waiting for messages in the queue.*/
 314:main.c        ****   while (qsize == 0)
 315:main.c        ****     chCondWait(&qempty);
 316:main.c        ****  
 317:main.c        ****   /* Reading the message from the queue.*/  
 318:main.c        ****   msg = *rdp;
 319:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 320:main.c        ****     rdp = &queue[0];
 321:main.c        ****   qsize--;
 322:main.c        ****  
 323:main.c        ****   /* Signaling that there is at least one free slot.*/
 324:main.c        ****   chCondSignal(&qfull);
 325:main.c        ****  
 326:main.c        ****   /* Leaving monitor.*/
 327:main.c        ****   chMtxUnlock(&qmtx);
 328:main.c        ****  
 329:main.c        ****   return msg;
 330:main.c        **** }
 331:main.c        **** 
 332:main.c        **** /* Ficou muito hard coded */
 333:main.c        **** uint8_t button_check(ioline_t line, uint8_t button) {
 334:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 335:main.c        ****   uint8_t w, x;
 336:main.c        **** 
 337:main.c        ****   if (button == 1) {
 338:main.c        ****     x1 = palReadLine(line);
 339:main.c        ****     w = x1^old_x1;
 340:main.c        ****     old_x1 = x1;
 341:main.c        ****     x = x1;
 342:main.c        ****   } else if (button == 2) {
 343:main.c        ****     x2 = palReadLine(line);
 344:main.c        ****     w = x2^old_x2;
 345:main.c        ****     old_x2 = x2;
 346:main.c        ****     x = x2;
 347:main.c        ****   } else if (button == 3) {
 348:main.c        ****     x3 = palReadLine(line);
 349:main.c        ****     w = x3^old_x3;
 350:main.c        ****     old_x3 = x3;
 351:main.c        ****     x = x3;
 352:main.c        ****   } else if (button == 4) {
 353:main.c        ****     x4 = palReadLine(line);
 354:main.c        ****     w = x4^old_x4;
 355:main.c        ****     old_x4 = x4;
 356:main.c        ****     x = x4;
 357:main.c        ****   }
 358:main.c        ****   
 359:main.c        ****   return w &! x;
 360:main.c        **** }
 361:main.c        **** 
 362:main.c        **** void vt_cb(void *arg)
 363:main.c        **** {
  16               		.loc 1 363 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 364:main.c        ****   chSysLockFromISR();
 365:main.c        ****   main_vt_flag = 1;
  23               		.loc 1 365 0
  24 0000 81E0      		ldi r24,lo8(1)
  25               	.LVL1:
  26 0002 8093 0000 		sts main_vt_flag,r24
  27               	/* epilogue start */
 366:main.c        ****   chSysUnlockFromISR();
 367:main.c        **** }
  28               		.loc 1 367 0
  29 0006 0895      		ret
  30               		.cfi_endproc
  31               	.LFE249:
  33               		.section	.text.queueInit,"ax",@progbits
  34               	.global	queueInit
  36               	queueInit:
  37               	.LFB245:
 267:main.c        ****  
  38               		.loc 1 267 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
 269:main.c        ****   chCondObjectInit(&qempty);
  44               		.loc 1 269 0
  45 0000 80E0      		ldi r24,lo8(qmtx)
  46 0002 90E0      		ldi r25,hi8(qmtx)
  47 0004 0E94 0000 		call chMtxObjectInit
  48               	.LVL2:
 270:main.c        ****   chCondObjectInit(&qfull);
  49               		.loc 1 270 0
  50 0008 80E0      		ldi r24,lo8(qempty)
  51 000a 90E0      		ldi r25,hi8(qempty)
  52 000c 0E94 0000 		call chCondObjectInit
  53               	.LVL3:
 271:main.c        ****  
  54               		.loc 1 271 0
  55 0010 80E0      		ldi r24,lo8(qfull)
  56 0012 90E0      		ldi r25,hi8(qfull)
  57 0014 0E94 0000 		call chCondObjectInit
  58               	.LVL4:
 273:main.c        ****   qsize = 0;
  59               		.loc 1 273 0
  60 0018 80E0      		ldi r24,lo8(queue)
  61 001a 90E0      		ldi r25,hi8(queue)
  62 001c 9093 0000 		sts wrp+1,r25
  63 0020 8093 0000 		sts wrp,r24
  64 0024 9093 0000 		sts rdp+1,r25
  65 0028 8093 0000 		sts rdp,r24
 274:main.c        **** }
  66               		.loc 1 274 0
  67 002c 1092 0000 		sts qsize+1,__zero_reg__
  68 0030 1092 0000 		sts qsize,__zero_reg__
  69               	/* epilogue start */
 275:main.c        **** 
  70               		.loc 1 275 0
  71 0034 0895      		ret
  72               		.cfi_endproc
  73               	.LFE245:
  75               		.section	.text.enqueue,"ax",@progbits
  76               	.global	enqueue
  78               	enqueue:
  79               	.LFB246:
 281:main.c        ****  
  80               		.loc 1 281 0
  81               		.cfi_startproc
  82               	.LVL5:
  83 0000 CF93      		push r28
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 28, -2
  87 0002 DF93      		push r29
  88               	.LCFI1:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 29, -3
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 2 */
  94               	.L__stack_usage = 2
  95 0004 EC01      		movw r28,r24
 284:main.c        ****  
  96               		.loc 1 284 0
  97 0006 80E0      		ldi r24,lo8(qmtx)
  98 0008 90E0      		ldi r25,hi8(qmtx)
  99               	.LVL6:
 100 000a 0E94 0000 		call chMtxLock
 101               	.LVL7:
 287:main.c        ****     chCondWait(&qfull);
 102               		.loc 1 287 0
 103 000e 8091 0000 		lds r24,qsize
 104 0012 9091 0000 		lds r25,qsize+1
 105 0016 8038      		cpi r24,-128
 106 0018 9105      		cpc r25,__zero_reg__
 107 001a 00F0      		brlo .L5
 108               	.L6:
 288:main.c        ****  
 109               		.loc 1 288 0
 110 001c 80E0      		ldi r24,lo8(qfull)
 111 001e 90E0      		ldi r25,hi8(qfull)
 112 0020 0E94 0000 		call chCondWait
 113               	.LVL8:
 287:main.c        ****     chCondWait(&qfull);
 114               		.loc 1 287 0
 115 0024 8091 0000 		lds r24,qsize
 116 0028 9091 0000 		lds r25,qsize+1
 117 002c 8038      		cpi r24,-128
 118 002e 9105      		cpc r25,__zero_reg__
 119 0030 00F4      		brsh .L6
 120               	.L5:
 291:main.c        ****   if (++wrp >= &queue[QUEUE_SIZE])
 121               		.loc 1 291 0
 122 0032 E091 0000 		lds r30,wrp
 123 0036 F091 0000 		lds r31,wrp+1
 124 003a C193      		st Z+,r28
 125 003c D193      		st Z+,r29
 292:main.c        ****     wrp = &queue[0];
 126               		.loc 1 292 0
 127 003e 20E0      		ldi r18,hi8(queue+256)
 128 0040 E030      		cpi r30,lo8(queue+256)
 129 0042 F207      		cpc r31,r18
 130 0044 00F0      		brlo .L10
 293:main.c        ****   qsize++;
 131               		.loc 1 293 0
 132 0046 20E0      		ldi r18,lo8(queue)
 133 0048 30E0      		ldi r19,hi8(queue)
 134 004a 3093 0000 		sts wrp+1,r19
 135 004e 2093 0000 		sts wrp,r18
 136               	.L8:
 294:main.c        ****  
 137               		.loc 1 294 0
 138 0052 0196      		adiw r24,1
 139 0054 9093 0000 		sts qsize+1,r25
 140 0058 8093 0000 		sts qsize,r24
 297:main.c        ****  
 141               		.loc 1 297 0
 142 005c 80E0      		ldi r24,lo8(qempty)
 143 005e 90E0      		ldi r25,hi8(qempty)
 144 0060 0E94 0000 		call chCondSignal
 145               	.LVL9:
 300:main.c        **** }
 146               		.loc 1 300 0
 147 0064 80E0      		ldi r24,lo8(qmtx)
 148 0066 90E0      		ldi r25,hi8(qmtx)
 149               	/* epilogue start */
 301:main.c        **** 
 150               		.loc 1 301 0
 151 0068 DF91      		pop r29
 152 006a CF91      		pop r28
 153               	.LVL10:
 300:main.c        **** }
 154               		.loc 1 300 0
 155 006c 0C94 0000 		jmp chMtxUnlock
 156               	.LVL11:
 157               	.L10:
 292:main.c        ****     wrp = &queue[0];
 158               		.loc 1 292 0
 159 0070 F093 0000 		sts wrp+1,r31
 160 0074 E093 0000 		sts wrp,r30
 161 0078 00C0      		rjmp .L8
 162               		.cfi_endproc
 163               	.LFE246:
 165               		.section	.text.dequeue,"ax",@progbits
 166               	.global	dequeue
 168               	dequeue:
 169               	.LFB247:
 307:main.c        ****   msg_t msg;
 170               		.loc 1 307 0
 171               		.cfi_startproc
 172 0000 CF93      		push r28
 173               	.LCFI2:
 174               		.cfi_def_cfa_offset 3
 175               		.cfi_offset 28, -2
 176 0002 DF93      		push r29
 177               	.LCFI3:
 178               		.cfi_def_cfa_offset 4
 179               		.cfi_offset 29, -3
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 2 */
 183               	.L__stack_usage = 2
 311:main.c        ****  
 184               		.loc 1 311 0
 185 0004 80E0      		ldi r24,lo8(qmtx)
 186 0006 90E0      		ldi r25,hi8(qmtx)
 187 0008 0E94 0000 		call chMtxLock
 188               	.LVL12:
 314:main.c        ****     chCondWait(&qempty);
 189               		.loc 1 314 0
 190 000c 8091 0000 		lds r24,qsize
 191 0010 9091 0000 		lds r25,qsize+1
 192 0014 0097      		sbiw r24,0
 193 0016 01F4      		brne .L12
 194               	.L13:
 315:main.c        ****  
 195               		.loc 1 315 0
 196 0018 80E0      		ldi r24,lo8(qempty)
 197 001a 90E0      		ldi r25,hi8(qempty)
 198 001c 0E94 0000 		call chCondWait
 199               	.LVL13:
 314:main.c        ****     chCondWait(&qempty);
 200               		.loc 1 314 0
 201 0020 8091 0000 		lds r24,qsize
 202 0024 9091 0000 		lds r25,qsize+1
 203 0028 0097      		sbiw r24,0
 204 002a 01F0      		breq .L13
 205               	.L12:
 318:main.c        ****   if (++rdp >= &queue[QUEUE_SIZE])
 206               		.loc 1 318 0
 207 002c E091 0000 		lds r30,rdp
 208 0030 F091 0000 		lds r31,rdp+1
 209 0034 C191      		ld r28,Z+
 210 0036 D191      		ld r29,Z+
 211               	.LVL14:
 319:main.c        ****     rdp = &queue[0];
 212               		.loc 1 319 0
 213 0038 20E0      		ldi r18,hi8(queue+256)
 214 003a E030      		cpi r30,lo8(queue+256)
 215 003c F207      		cpc r31,r18
 216 003e 00F0      		brlo .L18
 320:main.c        ****   qsize--;
 217               		.loc 1 320 0
 218 0040 20E0      		ldi r18,lo8(queue)
 219 0042 30E0      		ldi r19,hi8(queue)
 220 0044 3093 0000 		sts rdp+1,r19
 221 0048 2093 0000 		sts rdp,r18
 222               	.L15:
 321:main.c        ****  
 223               		.loc 1 321 0
 224 004c 0197      		sbiw r24,1
 225 004e 9093 0000 		sts qsize+1,r25
 226 0052 8093 0000 		sts qsize,r24
 324:main.c        ****  
 227               		.loc 1 324 0
 228 0056 80E0      		ldi r24,lo8(qfull)
 229 0058 90E0      		ldi r25,hi8(qfull)
 230 005a 0E94 0000 		call chCondSignal
 231               	.LVL15:
 327:main.c        ****  
 232               		.loc 1 327 0
 233 005e 80E0      		ldi r24,lo8(qmtx)
 234 0060 90E0      		ldi r25,hi8(qmtx)
 235 0062 0E94 0000 		call chMtxUnlock
 236               	.LVL16:
 330:main.c        **** 
 237               		.loc 1 330 0
 238 0066 CE01      		movw r24,r28
 239               	/* epilogue start */
 240 0068 DF91      		pop r29
 241 006a CF91      		pop r28
 242               	.LVL17:
 243 006c 0895      		ret
 244               	.LVL18:
 245               	.L18:
 319:main.c        ****     rdp = &queue[0];
 246               		.loc 1 319 0
 247 006e F093 0000 		sts rdp+1,r31
 248 0072 E093 0000 		sts rdp,r30
 249 0076 00C0      		rjmp .L15
 250               		.cfi_endproc
 251               	.LFE247:
 253               		.section	.text.Thread1,"ax",@progbits
 255               	Thread1:
 256               	.LFB243:
  93:main.c        ****   msg_t ev;
 257               		.loc 1 93 0
 258               		.cfi_startproc
 259               	.LVL19:
 260 0000 CF93      		push r28
 261               	.LCFI4:
 262               		.cfi_def_cfa_offset 3
 263               		.cfi_offset 28, -2
 264 0002 DF93      		push r29
 265               	.LCFI5:
 266               		.cfi_def_cfa_offset 4
 267               		.cfi_offset 29, -3
 268 0004 CDB7      		in r28,__SP_L__
 269 0006 DEB7      		in r29,__SP_H__
 270               	.LCFI6:
 271               		.cfi_def_cfa_register 28
 272 0008 6097      		sbiw r28,16
 273               	.LCFI7:
 274               		.cfi_def_cfa_offset 20
 275 000a 0FB6      		in __tmp_reg__,__SREG__
 276 000c F894      		cli
 277 000e DEBF      		out __SP_H__,r29
 278 0010 0FBE      		out __SREG__,__tmp_reg__
 279 0012 CDBF      		out __SP_L__,r28
 280               	/* prologue: function */
 281               	/* frame size = 16 */
 282               	/* stack size = 18 */
 283               	.L__stack_usage = 18
 284               	.LVL20:
 285               	.LBB142:
 286               	.LBB143:
 287               		.file 2 "../../os/rt/include/chvt.h"
   1:../../os/rt/include/chvt.h **** /*
   2:../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chvt.h **** 
   5:../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chvt.h **** 
   7:../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chvt.h **** 
  11:../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chvt.h **** 
  16:../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chvt.h **** */
  19:../../os/rt/include/chvt.h **** 
  20:../../os/rt/include/chvt.h **** /**
  21:../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../os/rt/include/chvt.h ****  *
  24:../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../os/rt/include/chvt.h ****  * @{
  26:../../os/rt/include/chvt.h ****  */
  27:../../os/rt/include/chvt.h **** 
  28:../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../os/rt/include/chvt.h **** 
  31:../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../os/rt/include/chvt.h **** 
  35:../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../os/rt/include/chvt.h **** 
  39:../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../os/rt/include/chvt.h **** 
  43:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../os/rt/include/chvt.h **** #endif
  47:../../os/rt/include/chvt.h **** 
  48:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../os/rt/include/chvt.h **** #endif
  51:../../os/rt/include/chvt.h **** 
  52:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../os/rt/include/chvt.h **** #endif
  55:../../os/rt/include/chvt.h **** 
  56:../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../os/rt/include/chvt.h **** 
  60:../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../os/rt/include/chvt.h **** 
  64:../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../os/rt/include/chvt.h **** 
  68:../../os/rt/include/chvt.h **** /*
  69:../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../os/rt/include/chvt.h ****  */
  71:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../os/rt/include/chvt.h **** extern "C" {
  73:../../os/rt/include/chvt.h **** #endif
  74:../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:../../os/rt/include/chvt.h **** #endif
  85:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  86:../../os/rt/include/chvt.h **** }
  87:../../os/rt/include/chvt.h **** #endif
  88:../../os/rt/include/chvt.h **** 
  89:../../os/rt/include/chvt.h **** /*===========================================================================*/
  90:../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../os/rt/include/chvt.h **** 
  93:../../os/rt/include/chvt.h **** /**
  94:../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:../../os/rt/include/chvt.h ****  *
 100:../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:../../os/rt/include/chvt.h ****  *
 102:../../os/rt/include/chvt.h ****  * @init
 103:../../os/rt/include/chvt.h ****  */
 104:../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:../../os/rt/include/chvt.h **** 
 106:../../os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 288               		.loc 2 106 0
 289 0014 1A82      		std Y+2,__zero_reg__
 290 0016 1982      		std Y+1,__zero_reg__
 291               	.LBE143:
 292               	.LBE142:
  99:main.c        ****   while (1)
 293               		.loc 1 99 0
 294 0018 85E0      		ldi r24,lo8(5)
 295 001a 90E0      		ldi r25,0
 296               	.LVL21:
 297 001c 0E94 0000 		call enqueue
 298               	.LVL22:
 141:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 299               		.loc 1 141 0
 300 0020 EE24      		clr r14
 301 0022 E394      		inc r14
 302 0024 F12C      		mov r15,__zero_reg__
 147:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 303               		.loc 1 147 0
 304 0026 9AE0      		ldi r25,lo8(10)
 305 0028 B92E      		mov r11,r25
 168:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 306               		.loc 1 168 0
 307 002a 28E0      		ldi r18,lo8(8)
 308 002c A22E      		mov r10,r18
 164:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 309               		.loc 1 164 0
 310 002e 37E0      		ldi r19,lo8(7)
 311 0030 932E      		mov r9,r19
 312 0032 00C0      		rjmp .L48
 313               	.LVL23:
 314               	.L22:
 102:main.c        ****       case VERDE_LOCKED_PRIM:
 315               		.loc 1 102 0
 316 0034 8630      		cpi r24,lo8(6)
 317 0036 01F4      		brne .+2
 318 0038 00C0      		rjmp .L25
 319 003a 8830      		cpi r24,lo8(8)
 320 003c 01F4      		brne .+2
 321 003e 00C0      		rjmp .L26
 322 0040 8430      		cpi r24,lo8(4)
 323 0042 01F4      		brne .+2
 324 0044 00C0      		rjmp .L86
 325               	.L20:
 186:main.c        ****     }
 326               		.loc 1 186 0
 327 0046 63E0      		ldi r22,lo8(3)
 328 0048 83E2      		ldi r24,lo8(35)
 329 004a 90E0      		ldi r25,0
 330 004c 0E94 0000 		call _pal_lld_setlineid
 331               	.LVL24:
 332 0050 0E94 0000 		call _pal_lld_getpadfromline
 333               	.LVL25:
 334 0054 182F      		mov r17,r24
 335 0056 63E0      		ldi r22,lo8(3)
 336               	.L81:
 337 0058 83E2      		ldi r24,lo8(35)
 338 005a 90E0      		ldi r25,0
 339               	.L80:
 340 005c 0E94 0000 		call _pal_lld_setlineid
 341               	.LVL26:
 342 0060 0E94 0000 		call _pal_lld_getportfromline
 343               	.LVL27:
 344 0064 FC01      		movw r30,r24
 345 0066 9281      		ldd r25,Z+2
 346 0068 9701      		movw r18,r14
 347 006a 00C0      		rjmp 2f
 348               		1:
 349 006c 220F      		lsl r18
 350               		2:
 351 006e 1A95      		dec r17
 352 0070 02F4      		brpl 1b
 353 0072 922B      		or r25,r18
 354 0074 9283      		std Z+2,r25
 355               	.L31:
 188:main.c        ****   }
 356               		.loc 1 188 0
 357 0076 6BE1      		ldi r22,lo8(27)
 358 0078 76E0      		ldi r23,lo8(6)
 359 007a 80E0      		ldi r24,0
 360 007c 90E0      		ldi r25,0
 361 007e 0E94 0000 		call chThdSleep
 362               	.LVL28:
 363               	.L48:
 102:main.c        ****       case VERDE_LOCKED_PRIM:
 364               		.loc 1 102 0
 365 0082 8091 0000 		lds r24,g_state
 366 0086 8330      		cpi r24,lo8(3)
 367 0088 01F4      		brne .+2
 368 008a 00C0      		rjmp .L21
 369 008c 00F4      		brsh .L22
 370 008e 8130      		cpi r24,lo8(1)
 371 0090 01F0      		breq .L23
 372 0092 8230      		cpi r24,lo8(2)
 373 0094 01F4      		brne .L20
 117:main.c        ****         if (ev == SECUNDARIO || ev == AMB_SECUNDARIO) {
 374               		.loc 1 117 0
 375 0096 0E94 0000 		call dequeue
 376               	.LVL29:
 377 009a 6C01      		movw r12,r24
 378               	.LVL30:
 118:main.c        ****           g_state = AMARELO_SEC_PRIM;
 379               		.loc 1 118 0
 380 009c 81E0      		ldi r24,1
 381 009e C816      		cp r12,r24
 382 00a0 D104      		cpc r13,__zero_reg__
 383 00a2 01F4      		brne .+2
 384 00a4 00C0      		rjmp .L32
 118:main.c        ****           g_state = AMARELO_SEC_PRIM;
 385               		.loc 1 118 0 is_stmt 0 discriminator 1
 386 00a6 84E0      		ldi r24,4
 387 00a8 C816      		cp r12,r24
 388 00aa D104      		cpc r13,__zero_reg__
 389 00ac 01F4      		brne .+2
 390 00ae 00C0      		rjmp .L32
 122:main.c        ****           g_state = AMARELO_PED_PRIM;
 391               		.loc 1 122 0 is_stmt 1
 392 00b0 82E0      		ldi r24,2
 393 00b2 C816      		cp r12,r24
 394 00b4 D104      		cpc r13,__zero_reg__
 395 00b6 01F4      		brne .L31
 123:main.c        ****           palClearLine(PRIMARIO_VERDE);
 396               		.loc 1 123 0
 397 00b8 83E0      		ldi r24,lo8(3)
 398               	.L82:
 399 00ba 8093 0000 		sts g_state,r24
 124:main.c        ****           //enqueue(SWITCH);
 400               		.loc 1 124 0
 401 00be 67E0      		ldi r22,lo8(7)
 402 00c0 89E2      		ldi r24,lo8(41)
 403 00c2 90E0      		ldi r25,0
 404 00c4 0E94 0000 		call _pal_lld_setlineid
 405               	.LVL31:
 406 00c8 0E94 0000 		call _pal_lld_getpadfromline
 407               	.LVL32:
 408 00cc 182F      		mov r17,r24
 409 00ce 67E0      		ldi r22,lo8(7)
 410 00d0 89E2      		ldi r24,lo8(41)
 411 00d2 90E0      		ldi r25,0
 412               	.L83:
 413 00d4 0E94 0000 		call _pal_lld_setlineid
 414               	.LVL33:
 415 00d8 0E94 0000 		call _pal_lld_getportfromline
 416               	.LVL34:
 417 00dc FC01      		movw r30,r24
 418 00de 9281      		ldd r25,Z+2
 419 00e0 9701      		movw r18,r14
 420 00e2 00C0      		rjmp 2f
 421               		1:
 422 00e4 220F      		lsl r18
 423 00e6 331F      		rol r19
 424               		2:
 425 00e8 1A95      		dec r17
 426 00ea 02F4      		brpl 1b
 427 00ec 2095      		com r18
 428 00ee 3095      		com r19
 429 00f0 9223      		and r25,r18
 430 00f2 9283      		std Z+2,r25
 431 00f4 00C0      		rjmp .L31
 432               	.L23:
 104:main.c        ****         palSetLine(PRIMARIO_VERDE);
 433               		.loc 1 104 0
 434 00f6 66E0      		ldi r22,lo8(6)
 435 00f8 89E2      		ldi r24,lo8(41)
 436 00fa 90E0      		ldi r25,0
 437 00fc 0E94 0000 		call _pal_lld_setlineid
 438               	.LVL35:
 439 0100 0E94 0000 		call _pal_lld_getpadfromline
 440               	.LVL36:
 441 0104 182F      		mov r17,r24
 442 0106 66E0      		ldi r22,lo8(6)
 443 0108 89E2      		ldi r24,lo8(41)
 444 010a 90E0      		ldi r25,0
 445 010c 0E94 0000 		call _pal_lld_setlineid
 446               	.LVL37:
 447 0110 0E94 0000 		call _pal_lld_getportfromline
 448               	.LVL38:
 449 0114 FC01      		movw r30,r24
 450 0116 9281      		ldd r25,Z+2
 451 0118 9701      		movw r18,r14
 452 011a 00C0      		rjmp 2f
 453               		1:
 454 011c 220F      		lsl r18
 455 011e 331F      		rol r19
 456               		2:
 457 0120 1A95      		dec r17
 458 0122 02F4      		brpl 1b
 459 0124 2095      		com r18
 460 0126 3095      		com r19
 461 0128 9223      		and r25,r18
 462 012a 9283      		std Z+2,r25
 105:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 463               		.loc 1 105 0
 464 012c 67E0      		ldi r22,lo8(7)
 465 012e 89E2      		ldi r24,lo8(41)
 466 0130 90E0      		ldi r25,0
 467 0132 0E94 0000 		call _pal_lld_setlineid
 468               	.LVL39:
 469 0136 0E94 0000 		call _pal_lld_getpadfromline
 470               	.LVL40:
 471 013a 182F      		mov r17,r24
 472 013c 67E0      		ldi r22,lo8(7)
 473 013e 89E2      		ldi r24,lo8(41)
 474 0140 90E0      		ldi r25,0
 475 0142 0E94 0000 		call _pal_lld_setlineid
 476               	.LVL41:
 477 0146 0E94 0000 		call _pal_lld_getportfromline
 478               	.LVL42:
 479 014a FC01      		movw r30,r24
 480 014c 9281      		ldd r25,Z+2
 481 014e 9701      		movw r18,r14
 482 0150 00C0      		rjmp 2f
 483               		1:
 484 0152 220F      		lsl r18
 485               		2:
 486 0154 1A95      		dec r17
 487 0156 02F4      		brpl 1b
 488 0158 922B      		or r25,r18
 489 015a 9283      		std Z+2,r25
 106:main.c        ****         palSetLine(PEDESTRE_VERMELHO);
 490               		.loc 1 106 0
 491 015c 60E0      		ldi r22,0
 492 015e 83E2      		ldi r24,lo8(35)
 493 0160 90E0      		ldi r25,0
 494 0162 0E94 0000 		call _pal_lld_setlineid
 495               	.LVL43:
 496 0166 0E94 0000 		call _pal_lld_getpadfromline
 497               	.LVL44:
 498 016a 182F      		mov r17,r24
 499 016c 60E0      		ldi r22,0
 500 016e 83E2      		ldi r24,lo8(35)
 501 0170 90E0      		ldi r25,0
 502 0172 0E94 0000 		call _pal_lld_setlineid
 503               	.LVL45:
 504 0176 0E94 0000 		call _pal_lld_getportfromline
 505               	.LVL46:
 506 017a FC01      		movw r30,r24
 507 017c 9281      		ldd r25,Z+2
 508 017e 9701      		movw r18,r14
 509 0180 00C0      		rjmp 2f
 510               		1:
 511 0182 220F      		lsl r18
 512               		2:
 513 0184 1A95      		dec r17
 514 0186 02F4      		brpl 1b
 515 0188 922B      		or r25,r18
 516 018a 9283      		std Z+2,r25
 107:main.c        ****         chVTSet(&main_vt, TIME_MS2I(10000), (vtfunc_t)vt_cb, (void *)&main_vt);
 517               		.loc 1 107 0
 518 018c 62E0      		ldi r22,lo8(2)
 519 018e 83E2      		ldi r24,lo8(35)
 520 0190 90E0      		ldi r25,0
 521 0192 0E94 0000 		call _pal_lld_setlineid
 522               	.LVL47:
 523 0196 0E94 0000 		call _pal_lld_getpadfromline
 524               	.LVL48:
 525 019a 182F      		mov r17,r24
 526 019c 62E0      		ldi r22,lo8(2)
 527 019e 83E2      		ldi r24,lo8(35)
 528 01a0 90E0      		ldi r25,0
 529 01a2 0E94 0000 		call _pal_lld_setlineid
 530               	.LVL49:
 531 01a6 0E94 0000 		call _pal_lld_getportfromline
 532               	.LVL50:
 533 01aa FC01      		movw r30,r24
 534 01ac 9281      		ldd r25,Z+2
 535 01ae 9701      		movw r18,r14
 536 01b0 00C0      		rjmp 2f
 537               		1:
 538 01b2 220F      		lsl r18
 539               		2:
 540 01b4 1A95      		dec r17
 541 01b6 02F4      		brpl 1b
 542 01b8 922B      		or r25,r18
 543 01ba 9283      		std Z+2,r25
 544               	.LVL51:
 545               	.LBB144:
 546               	.LBB145:
 547               	.LBB146:
 548               	.LBB147:
 549               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 550               		.loc 3 430 0
 551               	/* #APP */
 552               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 553 01bc F894      		cli
 554               	 ;  0 "" 2
 555               	.LVL52:
 556               	/* #NOAPP */
 557               	.LBE147:
 558               	.LBE146:
 559               	.LBE145:
 560               	.LBB148:
 561               	.LBB149:
 562               	.LBB150:
 563               	.LBB151:
 107:../../os/rt/include/chvt.h **** }
 108:../../os/rt/include/chvt.h **** 
 109:../../os/rt/include/chvt.h **** /**
 110:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 111:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:../../os/rt/include/chvt.h ****  *          invocation.
 113:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:../../os/rt/include/chvt.h ****  *          @p systime_t size.
 117:../../os/rt/include/chvt.h ****  *
 118:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:../../os/rt/include/chvt.h ****  *
 120:../../os/rt/include/chvt.h ****  * @xclass
 121:../../os/rt/include/chvt.h ****  */
 122:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:../../os/rt/include/chvt.h **** 
 124:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:../../os/rt/include/chvt.h ****   return port_timer_get_time();
 128:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:../../os/rt/include/chvt.h **** }
 130:../../os/rt/include/chvt.h **** 
 131:../../os/rt/include/chvt.h **** /**
 132:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 133:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:../../os/rt/include/chvt.h ****  *          invocation.
 135:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:../../os/rt/include/chvt.h ****  *
 137:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:../../os/rt/include/chvt.h ****  *
 139:../../os/rt/include/chvt.h ****  * @api
 140:../../os/rt/include/chvt.h ****  */
 141:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:../../os/rt/include/chvt.h ****   systime_t systime;
 143:../../os/rt/include/chvt.h **** 
 144:../../os/rt/include/chvt.h ****   chSysLock();
 145:../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:../../os/rt/include/chvt.h ****   chSysUnlock();
 147:../../os/rt/include/chvt.h **** 
 148:../../os/rt/include/chvt.h ****   return systime;
 149:../../os/rt/include/chvt.h **** }
 150:../../os/rt/include/chvt.h **** 
 151:../../os/rt/include/chvt.h **** /**
 152:../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:../../os/rt/include/chvt.h ****  *
 154:../../os/rt/include/chvt.h ****  * @param[in] start     start time
 155:../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:../../os/rt/include/chvt.h ****  *
 157:../../os/rt/include/chvt.h ****  * @xclass
 158:../../os/rt/include/chvt.h ****  */
 159:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:../../os/rt/include/chvt.h **** 
 161:../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:../../os/rt/include/chvt.h **** }
 163:../../os/rt/include/chvt.h **** 
 164:../../os/rt/include/chvt.h **** /**
 165:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:../../os/rt/include/chvt.h ****  *          window.
 167:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:../../os/rt/include/chvt.h ****  *          time window has zero size.
 169:../../os/rt/include/chvt.h ****  *
 170:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:../../os/rt/include/chvt.h ****  *
 175:../../os/rt/include/chvt.h ****  * @xclass
 176:../../os/rt/include/chvt.h ****  */
 177:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:../../os/rt/include/chvt.h **** 
 179:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:../../os/rt/include/chvt.h **** }
 181:../../os/rt/include/chvt.h **** 
 182:../../os/rt/include/chvt.h **** /**
 183:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:../../os/rt/include/chvt.h ****  *          window.
 185:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:../../os/rt/include/chvt.h ****  *          time window has zero size.
 187:../../os/rt/include/chvt.h ****  *
 188:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:../../os/rt/include/chvt.h ****  *
 193:../../os/rt/include/chvt.h ****  * @api
 194:../../os/rt/include/chvt.h ****  */
 195:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:../../os/rt/include/chvt.h **** 
 197:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:../../os/rt/include/chvt.h **** }
 199:../../os/rt/include/chvt.h **** 
 200:../../os/rt/include/chvt.h **** /**
 201:../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:../../os/rt/include/chvt.h ****  *
 207:../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:../../os/rt/include/chvt.h ****  *
 214:../../os/rt/include/chvt.h ****  * @iclass
 215:../../os/rt/include/chvt.h ****  */
 216:../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:../../os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:../../os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:../../os/rt/include/chvt.h **** 
 220:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:../../os/rt/include/chvt.h **** 
 222:../../os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:../../os/rt/include/chvt.h ****     return false;
 224:../../os/rt/include/chvt.h ****   }
 225:../../os/rt/include/chvt.h **** 
 226:../../os/rt/include/chvt.h ****   if (timep != NULL) {
 227:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:../../os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:../../os/rt/include/chvt.h **** #else
 230:../../os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:../../os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:../../os/rt/include/chvt.h **** #endif
 233:../../os/rt/include/chvt.h ****   }
 234:../../os/rt/include/chvt.h **** 
 235:../../os/rt/include/chvt.h ****   return true;
 236:../../os/rt/include/chvt.h **** }
 237:../../os/rt/include/chvt.h **** 
 238:../../os/rt/include/chvt.h **** /**
 239:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:../../os/rt/include/chvt.h ****  *
 243:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:../../os/rt/include/chvt.h ****  *
 246:../../os/rt/include/chvt.h ****  * @iclass
 247:../../os/rt/include/chvt.h ****  */
 248:../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:../../os/rt/include/chvt.h **** 
 250:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:../../os/rt/include/chvt.h **** 
 252:../../os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:../../os/rt/include/chvt.h **** }
 254:../../os/rt/include/chvt.h **** 
 255:../../os/rt/include/chvt.h **** /**
 256:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:../../os/rt/include/chvt.h ****  *
 260:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:../../os/rt/include/chvt.h ****  *
 263:../../os/rt/include/chvt.h ****  * @api
 264:../../os/rt/include/chvt.h ****  */
 265:../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:../../os/rt/include/chvt.h ****   bool b;
 267:../../os/rt/include/chvt.h **** 
 268:../../os/rt/include/chvt.h ****   chSysLock();
 269:../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:../../os/rt/include/chvt.h ****   chSysUnlock();
 271:../../os/rt/include/chvt.h **** 
 272:../../os/rt/include/chvt.h ****   return b;
 273:../../os/rt/include/chvt.h **** }
 274:../../os/rt/include/chvt.h **** 
 275:../../os/rt/include/chvt.h **** /**
 276:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:../../os/rt/include/chvt.h ****  *
 281:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:../../os/rt/include/chvt.h ****  *
 283:../../os/rt/include/chvt.h ****  * @iclass
 284:../../os/rt/include/chvt.h ****  */
 285:../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:../../os/rt/include/chvt.h **** 
 287:../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 564               		.loc 2 287 0
 565 01be 8981      		ldd r24,Y+1
 566 01c0 9A81      		ldd r25,Y+2
 567 01c2 892B      		or r24,r25
 568 01c4 01F0      		breq .L28
 288:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 569               		.loc 2 288 0
 570 01c6 CE01      		movw r24,r28
 571 01c8 0196      		adiw r24,1
 572 01ca 0E94 0000 		call chVTDoResetI
 573               	.LVL53:
 574               	.L28:
 575               	.LBE151:
 576               	.LBE150:
 289:../../os/rt/include/chvt.h ****   }
 290:../../os/rt/include/chvt.h **** }
 291:../../os/rt/include/chvt.h **** 
 292:../../os/rt/include/chvt.h **** /**
 293:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:../../os/rt/include/chvt.h ****  *
 298:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:../../os/rt/include/chvt.h ****  *
 300:../../os/rt/include/chvt.h ****  * @api
 301:../../os/rt/include/chvt.h ****  */
 302:../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:../../os/rt/include/chvt.h **** 
 304:../../os/rt/include/chvt.h ****   chSysLock();
 305:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:../../os/rt/include/chvt.h ****   chSysUnlock();
 307:../../os/rt/include/chvt.h **** }
 308:../../os/rt/include/chvt.h **** 
 309:../../os/rt/include/chvt.h **** /**
 310:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:../../os/rt/include/chvt.h ****  *          using the new parameters.
 313:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:../../os/rt/include/chvt.h ****  *
 316:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:../../os/rt/include/chvt.h ****  *                        normal time specification.
 321:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:../../os/rt/include/chvt.h ****  *                      .
 323:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../os/rt/include/chvt.h ****  *                      function
 328:../../os/rt/include/chvt.h ****  *
 329:../../os/rt/include/chvt.h ****  * @iclass
 330:../../os/rt/include/chvt.h ****  */
 331:../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:../../os/rt/include/chvt.h **** 
 334:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 577               		.loc 2 335 0
 578 01ce 8E01      		movw r16,r28
 579 01d0 0F5F      		subi r16,-1
 580 01d2 1F4F      		sbci r17,-1
 581 01d4 20E0      		ldi r18,lo8(gs(vt_cb))
 582 01d6 30E0      		ldi r19,hi8(gs(vt_cb))
 583 01d8 40E5      		ldi r20,lo8(80)
 584 01da 52E6      		ldi r21,lo8(98)
 585 01dc 62E0      		ldi r22,lo8(2)
 586 01de 70E0      		ldi r23,0
 587 01e0 C801      		movw r24,r16
 588 01e2 0E94 0000 		call chVTDoSetI
 589               	.LVL54:
 590               	.LBE149:
 591               	.LBE148:
 592               	.LBB152:
 593               	.LBB153:
 594               	.LBB154:
 595               	.LBB155:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 596               		.loc 3 440 0
 597               	/* #APP */
 598               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 599 01e6 7894      		sei
 600               	 ;  0 "" 2
 601               	/* #NOAPP */
 602               	.LBE155:
 603               	.LBE154:
 604               	.LBE153:
 605               	.LBE152:
 606               	.LBE144:
 109:main.c        ****           chThdSleepMilliseconds(100);
 607               		.loc 1 109 0
 608 01e8 8091 0000 		lds r24,main_vt_flag
 609 01ec 8111      		cpse r24,__zero_reg__
 610 01ee 00C0      		rjmp .L29
 611               	.L30:
 110:main.c        ****         }
 612               		.loc 1 110 0
 613 01f0 6BE1      		ldi r22,lo8(27)
 614 01f2 76E0      		ldi r23,lo8(6)
 615 01f4 80E0      		ldi r24,0
 616 01f6 90E0      		ldi r25,0
 617 01f8 0E94 0000 		call chThdSleep
 618               	.LVL55:
 109:main.c        ****           chThdSleepMilliseconds(100);
 619               		.loc 1 109 0
 620 01fc 8091 0000 		lds r24,main_vt_flag
 621 0200 8823      		tst r24
 622 0202 01F0      		breq .L30
 623               	.L29:
 112:main.c        ****         g_state = VERDE_IDLE_PRIM;
 624               		.loc 1 112 0
 625 0204 1092 0000 		sts main_vt_flag,__zero_reg__
 113:main.c        ****         //enqueue(SWITCH);
 626               		.loc 1 113 0
 627 0208 82E0      		ldi r24,lo8(2)
 628 020a 8093 0000 		sts g_state,r24
 115:main.c        ****       case VERDE_IDLE_PRIM:
 629               		.loc 1 115 0
 630 020e 00C0      		rjmp .L31
 631               	.LVL56:
 632               	.L21:
 141:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 633               		.loc 1 141 0
 634 0210 64E0      		ldi r22,lo8(4)
 635 0212 89E2      		ldi r24,lo8(41)
 636 0214 90E0      		ldi r25,0
 637 0216 0E94 0000 		call _pal_lld_setlineid
 638               	.LVL57:
 639 021a 0E94 0000 		call _pal_lld_getpadfromline
 640               	.LVL58:
 641 021e 182F      		mov r17,r24
 642 0220 64E0      		ldi r22,lo8(4)
 643 0222 89E2      		ldi r24,lo8(41)
 644 0224 90E0      		ldi r25,0
 645 0226 0E94 0000 		call _pal_lld_setlineid
 646               	.LVL59:
 647 022a 0E94 0000 		call _pal_lld_getportfromline
 648               	.LVL60:
 649 022e FC01      		movw r30,r24
 650 0230 9281      		ldd r25,Z+2
 651 0232 9701      		movw r18,r14
 652 0234 00C0      		rjmp 2f
 653               		1:
 654 0236 220F      		lsl r18
 655               		2:
 656 0238 1A95      		dec r17
 657 023a 02F4      		brpl 1b
 658 023c 922B      		or r25,r18
 659 023e 9283      		std Z+2,r25
 660               	.LVL61:
 661               	.LBB156:
 662               	.LBB157:
 663               	.LBB158:
 664               	.LBB159:
 430:../../os/common/ports/AVR/chcore.h **** }
 665               		.loc 3 430 0
 666               	/* #APP */
 667               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 668 0240 F894      		cli
 669               	 ;  0 "" 2
 670               	.LVL62:
 671               	/* #NOAPP */
 672               	.LBE159:
 673               	.LBE158:
 674               	.LBE157:
 675               	.LBB160:
 676               	.LBB161:
 677               	.LBB162:
 678               	.LBB163:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 679               		.loc 2 287 0
 680 0242 8981      		ldd r24,Y+1
 681 0244 9A81      		ldd r25,Y+2
 682 0246 892B      		or r24,r25
 683 0248 01F0      		breq .L37
 288:../../os/rt/include/chvt.h ****   }
 684               		.loc 2 288 0
 685 024a CE01      		movw r24,r28
 686 024c 0196      		adiw r24,1
 687 024e 0E94 0000 		call chVTDoResetI
 688               	.LVL63:
 689               	.L37:
 690               	.LBE163:
 691               	.LBE162:
 692               		.loc 2 335 0
 693 0252 8E01      		movw r16,r28
 694 0254 0F5F      		subi r16,-1
 695 0256 1F4F      		sbci r17,-1
 696 0258 20E0      		ldi r18,lo8(gs(vt_cb))
 697 025a 30E0      		ldi r19,hi8(gs(vt_cb))
 698 025c 40E1      		ldi r20,lo8(16)
 699 025e 5AE7      		ldi r21,lo8(122)
 700 0260 60E0      		ldi r22,0
 701 0262 70E0      		ldi r23,0
 702 0264 C801      		movw r24,r16
 703 0266 0E94 0000 		call chVTDoSetI
 704               	.LVL64:
 705               	.LBE161:
 706               	.LBE160:
 707               	.LBB164:
 708               	.LBB165:
 709               	.LBB166:
 710               	.LBB167:
 711               		.loc 3 440 0
 712               	/* #APP */
 713               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 714 026a 7894      		sei
 715               	 ;  0 "" 2
 716               	/* #NOAPP */
 717               	.LBE167:
 718               	.LBE166:
 719               	.LBE165:
 720               	.LBE164:
 721               	.LBE156:
 143:main.c        ****           chThdSleepMilliseconds(100);
 722               		.loc 1 143 0
 723 026c 8091 0000 		lds r24,main_vt_flag
 724 0270 8111      		cpse r24,__zero_reg__
 725 0272 00C0      		rjmp .L38
 726               	.L39:
 144:main.c        ****         }
 727               		.loc 1 144 0
 728 0274 6BE1      		ldi r22,lo8(27)
 729 0276 76E0      		ldi r23,lo8(6)
 730 0278 80E0      		ldi r24,0
 731 027a 90E0      		ldi r25,0
 732 027c 0E94 0000 		call chThdSleep
 733               	.LVL65:
 143:main.c        ****           chThdSleepMilliseconds(100);
 734               		.loc 1 143 0
 735 0280 8091 0000 		lds r24,main_vt_flag
 736 0284 8823      		tst r24
 737 0286 01F0      		breq .L39
 738               	.L38:
 146:main.c        ****         g_state = VERDE_LOCKED_PED;
 739               		.loc 1 146 0
 740 0288 1092 0000 		sts main_vt_flag,__zero_reg__
 147:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 741               		.loc 1 147 0
 742 028c B092 0000 		sts g_state,r11
 743               	.LVL66:
 744               	.L85:
 148:main.c        ****         palSetLine(PRIMARIO_VERMELHO);
 745               		.loc 1 148 0
 746 0290 64E0      		ldi r22,lo8(4)
 747 0292 89E2      		ldi r24,lo8(41)
 748 0294 90E0      		ldi r25,0
 749 0296 0E94 0000 		call _pal_lld_setlineid
 750               	.LVL67:
 751 029a 0E94 0000 		call _pal_lld_getpadfromline
 752               	.LVL68:
 753 029e 182F      		mov r17,r24
 754 02a0 64E0      		ldi r22,lo8(4)
 755 02a2 89E2      		ldi r24,lo8(41)
 756 02a4 90E0      		ldi r25,0
 757 02a6 0E94 0000 		call _pal_lld_setlineid
 758               	.LVL69:
 759 02aa 0E94 0000 		call _pal_lld_getportfromline
 760               	.LVL70:
 761 02ae FC01      		movw r30,r24
 762 02b0 9281      		ldd r25,Z+2
 763 02b2 9701      		movw r18,r14
 764 02b4 00C0      		rjmp 2f
 765               		1:
 766 02b6 220F      		lsl r18
 767 02b8 331F      		rol r19
 768               		2:
 769 02ba 1A95      		dec r17
 770 02bc 02F4      		brpl 1b
 771 02be 2095      		com r18
 772 02c0 3095      		com r19
 773 02c2 9223      		and r25,r18
 774 02c4 9283      		std Z+2,r25
 149:main.c        ****         //enqueue(SWITCH);
 775               		.loc 1 149 0
 776 02c6 66E0      		ldi r22,lo8(6)
 777 02c8 89E2      		ldi r24,lo8(41)
 778 02ca 90E0      		ldi r25,0
 779 02cc 0E94 0000 		call _pal_lld_setlineid
 780               	.LVL71:
 781 02d0 0E94 0000 		call _pal_lld_getpadfromline
 782               	.LVL72:
 783 02d4 182F      		mov r17,r24
 784 02d6 66E0      		ldi r22,lo8(6)
 785 02d8 89E2      		ldi r24,lo8(41)
 786 02da 90E0      		ldi r25,0
 787 02dc 00C0      		rjmp .L80
 788               	.LVL73:
 789               	.L86:
 129:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 790               		.loc 1 129 0
 791 02de 64E0      		ldi r22,lo8(4)
 792 02e0 89E2      		ldi r24,lo8(41)
 793 02e2 90E0      		ldi r25,0
 794 02e4 0E94 0000 		call _pal_lld_setlineid
 795               	.LVL74:
 796 02e8 0E94 0000 		call _pal_lld_getpadfromline
 797               	.LVL75:
 798 02ec 182F      		mov r17,r24
 799 02ee 64E0      		ldi r22,lo8(4)
 800 02f0 89E2      		ldi r24,lo8(41)
 801 02f2 90E0      		ldi r25,0
 802 02f4 0E94 0000 		call _pal_lld_setlineid
 803               	.LVL76:
 804 02f8 0E94 0000 		call _pal_lld_getportfromline
 805               	.LVL77:
 806 02fc FC01      		movw r30,r24
 807 02fe 9281      		ldd r25,Z+2
 808 0300 9701      		movw r18,r14
 809 0302 00C0      		rjmp 2f
 810               		1:
 811 0304 220F      		lsl r18
 812               		2:
 813 0306 1A95      		dec r17
 814 0308 02F4      		brpl 1b
 815 030a 922B      		or r25,r18
 816 030c 9283      		std Z+2,r25
 817               	.LVL78:
 818               	.LBB168:
 819               	.LBB169:
 820               	.LBB170:
 821               	.LBB171:
 430:../../os/common/ports/AVR/chcore.h **** }
 822               		.loc 3 430 0
 823               	/* #APP */
 824               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 825 030e F894      		cli
 826               	 ;  0 "" 2
 827               	.LVL79:
 828               	/* #NOAPP */
 829               	.LBE171:
 830               	.LBE170:
 831               	.LBE169:
 832               	.LBB172:
 833               	.LBB173:
 834               	.LBB174:
 835               	.LBB175:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 836               		.loc 2 287 0
 837 0310 8981      		ldd r24,Y+1
 838 0312 9A81      		ldd r25,Y+2
 839 0314 892B      		or r24,r25
 840 0316 01F0      		breq .L34
 288:../../os/rt/include/chvt.h ****   }
 841               		.loc 2 288 0
 842 0318 CE01      		movw r24,r28
 843 031a 0196      		adiw r24,1
 844 031c 0E94 0000 		call chVTDoResetI
 845               	.LVL80:
 846               	.L34:
 847               	.LBE175:
 848               	.LBE174:
 849               		.loc 2 335 0
 850 0320 8E01      		movw r16,r28
 851 0322 0F5F      		subi r16,-1
 852 0324 1F4F      		sbci r17,-1
 853 0326 20E0      		ldi r18,lo8(gs(vt_cb))
 854 0328 30E0      		ldi r19,hi8(gs(vt_cb))
 855 032a 40E1      		ldi r20,lo8(16)
 856 032c 5AE7      		ldi r21,lo8(122)
 857 032e 60E0      		ldi r22,0
 858 0330 70E0      		ldi r23,0
 859 0332 C801      		movw r24,r16
 860 0334 0E94 0000 		call chVTDoSetI
 861               	.LVL81:
 862               	.LBE173:
 863               	.LBE172:
 864               	.LBB176:
 865               	.LBB177:
 866               	.LBB178:
 867               	.LBB179:
 868               		.loc 3 440 0
 869               	/* #APP */
 870               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 871 0338 7894      		sei
 872               	 ;  0 "" 2
 873               	/* #NOAPP */
 874               	.LBE179:
 875               	.LBE178:
 876               	.LBE177:
 877               	.LBE176:
 878               	.LBE168:
 131:main.c        ****           chThdSleepMilliseconds(100);
 879               		.loc 1 131 0
 880 033a 8091 0000 		lds r24,main_vt_flag
 881 033e 8111      		cpse r24,__zero_reg__
 882 0340 00C0      		rjmp .L35
 883               	.L36:
 132:main.c        ****         }
 884               		.loc 1 132 0
 885 0342 6BE1      		ldi r22,lo8(27)
 886 0344 76E0      		ldi r23,lo8(6)
 887 0346 80E0      		ldi r24,0
 888 0348 90E0      		ldi r25,0
 889 034a 0E94 0000 		call chThdSleep
 890               	.LVL82:
 131:main.c        ****           chThdSleepMilliseconds(100);
 891               		.loc 1 131 0
 892 034e 8091 0000 		lds r24,main_vt_flag
 893 0352 8823      		tst r24
 894 0354 01F0      		breq .L36
 895               	.L35:
 134:main.c        ****         g_state = VERDE_LOCKED_SEC;
 896               		.loc 1 134 0
 897 0356 1092 0000 		sts main_vt_flag,__zero_reg__
 135:main.c        ****         palClearLine(PRIMARIO_AMARELO);
 898               		.loc 1 135 0
 899 035a 86E0      		ldi r24,lo8(6)
 900 035c 8093 0000 		sts g_state,r24
 901 0360 00C0      		rjmp .L85
 902               	.LVL83:
 903               	.L26:
 174:main.c        ****         chVTSet(&main_vt, TIME_MS2I(2000), (vtfunc_t)vt_cb, (void *)&main_vt);
 904               		.loc 1 174 0
 905 0362 65E0      		ldi r22,lo8(5)
 906 0364 89E2      		ldi r24,lo8(41)
 907 0366 90E0      		ldi r25,0
 908 0368 0E94 0000 		call _pal_lld_setlineid
 909               	.LVL84:
 910 036c 0E94 0000 		call _pal_lld_getpadfromline
 911               	.LVL85:
 912 0370 182F      		mov r17,r24
 913 0372 65E0      		ldi r22,lo8(5)
 914 0374 89E2      		ldi r24,lo8(41)
 915 0376 90E0      		ldi r25,0
 916 0378 0E94 0000 		call _pal_lld_setlineid
 917               	.LVL86:
 918 037c 0E94 0000 		call _pal_lld_getportfromline
 919               	.LVL87:
 920 0380 FC01      		movw r30,r24
 921 0382 9281      		ldd r25,Z+2
 922 0384 9701      		movw r18,r14
 923 0386 00C0      		rjmp 2f
 924               		1:
 925 0388 220F      		lsl r18
 926               		2:
 927 038a 1A95      		dec r17
 928 038c 02F4      		brpl 1b
 929 038e 922B      		or r25,r18
 930 0390 9283      		std Z+2,r25
 931               	.LVL88:
 932               	.LBB180:
 933               	.LBB181:
 934               	.LBB182:
 935               	.LBB183:
 430:../../os/common/ports/AVR/chcore.h **** }
 936               		.loc 3 430 0
 937               	/* #APP */
 938               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 939 0392 F894      		cli
 940               	 ;  0 "" 2
 941               	.LVL89:
 942               	/* #NOAPP */
 943               	.LBE183:
 944               	.LBE182:
 945               	.LBE181:
 946               	.LBB184:
 947               	.LBB185:
 948               	.LBB186:
 949               	.LBB187:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 950               		.loc 2 287 0
 951 0394 8981      		ldd r24,Y+1
 952 0396 9A81      		ldd r25,Y+2
 953 0398 892B      		or r24,r25
 954 039a 01F0      		breq .L45
 288:../../os/rt/include/chvt.h ****   }
 955               		.loc 2 288 0
 956 039c CE01      		movw r24,r28
 957 039e 0196      		adiw r24,1
 958 03a0 0E94 0000 		call chVTDoResetI
 959               	.LVL90:
 960               	.L45:
 961               	.LBE187:
 962               	.LBE186:
 963               		.loc 2 335 0
 964 03a4 8E01      		movw r16,r28
 965 03a6 0F5F      		subi r16,-1
 966 03a8 1F4F      		sbci r17,-1
 967 03aa 20E0      		ldi r18,lo8(gs(vt_cb))
 968 03ac 30E0      		ldi r19,hi8(gs(vt_cb))
 969 03ae 40E1      		ldi r20,lo8(16)
 970 03b0 5AE7      		ldi r21,lo8(122)
 971 03b2 60E0      		ldi r22,0
 972 03b4 70E0      		ldi r23,0
 973 03b6 C801      		movw r24,r16
 974 03b8 0E94 0000 		call chVTDoSetI
 975               	.LVL91:
 976               	.LBE185:
 977               	.LBE184:
 978               	.LBB188:
 979               	.LBB189:
 980               	.LBB190:
 981               	.LBB191:
 982               		.loc 3 440 0
 983               	/* #APP */
 984               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 985 03bc 7894      		sei
 986               	 ;  0 "" 2
 987               	/* #NOAPP */
 988               	.LBE191:
 989               	.LBE190:
 990               	.LBE189:
 991               	.LBE188:
 992               	.LBE180:
 176:main.c        ****           chThdSleepMilliseconds(100);
 993               		.loc 1 176 0
 994 03be 8091 0000 		lds r24,main_vt_flag
 995 03c2 8111      		cpse r24,__zero_reg__
 996 03c4 00C0      		rjmp .L46
 997               	.L47:
 177:main.c        ****         }
 998               		.loc 1 177 0
 999 03c6 6BE1      		ldi r22,lo8(27)
 1000 03c8 76E0      		ldi r23,lo8(6)
 1001 03ca 80E0      		ldi r24,0
 1002 03cc 90E0      		ldi r25,0
 1003 03ce 0E94 0000 		call chThdSleep
 1004               	.LVL92:
 176:main.c        ****           chThdSleepMilliseconds(100);
 1005               		.loc 1 176 0
 1006 03d2 8091 0000 		lds r24,main_vt_flag
 1007 03d6 8823      		tst r24
 1008 03d8 01F0      		breq .L47
 1009               	.L46:
 179:main.c        ****         g_state = VERDE_LOCKED_PRIM;
 1010               		.loc 1 179 0
 1011 03da 1092 0000 		sts main_vt_flag,__zero_reg__
 180:main.c        ****         palClearLine(SECUNDARIO_AMARELO);
 1012               		.loc 1 180 0
 1013 03de 81E0      		ldi r24,lo8(1)
 1014 03e0 8093 0000 		sts g_state,r24
 181:main.c        ****         palSetLine(SECUNDARIO_VERMELHO);
 1015               		.loc 1 181 0
 1016 03e4 65E0      		ldi r22,lo8(5)
 1017 03e6 89E2      		ldi r24,lo8(41)
 1018 03e8 90E0      		ldi r25,0
 1019 03ea 0E94 0000 		call _pal_lld_setlineid
 1020               	.LVL93:
 1021 03ee 0E94 0000 		call _pal_lld_getpadfromline
 1022               	.LVL94:
 1023 03f2 182F      		mov r17,r24
 1024 03f4 65E0      		ldi r22,lo8(5)
 1025 03f6 89E2      		ldi r24,lo8(41)
 1026 03f8 90E0      		ldi r25,0
 1027 03fa 0E94 0000 		call _pal_lld_setlineid
 1028               	.LVL95:
 1029 03fe 0E94 0000 		call _pal_lld_getportfromline
 1030               	.LVL96:
 1031 0402 FC01      		movw r30,r24
 1032 0404 9281      		ldd r25,Z+2
 1033 0406 9701      		movw r18,r14
 1034 0408 00C0      		rjmp 2f
 1035               		1:
 1036 040a 220F      		lsl r18
 1037 040c 331F      		rol r19
 1038               		2:
 1039 040e 1A95      		dec r17
 1040 0410 02F4      		brpl 1b
 1041 0412 2095      		com r18
 1042 0414 3095      		com r19
 1043 0416 9223      		and r25,r18
 1044 0418 9283      		std Z+2,r25
 182:main.c        ****         //enqueue(SWITCH);
 1045               		.loc 1 182 0
 1046 041a 60E0      		ldi r22,0
 1047 041c 83E2      		ldi r24,lo8(35)
 1048 041e 90E0      		ldi r25,0
 1049 0420 0E94 0000 		call _pal_lld_setlineid
 1050               	.LVL97:
 1051 0424 0E94 0000 		call _pal_lld_getpadfromline
 1052               	.LVL98:
 1053 0428 182F      		mov r17,r24
 1054 042a 60E0      		ldi r22,0
 1055 042c 00C0      		rjmp .L81
 1056               	.LVL99:
 1057               	.L25:
 153:main.c        ****         palSetLine(SECUNDARIO_VERDE);
 1058               		.loc 1 153 0
 1059 042e 60E0      		ldi r22,0
 1060 0430 83E2      		ldi r24,lo8(35)
 1061 0432 90E0      		ldi r25,0
 1062 0434 0E94 0000 		call _pal_lld_setlineid
 1063               	.LVL100:
 1064 0438 0E94 0000 		call _pal_lld_getpadfromline
 1065               	.LVL101:
 1066 043c 182F      		mov r17,r24
 1067 043e 60E0      		ldi r22,0
 1068 0440 83E2      		ldi r24,lo8(35)
 1069 0442 90E0      		ldi r25,0
 1070 0444 0E94 0000 		call _pal_lld_setlineid
 1071               	.LVL102:
 1072 0448 0E94 0000 		call _pal_lld_getportfromline
 1073               	.LVL103:
 1074 044c FC01      		movw r30,r24
 1075 044e 9281      		ldd r25,Z+2
 1076 0450 9701      		movw r18,r14
 1077 0452 00C0      		rjmp 2f
 1078               		1:
 1079 0454 220F      		lsl r18
 1080 0456 331F      		rol r19
 1081               		2:
 1082 0458 1A95      		dec r17
 1083 045a 02F4      		brpl 1b
 1084 045c 2095      		com r18
 1085 045e 3095      		com r19
 1086 0460 9223      		and r25,r18
 1087 0462 9283      		std Z+2,r25
 154:main.c        ****         chVTSet(&main_vt, TIME_MS2I(6000), (vtfunc_t)vt_cb, (void *)&main_vt);
 1088               		.loc 1 154 0
 1089 0464 61E0      		ldi r22,lo8(1)
 1090 0466 83E2      		ldi r24,lo8(35)
 1091 0468 90E0      		ldi r25,0
 1092 046a 0E94 0000 		call _pal_lld_setlineid
 1093               	.LVL104:
 1094 046e 0E94 0000 		call _pal_lld_getpadfromline
 1095               	.LVL105:
 1096 0472 182F      		mov r17,r24
 1097 0474 61E0      		ldi r22,lo8(1)
 1098 0476 83E2      		ldi r24,lo8(35)
 1099 0478 90E0      		ldi r25,0
 1100 047a 0E94 0000 		call _pal_lld_setlineid
 1101               	.LVL106:
 1102 047e 0E94 0000 		call _pal_lld_getportfromline
 1103               	.LVL107:
 1104 0482 FC01      		movw r30,r24
 1105 0484 9281      		ldd r25,Z+2
 1106 0486 9701      		movw r18,r14
 1107 0488 00C0      		rjmp 2f
 1108               		1:
 1109 048a 220F      		lsl r18
 1110               		2:
 1111 048c 1A95      		dec r17
 1112 048e 02F4      		brpl 1b
 1113 0490 922B      		or r25,r18
 1114 0492 9283      		std Z+2,r25
 1115               	.LVL108:
 1116               	.LBB192:
 1117               	.LBB193:
 1118               	.LBB194:
 1119               	.LBB195:
 430:../../os/common/ports/AVR/chcore.h **** }
 1120               		.loc 3 430 0
 1121               	/* #APP */
 1122               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1123 0494 F894      		cli
 1124               	 ;  0 "" 2
 1125               	.LVL109:
 1126               	/* #NOAPP */
 1127               	.LBE195:
 1128               	.LBE194:
 1129               	.LBE193:
 1130               	.LBB196:
 1131               	.LBB197:
 1132               	.LBB198:
 1133               	.LBB199:
 287:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 1134               		.loc 2 287 0
 1135 0496 8981      		ldd r24,Y+1
 1136 0498 9A81      		ldd r25,Y+2
 1137 049a 892B      		or r24,r25
 1138 049c 01F0      		breq .L40
 288:../../os/rt/include/chvt.h ****   }
 1139               		.loc 2 288 0
 1140 049e CE01      		movw r24,r28
 1141 04a0 0196      		adiw r24,1
 1142 04a2 0E94 0000 		call chVTDoResetI
 1143               	.LVL110:
 1144               	.L40:
 1145               	.LBE199:
 1146               	.LBE198:
 1147               		.loc 2 335 0
 1148 04a6 8E01      		movw r16,r28
 1149 04a8 0F5F      		subi r16,-1
 1150 04aa 1F4F      		sbci r17,-1
 1151 04ac 20E0      		ldi r18,lo8(gs(vt_cb))
 1152 04ae 30E0      		ldi r19,hi8(gs(vt_cb))
 1153 04b0 40E3      		ldi r20,lo8(48)
 1154 04b2 5EE6      		ldi r21,lo8(110)
 1155 04b4 61E0      		ldi r22,lo8(1)
 1156 04b6 70E0      		ldi r23,0
 1157 04b8 C801      		movw r24,r16
 1158 04ba 0E94 0000 		call chVTDoSetI
 1159               	.LVL111:
 1160               	.LBE197:
 1161               	.LBE196:
 1162               	.LBB200:
 1163               	.LBB201:
 1164               	.LBB202:
 1165               	.LBB203:
 1166               		.loc 3 440 0
 1167               	/* #APP */
 1168               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1169 04be 7894      		sei
 1170               	 ;  0 "" 2
 1171               	/* #NOAPP */
 1172               	.LBE203:
 1173               	.LBE202:
 1174               	.LBE201:
 1175               	.LBE200:
 1176               	.LBE192:
 156:main.c        ****           chThdSleepMilliseconds(100);
 1177               		.loc 1 156 0
 1178 04c0 8091 0000 		lds r24,main_vt_flag
 1179 04c4 8111      		cpse r24,__zero_reg__
 1180 04c6 00C0      		rjmp .L41
 1181               	.L42:
 157:main.c        ****         }
 1182               		.loc 1 157 0
 1183 04c8 6BE1      		ldi r22,lo8(27)
 1184 04ca 76E0      		ldi r23,lo8(6)
 1185 04cc 80E0      		ldi r24,0
 1186 04ce 90E0      		ldi r25,0
 1187 04d0 0E94 0000 		call chThdSleep
 1188               	.LVL112:
 156:main.c        ****           chThdSleepMilliseconds(100);
 1189               		.loc 1 156 0
 1190 04d4 8091 0000 		lds r24,main_vt_flag
 1191 04d8 8823      		tst r24
 1192 04da 01F0      		breq .L42
 1193               	.L41:
 159:main.c        ****         if (qsize > 0) {
 1194               		.loc 1 159 0
 1195 04dc 1092 0000 		sts main_vt_flag,__zero_reg__
 160:main.c        ****           ev = dequeue();
 1196               		.loc 1 160 0
 1197 04e0 8091 0000 		lds r24,qsize
 1198 04e4 9091 0000 		lds r25,qsize+1
 1199 04e8 892B      		or r24,r25
 1200 04ea 01F4      		brne .L87
 1201               	.L43:
 163:main.c        ****           g_state = AMARELO_PED_SEC;
 1202               		.loc 1 163 0
 1203 04ec 82E0      		ldi r24,2
 1204 04ee C816      		cp r12,r24
 1205 04f0 D104      		cpc r13,__zero_reg__
 1206 04f2 01F0      		breq .L88
 168:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 1207               		.loc 1 168 0
 1208 04f4 A092 0000 		sts g_state,r10
 1209               	.L84:
 169:main.c        ****           //enqueue(SWITCH);
 1210               		.loc 1 169 0
 1211 04f8 61E0      		ldi r22,lo8(1)
 1212 04fa 83E2      		ldi r24,lo8(35)
 1213 04fc 90E0      		ldi r25,0
 1214 04fe 0E94 0000 		call _pal_lld_setlineid
 1215               	.LVL113:
 1216 0502 0E94 0000 		call _pal_lld_getpadfromline
 1217               	.LVL114:
 1218 0506 182F      		mov r17,r24
 1219 0508 61E0      		ldi r22,lo8(1)
 1220 050a 83E2      		ldi r24,lo8(35)
 1221 050c 90E0      		ldi r25,0
 1222 050e 00C0      		rjmp .L83
 1223               	.LVL115:
 1224               	.L32:
 119:main.c        ****           palClearLine(PRIMARIO_VERDE);
 1225               		.loc 1 119 0
 1226 0510 84E0      		ldi r24,lo8(4)
 1227 0512 00C0      		rjmp .L82
 1228               	.LVL116:
 1229               	.L88:
 164:main.c        ****           palClearLine(SECUNDARIO_VERDE);
 1230               		.loc 1 164 0
 1231 0514 9092 0000 		sts g_state,r9
 1232 0518 00C0      		rjmp .L84
 1233               	.L87:
 161:main.c        ****         }
 1234               		.loc 1 161 0
 1235 051a 0E94 0000 		call dequeue
 1236               	.LVL117:
 1237 051e 6C01      		movw r12,r24
 1238               	.LVL118:
 1239 0520 00C0      		rjmp .L43
 1240               		.cfi_endproc
 1241               	.LFE243:
 1243               		.section	.text.button_check,"ax",@progbits
 1244               	.global	button_check
 1246               	button_check:
 1247               	.LFB248:
 333:main.c        ****   static uint8_t x1, old_x1, x2, old_x2, x3, old_x3, x4, old_x4;
 1248               		.loc 1 333 0
 1249               		.cfi_startproc
 1250               	.LVL119:
 1251 0000 CF92      		push r12
 1252               	.LCFI8:
 1253               		.cfi_def_cfa_offset 3
 1254               		.cfi_offset 12, -2
 1255 0002 DF92      		push r13
 1256               	.LCFI9:
 1257               		.cfi_def_cfa_offset 4
 1258               		.cfi_offset 13, -3
 1259 0004 EF92      		push r14
 1260               	.LCFI10:
 1261               		.cfi_def_cfa_offset 5
 1262               		.cfi_offset 14, -4
 1263 0006 CF93      		push r28
 1264               	.LCFI11:
 1265               		.cfi_def_cfa_offset 6
 1266               		.cfi_offset 28, -5
 1267               	/* prologue: function */
 1268               	/* frame size = 0 */
 1269               	/* stack size = 4 */
 1270               	.L__stack_usage = 4
 1271 0008 6B01      		movw r12,r22
 1272 000a E82E      		mov r14,r24
 337:main.c        ****     x1 = palReadLine(line);
 1273               		.loc 1 337 0
 1274 000c 4130      		cpi r20,lo8(1)
 1275 000e 01F0      		breq .L94
 342:main.c        ****     x2 = palReadLine(line);
 1276               		.loc 1 342 0
 1277 0010 4230      		cpi r20,lo8(2)
 1278 0012 01F4      		brne .+2
 1279 0014 00C0      		rjmp .L95
 347:main.c        ****     x3 = palReadLine(line);
 1280               		.loc 1 347 0
 1281 0016 4330      		cpi r20,lo8(3)
 1282 0018 01F4      		brne .+2
 1283 001a 00C0      		rjmp .L96
 352:main.c        ****     x4 = palReadLine(line);
 1284               		.loc 1 352 0
 1285 001c 4430      		cpi r20,lo8(4)
 1286 001e 01F0      		breq .L97
 1287               	.LVL120:
 359:main.c        **** }
 1288               		.loc 1 359 0
 1289 0020 81E0      		ldi r24,lo8(1)
 1290 0022 8227      		eor r24,r18
 360:main.c        **** 
 1291               		.loc 1 360 0
 1292 0024 8923      		and r24,r25
 1293               	/* epilogue start */
 1294 0026 CF91      		pop r28
 1295 0028 EF90      		pop r14
 1296               	.LVL121:
 1297 002a DF90      		pop r13
 1298 002c CF90      		pop r12
 1299               	.LVL122:
 1300 002e 0895      		ret
 1301               	.LVL123:
 1302               	.L97:
 353:main.c        ****     w = x4^old_x4;
 1303               		.loc 1 353 0
 1304 0030 0E94 0000 		call _pal_lld_getportfromline
 1305               	.LVL124:
 1306 0034 FC01      		movw r30,r24
 1307 0036 C081      		ld r28,Z
 1308 0038 8E2D      		mov r24,r14
 1309 003a B601      		movw r22,r12
 1310 003c 0E94 0000 		call _pal_lld_getpadfromline
 1311               	.LVL125:
 1312 0040 2C2F      		mov r18,r28
 1313 0042 30E0      		ldi r19,0
 1314 0044 00C0      		rjmp 2f
 1315               		1:
 1316 0046 3595      		asr r19
 1317 0048 2795      		ror r18
 1318               		2:
 1319 004a 8A95      		dec r24
 1320 004c 02F4      		brpl 1b
 1321 004e 2170      		andi r18,lo8(1)
 354:main.c        ****     old_x4 = x4;
 1322               		.loc 1 354 0
 1323 0050 9091 0000 		lds r25,old_x4.4132
 1324 0054 9227      		eor r25,r18
 1325               	.LVL126:
 355:main.c        ****     x = x4;
 1326               		.loc 1 355 0
 1327 0056 2093 0000 		sts old_x4.4132,r18
 1328               	.LVL127:
 359:main.c        **** }
 1329               		.loc 1 359 0
 1330 005a 81E0      		ldi r24,lo8(1)
 1331 005c 8227      		eor r24,r18
 360:main.c        **** 
 1332               		.loc 1 360 0
 1333 005e 8923      		and r24,r25
 1334               	/* epilogue start */
 1335 0060 CF91      		pop r28
 1336 0062 EF90      		pop r14
 1337               	.LVL128:
 1338 0064 DF90      		pop r13
 1339 0066 CF90      		pop r12
 1340 0068 0895      		ret
 1341               	.LVL129:
 1342               	.L94:
 338:main.c        ****     w = x1^old_x1;
 1343               		.loc 1 338 0
 1344 006a 0E94 0000 		call _pal_lld_getportfromline
 1345               	.LVL130:
 1346 006e FC01      		movw r30,r24
 1347 0070 C081      		ld r28,Z
 1348 0072 8E2D      		mov r24,r14
 1349 0074 B601      		movw r22,r12
 1350 0076 0E94 0000 		call _pal_lld_getpadfromline
 1351               	.LVL131:
 1352 007a 2C2F      		mov r18,r28
 1353 007c 30E0      		ldi r19,0
 1354 007e 00C0      		rjmp 2f
 1355               		1:
 1356 0080 3595      		asr r19
 1357 0082 2795      		ror r18
 1358               		2:
 1359 0084 8A95      		dec r24
 1360 0086 02F4      		brpl 1b
 1361 0088 2170      		andi r18,lo8(1)
 339:main.c        ****     old_x1 = x1;
 1362               		.loc 1 339 0
 1363 008a 9091 0000 		lds r25,old_x1.4126
 1364 008e 9227      		eor r25,r18
 1365               	.LVL132:
 340:main.c        ****     x = x1;
 1366               		.loc 1 340 0
 1367 0090 2093 0000 		sts old_x1.4126,r18
 1368               	.LVL133:
 359:main.c        **** }
 1369               		.loc 1 359 0
 1370 0094 81E0      		ldi r24,lo8(1)
 1371 0096 8227      		eor r24,r18
 360:main.c        **** 
 1372               		.loc 1 360 0
 1373 0098 8923      		and r24,r25
 1374               	/* epilogue start */
 1375 009a CF91      		pop r28
 1376 009c EF90      		pop r14
 1377               	.LVL134:
 1378 009e DF90      		pop r13
 1379 00a0 CF90      		pop r12
 1380 00a2 0895      		ret
 1381               	.LVL135:
 1382               	.L95:
 343:main.c        ****     w = x2^old_x2;
 1383               		.loc 1 343 0
 1384 00a4 0E94 0000 		call _pal_lld_getportfromline
 1385               	.LVL136:
 1386 00a8 FC01      		movw r30,r24
 1387 00aa C081      		ld r28,Z
 1388 00ac 8E2D      		mov r24,r14
 1389 00ae B601      		movw r22,r12
 1390 00b0 0E94 0000 		call _pal_lld_getpadfromline
 1391               	.LVL137:
 1392 00b4 2C2F      		mov r18,r28
 1393 00b6 30E0      		ldi r19,0
 1394 00b8 00C0      		rjmp 2f
 1395               		1:
 1396 00ba 3595      		asr r19
 1397 00bc 2795      		ror r18
 1398               		2:
 1399 00be 8A95      		dec r24
 1400 00c0 02F4      		brpl 1b
 1401 00c2 2170      		andi r18,lo8(1)
 344:main.c        ****     old_x2 = x2;
 1402               		.loc 1 344 0
 1403 00c4 9091 0000 		lds r25,old_x2.4128
 1404 00c8 9227      		eor r25,r18
 1405               	.LVL138:
 345:main.c        ****     x = x2;
 1406               		.loc 1 345 0
 1407 00ca 2093 0000 		sts old_x2.4128,r18
 1408               	.LVL139:
 359:main.c        **** }
 1409               		.loc 1 359 0
 1410 00ce 81E0      		ldi r24,lo8(1)
 1411 00d0 8227      		eor r24,r18
 360:main.c        **** 
 1412               		.loc 1 360 0
 1413 00d2 8923      		and r24,r25
 1414               	/* epilogue start */
 1415 00d4 CF91      		pop r28
 1416 00d6 EF90      		pop r14
 1417               	.LVL140:
 1418 00d8 DF90      		pop r13
 1419 00da CF90      		pop r12
 1420 00dc 0895      		ret
 1421               	.LVL141:
 1422               	.L96:
 348:main.c        ****     w = x3^old_x3;
 1423               		.loc 1 348 0
 1424 00de 0E94 0000 		call _pal_lld_getportfromline
 1425               	.LVL142:
 1426 00e2 FC01      		movw r30,r24
 1427 00e4 C081      		ld r28,Z
 1428 00e6 8E2D      		mov r24,r14
 1429 00e8 B601      		movw r22,r12
 1430 00ea 0E94 0000 		call _pal_lld_getpadfromline
 1431               	.LVL143:
 1432 00ee 2C2F      		mov r18,r28
 1433 00f0 30E0      		ldi r19,0
 1434 00f2 00C0      		rjmp 2f
 1435               		1:
 1436 00f4 3595      		asr r19
 1437 00f6 2795      		ror r18
 1438               		2:
 1439 00f8 8A95      		dec r24
 1440 00fa 02F4      		brpl 1b
 1441 00fc 2170      		andi r18,lo8(1)
 349:main.c        ****     old_x3 = x3;
 1442               		.loc 1 349 0
 1443 00fe 9091 0000 		lds r25,old_x3.4130
 1444 0102 9227      		eor r25,r18
 1445               	.LVL144:
 350:main.c        ****     x = x3;
 1446               		.loc 1 350 0
 1447 0104 2093 0000 		sts old_x3.4130,r18
 1448               	.LVL145:
 359:main.c        **** }
 1449               		.loc 1 359 0
 1450 0108 81E0      		ldi r24,lo8(1)
 1451 010a 8227      		eor r24,r18
 360:main.c        **** 
 1452               		.loc 1 360 0
 1453 010c 8923      		and r24,r25
 1454               	/* epilogue start */
 1455 010e CF91      		pop r28
 1456 0110 EF90      		pop r14
 1457               	.LVL146:
 1458 0112 DF90      		pop r13
 1459 0114 CF90      		pop r12
 1460 0116 0895      		ret
 1461               		.cfi_endproc
 1462               	.LFE248:
 1464               		.section	.text.startup.main,"ax",@progbits
 1465               	.global	main
 1467               	main:
 1468               	.LFB244:
 196:main.c        ****   queueInit();
 1469               		.loc 1 196 0
 1470               		.cfi_startproc
 1471               	/* prologue: function */
 1472               	/* frame size = 0 */
 1473               	/* stack size = 0 */
 1474               	.L__stack_usage = 0
 197:main.c        ****   /*
 1475               		.loc 1 197 0
 1476 0000 0E94 0000 		call queueInit
 1477               	.LVL147:
 205:main.c        ****   chSysInit();
 1478               		.loc 1 205 0
 1479 0004 0E94 0000 		call halInit
 1480               	.LVL148:
 206:main.c        **** 
 1481               		.loc 1 206 0
 1482 0008 0E94 0000 		call chSysInit
 1483               	.LVL149:
 209:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 1484               		.loc 1 209 0
 1485 000c 62E0      		ldi r22,lo8(2)
 1486 000e 86E2      		ldi r24,lo8(38)
 1487 0010 90E0      		ldi r25,0
 1488 0012 0E94 0000 		call _pal_lld_setlineid
 1489               	.LVL150:
 1490 0016 0E94 0000 		call _pal_lld_getpadfromline
 1491               	.LVL151:
 1492 001a 182F      		mov r17,r24
 1493 001c 62E0      		ldi r22,lo8(2)
 1494 001e 86E2      		ldi r24,lo8(38)
 1495 0020 90E0      		ldi r25,0
 1496 0022 0E94 0000 		call _pal_lld_setlineid
 1497               	.LVL152:
 1498 0026 0E94 0000 		call _pal_lld_getportfromline
 1499               	.LVL153:
 1500 002a C1E0      		ldi r28,lo8(1)
 1501 002c D0E0      		ldi r29,0
 1502 002e BE01      		movw r22,r28
 1503 0030 00C0      		rjmp 2f
 1504               		1:
 1505 0032 660F      		lsl r22
 1506               		2:
 1507 0034 1A95      		dec r17
 1508 0036 02F4      		brpl 1b
 1509 0038 43E0      		ldi r20,lo8(3)
 1510 003a 0E94 0000 		call _pal_lld_setgroupmode
 1511               	.LVL154:
 210:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 1512               		.loc 1 210 0
 1513 003e 64E0      		ldi r22,lo8(4)
 1514 0040 86E2      		ldi r24,lo8(38)
 1515 0042 90E0      		ldi r25,0
 1516 0044 0E94 0000 		call _pal_lld_setlineid
 1517               	.LVL155:
 1518 0048 0E94 0000 		call _pal_lld_getpadfromline
 1519               	.LVL156:
 1520 004c 182F      		mov r17,r24
 1521 004e 64E0      		ldi r22,lo8(4)
 1522 0050 86E2      		ldi r24,lo8(38)
 1523 0052 90E0      		ldi r25,0
 1524 0054 0E94 0000 		call _pal_lld_setlineid
 1525               	.LVL157:
 1526 0058 0E94 0000 		call _pal_lld_getportfromline
 1527               	.LVL158:
 1528 005c BE01      		movw r22,r28
 1529 005e 00C0      		rjmp 2f
 1530               		1:
 1531 0060 660F      		lsl r22
 1532               		2:
 1533 0062 1A95      		dec r17
 1534 0064 02F4      		brpl 1b
 1535 0066 43E0      		ldi r20,lo8(3)
 1536 0068 0E94 0000 		call _pal_lld_setgroupmode
 1537               	.LVL159:
 211:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 1538               		.loc 1 211 0
 1539 006c 63E0      		ldi r22,lo8(3)
 1540 006e 86E2      		ldi r24,lo8(38)
 1541 0070 90E0      		ldi r25,0
 1542 0072 0E94 0000 		call _pal_lld_setlineid
 1543               	.LVL160:
 1544 0076 0E94 0000 		call _pal_lld_getpadfromline
 1545               	.LVL161:
 1546 007a 182F      		mov r17,r24
 1547 007c 63E0      		ldi r22,lo8(3)
 1548 007e 86E2      		ldi r24,lo8(38)
 1549 0080 90E0      		ldi r25,0
 1550 0082 0E94 0000 		call _pal_lld_setlineid
 1551               	.LVL162:
 1552 0086 0E94 0000 		call _pal_lld_getportfromline
 1553               	.LVL163:
 1554 008a BE01      		movw r22,r28
 1555 008c 00C0      		rjmp 2f
 1556               		1:
 1557 008e 660F      		lsl r22
 1558               		2:
 1559 0090 1A95      		dec r17
 1560 0092 02F4      		brpl 1b
 1561 0094 43E0      		ldi r20,lo8(3)
 1562 0096 0E94 0000 		call _pal_lld_setgroupmode
 1563               	.LVL164:
 212:main.c        **** 
 1564               		.loc 1 212 0
 1565 009a 65E0      		ldi r22,lo8(5)
 1566 009c 86E2      		ldi r24,lo8(38)
 1567 009e 90E0      		ldi r25,0
 1568 00a0 0E94 0000 		call _pal_lld_setlineid
 1569               	.LVL165:
 1570 00a4 0E94 0000 		call _pal_lld_getpadfromline
 1571               	.LVL166:
 1572 00a8 182F      		mov r17,r24
 1573 00aa 65E0      		ldi r22,lo8(5)
 1574 00ac 86E2      		ldi r24,lo8(38)
 1575 00ae 90E0      		ldi r25,0
 1576 00b0 0E94 0000 		call _pal_lld_setlineid
 1577               	.LVL167:
 1578 00b4 0E94 0000 		call _pal_lld_getportfromline
 1579               	.LVL168:
 1580 00b8 BE01      		movw r22,r28
 1581 00ba 00C0      		rjmp 2f
 1582               		1:
 1583 00bc 660F      		lsl r22
 1584               		2:
 1585 00be 1A95      		dec r17
 1586 00c0 02F4      		brpl 1b
 1587 00c2 43E0      		ldi r20,lo8(3)
 1588 00c4 0E94 0000 		call _pal_lld_setgroupmode
 1589               	.LVL169:
 215:main.c        ****   palClearLine(PEDESTRE_VERDE);
 1590               		.loc 1 215 0
 1591 00c8 63E0      		ldi r22,lo8(3)
 1592 00ca 83E2      		ldi r24,lo8(35)
 1593 00cc 90E0      		ldi r25,0
 1594 00ce 0E94 0000 		call _pal_lld_setlineid
 1595               	.LVL170:
 1596 00d2 0E94 0000 		call _pal_lld_getpadfromline
 1597               	.LVL171:
 1598 00d6 182F      		mov r17,r24
 1599 00d8 63E0      		ldi r22,lo8(3)
 1600 00da 83E2      		ldi r24,lo8(35)
 1601 00dc 90E0      		ldi r25,0
 1602 00de 0E94 0000 		call _pal_lld_setlineid
 1603               	.LVL172:
 1604 00e2 0E94 0000 		call _pal_lld_getportfromline
 1605               	.LVL173:
 1606 00e6 BE01      		movw r22,r28
 1607 00e8 00C0      		rjmp 2f
 1608               		1:
 1609 00ea 660F      		lsl r22
 1610               		2:
 1611 00ec 1A95      		dec r17
 1612 00ee 02F4      		brpl 1b
 1613 00f0 46E0      		ldi r20,lo8(6)
 1614 00f2 0E94 0000 		call _pal_lld_setgroupmode
 1615               	.LVL174:
 216:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 1616               		.loc 1 216 0
 1617 00f6 63E0      		ldi r22,lo8(3)
 1618 00f8 83E2      		ldi r24,lo8(35)
 1619 00fa 90E0      		ldi r25,0
 1620 00fc 0E94 0000 		call _pal_lld_setlineid
 1621               	.LVL175:
 1622 0100 0E94 0000 		call _pal_lld_getpadfromline
 1623               	.LVL176:
 1624 0104 182F      		mov r17,r24
 1625 0106 63E0      		ldi r22,lo8(3)
 1626 0108 83E2      		ldi r24,lo8(35)
 1627 010a 90E0      		ldi r25,0
 1628 010c 0E94 0000 		call _pal_lld_setlineid
 1629               	.LVL177:
 1630 0110 0E94 0000 		call _pal_lld_getportfromline
 1631               	.LVL178:
 1632 0114 FC01      		movw r30,r24
 1633 0116 9281      		ldd r25,Z+2
 1634 0118 9E01      		movw r18,r28
 1635 011a 00C0      		rjmp 2f
 1636               		1:
 1637 011c 220F      		lsl r18
 1638 011e 331F      		rol r19
 1639               		2:
 1640 0120 1A95      		dec r17
 1641 0122 02F4      		brpl 1b
 1642 0124 2095      		com r18
 1643 0126 3095      		com r19
 1644 0128 9223      		and r25,r18
 1645 012a 9283      		std Z+2,r25
 217:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 1646               		.loc 1 217 0
 1647 012c 62E0      		ldi r22,lo8(2)
 1648 012e 83E2      		ldi r24,lo8(35)
 1649 0130 90E0      		ldi r25,0
 1650 0132 0E94 0000 		call _pal_lld_setlineid
 1651               	.LVL179:
 1652 0136 0E94 0000 		call _pal_lld_getpadfromline
 1653               	.LVL180:
 1654 013a 182F      		mov r17,r24
 1655 013c 62E0      		ldi r22,lo8(2)
 1656 013e 83E2      		ldi r24,lo8(35)
 1657 0140 90E0      		ldi r25,0
 1658 0142 0E94 0000 		call _pal_lld_setlineid
 1659               	.LVL181:
 1660 0146 0E94 0000 		call _pal_lld_getportfromline
 1661               	.LVL182:
 1662 014a BE01      		movw r22,r28
 1663 014c 00C0      		rjmp 2f
 1664               		1:
 1665 014e 660F      		lsl r22
 1666               		2:
 1667 0150 1A95      		dec r17
 1668 0152 02F4      		brpl 1b
 1669 0154 46E0      		ldi r20,lo8(6)
 1670 0156 0E94 0000 		call _pal_lld_setgroupmode
 1671               	.LVL183:
 218:main.c        **** 
 1672               		.loc 1 218 0
 1673 015a 62E0      		ldi r22,lo8(2)
 1674 015c 83E2      		ldi r24,lo8(35)
 1675 015e 90E0      		ldi r25,0
 1676 0160 0E94 0000 		call _pal_lld_setlineid
 1677               	.LVL184:
 1678 0164 0E94 0000 		call _pal_lld_getpadfromline
 1679               	.LVL185:
 1680 0168 182F      		mov r17,r24
 1681 016a 62E0      		ldi r22,lo8(2)
 1682 016c 83E2      		ldi r24,lo8(35)
 1683 016e 90E0      		ldi r25,0
 1684 0170 0E94 0000 		call _pal_lld_setlineid
 1685               	.LVL186:
 1686 0174 0E94 0000 		call _pal_lld_getportfromline
 1687               	.LVL187:
 1688 0178 FC01      		movw r30,r24
 1689 017a 9281      		ldd r25,Z+2
 1690 017c 9E01      		movw r18,r28
 1691 017e 00C0      		rjmp 2f
 1692               		1:
 1693 0180 220F      		lsl r18
 1694 0182 331F      		rol r19
 1695               		2:
 1696 0184 1A95      		dec r17
 1697 0186 02F4      		brpl 1b
 1698 0188 2095      		com r18
 1699 018a 3095      		com r19
 1700 018c 9223      		and r25,r18
 1701 018e 9283      		std Z+2,r25
 221:main.c        ****   palClearLine(PRIMARIO_VERDE);
 1702               		.loc 1 221 0
 1703 0190 67E0      		ldi r22,lo8(7)
 1704 0192 89E2      		ldi r24,lo8(41)
 1705 0194 90E0      		ldi r25,0
 1706 0196 0E94 0000 		call _pal_lld_setlineid
 1707               	.LVL188:
 1708 019a 0E94 0000 		call _pal_lld_getpadfromline
 1709               	.LVL189:
 1710 019e 182F      		mov r17,r24
 1711 01a0 67E0      		ldi r22,lo8(7)
 1712 01a2 89E2      		ldi r24,lo8(41)
 1713 01a4 90E0      		ldi r25,0
 1714 01a6 0E94 0000 		call _pal_lld_setlineid
 1715               	.LVL190:
 1716 01aa 0E94 0000 		call _pal_lld_getportfromline
 1717               	.LVL191:
 1718 01ae BE01      		movw r22,r28
 1719 01b0 00C0      		rjmp 2f
 1720               		1:
 1721 01b2 660F      		lsl r22
 1722               		2:
 1723 01b4 1A95      		dec r17
 1724 01b6 02F4      		brpl 1b
 1725 01b8 46E0      		ldi r20,lo8(6)
 1726 01ba 0E94 0000 		call _pal_lld_setgroupmode
 1727               	.LVL192:
 222:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 1728               		.loc 1 222 0
 1729 01be 67E0      		ldi r22,lo8(7)
 1730 01c0 89E2      		ldi r24,lo8(41)
 1731 01c2 90E0      		ldi r25,0
 1732 01c4 0E94 0000 		call _pal_lld_setlineid
 1733               	.LVL193:
 1734 01c8 0E94 0000 		call _pal_lld_getpadfromline
 1735               	.LVL194:
 1736 01cc 182F      		mov r17,r24
 1737 01ce 67E0      		ldi r22,lo8(7)
 1738 01d0 89E2      		ldi r24,lo8(41)
 1739 01d2 90E0      		ldi r25,0
 1740 01d4 0E94 0000 		call _pal_lld_setlineid
 1741               	.LVL195:
 1742 01d8 0E94 0000 		call _pal_lld_getportfromline
 1743               	.LVL196:
 1744 01dc FC01      		movw r30,r24
 1745 01de 9281      		ldd r25,Z+2
 1746 01e0 9E01      		movw r18,r28
 1747 01e2 00C0      		rjmp 2f
 1748               		1:
 1749 01e4 220F      		lsl r18
 1750 01e6 331F      		rol r19
 1751               		2:
 1752 01e8 1A95      		dec r17
 1753 01ea 02F4      		brpl 1b
 1754 01ec 2095      		com r18
 1755 01ee 3095      		com r19
 1756 01f0 9223      		and r25,r18
 1757 01f2 9283      		std Z+2,r25
 223:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 1758               		.loc 1 223 0
 1759 01f4 64E0      		ldi r22,lo8(4)
 1760 01f6 89E2      		ldi r24,lo8(41)
 1761 01f8 90E0      		ldi r25,0
 1762 01fa 0E94 0000 		call _pal_lld_setlineid
 1763               	.LVL197:
 1764 01fe 0E94 0000 		call _pal_lld_getpadfromline
 1765               	.LVL198:
 1766 0202 182F      		mov r17,r24
 1767 0204 64E0      		ldi r22,lo8(4)
 1768 0206 89E2      		ldi r24,lo8(41)
 1769 0208 90E0      		ldi r25,0
 1770 020a 0E94 0000 		call _pal_lld_setlineid
 1771               	.LVL199:
 1772 020e 0E94 0000 		call _pal_lld_getportfromline
 1773               	.LVL200:
 1774 0212 BE01      		movw r22,r28
 1775 0214 00C0      		rjmp 2f
 1776               		1:
 1777 0216 660F      		lsl r22
 1778               		2:
 1779 0218 1A95      		dec r17
 1780 021a 02F4      		brpl 1b
 1781 021c 46E0      		ldi r20,lo8(6)
 1782 021e 0E94 0000 		call _pal_lld_setgroupmode
 1783               	.LVL201:
 224:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 1784               		.loc 1 224 0
 1785 0222 64E0      		ldi r22,lo8(4)
 1786 0224 89E2      		ldi r24,lo8(41)
 1787 0226 90E0      		ldi r25,0
 1788 0228 0E94 0000 		call _pal_lld_setlineid
 1789               	.LVL202:
 1790 022c 0E94 0000 		call _pal_lld_getpadfromline
 1791               	.LVL203:
 1792 0230 182F      		mov r17,r24
 1793 0232 64E0      		ldi r22,lo8(4)
 1794 0234 89E2      		ldi r24,lo8(41)
 1795 0236 90E0      		ldi r25,0
 1796 0238 0E94 0000 		call _pal_lld_setlineid
 1797               	.LVL204:
 1798 023c 0E94 0000 		call _pal_lld_getportfromline
 1799               	.LVL205:
 1800 0240 FC01      		movw r30,r24
 1801 0242 9281      		ldd r25,Z+2
 1802 0244 9E01      		movw r18,r28
 1803 0246 00C0      		rjmp 2f
 1804               		1:
 1805 0248 220F      		lsl r18
 1806 024a 331F      		rol r19
 1807               		2:
 1808 024c 1A95      		dec r17
 1809 024e 02F4      		brpl 1b
 1810 0250 2095      		com r18
 1811 0252 3095      		com r19
 1812 0254 9223      		and r25,r18
 1813 0256 9283      		std Z+2,r25
 225:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 1814               		.loc 1 225 0
 1815 0258 66E0      		ldi r22,lo8(6)
 1816 025a 89E2      		ldi r24,lo8(41)
 1817 025c 90E0      		ldi r25,0
 1818 025e 0E94 0000 		call _pal_lld_setlineid
 1819               	.LVL206:
 1820 0262 0E94 0000 		call _pal_lld_getpadfromline
 1821               	.LVL207:
 1822 0266 182F      		mov r17,r24
 1823 0268 66E0      		ldi r22,lo8(6)
 1824 026a 89E2      		ldi r24,lo8(41)
 1825 026c 90E0      		ldi r25,0
 1826 026e 0E94 0000 		call _pal_lld_setlineid
 1827               	.LVL208:
 1828 0272 0E94 0000 		call _pal_lld_getportfromline
 1829               	.LVL209:
 1830 0276 BE01      		movw r22,r28
 1831 0278 00C0      		rjmp 2f
 1832               		1:
 1833 027a 660F      		lsl r22
 1834               		2:
 1835 027c 1A95      		dec r17
 1836 027e 02F4      		brpl 1b
 1837 0280 46E0      		ldi r20,lo8(6)
 1838 0282 0E94 0000 		call _pal_lld_setgroupmode
 1839               	.LVL210:
 226:main.c        **** 
 1840               		.loc 1 226 0
 1841 0286 66E0      		ldi r22,lo8(6)
 1842 0288 89E2      		ldi r24,lo8(41)
 1843 028a 90E0      		ldi r25,0
 1844 028c 0E94 0000 		call _pal_lld_setlineid
 1845               	.LVL211:
 1846 0290 0E94 0000 		call _pal_lld_getpadfromline
 1847               	.LVL212:
 1848 0294 182F      		mov r17,r24
 1849 0296 66E0      		ldi r22,lo8(6)
 1850 0298 89E2      		ldi r24,lo8(41)
 1851 029a 90E0      		ldi r25,0
 1852 029c 0E94 0000 		call _pal_lld_setlineid
 1853               	.LVL213:
 1854 02a0 0E94 0000 		call _pal_lld_getportfromline
 1855               	.LVL214:
 1856 02a4 FC01      		movw r30,r24
 1857 02a6 9281      		ldd r25,Z+2
 1858 02a8 9E01      		movw r18,r28
 1859 02aa 00C0      		rjmp 2f
 1860               		1:
 1861 02ac 220F      		lsl r18
 1862 02ae 331F      		rol r19
 1863               		2:
 1864 02b0 1A95      		dec r17
 1865 02b2 02F4      		brpl 1b
 1866 02b4 2095      		com r18
 1867 02b6 3095      		com r19
 1868 02b8 9223      		and r25,r18
 1869 02ba 9283      		std Z+2,r25
 229:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 1870               		.loc 1 229 0
 1871 02bc 61E0      		ldi r22,lo8(1)
 1872 02be 83E2      		ldi r24,lo8(35)
 1873 02c0 90E0      		ldi r25,0
 1874 02c2 0E94 0000 		call _pal_lld_setlineid
 1875               	.LVL215:
 1876 02c6 0E94 0000 		call _pal_lld_getpadfromline
 1877               	.LVL216:
 1878 02ca 182F      		mov r17,r24
 1879 02cc 61E0      		ldi r22,lo8(1)
 1880 02ce 83E2      		ldi r24,lo8(35)
 1881 02d0 90E0      		ldi r25,0
 1882 02d2 0E94 0000 		call _pal_lld_setlineid
 1883               	.LVL217:
 1884 02d6 0E94 0000 		call _pal_lld_getportfromline
 1885               	.LVL218:
 1886 02da BE01      		movw r22,r28
 1887 02dc 00C0      		rjmp 2f
 1888               		1:
 1889 02de 660F      		lsl r22
 1890               		2:
 1891 02e0 1A95      		dec r17
 1892 02e2 02F4      		brpl 1b
 1893 02e4 46E0      		ldi r20,lo8(6)
 1894 02e6 0E94 0000 		call _pal_lld_setgroupmode
 1895               	.LVL219:
 230:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 1896               		.loc 1 230 0
 1897 02ea 61E0      		ldi r22,lo8(1)
 1898 02ec 83E2      		ldi r24,lo8(35)
 1899 02ee 90E0      		ldi r25,0
 1900 02f0 0E94 0000 		call _pal_lld_setlineid
 1901               	.LVL220:
 1902 02f4 0E94 0000 		call _pal_lld_getpadfromline
 1903               	.LVL221:
 1904 02f8 182F      		mov r17,r24
 1905 02fa 61E0      		ldi r22,lo8(1)
 1906 02fc 83E2      		ldi r24,lo8(35)
 1907 02fe 90E0      		ldi r25,0
 1908 0300 0E94 0000 		call _pal_lld_setlineid
 1909               	.LVL222:
 1910 0304 0E94 0000 		call _pal_lld_getportfromline
 1911               	.LVL223:
 1912 0308 FC01      		movw r30,r24
 1913 030a 9281      		ldd r25,Z+2
 1914 030c 9E01      		movw r18,r28
 1915 030e 00C0      		rjmp 2f
 1916               		1:
 1917 0310 220F      		lsl r18
 1918 0312 331F      		rol r19
 1919               		2:
 1920 0314 1A95      		dec r17
 1921 0316 02F4      		brpl 1b
 1922 0318 2095      		com r18
 1923 031a 3095      		com r19
 1924 031c 9223      		and r25,r18
 1925 031e 9283      		std Z+2,r25
 231:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 1926               		.loc 1 231 0
 1927 0320 65E0      		ldi r22,lo8(5)
 1928 0322 89E2      		ldi r24,lo8(41)
 1929 0324 90E0      		ldi r25,0
 1930 0326 0E94 0000 		call _pal_lld_setlineid
 1931               	.LVL224:
 1932 032a 0E94 0000 		call _pal_lld_getpadfromline
 1933               	.LVL225:
 1934 032e 182F      		mov r17,r24
 1935 0330 65E0      		ldi r22,lo8(5)
 1936 0332 89E2      		ldi r24,lo8(41)
 1937 0334 90E0      		ldi r25,0
 1938 0336 0E94 0000 		call _pal_lld_setlineid
 1939               	.LVL226:
 1940 033a 0E94 0000 		call _pal_lld_getportfromline
 1941               	.LVL227:
 1942 033e BE01      		movw r22,r28
 1943 0340 00C0      		rjmp 2f
 1944               		1:
 1945 0342 660F      		lsl r22
 1946               		2:
 1947 0344 1A95      		dec r17
 1948 0346 02F4      		brpl 1b
 1949 0348 46E0      		ldi r20,lo8(6)
 1950 034a 0E94 0000 		call _pal_lld_setgroupmode
 1951               	.LVL228:
 232:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 1952               		.loc 1 232 0
 1953 034e 65E0      		ldi r22,lo8(5)
 1954 0350 89E2      		ldi r24,lo8(41)
 1955 0352 90E0      		ldi r25,0
 1956 0354 0E94 0000 		call _pal_lld_setlineid
 1957               	.LVL229:
 1958 0358 0E94 0000 		call _pal_lld_getpadfromline
 1959               	.LVL230:
 1960 035c 182F      		mov r17,r24
 1961 035e 65E0      		ldi r22,lo8(5)
 1962 0360 89E2      		ldi r24,lo8(41)
 1963 0362 90E0      		ldi r25,0
 1964 0364 0E94 0000 		call _pal_lld_setlineid
 1965               	.LVL231:
 1966 0368 0E94 0000 		call _pal_lld_getportfromline
 1967               	.LVL232:
 1968 036c FC01      		movw r30,r24
 1969 036e 9281      		ldd r25,Z+2
 1970 0370 9E01      		movw r18,r28
 1971 0372 00C0      		rjmp 2f
 1972               		1:
 1973 0374 220F      		lsl r18
 1974 0376 331F      		rol r19
 1975               		2:
 1976 0378 1A95      		dec r17
 1977 037a 02F4      		brpl 1b
 1978 037c 2095      		com r18
 1979 037e 3095      		com r19
 1980 0380 9223      		and r25,r18
 1981 0382 9283      		std Z+2,r25
 233:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 1982               		.loc 1 233 0
 1983 0384 60E0      		ldi r22,0
 1984 0386 83E2      		ldi r24,lo8(35)
 1985 0388 90E0      		ldi r25,0
 1986 038a 0E94 0000 		call _pal_lld_setlineid
 1987               	.LVL233:
 1988 038e 0E94 0000 		call _pal_lld_getpadfromline
 1989               	.LVL234:
 1990 0392 182F      		mov r17,r24
 1991 0394 60E0      		ldi r22,0
 1992 0396 83E2      		ldi r24,lo8(35)
 1993 0398 90E0      		ldi r25,0
 1994 039a 0E94 0000 		call _pal_lld_setlineid
 1995               	.LVL235:
 1996 039e 0E94 0000 		call _pal_lld_getportfromline
 1997               	.LVL236:
 1998 03a2 BE01      		movw r22,r28
 1999 03a4 00C0      		rjmp 2f
 2000               		1:
 2001 03a6 660F      		lsl r22
 2002               		2:
 2003 03a8 1A95      		dec r17
 2004 03aa 02F4      		brpl 1b
 2005 03ac 46E0      		ldi r20,lo8(6)
 2006 03ae 0E94 0000 		call _pal_lld_setgroupmode
 2007               	.LVL237:
 234:main.c        **** 
 2008               		.loc 1 234 0
 2009 03b2 60E0      		ldi r22,0
 2010 03b4 83E2      		ldi r24,lo8(35)
 2011 03b6 90E0      		ldi r25,0
 2012 03b8 0E94 0000 		call _pal_lld_setlineid
 2013               	.LVL238:
 2014 03bc 0E94 0000 		call _pal_lld_getpadfromline
 2015               	.LVL239:
 2016 03c0 182F      		mov r17,r24
 2017 03c2 60E0      		ldi r22,0
 2018 03c4 83E2      		ldi r24,lo8(35)
 2019 03c6 90E0      		ldi r25,0
 2020 03c8 0E94 0000 		call _pal_lld_setlineid
 2021               	.LVL240:
 2022 03cc 0E94 0000 		call _pal_lld_getportfromline
 2023               	.LVL241:
 2024 03d0 FC01      		movw r30,r24
 2025 03d2 9281      		ldd r25,Z+2
 2026 03d4 9E01      		movw r18,r28
 2027 03d6 00C0      		rjmp 2f
 2028               		1:
 2029 03d8 220F      		lsl r18
 2030 03da 331F      		rol r19
 2031               		2:
 2032 03dc 1A95      		dec r17
 2033 03de 02F4      		brpl 1b
 2034 03e0 2095      		com r18
 2035 03e2 3095      		com r19
 2036 03e4 2923      		and r18,r25
 2037 03e6 2283      		std Z+2,r18
 239:main.c        **** 
 2038               		.loc 1 239 0
 2039 03e8 10E0      		ldi r17,0
 2040 03ea 00E0      		ldi r16,0
 2041 03ec 20E0      		ldi r18,lo8(gs(Thread1))
 2042 03ee 30E0      		ldi r19,hi8(gs(Thread1))
 2043 03f0 40E8      		ldi r20,lo8(-128)
 2044 03f2 63E8      		ldi r22,lo8(-125)
 2045 03f4 70E0      		ldi r23,0
 2046 03f6 80E0      		ldi r24,lo8(waThread1)
 2047 03f8 90E0      		ldi r25,hi8(waThread1)
 2048 03fa 0E94 0000 		call chThdCreateStatic
 2049               	.LVL242:
 2050 03fe 00C0      		rjmp .L103
 2051               	.L107:
 245:main.c        ****     }
 2052               		.loc 1 245 0
 2053 0400 84E0      		ldi r24,lo8(4)
 2054 0402 90E0      		ldi r25,0
 2055 0404 0E94 0000 		call enqueue
 2056               	.LVL243:
 2057               	.L100:
 260:main.c        ****   }
 2058               		.loc 1 260 0
 2059 0408 6EE0      		ldi r22,lo8(14)
 2060 040a 73E0      		ldi r23,lo8(3)
 2061 040c 80E0      		ldi r24,0
 2062 040e 90E0      		ldi r25,0
 2063 0410 0E94 0000 		call chThdSleep
 2064               	.LVL244:
 2065               	.L103:
 243:main.c        ****     {
 2066               		.loc 1 243 0
 2067 0414 65E0      		ldi r22,lo8(5)
 2068 0416 86E2      		ldi r24,lo8(38)
 2069 0418 90E0      		ldi r25,0
 2070 041a 0E94 0000 		call _pal_lld_setlineid
 2071               	.LVL245:
 2072 041e 41E0      		ldi r20,lo8(1)
 2073 0420 0E94 0000 		call button_check
 2074               	.LVL246:
 2075 0424 8111      		cpse r24,__zero_reg__
 2076 0426 00C0      		rjmp .L107
 247:main.c        ****     {
 2077               		.loc 1 247 0
 2078 0428 63E0      		ldi r22,lo8(3)
 2079 042a 86E2      		ldi r24,lo8(38)
 2080 042c 90E0      		ldi r25,0
 2081 042e 0E94 0000 		call _pal_lld_setlineid
 2082               	.LVL247:
 2083 0432 42E0      		ldi r20,lo8(2)
 2084 0434 0E94 0000 		call button_check
 2085               	.LVL248:
 2086 0438 8823      		tst r24
 2087 043a 01F0      		breq .L101
 249:main.c        ****     }
 2088               		.loc 1 249 0
 2089 043c 83E0      		ldi r24,lo8(3)
 2090 043e 90E0      		ldi r25,0
 2091 0440 0E94 0000 		call enqueue
 2092               	.LVL249:
 2093 0444 00C0      		rjmp .L100
 2094               	.L101:
 251:main.c        ****     {
 2095               		.loc 1 251 0
 2096 0446 64E0      		ldi r22,lo8(4)
 2097 0448 86E2      		ldi r24,lo8(38)
 2098 044a 90E0      		ldi r25,0
 2099 044c 0E94 0000 		call _pal_lld_setlineid
 2100               	.LVL250:
 2101 0450 43E0      		ldi r20,lo8(3)
 2102 0452 0E94 0000 		call button_check
 2103               	.LVL251:
 2104 0456 8823      		tst r24
 2105 0458 01F0      		breq .L102
 253:main.c        ****     }
 2106               		.loc 1 253 0
 2107 045a 81E0      		ldi r24,lo8(1)
 2108 045c 90E0      		ldi r25,0
 2109 045e 0E94 0000 		call enqueue
 2110               	.LVL252:
 2111 0462 00C0      		rjmp .L100
 2112               	.L102:
 255:main.c        ****     {
 2113               		.loc 1 255 0
 2114 0464 62E0      		ldi r22,lo8(2)
 2115 0466 86E2      		ldi r24,lo8(38)
 2116 0468 90E0      		ldi r25,0
 2117 046a 0E94 0000 		call _pal_lld_setlineid
 2118               	.LVL253:
 2119 046e 44E0      		ldi r20,lo8(4)
 2120 0470 0E94 0000 		call button_check
 2121               	.LVL254:
 2122 0474 8823      		tst r24
 2123 0476 01F0      		breq .L100
 257:main.c        ****     }
 2124               		.loc 1 257 0
 2125 0478 82E0      		ldi r24,lo8(2)
 2126 047a 90E0      		ldi r25,0
 2127 047c 0E94 0000 		call enqueue
 2128               	.LVL255:
 2129 0480 00C0      		rjmp .L100
 2130               		.cfi_endproc
 2131               	.LFE244:
 2133               		.section	.bss.old_x4.4132,"aw",@nobits
 2136               	old_x4.4132:
 2137 0000 00        		.zero	1
 2138               		.section	.bss.old_x3.4130,"aw",@nobits
 2141               	old_x3.4130:
 2142 0000 00        		.zero	1
 2143               		.section	.bss.old_x2.4128,"aw",@nobits
 2146               	old_x2.4128:
 2147 0000 00        		.zero	1
 2148               		.section	.bss.old_x1.4126,"aw",@nobits
 2151               	old_x1.4126:
 2152 0000 00        		.zero	1
 2153               		.section	.bss.waThread1,"aw",@nobits
 2156               	waThread1:
 2157 0000 0000 0000 		.zero	131
 2157      0000 0000 
 2157      0000 0000 
 2157      0000 0000 
 2157      0000 0000 
 2158               	.global	main_vt_flag
 2159               		.section	.bss.main_vt_flag,"aw",@nobits
 2162               	main_vt_flag:
 2163 0000 00        		.zero	1
 2164               	.global	g_state
 2165               		.section	.data.g_state,"aw",@progbits
 2168               	g_state:
 2169 0000 01        		.byte	1
 2170               		.section	.bss.qfull,"aw",@nobits
 2173               	qfull:
 2174 0000 0000 0000 		.zero	4
 2175               		.section	.bss.qempty,"aw",@nobits
 2178               	qempty:
 2179 0000 0000 0000 		.zero	4
 2180               		.section	.bss.qmtx,"aw",@nobits
 2183               	qmtx:
 2184 0000 0000 0000 		.zero	8
 2184      0000 0000 
 2185               		.section	.bss.qsize,"aw",@nobits
 2188               	qsize:
 2189 0000 0000      		.zero	2
 2190               		.section	.bss.wrp,"aw",@nobits
 2193               	wrp:
 2194 0000 0000      		.zero	2
 2195               		.section	.bss.rdp,"aw",@nobits
 2198               	rdp:
 2199 0000 0000      		.zero	2
 2200               		.section	.bss.queue,"aw",@nobits
 2203               	queue:
 2204 0000 0000 0000 		.zero	256
 2204      0000 0000 
 2204      0000 0000 
 2204      0000 0000 
 2204      0000 0000 
 2205               		.text
 2206               	.Letext0:
 2207               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 2208               		.file 5 "/usr/lib/avr/include/stdint.h"
 2209               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2210               		.file 7 "../../os/rt/include/chearly.h"
 2211               		.file 8 "../../os/rt/include/chobjects.h"
 2212               		.file 9 "../../os/rt/include/chrfcu.h"
 2213               		.file 10 "../../os/rt/include/chdebug.h"
 2214               		.file 11 "../../os/rt/include/chtime.h"
 2215               		.file 12 "../../os/rt/include/chlists.h"
 2216               		.file 13 "../../os/rt/include/chsem.h"
 2217               		.file 14 "../../os/rt/include/chmtx.h"
 2218               		.file 15 "../../os/rt/include/chsys.h"
 2219               		.file 16 "../../os/rt/include/chregistry.h"
 2220               		.file 17 "../../os/rt/include/chcond.h"
 2221               		.file 18 "../../os/rt/include/chevents.h"
 2222               		.file 19 "../../os/oslib/include/chmemcore.h"
 2223               		.file 20 "../../os/hal/include/hal_queues.h"
 2224               		.file 21 "../../os/hal/include/hal_pal.h"
 2225               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 2226               		.file 23 "../../os/hal/include/hal_serial.h"
 2227               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 2228               		.file 25 "../../os/hal/include/hal.h"
 2229               		.file 26 "../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccEYlPes.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccEYlPes.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccEYlPes.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccEYlPes.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccEYlPes.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccEYlPes.s:13     .text.vt_cb:0000000000000000 vt_cb
     /tmp/ccEYlPes.s:2162   .bss.main_vt_flag:0000000000000000 main_vt_flag
     /tmp/ccEYlPes.s:36     .text.queueInit:0000000000000000 queueInit
     /tmp/ccEYlPes.s:2183   .bss.qmtx:0000000000000000 qmtx
     /tmp/ccEYlPes.s:2178   .bss.qempty:0000000000000000 qempty
     /tmp/ccEYlPes.s:2173   .bss.qfull:0000000000000000 qfull
     /tmp/ccEYlPes.s:2203   .bss.queue:0000000000000000 queue
     /tmp/ccEYlPes.s:2193   .bss.wrp:0000000000000000 wrp
     /tmp/ccEYlPes.s:2198   .bss.rdp:0000000000000000 rdp
     /tmp/ccEYlPes.s:2188   .bss.qsize:0000000000000000 qsize
     /tmp/ccEYlPes.s:78     .text.enqueue:0000000000000000 enqueue
     /tmp/ccEYlPes.s:168    .text.dequeue:0000000000000000 dequeue
     /tmp/ccEYlPes.s:255    .text.Thread1:0000000000000000 Thread1
     /tmp/ccEYlPes.s:2168   .data.g_state:0000000000000000 g_state
     /tmp/ccEYlPes.s:1246   .text.button_check:0000000000000000 button_check
     /tmp/ccEYlPes.s:2136   .bss.old_x4.4132:0000000000000000 old_x4.4132
     /tmp/ccEYlPes.s:2151   .bss.old_x1.4126:0000000000000000 old_x1.4126
     /tmp/ccEYlPes.s:2146   .bss.old_x2.4128:0000000000000000 old_x2.4128
     /tmp/ccEYlPes.s:2141   .bss.old_x3.4130:0000000000000000 old_x3.4130
     /tmp/ccEYlPes.s:1467   .text.startup.main:0000000000000000 main
     /tmp/ccEYlPes.s:2156   .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
chMtxObjectInit
chCondObjectInit
chMtxLock
chCondWait
chCondSignal
chMtxUnlock
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
chThdSleep
chVTDoResetI
chVTDoSetI
halInit
chSysInit
_pal_lld_setgroupmode
chThdCreateStatic
__do_copy_data
__do_clear_bss
