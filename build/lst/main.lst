   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb2,"ax",@progbits
  11               	.global	vt_cb2
  13               	vt_cb2:
  14               	.LFB251:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** 
  20:main.c        **** #define LED_PERIODO 10000
  21:main.c        **** #define BUFFER_SIZE 8
  22:main.c        **** 
  23:main.c        **** /* Definições de pinos*/
  24:main.c        **** // LEDS
  25:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  26:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  27:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  28:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  29:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  30:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  31:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  32:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  33:main.c        **** 
  34:main.c        **** typedef struct
  35:main.c        **** {
  36:main.c        ****   uint8_t events[BUFFER_SIZE];
  37:main.c        ****   uint8_t head;
  38:main.c        ****   uint8_t tail;
  39:main.c        ****   uint8_t size;
  40:main.c        **** } EventBuffer;
  41:main.c        **** 
  42:main.c        **** EventBuffer ev_buffer;
  43:main.c        **** 
  44:main.c        **** void bufferInit(EventBuffer *cb);
  45:main.c        **** bool isBufferEmpty(EventBuffer *buffer);
  46:main.c        **** bool isBufferFull(EventBuffer *buffer);
  47:main.c        **** void bufferPush(EventBuffer *cb, uint8_t event);
  48:main.c        **** uint8_t bufferPop(EventBuffer *cb);
  49:main.c        **** void vt_cb(void *arg);
  50:main.c        **** void vt_cb2(void *arg);
  51:main.c        **** 
  52:main.c        **** enum
  53:main.c        **** {
  54:main.c        ****   SECUNDARIO = 1,
  55:main.c        ****   PEDESTRE,
  56:main.c        ****   AMB_PRIMARIO,
  57:main.c        ****   AMB_SECUNDARIO
  58:main.c        **** };
  59:main.c        **** 
  60:main.c        **** /*
  61:main.c        ****  * LED blinker thread, times are in milliseconds.
  62:main.c        ****  */
  63:main.c        **** 
  64:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  65:main.c        **** static THD_FUNCTION(Thread1, arg)
  66:main.c        **** {
  67:main.c        ****   virtual_timer_t vt;
  68:main.c        **** 
  69:main.c        ****   chVTObjectInit(&vt);
  70:main.c        ****   chVTSet(&vt, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb, (void *)&vt);
  71:main.c        **** 
  72:main.c        ****   while (1)
  73:main.c        ****   {
  74:main.c        ****   }
  75:main.c        **** }
  76:main.c        **** 
  77:main.c        **** /*
  78:main.c        ****  * Application entry point.
  79:main.c        ****  */
  80:main.c        **** int main(void)
  81:main.c        **** {
  82:main.c        ****   bufferInit(&ev_buffer);
  83:main.c        ****   /*
  84:main.c        ****    * System initializations.
  85:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
  86:main.c        ****    *   and performs the board-specific initializations.
  87:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
  88:main.c        ****    *   RTOS is active.
  89:main.c        ****    */
  90:main.c        ****   halInit();
  91:main.c        ****   chSysInit();
  92:main.c        **** 
  93:main.c        ****   // Pedestre
  94:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
  95:main.c        ****   palClearLine(PEDESTRE_VERDE);
  96:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
  97:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
  98:main.c        **** 
  99:main.c        ****   // Primário
 100:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 101:main.c        ****   palClearLine(PRIMARIO_VERDE);
 102:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 103:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 104:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 105:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 106:main.c        **** 
 107:main.c        ****   // Secundário
 108:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 109:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 110:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 111:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 112:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 113:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 114:main.c        **** 
 115:main.c        ****   /* Configuração dos botões */
 116:main.c        **** 
 117:main.c        ****   /*
 118:main.c        ****    * Starts the LED blinker thread.
 119:main.c        ****    */
 120:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 121:main.c        **** 
 122:main.c        ****   palSetLine(PEDESTRE_VERDE);
 123:main.c        **** 
 124:main.c        ****   virtual_timer_t vt2;
 125:main.c        **** 
 126:main.c        ****   chVTObjectInit(&vt2);
 127:main.c        ****   chVTSet(&vt2, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb2, (void *)&vt2);
 128:main.c        **** 
 129:main.c        ****   while (1)
 130:main.c        ****   {
 131:main.c        ****     palToggleLine(SECUNDARIO_VERDE);
 132:main.c        ****     chThdSleepMicroseconds(10000);
 133:main.c        ****   }
 134:main.c        **** }
 135:main.c        **** 
 136:main.c        **** void bufferInit(EventBuffer *buffer)
 137:main.c        **** {
 138:main.c        ****   buffer->head = 0;
 139:main.c        ****   buffer->tail = 0;
 140:main.c        ****   buffer->size = 0;
 141:main.c        **** }
 142:main.c        **** 
 143:main.c        **** bool isBufferEmpty(EventBuffer *buffer)
 144:main.c        **** {
 145:main.c        ****   return buffer->size == 0;
 146:main.c        **** }
 147:main.c        **** 
 148:main.c        **** bool isBufferFull(EventBuffer *buffer)
 149:main.c        **** {
 150:main.c        ****   return buffer->size == BUFFER_SIZE;
 151:main.c        **** }
 152:main.c        **** 
 153:main.c        **** void bufferPush(EventBuffer *buffer, uint8_t event)
 154:main.c        **** {
 155:main.c        ****   buffer->events[buffer->tail] = event;
 156:main.c        ****   buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 157:main.c        ****   buffer->size++;
 158:main.c        **** }
 159:main.c        **** 
 160:main.c        **** uint8_t bufferPop(EventBuffer *buffer)
 161:main.c        **** {
 162:main.c        ****   if (isBufferEmpty(buffer))
 163:main.c        ****   {
 164:main.c        ****     return false; // Buffer vazio
 165:main.c        ****   }
 166:main.c        **** 
 167:main.c        ****   uint8_t event = buffer->events[buffer->head];
 168:main.c        ****   buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 169:main.c        ****   buffer->size--;
 170:main.c        ****   return event;
 171:main.c        **** }
 172:main.c        **** 
 173:main.c        **** void vt_cb(void *arg)
 174:main.c        **** {
 175:main.c        ****   chSysLockFromISR();
 176:main.c        ****   palTogglePad(IOPORT2, PORTB_LED1);
 177:main.c        ****   chVTSetI((virtual_timer_t *)arg, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb, arg);
 178:main.c        ****   chSysUnlockFromISR();
 179:main.c        **** }
 180:main.c        **** 
 181:main.c        **** void vt_cb2(void *arg)
 182:main.c        **** {
  16               		.loc 1 182 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 EC01      		movw r28,r24
 183:main.c        ****   chSysLockFromISR();
 184:main.c        ****   palTogglePad(IOPORT2, 3);
  40               		.loc 1 184 0
  41 000a 85B1      		in r24,0x5
  42               	.LVL1:
  43 000c 98E0      		ldi r25,lo8(8)
  44 000e 8927      		eor r24,r25
  45 0010 85B9      		out 0x5,r24
  46               	.LVL2:
  47               	.LBB62:
  48               	.LBB63:
  49               	.LBB64:
  50               	.LBB65:
  51               		.file 2 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h"
   1:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*
   2:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
   5:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
   7:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  11:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  16:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** */
  19:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  20:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
  21:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
  24:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @addtogroup time
  25:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @{
  26:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
  27:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  28:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #define CHVT_H
  30:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  31:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  32:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  34:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  35:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  36:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  38:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  39:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  40:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  42:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  43:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****        "be zero or greater than one"
  46:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  47:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  48:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  51:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  52:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  55:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  56:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  57:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  59:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  60:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  61:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  63:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  64:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  65:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  67:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  68:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*
  69:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
  71:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #ifdef __cplusplus
  72:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** extern "C" {
  73:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  74:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  85:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #ifdef __cplusplus
  86:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
  87:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  88:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  89:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  90:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  92:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  93:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
  94:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 100:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 102:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @init
 103:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 104:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 106:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 107:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 108:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 109:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 110:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Current system time.
 111:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          invocation.
 113:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          @p systime_t size.
 117:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 118:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 120:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @xclass
 121:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 122:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 124:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return port_timer_get_time();
 128:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 130:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 131:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 132:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Current system time.
 133:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          invocation.
 135:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 137:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 139:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @api
 140:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 141:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   systime_t systime;
 143:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 144:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysLock();
 145:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysUnlock();
 147:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 148:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return systime;
 149:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 150:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 151:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 152:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 154:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] start     start time
 155:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 157:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @xclass
 158:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 159:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 161:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 163:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 164:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 165:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          window.
 167:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          time window has zero size.
 169:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 170:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 175:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @xclass
 176:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 177:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 179:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 181:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 182:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 183:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          window.
 185:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          time window has zero size.
 187:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 188:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 193:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @api
 194:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 195:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 197:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 199:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 200:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 201:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 207:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 214:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @iclass
 215:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 216:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 220:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 222:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     return false;
 224:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 225:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 226:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   if (timep != NULL) {
 227:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #else
 230:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
 233:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 234:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 235:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return true;
 236:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 237:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 238:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 239:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 243:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 246:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @iclass
 247:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 248:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 250:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 252:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 254:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 255:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 256:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 260:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 263:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @api
 264:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 265:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   bool b;
 267:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 268:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysLock();
 269:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysUnlock();
 271:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 272:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return b;
 273:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 274:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 275:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 276:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 281:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 283:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @iclass
 284:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 285:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 287:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
  52               		.loc 2 287 0
  53 0012 8881      		ld r24,Y
  54 0014 9981      		ldd r25,Y+1
  55 0016 892B      		or r24,r25
  56 0018 01F0      		breq .L2
 288:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
  57               		.loc 2 288 0
  58 001a CE01      		movw r24,r28
  59 001c 0E94 0000 		call chVTDoResetI
  60               	.LVL3:
  61               	.L2:
  62               	.LBE65:
  63               	.LBE64:
 289:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 290:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 291:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 292:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 293:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 298:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 300:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @api
 301:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 302:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 304:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysLock();
 305:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysUnlock();
 307:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 308:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 309:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 310:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          using the new parameters.
 313:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 316:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                        normal time specification.
 321:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      .
 323:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      function
 328:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 329:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @iclass
 330:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 331:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 334:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
  64               		.loc 2 335 0
  65 0020 8E01      		movw r16,r28
  66 0022 20E0      		ldi r18,lo8(gs(vt_cb2))
  67 0024 30E0      		ldi r19,hi8(gs(vt_cb2))
  68 0026 48E2      		ldi r20,lo8(40)
  69 0028 51E3      		ldi r21,lo8(49)
  70 002a 61E0      		ldi r22,lo8(1)
  71 002c 70E0      		ldi r23,0
  72 002e CE01      		movw r24,r28
  73 0030 0E94 0000 		call chVTDoSetI
  74               	.LVL4:
  75               	/* epilogue start */
  76               	.LBE63:
  77               	.LBE62:
 185:main.c        ****   chVTSetI((virtual_timer_t *)arg, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb2, arg);
 186:main.c        ****   chSysUnlockFromISR();
 187:main.c        **** }...
  78               		.loc 1 187 0
  79 0034 DF91      		pop r29
  80 0036 CF91      		pop r28
  81               	.LVL5:
  82 0038 1F91      		pop r17
  83 003a 0F91      		pop r16
  84               	.LVL6:
  85 003c 0895      		ret
  86               		.cfi_endproc
  87               	.LFE251:
  89               		.section	.text.vt_cb,"ax",@progbits
  90               	.global	vt_cb
  92               	vt_cb:
  93               	.LFB250:
 174:main.c        **** {
  94               		.loc 1 174 0
  95               		.cfi_startproc
  96               	.LVL7:
  97 0000 0F93      		push r16
  98               	.LCFI4:
  99               		.cfi_def_cfa_offset 3
 100               		.cfi_offset 16, -2
 101 0002 1F93      		push r17
 102               	.LCFI5:
 103               		.cfi_def_cfa_offset 4
 104               		.cfi_offset 17, -3
 105 0004 CF93      		push r28
 106               	.LCFI6:
 107               		.cfi_def_cfa_offset 5
 108               		.cfi_offset 28, -4
 109 0006 DF93      		push r29
 110               	.LCFI7:
 111               		.cfi_def_cfa_offset 6
 112               		.cfi_offset 29, -5
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 4 */
 116               	.L__stack_usage = 4
 117 0008 EC01      		movw r28,r24
 176:main.c        ****   palTogglePad(IOPORT2, PORTB_LED1);
 118               		.loc 1 176 0
 119 000a 85B1      		in r24,0x5
 120               	.LVL8:
 121 000c 90E2      		ldi r25,lo8(32)
 122 000e 8927      		eor r24,r25
 123 0010 85B9      		out 0x5,r24
 124               	.LVL9:
 125               	.LBB70:
 126               	.LBB71:
 127               	.LBB72:
 128               	.LBB73:
 287:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 129               		.loc 2 287 0
 130 0012 8881      		ld r24,Y
 131 0014 9981      		ldd r25,Y+1
 132 0016 892B      		or r24,r25
 133 0018 01F0      		breq .L8
 288:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 134               		.loc 2 288 0
 135 001a CE01      		movw r24,r28
 136 001c 0E94 0000 		call chVTDoResetI
 137               	.LVL10:
 138               	.L8:
 139               	.LBE73:
 140               	.LBE72:
 141               		.loc 2 335 0
 142 0020 8E01      		movw r16,r28
 143 0022 20E0      		ldi r18,lo8(gs(vt_cb))
 144 0024 30E0      		ldi r19,hi8(gs(vt_cb))
 145 0026 48E2      		ldi r20,lo8(40)
 146 0028 51E3      		ldi r21,lo8(49)
 147 002a 61E0      		ldi r22,lo8(1)
 148 002c 70E0      		ldi r23,0
 149 002e CE01      		movw r24,r28
 150 0030 0E94 0000 		call chVTDoSetI
 151               	.LVL11:
 152               	/* epilogue start */
 153               	.LBE71:
 154               	.LBE70:
 179:main.c        **** }
 155               		.loc 1 179 0
 156 0034 DF91      		pop r29
 157 0036 CF91      		pop r28
 158               	.LVL12:
 159 0038 1F91      		pop r17
 160 003a 0F91      		pop r16
 161               	.LVL13:
 162 003c 0895      		ret
 163               		.cfi_endproc
 164               	.LFE250:
 166               		.section	.text.Thread1,"ax",@progbits
 168               	Thread1:
 169               	.LFB243:
  66:main.c        **** {
 170               		.loc 1 66 0
 171               		.cfi_startproc
 172               	.LVL14:
 173 0000 CF93      		push r28
 174               	.LCFI8:
 175               		.cfi_def_cfa_offset 3
 176               		.cfi_offset 28, -2
 177 0002 DF93      		push r29
 178               	.LCFI9:
 179               		.cfi_def_cfa_offset 4
 180               		.cfi_offset 29, -3
 181 0004 CDB7      		in r28,__SP_L__
 182 0006 DEB7      		in r29,__SP_H__
 183               	.LCFI10:
 184               		.cfi_def_cfa_register 28
 185 0008 6097      		sbiw r28,16
 186               	.LCFI11:
 187               		.cfi_def_cfa_offset 20
 188 000a 0FB6      		in __tmp_reg__,__SREG__
 189 000c F894      		cli
 190 000e DEBF      		out __SP_H__,r29
 191 0010 0FBE      		out __SREG__,__tmp_reg__
 192 0012 CDBF      		out __SP_L__,r28
 193               	/* prologue: function */
 194               	/* frame size = 16 */
 195               	/* stack size = 18 */
 196               	.L__stack_usage = 18
 197               	.LVL15:
 198               	.LBB89:
 199               	.LBB90:
 106:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 200               		.loc 2 106 0
 201 0014 1A82      		std Y+2,__zero_reg__
 202 0016 1982      		std Y+1,__zero_reg__
 203               	.LVL16:
 204               	.LBE90:
 205               	.LBE89:
 206               	.LBB91:
 207               	.LBB92:
 208               	.LBB93:
 209               	.LBB94:
 210               		.file 3 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h"
   1:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*
   2:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
   5:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
   7:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  11:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  16:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** */
  19:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  20:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  21:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
  24:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @{
  26:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  27:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  28:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  31:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  34:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  36:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  40:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  41:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @{
  43:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  44:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  45:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  47:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  49:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  50:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  53:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  55:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  56:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  59:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  61:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  62:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  65:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /** @} */
  67:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  68:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  69:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @{
  71:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  72:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  73:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  75:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  77:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  78:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  80:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  82:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  83:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  85:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  87:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  88:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  90:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  92:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  93:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  95:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  98:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #else
  99:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 101:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 102:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 103:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 105:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /** @} */
 107:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 108:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 112:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 113:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 118:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 121:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 122:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 123:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          area size.
 126:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 127:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 130:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 131:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 132:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 134:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 137:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 138:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 142:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 146:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****    asm module.*/
 148:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 150:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 151:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 154:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 156:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 157:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 163:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 183:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** };
 185:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 186:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 187:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          switching.
 190:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          structure.
 194:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 195:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 218:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** };
 221:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 222:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 223:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 227:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** struct port_context {
 228:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** };
 230:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 231:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 233:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 237:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 238:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 242:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 254:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 265:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 267:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 268:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 271:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 275:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 276:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 280:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 283:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 286:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 287:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 289:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 291:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 292:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 294:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 296:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 297:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 303:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 308:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 309:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 310:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 314:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 321:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 322:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 323:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 327:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 329:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 330:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 334:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 336:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 337:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 343:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 346:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 350:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 351:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 352:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 353:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 356:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 359:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 360:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 364:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****    asm module.*/
 366:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 368:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** extern "C" {
 370:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 371:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 375:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 376:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 377:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 379:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 383:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****    asm module.*/
 385:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 387:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 388:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 390:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 392:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 394:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   return SREG;
 395:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 396:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 397:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 398:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 400:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 402:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 406:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 408:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 410:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 411:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 412:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 414:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 418:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 420:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 422:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 423:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 424:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          actions.
 427:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 428:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 430:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 211               		.loc 3 430 0
 212               	/* #APP */
 213               	 ;  430 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h" 1
 214 0018 F894      		cli
 215               	 ;  0 "" 2
 216               	.LVL17:
 217               	/* #NOAPP */
 218               	.LBE94:
 219               	.LBE93:
 220               	.LBE92:
 221               	.LBB95:
 222               	.LBB96:
 223               	.LBB97:
 224               	.LBB98:
 287:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 225               		.loc 2 287 0
 226 001a 8981      		ldd r24,Y+1
 227 001c 9A81      		ldd r25,Y+2
 228               	.LVL18:
 229 001e 892B      		or r24,r25
 230 0020 01F0      		breq .L18
 288:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 231               		.loc 2 288 0
 232 0022 CE01      		movw r24,r28
 233 0024 0196      		adiw r24,1
 234 0026 7C01      		movw r14,r24
 235 0028 0E94 0000 		call chVTDoResetI
 236               	.LVL19:
 237               	.L13:
 238               	.LBE98:
 239               	.LBE97:
 240               		.loc 2 335 0
 241 002c 8701      		movw r16,r14
 242 002e 20E0      		ldi r18,lo8(gs(vt_cb))
 243 0030 30E0      		ldi r19,hi8(gs(vt_cb))
 244 0032 48E2      		ldi r20,lo8(40)
 245 0034 51E3      		ldi r21,lo8(49)
 246 0036 61E0      		ldi r22,lo8(1)
 247 0038 70E0      		ldi r23,0
 248 003a C701      		movw r24,r14
 249 003c 0E94 0000 		call chVTDoSetI
 250               	.LVL20:
 251               	.LBE96:
 252               	.LBE95:
 253               	.LBB99:
 254               	.LBB100:
 255               	.LBB101:
 256               	.LBB102:
 431:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 432:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 433:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 434:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          actions.
 437:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 438:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 440:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 257               		.loc 3 440 0
 258               	/* #APP */
 259               	 ;  440 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h" 1
 260 0040 7894      		sei
 261               	 ;  0 "" 2
 262               	/* #NOAPP */
 263               	.L14:
 264 0042 00C0      		rjmp .L14
 265               	.LVL21:
 266               	.L18:
 267 0044 CE01      		movw r24,r28
 268 0046 0196      		adiw r24,1
 269 0048 7C01      		movw r14,r24
 270 004a 00C0      		rjmp .L13
 271               	.LBE102:
 272               	.LBE101:
 273               	.LBE100:
 274               	.LBE99:
 275               	.LBE91:
 276               		.cfi_endproc
 277               	.LFE243:
 279               		.section	.text.startup.main,"ax",@progbits
 280               	.global	main
 282               	main:
 283               	.LFB244:
  81:main.c        **** {
 284               		.loc 1 81 0
 285               		.cfi_startproc
 286 0000 CF93      		push r28
 287               	.LCFI12:
 288               		.cfi_def_cfa_offset 3
 289               		.cfi_offset 28, -2
 290 0002 DF93      		push r29
 291               	.LCFI13:
 292               		.cfi_def_cfa_offset 4
 293               		.cfi_offset 29, -3
 294 0004 CDB7      		in r28,__SP_L__
 295 0006 DEB7      		in r29,__SP_H__
 296               	.LCFI14:
 297               		.cfi_def_cfa_register 28
 298 0008 6097      		sbiw r28,16
 299               	.LCFI15:
 300               		.cfi_def_cfa_offset 20
 301 000a 0FB6      		in __tmp_reg__,__SREG__
 302 000c F894      		cli
 303 000e DEBF      		out __SP_H__,r29
 304 0010 0FBE      		out __SREG__,__tmp_reg__
 305 0012 CDBF      		out __SP_L__,r28
 306               	/* prologue: function */
 307               	/* frame size = 16 */
 308               	/* stack size = 18 */
 309               	.L__stack_usage = 18
 310               	.LVL22:
 311               	.LBB120:
 312               	.LBB121:
 138:main.c        ****   buffer->head = 0;
 313               		.loc 1 138 0
 314 0014 1092 0000 		sts ev_buffer+8,__zero_reg__
 139:main.c        ****   buffer->tail = 0;
 315               		.loc 1 139 0
 316 0018 1092 0000 		sts ev_buffer+9,__zero_reg__
 140:main.c        ****   buffer->size = 0;
 317               		.loc 1 140 0
 318 001c 1092 0000 		sts ev_buffer+10,__zero_reg__
 319               	.LVL23:
 320               	.LBE121:
 321               	.LBE120:
  90:main.c        ****   halInit();
 322               		.loc 1 90 0
 323 0020 0E94 0000 		call halInit
 324               	.LVL24:
  91:main.c        ****   chSysInit();
 325               		.loc 1 91 0
 326 0024 0E94 0000 		call chSysInit
 327               	.LVL25:
  94:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 328               		.loc 1 94 0
 329 0028 63E0      		ldi r22,lo8(3)
 330 002a 83E2      		ldi r24,lo8(35)
 331 002c 90E0      		ldi r25,0
 332 002e 0E94 0000 		call _pal_lld_setlineid
 333               	.LVL26:
 334 0032 0E94 0000 		call _pal_lld_getpadfromline
 335               	.LVL27:
 336 0036 182F      		mov r17,r24
 337 0038 63E0      		ldi r22,lo8(3)
 338 003a 83E2      		ldi r24,lo8(35)
 339 003c 90E0      		ldi r25,0
 340 003e 0E94 0000 		call _pal_lld_setlineid
 341               	.LVL28:
 342 0042 0E94 0000 		call _pal_lld_getportfromline
 343               	.LVL29:
 344 0046 EE24      		clr r14
 345 0048 E394      		inc r14
 346 004a F12C      		mov r15,__zero_reg__
 347 004c B701      		movw r22,r14
 348 004e 00C0      		rjmp 2f
 349               		1:
 350 0050 660F      		lsl r22
 351               		2:
 352 0052 1A95      		dec r17
 353 0054 02F4      		brpl 1b
 354 0056 46E0      		ldi r20,lo8(6)
 355 0058 0E94 0000 		call _pal_lld_setgroupmode
 356               	.LVL30:
  95:main.c        ****   palClearLine(PEDESTRE_VERDE);
 357               		.loc 1 95 0
 358 005c 63E0      		ldi r22,lo8(3)
 359 005e 83E2      		ldi r24,lo8(35)
 360 0060 90E0      		ldi r25,0
 361 0062 0E94 0000 		call _pal_lld_setlineid
 362               	.LVL31:
 363 0066 0E94 0000 		call _pal_lld_getpadfromline
 364               	.LVL32:
 365 006a 182F      		mov r17,r24
 366 006c 63E0      		ldi r22,lo8(3)
 367 006e 83E2      		ldi r24,lo8(35)
 368 0070 90E0      		ldi r25,0
 369 0072 0E94 0000 		call _pal_lld_setlineid
 370               	.LVL33:
 371 0076 0E94 0000 		call _pal_lld_getportfromline
 372               	.LVL34:
 373 007a FC01      		movw r30,r24
 374 007c 9281      		ldd r25,Z+2
 375 007e 9701      		movw r18,r14
 376 0080 00C0      		rjmp 2f
 377               		1:
 378 0082 220F      		lsl r18
 379 0084 331F      		rol r19
 380               		2:
 381 0086 1A95      		dec r17
 382 0088 02F4      		brpl 1b
 383 008a 2095      		com r18
 384 008c 3095      		com r19
 385 008e 9223      		and r25,r18
 386 0090 9283      		std Z+2,r25
  96:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 387               		.loc 1 96 0
 388 0092 62E0      		ldi r22,lo8(2)
 389 0094 83E2      		ldi r24,lo8(35)
 390 0096 90E0      		ldi r25,0
 391 0098 0E94 0000 		call _pal_lld_setlineid
 392               	.LVL35:
 393 009c 0E94 0000 		call _pal_lld_getpadfromline
 394               	.LVL36:
 395 00a0 182F      		mov r17,r24
 396 00a2 62E0      		ldi r22,lo8(2)
 397 00a4 83E2      		ldi r24,lo8(35)
 398 00a6 90E0      		ldi r25,0
 399 00a8 0E94 0000 		call _pal_lld_setlineid
 400               	.LVL37:
 401 00ac 0E94 0000 		call _pal_lld_getportfromline
 402               	.LVL38:
 403 00b0 B701      		movw r22,r14
 404 00b2 00C0      		rjmp 2f
 405               		1:
 406 00b4 660F      		lsl r22
 407               		2:
 408 00b6 1A95      		dec r17
 409 00b8 02F4      		brpl 1b
 410 00ba 46E0      		ldi r20,lo8(6)
 411 00bc 0E94 0000 		call _pal_lld_setgroupmode
 412               	.LVL39:
  97:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 413               		.loc 1 97 0
 414 00c0 62E0      		ldi r22,lo8(2)
 415 00c2 83E2      		ldi r24,lo8(35)
 416 00c4 90E0      		ldi r25,0
 417 00c6 0E94 0000 		call _pal_lld_setlineid
 418               	.LVL40:
 419 00ca 0E94 0000 		call _pal_lld_getpadfromline
 420               	.LVL41:
 421 00ce 182F      		mov r17,r24
 422 00d0 62E0      		ldi r22,lo8(2)
 423 00d2 83E2      		ldi r24,lo8(35)
 424 00d4 90E0      		ldi r25,0
 425 00d6 0E94 0000 		call _pal_lld_setlineid
 426               	.LVL42:
 427 00da 0E94 0000 		call _pal_lld_getportfromline
 428               	.LVL43:
 429 00de FC01      		movw r30,r24
 430 00e0 9281      		ldd r25,Z+2
 431 00e2 9701      		movw r18,r14
 432 00e4 00C0      		rjmp 2f
 433               		1:
 434 00e6 220F      		lsl r18
 435 00e8 331F      		rol r19
 436               		2:
 437 00ea 1A95      		dec r17
 438 00ec 02F4      		brpl 1b
 439 00ee 2095      		com r18
 440 00f0 3095      		com r19
 441 00f2 9223      		and r25,r18
 442 00f4 9283      		std Z+2,r25
 100:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 443               		.loc 1 100 0
 444 00f6 67E0      		ldi r22,lo8(7)
 445 00f8 89E2      		ldi r24,lo8(41)
 446 00fa 90E0      		ldi r25,0
 447 00fc 0E94 0000 		call _pal_lld_setlineid
 448               	.LVL44:
 449 0100 0E94 0000 		call _pal_lld_getpadfromline
 450               	.LVL45:
 451 0104 182F      		mov r17,r24
 452 0106 67E0      		ldi r22,lo8(7)
 453 0108 89E2      		ldi r24,lo8(41)
 454 010a 90E0      		ldi r25,0
 455 010c 0E94 0000 		call _pal_lld_setlineid
 456               	.LVL46:
 457 0110 0E94 0000 		call _pal_lld_getportfromline
 458               	.LVL47:
 459 0114 B701      		movw r22,r14
 460 0116 00C0      		rjmp 2f
 461               		1:
 462 0118 660F      		lsl r22
 463               		2:
 464 011a 1A95      		dec r17
 465 011c 02F4      		brpl 1b
 466 011e 46E0      		ldi r20,lo8(6)
 467 0120 0E94 0000 		call _pal_lld_setgroupmode
 468               	.LVL48:
 101:main.c        ****   palClearLine(PRIMARIO_VERDE);
 469               		.loc 1 101 0
 470 0124 67E0      		ldi r22,lo8(7)
 471 0126 89E2      		ldi r24,lo8(41)
 472 0128 90E0      		ldi r25,0
 473 012a 0E94 0000 		call _pal_lld_setlineid
 474               	.LVL49:
 475 012e 0E94 0000 		call _pal_lld_getpadfromline
 476               	.LVL50:
 477 0132 182F      		mov r17,r24
 478 0134 67E0      		ldi r22,lo8(7)
 479 0136 89E2      		ldi r24,lo8(41)
 480 0138 90E0      		ldi r25,0
 481 013a 0E94 0000 		call _pal_lld_setlineid
 482               	.LVL51:
 483 013e 0E94 0000 		call _pal_lld_getportfromline
 484               	.LVL52:
 485 0142 FC01      		movw r30,r24
 486 0144 9281      		ldd r25,Z+2
 487 0146 9701      		movw r18,r14
 488 0148 00C0      		rjmp 2f
 489               		1:
 490 014a 220F      		lsl r18
 491 014c 331F      		rol r19
 492               		2:
 493 014e 1A95      		dec r17
 494 0150 02F4      		brpl 1b
 495 0152 2095      		com r18
 496 0154 3095      		com r19
 497 0156 9223      		and r25,r18
 498 0158 9283      		std Z+2,r25
 102:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 499               		.loc 1 102 0
 500 015a 64E0      		ldi r22,lo8(4)
 501 015c 89E2      		ldi r24,lo8(41)
 502 015e 90E0      		ldi r25,0
 503 0160 0E94 0000 		call _pal_lld_setlineid
 504               	.LVL53:
 505 0164 0E94 0000 		call _pal_lld_getpadfromline
 506               	.LVL54:
 507 0168 182F      		mov r17,r24
 508 016a 64E0      		ldi r22,lo8(4)
 509 016c 89E2      		ldi r24,lo8(41)
 510 016e 90E0      		ldi r25,0
 511 0170 0E94 0000 		call _pal_lld_setlineid
 512               	.LVL55:
 513 0174 0E94 0000 		call _pal_lld_getportfromline
 514               	.LVL56:
 515 0178 B701      		movw r22,r14
 516 017a 00C0      		rjmp 2f
 517               		1:
 518 017c 660F      		lsl r22
 519               		2:
 520 017e 1A95      		dec r17
 521 0180 02F4      		brpl 1b
 522 0182 46E0      		ldi r20,lo8(6)
 523 0184 0E94 0000 		call _pal_lld_setgroupmode
 524               	.LVL57:
 103:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 525               		.loc 1 103 0
 526 0188 64E0      		ldi r22,lo8(4)
 527 018a 89E2      		ldi r24,lo8(41)
 528 018c 90E0      		ldi r25,0
 529 018e 0E94 0000 		call _pal_lld_setlineid
 530               	.LVL58:
 531 0192 0E94 0000 		call _pal_lld_getpadfromline
 532               	.LVL59:
 533 0196 182F      		mov r17,r24
 534 0198 64E0      		ldi r22,lo8(4)
 535 019a 89E2      		ldi r24,lo8(41)
 536 019c 90E0      		ldi r25,0
 537 019e 0E94 0000 		call _pal_lld_setlineid
 538               	.LVL60:
 539 01a2 0E94 0000 		call _pal_lld_getportfromline
 540               	.LVL61:
 541 01a6 FC01      		movw r30,r24
 542 01a8 9281      		ldd r25,Z+2
 543 01aa 9701      		movw r18,r14
 544 01ac 00C0      		rjmp 2f
 545               		1:
 546 01ae 220F      		lsl r18
 547 01b0 331F      		rol r19
 548               		2:
 549 01b2 1A95      		dec r17
 550 01b4 02F4      		brpl 1b
 551 01b6 2095      		com r18
 552 01b8 3095      		com r19
 553 01ba 9223      		and r25,r18
 554 01bc 9283      		std Z+2,r25
 104:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 555               		.loc 1 104 0
 556 01be 66E0      		ldi r22,lo8(6)
 557 01c0 89E2      		ldi r24,lo8(41)
 558 01c2 90E0      		ldi r25,0
 559 01c4 0E94 0000 		call _pal_lld_setlineid
 560               	.LVL62:
 561 01c8 0E94 0000 		call _pal_lld_getpadfromline
 562               	.LVL63:
 563 01cc 182F      		mov r17,r24
 564 01ce 66E0      		ldi r22,lo8(6)
 565 01d0 89E2      		ldi r24,lo8(41)
 566 01d2 90E0      		ldi r25,0
 567 01d4 0E94 0000 		call _pal_lld_setlineid
 568               	.LVL64:
 569 01d8 0E94 0000 		call _pal_lld_getportfromline
 570               	.LVL65:
 571 01dc B701      		movw r22,r14
 572 01de 00C0      		rjmp 2f
 573               		1:
 574 01e0 660F      		lsl r22
 575               		2:
 576 01e2 1A95      		dec r17
 577 01e4 02F4      		brpl 1b
 578 01e6 46E0      		ldi r20,lo8(6)
 579 01e8 0E94 0000 		call _pal_lld_setgroupmode
 580               	.LVL66:
 105:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 581               		.loc 1 105 0
 582 01ec 66E0      		ldi r22,lo8(6)
 583 01ee 89E2      		ldi r24,lo8(41)
 584 01f0 90E0      		ldi r25,0
 585 01f2 0E94 0000 		call _pal_lld_setlineid
 586               	.LVL67:
 587 01f6 0E94 0000 		call _pal_lld_getpadfromline
 588               	.LVL68:
 589 01fa 182F      		mov r17,r24
 590 01fc 66E0      		ldi r22,lo8(6)
 591 01fe 89E2      		ldi r24,lo8(41)
 592 0200 90E0      		ldi r25,0
 593 0202 0E94 0000 		call _pal_lld_setlineid
 594               	.LVL69:
 595 0206 0E94 0000 		call _pal_lld_getportfromline
 596               	.LVL70:
 597 020a FC01      		movw r30,r24
 598 020c 9281      		ldd r25,Z+2
 599 020e 9701      		movw r18,r14
 600 0210 00C0      		rjmp 2f
 601               		1:
 602 0212 220F      		lsl r18
 603 0214 331F      		rol r19
 604               		2:
 605 0216 1A95      		dec r17
 606 0218 02F4      		brpl 1b
 607 021a 2095      		com r18
 608 021c 3095      		com r19
 609 021e 9223      		and r25,r18
 610 0220 9283      		std Z+2,r25
 108:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 611               		.loc 1 108 0
 612 0222 61E0      		ldi r22,lo8(1)
 613 0224 83E2      		ldi r24,lo8(35)
 614 0226 90E0      		ldi r25,0
 615 0228 0E94 0000 		call _pal_lld_setlineid
 616               	.LVL71:
 617 022c 0E94 0000 		call _pal_lld_getpadfromline
 618               	.LVL72:
 619 0230 182F      		mov r17,r24
 620 0232 61E0      		ldi r22,lo8(1)
 621 0234 83E2      		ldi r24,lo8(35)
 622 0236 90E0      		ldi r25,0
 623 0238 0E94 0000 		call _pal_lld_setlineid
 624               	.LVL73:
 625 023c 0E94 0000 		call _pal_lld_getportfromline
 626               	.LVL74:
 627 0240 B701      		movw r22,r14
 628 0242 00C0      		rjmp 2f
 629               		1:
 630 0244 660F      		lsl r22
 631               		2:
 632 0246 1A95      		dec r17
 633 0248 02F4      		brpl 1b
 634 024a 46E0      		ldi r20,lo8(6)
 635 024c 0E94 0000 		call _pal_lld_setgroupmode
 636               	.LVL75:
 109:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 637               		.loc 1 109 0
 638 0250 61E0      		ldi r22,lo8(1)
 639 0252 83E2      		ldi r24,lo8(35)
 640 0254 90E0      		ldi r25,0
 641 0256 0E94 0000 		call _pal_lld_setlineid
 642               	.LVL76:
 643 025a 0E94 0000 		call _pal_lld_getpadfromline
 644               	.LVL77:
 645 025e 182F      		mov r17,r24
 646 0260 61E0      		ldi r22,lo8(1)
 647 0262 83E2      		ldi r24,lo8(35)
 648 0264 90E0      		ldi r25,0
 649 0266 0E94 0000 		call _pal_lld_setlineid
 650               	.LVL78:
 651 026a 0E94 0000 		call _pal_lld_getportfromline
 652               	.LVL79:
 653 026e FC01      		movw r30,r24
 654 0270 9281      		ldd r25,Z+2
 655 0272 9701      		movw r18,r14
 656 0274 00C0      		rjmp 2f
 657               		1:
 658 0276 220F      		lsl r18
 659 0278 331F      		rol r19
 660               		2:
 661 027a 1A95      		dec r17
 662 027c 02F4      		brpl 1b
 663 027e 2095      		com r18
 664 0280 3095      		com r19
 665 0282 9223      		and r25,r18
 666 0284 9283      		std Z+2,r25
 110:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 667               		.loc 1 110 0
 668 0286 65E0      		ldi r22,lo8(5)
 669 0288 89E2      		ldi r24,lo8(41)
 670 028a 90E0      		ldi r25,0
 671 028c 0E94 0000 		call _pal_lld_setlineid
 672               	.LVL80:
 673 0290 0E94 0000 		call _pal_lld_getpadfromline
 674               	.LVL81:
 675 0294 182F      		mov r17,r24
 676 0296 65E0      		ldi r22,lo8(5)
 677 0298 89E2      		ldi r24,lo8(41)
 678 029a 90E0      		ldi r25,0
 679 029c 0E94 0000 		call _pal_lld_setlineid
 680               	.LVL82:
 681 02a0 0E94 0000 		call _pal_lld_getportfromline
 682               	.LVL83:
 683 02a4 B701      		movw r22,r14
 684 02a6 00C0      		rjmp 2f
 685               		1:
 686 02a8 660F      		lsl r22
 687               		2:
 688 02aa 1A95      		dec r17
 689 02ac 02F4      		brpl 1b
 690 02ae 46E0      		ldi r20,lo8(6)
 691 02b0 0E94 0000 		call _pal_lld_setgroupmode
 692               	.LVL84:
 111:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 693               		.loc 1 111 0
 694 02b4 65E0      		ldi r22,lo8(5)
 695 02b6 89E2      		ldi r24,lo8(41)
 696 02b8 90E0      		ldi r25,0
 697 02ba 0E94 0000 		call _pal_lld_setlineid
 698               	.LVL85:
 699 02be 0E94 0000 		call _pal_lld_getpadfromline
 700               	.LVL86:
 701 02c2 182F      		mov r17,r24
 702 02c4 65E0      		ldi r22,lo8(5)
 703 02c6 89E2      		ldi r24,lo8(41)
 704 02c8 90E0      		ldi r25,0
 705 02ca 0E94 0000 		call _pal_lld_setlineid
 706               	.LVL87:
 707 02ce 0E94 0000 		call _pal_lld_getportfromline
 708               	.LVL88:
 709 02d2 FC01      		movw r30,r24
 710 02d4 9281      		ldd r25,Z+2
 711 02d6 9701      		movw r18,r14
 712 02d8 00C0      		rjmp 2f
 713               		1:
 714 02da 220F      		lsl r18
 715 02dc 331F      		rol r19
 716               		2:
 717 02de 1A95      		dec r17
 718 02e0 02F4      		brpl 1b
 719 02e2 2095      		com r18
 720 02e4 3095      		com r19
 721 02e6 9223      		and r25,r18
 722 02e8 9283      		std Z+2,r25
 112:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 723               		.loc 1 112 0
 724 02ea 60E0      		ldi r22,0
 725 02ec 83E2      		ldi r24,lo8(35)
 726 02ee 90E0      		ldi r25,0
 727 02f0 0E94 0000 		call _pal_lld_setlineid
 728               	.LVL89:
 729 02f4 0E94 0000 		call _pal_lld_getpadfromline
 730               	.LVL90:
 731 02f8 182F      		mov r17,r24
 732 02fa 60E0      		ldi r22,0
 733 02fc 83E2      		ldi r24,lo8(35)
 734 02fe 90E0      		ldi r25,0
 735 0300 0E94 0000 		call _pal_lld_setlineid
 736               	.LVL91:
 737 0304 0E94 0000 		call _pal_lld_getportfromline
 738               	.LVL92:
 739 0308 B701      		movw r22,r14
 740 030a 00C0      		rjmp 2f
 741               		1:
 742 030c 660F      		lsl r22
 743               		2:
 744 030e 1A95      		dec r17
 745 0310 02F4      		brpl 1b
 746 0312 46E0      		ldi r20,lo8(6)
 747 0314 0E94 0000 		call _pal_lld_setgroupmode
 748               	.LVL93:
 113:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 749               		.loc 1 113 0
 750 0318 60E0      		ldi r22,0
 751 031a 83E2      		ldi r24,lo8(35)
 752 031c 90E0      		ldi r25,0
 753 031e 0E94 0000 		call _pal_lld_setlineid
 754               	.LVL94:
 755 0322 0E94 0000 		call _pal_lld_getpadfromline
 756               	.LVL95:
 757 0326 182F      		mov r17,r24
 758 0328 60E0      		ldi r22,0
 759 032a 83E2      		ldi r24,lo8(35)
 760 032c 90E0      		ldi r25,0
 761 032e 0E94 0000 		call _pal_lld_setlineid
 762               	.LVL96:
 763 0332 0E94 0000 		call _pal_lld_getportfromline
 764               	.LVL97:
 765 0336 FC01      		movw r30,r24
 766 0338 9281      		ldd r25,Z+2
 767 033a 9701      		movw r18,r14
 768 033c 00C0      		rjmp 2f
 769               		1:
 770 033e 220F      		lsl r18
 771 0340 331F      		rol r19
 772               		2:
 773 0342 1A95      		dec r17
 774 0344 02F4      		brpl 1b
 775 0346 2095      		com r18
 776 0348 3095      		com r19
 777 034a 9223      		and r25,r18
 778 034c 9283      		std Z+2,r25
 120:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 779               		.loc 1 120 0
 780 034e 10E0      		ldi r17,0
 781 0350 00E0      		ldi r16,0
 782 0352 20E0      		ldi r18,lo8(gs(Thread1))
 783 0354 30E0      		ldi r19,hi8(gs(Thread1))
 784 0356 40E8      		ldi r20,lo8(-128)
 785 0358 63E8      		ldi r22,lo8(-125)
 786 035a 70E0      		ldi r23,0
 787 035c 80E0      		ldi r24,lo8(waThread1)
 788 035e 90E0      		ldi r25,hi8(waThread1)
 789 0360 0E94 0000 		call chThdCreateStatic
 790               	.LVL98:
 122:main.c        ****   palSetLine(PEDESTRE_VERDE);
 791               		.loc 1 122 0
 792 0364 63E0      		ldi r22,lo8(3)
 793 0366 83E2      		ldi r24,lo8(35)
 794 0368 90E0      		ldi r25,0
 795 036a 0E94 0000 		call _pal_lld_setlineid
 796               	.LVL99:
 797 036e 0E94 0000 		call _pal_lld_getpadfromline
 798               	.LVL100:
 799 0372 182F      		mov r17,r24
 800 0374 63E0      		ldi r22,lo8(3)
 801 0376 83E2      		ldi r24,lo8(35)
 802 0378 90E0      		ldi r25,0
 803 037a 0E94 0000 		call _pal_lld_setlineid
 804               	.LVL101:
 805 037e 0E94 0000 		call _pal_lld_getportfromline
 806               	.LVL102:
 807 0382 FC01      		movw r30,r24
 808 0384 9281      		ldd r25,Z+2
 809 0386 00C0      		rjmp 2f
 810               		1:
 811 0388 EE0C      		lsl r14
 812               		2:
 813 038a 1A95      		dec r17
 814 038c 02F4      		brpl 1b
 815 038e E92A      		or r14,r25
 816 0390 E282      		std Z+2,r14
 817               	.LVL103:
 818               	.LBB122:
 819               	.LBB123:
 106:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 820               		.loc 2 106 0
 821 0392 1A82      		std Y+2,__zero_reg__
 822 0394 1982      		std Y+1,__zero_reg__
 823               	.LVL104:
 824               	.LBE123:
 825               	.LBE122:
 826               	.LBB124:
 827               	.LBB125:
 828               	.LBB126:
 829               	.LBB127:
 430:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 830               		.loc 3 430 0
 831               	/* #APP */
 832               	 ;  430 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h" 1
 833 0396 F894      		cli
 834               	 ;  0 "" 2
 835               	.LVL105:
 836               	/* #NOAPP */
 837               	.LBE127:
 838               	.LBE126:
 839               	.LBE125:
 840               	.LBB128:
 841               	.LBB129:
 842               	.LBB130:
 843               	.LBB131:
 287:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 844               		.loc 2 287 0
 845 0398 8981      		ldd r24,Y+1
 846 039a 9A81      		ldd r25,Y+2
 847 039c 892B      		or r24,r25
 848 039e 01F0      		breq .L25
 288:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 849               		.loc 2 288 0
 850 03a0 FE01      		movw r30,r28
 851 03a2 3196      		adiw r30,1
 852 03a4 7F01      		movw r14,r30
 853 03a6 CF01      		movw r24,r30
 854 03a8 0E94 0000 		call chVTDoResetI
 855               	.LVL106:
 856               	.L20:
 857               	.LBE131:
 858               	.LBE130:
 859               		.loc 2 335 0
 860 03ac 8701      		movw r16,r14
 861 03ae 20E0      		ldi r18,lo8(gs(vt_cb2))
 862 03b0 30E0      		ldi r19,hi8(gs(vt_cb2))
 863 03b2 48E2      		ldi r20,lo8(40)
 864 03b4 51E3      		ldi r21,lo8(49)
 865 03b6 61E0      		ldi r22,lo8(1)
 866 03b8 70E0      		ldi r23,0
 867 03ba C701      		movw r24,r14
 868 03bc 0E94 0000 		call chVTDoSetI
 869               	.LVL107:
 870               	.LBE129:
 871               	.LBE128:
 872               	.LBB132:
 873               	.LBB133:
 874               	.LBB134:
 875               	.LBB135:
 876               		.loc 3 440 0
 877               	/* #APP */
 878               	 ;  440 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h" 1
 879 03c0 7894      		sei
 880               	 ;  0 "" 2
 881               	/* #NOAPP */
 882               	.LBE135:
 883               	.LBE134:
 884               	.LBE133:
 885               	.LBE132:
 886               	.LBE124:
 131:main.c        ****     palToggleLine(SECUNDARIO_VERDE);
 887               		.loc 1 131 0
 888 03c2 EE24      		clr r14
 889 03c4 E394      		inc r14
 890 03c6 F12C      		mov r15,__zero_reg__
 891               	.L21:
 131:main.c        ****     palToggleLine(SECUNDARIO_VERDE);
 892               		.loc 1 131 0 is_stmt 0 discriminator 1
 893 03c8 61E0      		ldi r22,lo8(1)
 894 03ca 83E2      		ldi r24,lo8(35)
 895 03cc 90E0      		ldi r25,0
 896 03ce 0E94 0000 		call _pal_lld_setlineid
 897               	.LVL108:
 898 03d2 0E94 0000 		call _pal_lld_getportfromline
 899               	.LVL109:
 900 03d6 FC01      		movw r30,r24
 901 03d8 1281      		ldd r17,Z+2
 902 03da 61E0      		ldi r22,lo8(1)
 903 03dc 83E2      		ldi r24,lo8(35)
 904 03de 90E0      		ldi r25,0
 905 03e0 0E94 0000 		call _pal_lld_setlineid
 906               	.LVL110:
 907 03e4 0E94 0000 		call _pal_lld_getpadfromline
 908               	.LVL111:
 909 03e8 082F      		mov r16,r24
 910 03ea 61E0      		ldi r22,lo8(1)
 911 03ec 83E2      		ldi r24,lo8(35)
 912 03ee 90E0      		ldi r25,0
 913 03f0 0E94 0000 		call _pal_lld_setlineid
 914               	.LVL112:
 915 03f4 0E94 0000 		call _pal_lld_getportfromline
 916               	.LVL113:
 917 03f8 9701      		movw r18,r14
 918 03fa 00C0      		rjmp 2f
 919               		1:
 920 03fc 220F      		lsl r18
 921               		2:
 922 03fe 0A95      		dec r16
 923 0400 02F4      		brpl 1b
 924 0402 1227      		eor r17,r18
 925 0404 FC01      		movw r30,r24
 926 0406 1283      		std Z+2,r17
 132:main.c        ****     chThdSleepMicroseconds(10000);
 927               		.loc 1 132 0 is_stmt 1 discriminator 1
 928 0408 6DE9      		ldi r22,lo8(-99)
 929 040a 70E0      		ldi r23,0
 930 040c 80E0      		ldi r24,0
 931 040e 90E0      		ldi r25,0
 932 0410 0E94 0000 		call chThdSleep
 933               	.LVL114:
 934 0414 00C0      		rjmp .L21
 935               	.LVL115:
 936               	.L25:
 937 0416 CE01      		movw r24,r28
 938 0418 0196      		adiw r24,1
 939 041a 7C01      		movw r14,r24
 940 041c 00C0      		rjmp .L20
 941               		.cfi_endproc
 942               	.LFE244:
 944               		.section	.text.bufferInit,"ax",@progbits
 945               	.global	bufferInit
 947               	bufferInit:
 948               	.LFB245:
 137:main.c        **** {
 949               		.loc 1 137 0
 950               		.cfi_startproc
 951               	.LVL116:
 952               	/* prologue: function */
 953               	/* frame size = 0 */
 954               	/* stack size = 0 */
 955               	.L__stack_usage = 0
 956 0000 FC01      		movw r30,r24
 138:main.c        ****   buffer->head = 0;
 957               		.loc 1 138 0
 958 0002 1086      		std Z+8,__zero_reg__
 139:main.c        ****   buffer->tail = 0;
 959               		.loc 1 139 0
 960 0004 1186      		std Z+9,__zero_reg__
 140:main.c        ****   buffer->size = 0;
 961               		.loc 1 140 0
 962 0006 1286      		std Z+10,__zero_reg__
 963               	/* epilogue start */
 141:main.c        **** }
 964               		.loc 1 141 0
 965 0008 0895      		ret
 966               		.cfi_endproc
 967               	.LFE245:
 969               		.section	.text.isBufferEmpty,"ax",@progbits
 970               	.global	isBufferEmpty
 972               	isBufferEmpty:
 973               	.LFB246:
 144:main.c        **** {
 974               		.loc 1 144 0
 975               		.cfi_startproc
 976               	.LVL117:
 977               	/* prologue: function */
 978               	/* frame size = 0 */
 979               	/* stack size = 0 */
 980               	.L__stack_usage = 0
 145:main.c        ****   return buffer->size == 0;
 981               		.loc 1 145 0
 982 0000 21E0      		ldi r18,lo8(1)
 983 0002 FC01      		movw r30,r24
 984 0004 8285      		ldd r24,Z+10
 985               	.LVL118:
 986 0006 8111      		cpse r24,__zero_reg__
 987 0008 20E0      		ldi r18,0
 988               	.L28:
 146:main.c        **** }
 989               		.loc 1 146 0
 990 000a 822F      		mov r24,r18
 991               	/* epilogue start */
 992 000c 0895      		ret
 993               		.cfi_endproc
 994               	.LFE246:
 996               		.section	.text.isBufferFull,"ax",@progbits
 997               	.global	isBufferFull
 999               	isBufferFull:
 1000               	.LFB247:
 149:main.c        **** {
 1001               		.loc 1 149 0
 1002               		.cfi_startproc
 1003               	.LVL119:
 1004               	/* prologue: function */
 1005               	/* frame size = 0 */
 1006               	/* stack size = 0 */
 1007               	.L__stack_usage = 0
 150:main.c        ****   return buffer->size == BUFFER_SIZE;
 1008               		.loc 1 150 0
 1009 0000 21E0      		ldi r18,lo8(1)
 1010 0002 FC01      		movw r30,r24
 1011 0004 8285      		ldd r24,Z+10
 1012               	.LVL120:
 1013 0006 8830      		cpi r24,lo8(8)
 1014 0008 01F0      		breq .L33
 1015 000a 20E0      		ldi r18,0
 1016               	.L33:
 151:main.c        **** }
 1017               		.loc 1 151 0
 1018 000c 822F      		mov r24,r18
 1019               	/* epilogue start */
 1020 000e 0895      		ret
 1021               		.cfi_endproc
 1022               	.LFE247:
 1024               		.section	.text.bufferPush,"ax",@progbits
 1025               	.global	bufferPush
 1027               	bufferPush:
 1028               	.LFB248:
 154:main.c        **** {
 1029               		.loc 1 154 0
 1030               		.cfi_startproc
 1031               	.LVL121:
 1032               	/* prologue: function */
 1033               	/* frame size = 0 */
 1034               	/* stack size = 0 */
 1035               	.L__stack_usage = 0
 1036 0000 FC01      		movw r30,r24
 155:main.c        ****   buffer->events[buffer->tail] = event;
 1037               		.loc 1 155 0
 1038 0002 2185      		ldd r18,Z+9
 1039 0004 30E0      		ldi r19,0
 1040 0006 DC01      		movw r26,r24
 1041 0008 A20F      		add r26,r18
 1042 000a B31F      		adc r27,r19
 1043 000c 6C93      		st X,r22
 156:main.c        ****   buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 1044               		.loc 1 156 0
 1045 000e 2F5F      		subi r18,-1
 1046 0010 3F4F      		sbci r19,-1
 1047 0012 2770      		andi r18,7
 1048 0014 3327      		clr r19
 1049 0016 2187      		std Z+9,r18
 157:main.c        ****   buffer->size++;
 1050               		.loc 1 157 0
 1051 0018 8285      		ldd r24,Z+10
 1052               	.LVL122:
 1053 001a 8F5F      		subi r24,lo8(-(1))
 1054 001c 8287      		std Z+10,r24
 1055               	/* epilogue start */
 158:main.c        **** }
 1056               		.loc 1 158 0
 1057 001e 0895      		ret
 1058               		.cfi_endproc
 1059               	.LFE248:
 1061               		.section	.text.bufferPop,"ax",@progbits
 1062               	.global	bufferPop
 1064               	bufferPop:
 1065               	.LFB249:
 161:main.c        **** {
 1066               		.loc 1 161 0
 1067               		.cfi_startproc
 1068               	.LVL123:
 1069               	/* prologue: function */
 1070               	/* frame size = 0 */
 1071               	/* stack size = 0 */
 1072               	.L__stack_usage = 0
 1073 0000 FC01      		movw r30,r24
 1074               	.LVL124:
 1075               	.LBB136:
 1076               	.LBB137:
 145:main.c        ****   return buffer->size == 0;
 1077               		.loc 1 145 0
 1078 0002 8285      		ldd r24,Z+10
 1079               	.LVL125:
 1080               	.LBE137:
 1081               	.LBE136:
 162:main.c        ****   if (isBufferEmpty(buffer))
 1082               		.loc 1 162 0
 1083 0004 8823      		tst r24
 1084 0006 01F0      		breq .L38
 167:main.c        ****   uint8_t event = buffer->events[buffer->head];
 1085               		.loc 1 167 0
 1086 0008 2085      		ldd r18,Z+8
 1087 000a 30E0      		ldi r19,0
 1088 000c DF01      		movw r26,r30
 1089 000e A20F      		add r26,r18
 1090 0010 B31F      		adc r27,r19
 1091 0012 4C91      		ld r20,X
 1092               	.LVL126:
 168:main.c        ****   buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 1093               		.loc 1 168 0
 1094 0014 2F5F      		subi r18,-1
 1095 0016 3F4F      		sbci r19,-1
 1096 0018 2770      		andi r18,7
 1097 001a 3327      		clr r19
 1098 001c 2087      		std Z+8,r18
 169:main.c        ****   buffer->size--;
 1099               		.loc 1 169 0
 1100 001e 9FEF      		ldi r25,lo8(-1)
 1101 0020 980F      		add r25,r24
 1102 0022 9287      		std Z+10,r25
 170:main.c        ****   return event;
 1103               		.loc 1 170 0
 1104 0024 842F      		mov r24,r20
 1105               	.LVL127:
 1106               	.L38:
 1107               	/* epilogue start */
 171:main.c        **** }
 1108               		.loc 1 171 0
 1109 0026 0895      		ret
 1110               		.cfi_endproc
 1111               	.LFE249:
 1113               		.section	.bss.waThread1,"aw",@nobits
 1116               	waThread1:
 1117 0000 0000 0000 		.zero	131
 1117      0000 0000 
 1117      0000 0000 
 1117      0000 0000 
 1117      0000 0000 
 1118               		.comm	ev_buffer,11,1
 1119               		.text
 1120               	.Letext0:
 1121               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 1122               		.file 5 "/usr/lib/avr/include/stdint.h"
 1123               		.file 6 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/compilers/
 1124               		.file 7 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chearly.h"
 1125               		.file 8 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chobjects.h"
 1126               		.file 9 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chrfcu.h"
 1127               		.file 10 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chdebug.h"
 1128               		.file 11 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chtime.h"
 1129               		.file 12 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chlists.h"
 1130               		.file 13 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chsem.h"
 1131               		.file 14 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chmtx.h"
 1132               		.file 15 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chsys.h"
 1133               		.file 16 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chregistry.h"
 1134               		.file 17 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chevents.h"
 1135               		.file 18 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/oslib/include/chmemcore.h"
 1136               		.file 19 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal_queues.h"
 1137               		.file 20 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal_pal.h"
 1138               		.file 21 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/ports/AVR/MEGA/LLD/GPI
 1139               		.file 22 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal_serial.h"
 1140               		.file 23 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/ports/AVR/MEGA/LLD/USA
 1141               		.file 24 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal.h"
 1142               		.file 25 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccxB5nex.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxB5nex.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxB5nex.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxB5nex.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxB5nex.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxB5nex.s:13     .text.vt_cb2:0000000000000000 vt_cb2
     /tmp/ccxB5nex.s:92     .text.vt_cb:0000000000000000 vt_cb
     /tmp/ccxB5nex.s:168    .text.Thread1:0000000000000000 Thread1
     /tmp/ccxB5nex.s:282    .text.startup.main:0000000000000000 main
                            *COM*:000000000000000b ev_buffer
     /tmp/ccxB5nex.s:1116   .bss.waThread1:0000000000000000 waThread1
     /tmp/ccxB5nex.s:947    .text.bufferInit:0000000000000000 bufferInit
     /tmp/ccxB5nex.s:972    .text.isBufferEmpty:0000000000000000 isBufferEmpty
     /tmp/ccxB5nex.s:999    .text.isBufferFull:0000000000000000 isBufferFull
     /tmp/ccxB5nex.s:1027   .text.bufferPush:0000000000000000 bufferPush
     /tmp/ccxB5nex.s:1064   .text.bufferPop:0000000000000000 bufferPop

UNDEFINED SYMBOLS
chVTDoResetI
chVTDoSetI
halInit
chSysInit
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
_pal_lld_setgroupmode
chThdCreateStatic
chThdSleep
__do_clear_bss
