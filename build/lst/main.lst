   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_cb,"ax",@progbits
  11               	.global	vt_cb
  13               	vt_cb:
  14               	.LFB250:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:main.c        **** 
   4:main.c        ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:main.c        ****     you may not use this file except in compliance with the License.
   6:main.c        ****     You may obtain a copy of the License at
   7:main.c        **** 
   8:main.c        ****         http://www.apache.org/licenses/LICENSE-2.0
   9:main.c        **** 
  10:main.c        ****     Unless required by applicable law or agreed to in writing, software
  11:main.c        ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:main.c        ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:main.c        ****     See the License for the specific language governing permissions and
  14:main.c        ****     limitations under the License.
  15:main.c        **** */
  16:main.c        **** 
  17:main.c        **** #include "ch.h"
  18:main.c        **** #include "hal.h"
  19:main.c        **** 
  20:main.c        **** #define LED_PERIODO 10000
  21:main.c        **** #define BUFFER_SIZE 8
  22:main.c        **** 
  23:main.c        **** /* Definições de pinos*/
  24:main.c        **** // LEDS
  25:main.c        **** #define PEDESTRE_VERDE PAL_LINE(IOPORT2, 3)
  26:main.c        **** #define PEDESTRE_VERMELHO PAL_LINE(IOPORT2, 2)
  27:main.c        **** #define PRIMARIO_VERDE PAL_LINE(IOPORT4, 7)
  28:main.c        **** #define PRIMARIO_AMARELO PAL_LINE(IOPORT4, 4)
  29:main.c        **** #define PRIMARIO_VERMELHO PAL_LINE(IOPORT4, 6)
  30:main.c        **** #define SECUNDARIO_VERDE PAL_LINE(IOPORT2, 1)
  31:main.c        **** #define SECUNDARIO_AMARELO PAL_LINE(IOPORT4, 5)
  32:main.c        **** #define SECUNDARIO_VERMELHO PAL_LINE(IOPORT2, 0)
  33:main.c        **** 
  34:main.c        **** // Botões
  35:main.c        **** #define AMB_PRIM PAL_LINE(IOPORT3, 3)
  36:main.c        **** #define AMB_SEC PAL_LINE(IOPORT3, 5)
  37:main.c        **** #define SEC_FLAG PAL_LINE(IOPORT3, 4)
  38:main.c        **** #define PED_FLAG PAL_LINE(IOPORT3, 2)
  39:main.c        **** 
  40:main.c        **** typedef struct
  41:main.c        **** {
  42:main.c        ****   uint8_t events[BUFFER_SIZE];
  43:main.c        ****   uint8_t head;
  44:main.c        ****   uint8_t tail;
  45:main.c        ****   uint8_t size;
  46:main.c        **** } EventBuffer;
  47:main.c        **** 
  48:main.c        **** EventBuffer ev_buffer;
  49:main.c        **** 
  50:main.c        **** void config_gpio();
  51:main.c        **** void bufferInit(EventBuffer *cb);
  52:main.c        **** bool isBufferEmpty(EventBuffer *buffer);
  53:main.c        **** bool isBufferFull(EventBuffer *buffer);
  54:main.c        **** void bufferPush(EventBuffer *cb, uint8_t event);
  55:main.c        **** uint8_t bufferPop(EventBuffer *cb);
  56:main.c        **** void vt_cb(void *arg);
  57:main.c        **** 
  58:main.c        **** enum
  59:main.c        **** {
  60:main.c        ****   SECUNDARIO = 1,
  61:main.c        ****   PEDESTRE,
  62:main.c        ****   AMB_PRIMARIO,
  63:main.c        ****   AMB_SECUNDARIO
  64:main.c        **** };
  65:main.c        **** 
  66:main.c        **** /*
  67:main.c        ****  * LED blinker thread, times are in milliseconds.
  68:main.c        ****  */
  69:main.c        **** 
  70:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  71:main.c        **** static THD_FUNCTION(Thread1, arg)
  72:main.c        **** {
  73:main.c        ****   virtual_timer_t vt;
  74:main.c        **** 
  75:main.c        ****   chVTObjectInit(&vt);
  76:main.c        ****   chVTSet(&vt, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb, (void *)&vt);
  77:main.c        **** 
  78:main.c        ****   while (1)
  79:main.c        ****   {
  80:main.c        ****     chThdSleepMilliseconds(100);
  81:main.c        ****   }
  82:main.c        **** }
  83:main.c        **** 
  84:main.c        **** /*
  85:main.c        ****  * Application entry point.
  86:main.c        ****  */
  87:main.c        **** int main(void)
  88:main.c        **** {
  89:main.c        ****   bufferInit(&ev_buffer);
  90:main.c        ****   /*
  91:main.c        ****    * System initializations.
  92:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
  93:main.c        ****    *   and performs the board-specific initializations.
  94:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
  95:main.c        ****    *   RTOS is active.
  96:main.c        ****    */
  97:main.c        ****   halInit();
  98:main.c        ****   chSysInit();
  99:main.c        **** 
 100:main.c        ****   /* Configuração dos botões */
 101:main.c        ****   palSetLineMode(PED_FLAG, PAL_MODE_INPUT_PULLUP);
 102:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 103:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 104:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 105:main.c        **** 
 106:main.c        ****   // Pedestre
 107:main.c        ****   palSetLineMode(PEDESTRE_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 108:main.c        ****   palClearLine(PEDESTRE_VERDE);
 109:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 110:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 111:main.c        **** 
 112:main.c        ****   // Primário
 113:main.c        ****   palSetLineMode(PRIMARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 114:main.c        ****   palClearLine(PRIMARIO_VERDE);
 115:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 116:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 117:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 118:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 119:main.c        **** 
 120:main.c        ****   // Secundário
 121:main.c        ****   palSetLineMode(SECUNDARIO_VERDE, PAL_MODE_OUTPUT_PUSHPULL);
 122:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 123:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 124:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 125:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 126:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 127:main.c        **** 
 128:main.c        ****   /*
 129:main.c        ****    * Starts the LED blinker thread.
 130:main.c        ****    */
 131:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 132:main.c        **** 
 133:main.c        ****   while (1)
 134:main.c        ****   {
 135:main.c        ****     if (palReadLine(AMB_SEC) == PAL_LOW)
 136:main.c        ****     {
 137:main.c        ****       palToggleLine(PEDESTRE_VERDE);
 138:main.c        ****     }
 139:main.c        ****     else if (palReadLine(AMB_PRIM) == PAL_LOW)
 140:main.c        ****     {
 141:main.c        ****       palToggleLine(PRIMARIO_AMARELO);
 142:main.c        ****     }
 143:main.c        ****     else if (palReadLine(SEC_FLAG) == PAL_LOW)
 144:main.c        ****     {
 145:main.c        ****       palToggleLine(PRIMARIO_VERMELHO);
 146:main.c        ****     }
 147:main.c        ****     else if (palReadLine(PED_FLAG) == PAL_LOW)
 148:main.c        ****     {
 149:main.c        ****       palToggleLine(SECUNDARIO_VERDE);
 150:main.c        ****     }
 151:main.c        ****     /* Debouncing. */
 152:main.c        ****     chThdSleepMilliseconds(200);
 153:main.c        ****   }
 154:main.c        **** }
 155:main.c        **** 
 156:main.c        **** void bufferInit(EventBuffer *buffer)
 157:main.c        **** {
 158:main.c        ****   buffer->head = 0;
 159:main.c        ****   buffer->tail = 0;
 160:main.c        ****   buffer->size = 0;
 161:main.c        **** }
 162:main.c        **** 
 163:main.c        **** bool isBufferEmpty(EventBuffer *buffer)
 164:main.c        **** {
 165:main.c        ****   return buffer->size == 0;
 166:main.c        **** }
 167:main.c        **** 
 168:main.c        **** bool isBufferFull(EventBuffer *buffer)
 169:main.c        **** {
 170:main.c        ****   return buffer->size == BUFFER_SIZE;
 171:main.c        **** }
 172:main.c        **** 
 173:main.c        **** void bufferPush(EventBuffer *buffer, uint8_t event)
 174:main.c        **** {
 175:main.c        ****   buffer->events[buffer->tail] = event;
 176:main.c        ****   buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 177:main.c        ****   buffer->size++;
 178:main.c        **** }
 179:main.c        **** 
 180:main.c        **** uint8_t bufferPop(EventBuffer *buffer)
 181:main.c        **** {
 182:main.c        ****   if (isBufferEmpty(buffer))
 183:main.c        ****   {
 184:main.c        ****     return false; // Buffer vazio
 185:main.c        ****   }
 186:main.c        **** 
 187:main.c        ****   uint8_t event = buffer->events[buffer->head];
 188:main.c        ****   buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 189:main.c        ****   buffer->size--;
 190:main.c        ****   return event;
 191:main.c        **** }
 192:main.c        **** 
 193:main.c        **** void vt_cb(void *arg)
 194:main.c        **** {
  16               		.loc 1 194 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 EC01      		movw r28,r24
 195:main.c        ****   chSysLockFromISR();
 196:main.c        ****   palTogglePad(IOPORT2, PORTB_LED1);
  40               		.loc 1 196 0
  41 000a 85B1      		in r24,0x5
  42               	.LVL1:
  43 000c 90E2      		ldi r25,lo8(32)
  44 000e 8927      		eor r24,r25
  45 0010 85B9      		out 0x5,r24
  46               	.LVL2:
  47               	.LBB47:
  48               	.LBB48:
  49               	.LBB49:
  50               	.LBB50:
  51               		.file 2 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h"
   1:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*
   2:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
   5:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
   7:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  11:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  16:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** */
  19:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  20:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
  21:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
  24:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @addtogroup time
  25:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @{
  26:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
  27:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  28:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #define CHVT_H
  30:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  31:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  32:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  34:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  35:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  36:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  38:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  39:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  40:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  42:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  43:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****        "be zero or greater than one"
  46:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  47:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  48:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  51:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  52:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  55:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  56:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  57:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  59:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  60:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  61:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  63:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  64:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  65:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  67:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  68:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*
  69:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
  71:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #ifdef __cplusplus
  72:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** extern "C" {
  73:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  74:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  85:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #ifdef __cplusplus
  86:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
  87:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
  88:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  89:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  90:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /*===========================================================================*/
  92:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
  93:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
  94:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 100:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 102:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @init
 103:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 104:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 106:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 107:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 108:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 109:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 110:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Current system time.
 111:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          invocation.
 113:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          @p systime_t size.
 117:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 118:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 120:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @xclass
 121:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 122:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 124:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return port_timer_get_time();
 128:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 130:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 131:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 132:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Current system time.
 133:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          invocation.
 135:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 137:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 139:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @api
 140:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 141:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   systime_t systime;
 143:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 144:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysLock();
 145:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysUnlock();
 147:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 148:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return systime;
 149:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 150:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 151:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 152:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 154:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] start     start time
 155:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 157:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @xclass
 158:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 159:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 161:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 163:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 164:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 165:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          window.
 167:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          time window has zero size.
 169:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 170:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 175:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @xclass
 176:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 177:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 179:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 181:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 182:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 183:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          window.
 185:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          time window has zero size.
 187:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 188:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 193:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @api
 194:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 195:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 197:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 199:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 200:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 201:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 207:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 214:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @iclass
 215:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 216:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 220:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 222:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     return false;
 224:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 225:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 226:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   if (timep != NULL) {
 227:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #else
 230:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** #endif
 233:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 234:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 235:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return true;
 236:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 237:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 238:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 239:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 243:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 246:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @iclass
 247:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 248:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 250:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 252:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 254:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 255:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 256:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 260:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 263:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @api
 264:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 265:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   bool b;
 267:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 268:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysLock();
 269:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysUnlock();
 271:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 272:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   return b;
 273:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 274:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 275:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 276:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 281:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 283:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @iclass
 284:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 285:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 287:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
  52               		.loc 2 287 0
  53 0012 8881      		ld r24,Y
  54 0014 9981      		ldd r25,Y+1
  55 0016 892B      		or r24,r25
  56 0018 01F0      		breq .L2
 288:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
  57               		.loc 2 288 0
  58 001a CE01      		movw r24,r28
  59 001c 0E94 0000 		call chVTDoResetI
  60               	.LVL3:
  61               	.L2:
  62               	.LBE50:
  63               	.LBE49:
 289:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 290:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 291:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 292:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 293:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 298:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 300:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @api
 301:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 302:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 304:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysLock();
 305:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chSysUnlock();
 307:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 308:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 309:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** /**
 310:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          using the new parameters.
 313:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 316:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                        normal time specification.
 321:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      .
 323:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *                      function
 328:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  *
 329:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  * @iclass
 330:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****  */
 331:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** 
 334:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
  64               		.loc 2 335 0
  65 0020 8E01      		movw r16,r28
  66 0022 20E0      		ldi r18,lo8(gs(vt_cb))
  67 0024 30E0      		ldi r19,hi8(gs(vt_cb))
  68 0026 48E2      		ldi r20,lo8(40)
  69 0028 51E3      		ldi r21,lo8(49)
  70 002a 61E0      		ldi r22,lo8(1)
  71 002c 70E0      		ldi r23,0
  72 002e CE01      		movw r24,r28
  73 0030 0E94 0000 		call chVTDoSetI
  74               	.LVL4:
  75               	/* epilogue start */
  76               	.LBE48:
  77               	.LBE47:
 197:main.c        ****   chVTSetI((virtual_timer_t *)arg, TIME_MS2I(LED_PERIODO / 2), (vtfunc_t)vt_cb, arg);
 198:main.c        ****   chSysUnlockFromISR();
 199:main.c        **** }
  78               		.loc 1 199 0
  79 0034 DF91      		pop r29
  80 0036 CF91      		pop r28
  81               	.LVL5:
  82 0038 1F91      		pop r17
  83 003a 0F91      		pop r16
  84               	.LVL6:
  85 003c 0895      		ret
  86               		.cfi_endproc
  87               	.LFE250:
  89               		.section	.text.Thread1,"ax",@progbits
  91               	Thread1:
  92               	.LFB243:
  72:main.c        ****   virtual_timer_t vt;
  93               		.loc 1 72 0
  94               		.cfi_startproc
  95               	.LVL7:
  96 0000 CF93      		push r28
  97               	.LCFI4:
  98               		.cfi_def_cfa_offset 3
  99               		.cfi_offset 28, -2
 100 0002 DF93      		push r29
 101               	.LCFI5:
 102               		.cfi_def_cfa_offset 4
 103               		.cfi_offset 29, -3
 104 0004 CDB7      		in r28,__SP_L__
 105 0006 DEB7      		in r29,__SP_H__
 106               	.LCFI6:
 107               		.cfi_def_cfa_register 28
 108 0008 6097      		sbiw r28,16
 109               	.LCFI7:
 110               		.cfi_def_cfa_offset 20
 111 000a 0FB6      		in __tmp_reg__,__SREG__
 112 000c F894      		cli
 113 000e DEBF      		out __SP_H__,r29
 114 0010 0FBE      		out __SREG__,__tmp_reg__
 115 0012 CDBF      		out __SP_L__,r28
 116               	/* prologue: function */
 117               	/* frame size = 16 */
 118               	/* stack size = 18 */
 119               	.L__stack_usage = 18
 120               	.LVL8:
 121               	.LBB66:
 122               	.LBB67:
 106:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h **** }
 123               		.loc 2 106 0
 124 0014 1A82      		std Y+2,__zero_reg__
 125 0016 1982      		std Y+1,__zero_reg__
 126               	.LVL9:
 127               	.LBE67:
 128               	.LBE66:
 129               	.LBB68:
 130               	.LBB69:
 131               	.LBB70:
 132               	.LBB71:
 133               		.file 3 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h"
   1:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*
   2:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
   5:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
   7:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  11:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  16:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** */
  19:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  20:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  21:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
  24:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @{
  26:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  27:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  28:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  31:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  34:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  36:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  40:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  41:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @{
  43:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  44:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  45:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  47:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  49:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  50:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  53:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  55:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  56:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  59:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  61:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  62:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  65:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /** @} */
  67:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  68:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  69:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @{
  71:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  72:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  73:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  75:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  77:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  78:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  80:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  82:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  83:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  85:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  87:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  88:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  90:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  92:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
  93:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
  95:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
  98:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #else
  99:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 101:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 102:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 103:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 105:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /** @} */
 107:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 108:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 112:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 113:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 118:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 121:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 122:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 123:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          area size.
 126:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 127:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 130:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 131:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 132:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 134:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 137:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 138:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 142:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 146:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****    asm module.*/
 148:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 150:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 151:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 154:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 156:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 157:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 163:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 183:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** };
 185:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 186:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 187:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          switching.
 190:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          structure.
 194:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 195:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 218:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** };
 221:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 222:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 223:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 227:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** struct port_context {
 228:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** };
 230:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 231:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 233:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 237:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 238:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 242:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 254:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 265:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 267:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 268:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 271:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 275:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 276:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 280:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 283:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 286:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 287:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 289:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 291:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 292:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 294:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 296:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 297:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 303:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 308:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 309:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 310:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 314:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 321:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 322:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 323:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 327:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 329:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 330:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 334:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 336:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 337:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 343:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 346:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 350:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 351:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 352:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 353:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 356:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 359:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 360:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 364:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****    asm module.*/
 366:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 368:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** extern "C" {
 370:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 371:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 375:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif
 376:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 377:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 379:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 383:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****    asm module.*/
 385:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 387:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 388:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 390:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 392:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 394:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   return SREG;
 395:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 396:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 397:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 398:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 400:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 402:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 406:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 408:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 410:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 411:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 412:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *
 414:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 418:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 420:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 422:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 423:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 424:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          actions.
 427:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 428:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 430:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 134               		.loc 3 430 0
 135               	/* #APP */
 136               	 ;  430 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h" 1
 137 0018 F894      		cli
 138               	 ;  0 "" 2
 139               	.LVL10:
 140               	/* #NOAPP */
 141               	.LBE71:
 142               	.LBE70:
 143               	.LBE69:
 144               	.LBB72:
 145               	.LBB73:
 146               	.LBB74:
 147               	.LBB75:
 287:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 148               		.loc 2 287 0
 149 001a 8981      		ldd r24,Y+1
 150 001c 9A81      		ldd r25,Y+2
 151               	.LVL11:
 152 001e 892B      		or r24,r25
 153 0020 01F0      		breq .L13
 288:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chvt.h ****   }
 154               		.loc 2 288 0
 155 0022 CE01      		movw r24,r28
 156 0024 0196      		adiw r24,1
 157 0026 7C01      		movw r14,r24
 158 0028 0E94 0000 		call chVTDoResetI
 159               	.LVL12:
 160               	.L8:
 161               	.LBE75:
 162               	.LBE74:
 163               		.loc 2 335 0
 164 002c 8701      		movw r16,r14
 165 002e 20E0      		ldi r18,lo8(gs(vt_cb))
 166 0030 30E0      		ldi r19,hi8(gs(vt_cb))
 167 0032 48E2      		ldi r20,lo8(40)
 168 0034 51E3      		ldi r21,lo8(49)
 169 0036 61E0      		ldi r22,lo8(1)
 170 0038 70E0      		ldi r23,0
 171 003a C701      		movw r24,r14
 172 003c 0E94 0000 		call chVTDoSetI
 173               	.LVL13:
 174               	.LBE73:
 175               	.LBE72:
 176               	.LBB76:
 177               	.LBB77:
 178               	.LBB78:
 179               	.LBB79:
 431:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** }
 432:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 433:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** /**
 434:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  *          actions.
 437:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****  */
 438:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h **** 
 440:/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 180               		.loc 3 440 0
 181               	/* #APP */
 182               	 ;  440 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/chcore.h" 1
 183 0040 7894      		sei
 184               	 ;  0 "" 2
 185               	/* #NOAPP */
 186               	.L9:
 187               	.LBE79:
 188               	.LBE78:
 189               	.LBE77:
 190               	.LBE76:
 191               	.LBE68:
  80:main.c        ****   }
 192               		.loc 1 80 0 discriminator 1
 193 0042 6BE1      		ldi r22,lo8(27)
 194 0044 76E0      		ldi r23,lo8(6)
 195 0046 80E0      		ldi r24,0
 196 0048 90E0      		ldi r25,0
 197 004a 0E94 0000 		call chThdSleep
 198               	.LVL14:
 199 004e 00C0      		rjmp .L9
 200               	.LVL15:
 201               	.L13:
 202 0050 CE01      		movw r24,r28
 203 0052 0196      		adiw r24,1
 204 0054 7C01      		movw r14,r24
 205 0056 00C0      		rjmp .L8
 206               		.cfi_endproc
 207               	.LFE243:
 209               		.section	.text.startup.main,"ax",@progbits
 210               	.global	main
 212               	main:
 213               	.LFB244:
  88:main.c        ****   bufferInit(&ev_buffer);
 214               		.loc 1 88 0
 215               		.cfi_startproc
 216               	/* prologue: function */
 217               	/* frame size = 0 */
 218               	/* stack size = 0 */
 219               	.L__stack_usage = 0
 220               	.LVL16:
 221               	.LBB80:
 222               	.LBB81:
 158:main.c        ****   buffer->tail = 0;
 223               		.loc 1 158 0
 224 0000 1092 0000 		sts ev_buffer+8,__zero_reg__
 159:main.c        ****   buffer->size = 0;
 225               		.loc 1 159 0
 226 0004 1092 0000 		sts ev_buffer+9,__zero_reg__
 160:main.c        **** }
 227               		.loc 1 160 0
 228 0008 1092 0000 		sts ev_buffer+10,__zero_reg__
 229               	.LVL17:
 230               	.LBE81:
 231               	.LBE80:
  97:main.c        ****   chSysInit();
 232               		.loc 1 97 0
 233 000c 0E94 0000 		call halInit
 234               	.LVL18:
  98:main.c        **** 
 235               		.loc 1 98 0
 236 0010 0E94 0000 		call chSysInit
 237               	.LVL19:
 101:main.c        ****   palSetLineMode(SEC_FLAG, PAL_MODE_INPUT_PULLUP);
 238               		.loc 1 101 0
 239 0014 62E0      		ldi r22,lo8(2)
 240 0016 86E2      		ldi r24,lo8(38)
 241 0018 90E0      		ldi r25,0
 242 001a 0E94 0000 		call _pal_lld_setlineid
 243               	.LVL20:
 244 001e 0E94 0000 		call _pal_lld_getpadfromline
 245               	.LVL21:
 246 0022 182F      		mov r17,r24
 247 0024 62E0      		ldi r22,lo8(2)
 248 0026 86E2      		ldi r24,lo8(38)
 249 0028 90E0      		ldi r25,0
 250 002a 0E94 0000 		call _pal_lld_setlineid
 251               	.LVL22:
 252 002e 0E94 0000 		call _pal_lld_getportfromline
 253               	.LVL23:
 254 0032 C1E0      		ldi r28,lo8(1)
 255 0034 D0E0      		ldi r29,0
 256 0036 BE01      		movw r22,r28
 257 0038 00C0      		rjmp 2f
 258               		1:
 259 003a 660F      		lsl r22
 260               		2:
 261 003c 1A95      		dec r17
 262 003e 02F4      		brpl 1b
 263 0040 43E0      		ldi r20,lo8(3)
 264 0042 0E94 0000 		call _pal_lld_setgroupmode
 265               	.LVL24:
 102:main.c        ****   palSetLineMode(AMB_PRIM, PAL_MODE_INPUT_PULLUP);
 266               		.loc 1 102 0
 267 0046 64E0      		ldi r22,lo8(4)
 268 0048 86E2      		ldi r24,lo8(38)
 269 004a 90E0      		ldi r25,0
 270 004c 0E94 0000 		call _pal_lld_setlineid
 271               	.LVL25:
 272 0050 0E94 0000 		call _pal_lld_getpadfromline
 273               	.LVL26:
 274 0054 182F      		mov r17,r24
 275 0056 64E0      		ldi r22,lo8(4)
 276 0058 86E2      		ldi r24,lo8(38)
 277 005a 90E0      		ldi r25,0
 278 005c 0E94 0000 		call _pal_lld_setlineid
 279               	.LVL27:
 280 0060 0E94 0000 		call _pal_lld_getportfromline
 281               	.LVL28:
 282 0064 BE01      		movw r22,r28
 283 0066 00C0      		rjmp 2f
 284               		1:
 285 0068 660F      		lsl r22
 286               		2:
 287 006a 1A95      		dec r17
 288 006c 02F4      		brpl 1b
 289 006e 43E0      		ldi r20,lo8(3)
 290 0070 0E94 0000 		call _pal_lld_setgroupmode
 291               	.LVL29:
 103:main.c        ****   palSetLineMode(AMB_SEC, PAL_MODE_INPUT_PULLUP);
 292               		.loc 1 103 0
 293 0074 63E0      		ldi r22,lo8(3)
 294 0076 86E2      		ldi r24,lo8(38)
 295 0078 90E0      		ldi r25,0
 296 007a 0E94 0000 		call _pal_lld_setlineid
 297               	.LVL30:
 298 007e 0E94 0000 		call _pal_lld_getpadfromline
 299               	.LVL31:
 300 0082 182F      		mov r17,r24
 301 0084 63E0      		ldi r22,lo8(3)
 302 0086 86E2      		ldi r24,lo8(38)
 303 0088 90E0      		ldi r25,0
 304 008a 0E94 0000 		call _pal_lld_setlineid
 305               	.LVL32:
 306 008e 0E94 0000 		call _pal_lld_getportfromline
 307               	.LVL33:
 308 0092 BE01      		movw r22,r28
 309 0094 00C0      		rjmp 2f
 310               		1:
 311 0096 660F      		lsl r22
 312               		2:
 313 0098 1A95      		dec r17
 314 009a 02F4      		brpl 1b
 315 009c 43E0      		ldi r20,lo8(3)
 316 009e 0E94 0000 		call _pal_lld_setgroupmode
 317               	.LVL34:
 104:main.c        **** 
 318               		.loc 1 104 0
 319 00a2 65E0      		ldi r22,lo8(5)
 320 00a4 86E2      		ldi r24,lo8(38)
 321 00a6 90E0      		ldi r25,0
 322 00a8 0E94 0000 		call _pal_lld_setlineid
 323               	.LVL35:
 324 00ac 0E94 0000 		call _pal_lld_getpadfromline
 325               	.LVL36:
 326 00b0 182F      		mov r17,r24
 327 00b2 65E0      		ldi r22,lo8(5)
 328 00b4 86E2      		ldi r24,lo8(38)
 329 00b6 90E0      		ldi r25,0
 330 00b8 0E94 0000 		call _pal_lld_setlineid
 331               	.LVL37:
 332 00bc 0E94 0000 		call _pal_lld_getportfromline
 333               	.LVL38:
 334 00c0 BE01      		movw r22,r28
 335 00c2 00C0      		rjmp 2f
 336               		1:
 337 00c4 660F      		lsl r22
 338               		2:
 339 00c6 1A95      		dec r17
 340 00c8 02F4      		brpl 1b
 341 00ca 43E0      		ldi r20,lo8(3)
 342 00cc 0E94 0000 		call _pal_lld_setgroupmode
 343               	.LVL39:
 107:main.c        ****   palClearLine(PEDESTRE_VERDE);
 344               		.loc 1 107 0
 345 00d0 63E0      		ldi r22,lo8(3)
 346 00d2 83E2      		ldi r24,lo8(35)
 347 00d4 90E0      		ldi r25,0
 348 00d6 0E94 0000 		call _pal_lld_setlineid
 349               	.LVL40:
 350 00da 0E94 0000 		call _pal_lld_getpadfromline
 351               	.LVL41:
 352 00de 182F      		mov r17,r24
 353 00e0 63E0      		ldi r22,lo8(3)
 354 00e2 83E2      		ldi r24,lo8(35)
 355 00e4 90E0      		ldi r25,0
 356 00e6 0E94 0000 		call _pal_lld_setlineid
 357               	.LVL42:
 358 00ea 0E94 0000 		call _pal_lld_getportfromline
 359               	.LVL43:
 360 00ee BE01      		movw r22,r28
 361 00f0 00C0      		rjmp 2f
 362               		1:
 363 00f2 660F      		lsl r22
 364               		2:
 365 00f4 1A95      		dec r17
 366 00f6 02F4      		brpl 1b
 367 00f8 46E0      		ldi r20,lo8(6)
 368 00fa 0E94 0000 		call _pal_lld_setgroupmode
 369               	.LVL44:
 108:main.c        ****   palSetLineMode(PEDESTRE_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 370               		.loc 1 108 0
 371 00fe 63E0      		ldi r22,lo8(3)
 372 0100 83E2      		ldi r24,lo8(35)
 373 0102 90E0      		ldi r25,0
 374 0104 0E94 0000 		call _pal_lld_setlineid
 375               	.LVL45:
 376 0108 0E94 0000 		call _pal_lld_getpadfromline
 377               	.LVL46:
 378 010c 182F      		mov r17,r24
 379 010e 63E0      		ldi r22,lo8(3)
 380 0110 83E2      		ldi r24,lo8(35)
 381 0112 90E0      		ldi r25,0
 382 0114 0E94 0000 		call _pal_lld_setlineid
 383               	.LVL47:
 384 0118 0E94 0000 		call _pal_lld_getportfromline
 385               	.LVL48:
 386 011c FC01      		movw r30,r24
 387 011e 9281      		ldd r25,Z+2
 388 0120 9E01      		movw r18,r28
 389 0122 00C0      		rjmp 2f
 390               		1:
 391 0124 220F      		lsl r18
 392 0126 331F      		rol r19
 393               		2:
 394 0128 1A95      		dec r17
 395 012a 02F4      		brpl 1b
 396 012c 2095      		com r18
 397 012e 3095      		com r19
 398 0130 9223      		and r25,r18
 399 0132 9283      		std Z+2,r25
 109:main.c        ****   palClearLine(PEDESTRE_VERMELHO);
 400               		.loc 1 109 0
 401 0134 62E0      		ldi r22,lo8(2)
 402 0136 83E2      		ldi r24,lo8(35)
 403 0138 90E0      		ldi r25,0
 404 013a 0E94 0000 		call _pal_lld_setlineid
 405               	.LVL49:
 406 013e 0E94 0000 		call _pal_lld_getpadfromline
 407               	.LVL50:
 408 0142 182F      		mov r17,r24
 409 0144 62E0      		ldi r22,lo8(2)
 410 0146 83E2      		ldi r24,lo8(35)
 411 0148 90E0      		ldi r25,0
 412 014a 0E94 0000 		call _pal_lld_setlineid
 413               	.LVL51:
 414 014e 0E94 0000 		call _pal_lld_getportfromline
 415               	.LVL52:
 416 0152 BE01      		movw r22,r28
 417 0154 00C0      		rjmp 2f
 418               		1:
 419 0156 660F      		lsl r22
 420               		2:
 421 0158 1A95      		dec r17
 422 015a 02F4      		brpl 1b
 423 015c 46E0      		ldi r20,lo8(6)
 424 015e 0E94 0000 		call _pal_lld_setgroupmode
 425               	.LVL53:
 110:main.c        **** 
 426               		.loc 1 110 0
 427 0162 62E0      		ldi r22,lo8(2)
 428 0164 83E2      		ldi r24,lo8(35)
 429 0166 90E0      		ldi r25,0
 430 0168 0E94 0000 		call _pal_lld_setlineid
 431               	.LVL54:
 432 016c 0E94 0000 		call _pal_lld_getpadfromline
 433               	.LVL55:
 434 0170 182F      		mov r17,r24
 435 0172 62E0      		ldi r22,lo8(2)
 436 0174 83E2      		ldi r24,lo8(35)
 437 0176 90E0      		ldi r25,0
 438 0178 0E94 0000 		call _pal_lld_setlineid
 439               	.LVL56:
 440 017c 0E94 0000 		call _pal_lld_getportfromline
 441               	.LVL57:
 442 0180 FC01      		movw r30,r24
 443 0182 9281      		ldd r25,Z+2
 444 0184 9E01      		movw r18,r28
 445 0186 00C0      		rjmp 2f
 446               		1:
 447 0188 220F      		lsl r18
 448 018a 331F      		rol r19
 449               		2:
 450 018c 1A95      		dec r17
 451 018e 02F4      		brpl 1b
 452 0190 2095      		com r18
 453 0192 3095      		com r19
 454 0194 9223      		and r25,r18
 455 0196 9283      		std Z+2,r25
 113:main.c        ****   palClearLine(PRIMARIO_VERDE);
 456               		.loc 1 113 0
 457 0198 67E0      		ldi r22,lo8(7)
 458 019a 89E2      		ldi r24,lo8(41)
 459 019c 90E0      		ldi r25,0
 460 019e 0E94 0000 		call _pal_lld_setlineid
 461               	.LVL58:
 462 01a2 0E94 0000 		call _pal_lld_getpadfromline
 463               	.LVL59:
 464 01a6 182F      		mov r17,r24
 465 01a8 67E0      		ldi r22,lo8(7)
 466 01aa 89E2      		ldi r24,lo8(41)
 467 01ac 90E0      		ldi r25,0
 468 01ae 0E94 0000 		call _pal_lld_setlineid
 469               	.LVL60:
 470 01b2 0E94 0000 		call _pal_lld_getportfromline
 471               	.LVL61:
 472 01b6 BE01      		movw r22,r28
 473 01b8 00C0      		rjmp 2f
 474               		1:
 475 01ba 660F      		lsl r22
 476               		2:
 477 01bc 1A95      		dec r17
 478 01be 02F4      		brpl 1b
 479 01c0 46E0      		ldi r20,lo8(6)
 480 01c2 0E94 0000 		call _pal_lld_setgroupmode
 481               	.LVL62:
 114:main.c        ****   palSetLineMode(PRIMARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 482               		.loc 1 114 0
 483 01c6 67E0      		ldi r22,lo8(7)
 484 01c8 89E2      		ldi r24,lo8(41)
 485 01ca 90E0      		ldi r25,0
 486 01cc 0E94 0000 		call _pal_lld_setlineid
 487               	.LVL63:
 488 01d0 0E94 0000 		call _pal_lld_getpadfromline
 489               	.LVL64:
 490 01d4 182F      		mov r17,r24
 491 01d6 67E0      		ldi r22,lo8(7)
 492 01d8 89E2      		ldi r24,lo8(41)
 493 01da 90E0      		ldi r25,0
 494 01dc 0E94 0000 		call _pal_lld_setlineid
 495               	.LVL65:
 496 01e0 0E94 0000 		call _pal_lld_getportfromline
 497               	.LVL66:
 498 01e4 FC01      		movw r30,r24
 499 01e6 9281      		ldd r25,Z+2
 500 01e8 9E01      		movw r18,r28
 501 01ea 00C0      		rjmp 2f
 502               		1:
 503 01ec 220F      		lsl r18
 504 01ee 331F      		rol r19
 505               		2:
 506 01f0 1A95      		dec r17
 507 01f2 02F4      		brpl 1b
 508 01f4 2095      		com r18
 509 01f6 3095      		com r19
 510 01f8 9223      		and r25,r18
 511 01fa 9283      		std Z+2,r25
 115:main.c        ****   palClearLine(PRIMARIO_AMARELO);
 512               		.loc 1 115 0
 513 01fc 64E0      		ldi r22,lo8(4)
 514 01fe 89E2      		ldi r24,lo8(41)
 515 0200 90E0      		ldi r25,0
 516 0202 0E94 0000 		call _pal_lld_setlineid
 517               	.LVL67:
 518 0206 0E94 0000 		call _pal_lld_getpadfromline
 519               	.LVL68:
 520 020a 182F      		mov r17,r24
 521 020c 64E0      		ldi r22,lo8(4)
 522 020e 89E2      		ldi r24,lo8(41)
 523 0210 90E0      		ldi r25,0
 524 0212 0E94 0000 		call _pal_lld_setlineid
 525               	.LVL69:
 526 0216 0E94 0000 		call _pal_lld_getportfromline
 527               	.LVL70:
 528 021a BE01      		movw r22,r28
 529 021c 00C0      		rjmp 2f
 530               		1:
 531 021e 660F      		lsl r22
 532               		2:
 533 0220 1A95      		dec r17
 534 0222 02F4      		brpl 1b
 535 0224 46E0      		ldi r20,lo8(6)
 536 0226 0E94 0000 		call _pal_lld_setgroupmode
 537               	.LVL71:
 116:main.c        ****   palSetLineMode(PRIMARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 538               		.loc 1 116 0
 539 022a 64E0      		ldi r22,lo8(4)
 540 022c 89E2      		ldi r24,lo8(41)
 541 022e 90E0      		ldi r25,0
 542 0230 0E94 0000 		call _pal_lld_setlineid
 543               	.LVL72:
 544 0234 0E94 0000 		call _pal_lld_getpadfromline
 545               	.LVL73:
 546 0238 182F      		mov r17,r24
 547 023a 64E0      		ldi r22,lo8(4)
 548 023c 89E2      		ldi r24,lo8(41)
 549 023e 90E0      		ldi r25,0
 550 0240 0E94 0000 		call _pal_lld_setlineid
 551               	.LVL74:
 552 0244 0E94 0000 		call _pal_lld_getportfromline
 553               	.LVL75:
 554 0248 FC01      		movw r30,r24
 555 024a 9281      		ldd r25,Z+2
 556 024c 9E01      		movw r18,r28
 557 024e 00C0      		rjmp 2f
 558               		1:
 559 0250 220F      		lsl r18
 560 0252 331F      		rol r19
 561               		2:
 562 0254 1A95      		dec r17
 563 0256 02F4      		brpl 1b
 564 0258 2095      		com r18
 565 025a 3095      		com r19
 566 025c 9223      		and r25,r18
 567 025e 9283      		std Z+2,r25
 117:main.c        ****   palClearLine(PRIMARIO_VERMELHO);
 568               		.loc 1 117 0
 569 0260 66E0      		ldi r22,lo8(6)
 570 0262 89E2      		ldi r24,lo8(41)
 571 0264 90E0      		ldi r25,0
 572 0266 0E94 0000 		call _pal_lld_setlineid
 573               	.LVL76:
 574 026a 0E94 0000 		call _pal_lld_getpadfromline
 575               	.LVL77:
 576 026e 182F      		mov r17,r24
 577 0270 66E0      		ldi r22,lo8(6)
 578 0272 89E2      		ldi r24,lo8(41)
 579 0274 90E0      		ldi r25,0
 580 0276 0E94 0000 		call _pal_lld_setlineid
 581               	.LVL78:
 582 027a 0E94 0000 		call _pal_lld_getportfromline
 583               	.LVL79:
 584 027e BE01      		movw r22,r28
 585 0280 00C0      		rjmp 2f
 586               		1:
 587 0282 660F      		lsl r22
 588               		2:
 589 0284 1A95      		dec r17
 590 0286 02F4      		brpl 1b
 591 0288 46E0      		ldi r20,lo8(6)
 592 028a 0E94 0000 		call _pal_lld_setgroupmode
 593               	.LVL80:
 118:main.c        **** 
 594               		.loc 1 118 0
 595 028e 66E0      		ldi r22,lo8(6)
 596 0290 89E2      		ldi r24,lo8(41)
 597 0292 90E0      		ldi r25,0
 598 0294 0E94 0000 		call _pal_lld_setlineid
 599               	.LVL81:
 600 0298 0E94 0000 		call _pal_lld_getpadfromline
 601               	.LVL82:
 602 029c 182F      		mov r17,r24
 603 029e 66E0      		ldi r22,lo8(6)
 604 02a0 89E2      		ldi r24,lo8(41)
 605 02a2 90E0      		ldi r25,0
 606 02a4 0E94 0000 		call _pal_lld_setlineid
 607               	.LVL83:
 608 02a8 0E94 0000 		call _pal_lld_getportfromline
 609               	.LVL84:
 610 02ac FC01      		movw r30,r24
 611 02ae 9281      		ldd r25,Z+2
 612 02b0 9E01      		movw r18,r28
 613 02b2 00C0      		rjmp 2f
 614               		1:
 615 02b4 220F      		lsl r18
 616 02b6 331F      		rol r19
 617               		2:
 618 02b8 1A95      		dec r17
 619 02ba 02F4      		brpl 1b
 620 02bc 2095      		com r18
 621 02be 3095      		com r19
 622 02c0 9223      		and r25,r18
 623 02c2 9283      		std Z+2,r25
 121:main.c        ****   palClearLine(SECUNDARIO_VERDE);
 624               		.loc 1 121 0
 625 02c4 61E0      		ldi r22,lo8(1)
 626 02c6 83E2      		ldi r24,lo8(35)
 627 02c8 90E0      		ldi r25,0
 628 02ca 0E94 0000 		call _pal_lld_setlineid
 629               	.LVL85:
 630 02ce 0E94 0000 		call _pal_lld_getpadfromline
 631               	.LVL86:
 632 02d2 182F      		mov r17,r24
 633 02d4 61E0      		ldi r22,lo8(1)
 634 02d6 83E2      		ldi r24,lo8(35)
 635 02d8 90E0      		ldi r25,0
 636 02da 0E94 0000 		call _pal_lld_setlineid
 637               	.LVL87:
 638 02de 0E94 0000 		call _pal_lld_getportfromline
 639               	.LVL88:
 640 02e2 BE01      		movw r22,r28
 641 02e4 00C0      		rjmp 2f
 642               		1:
 643 02e6 660F      		lsl r22
 644               		2:
 645 02e8 1A95      		dec r17
 646 02ea 02F4      		brpl 1b
 647 02ec 46E0      		ldi r20,lo8(6)
 648 02ee 0E94 0000 		call _pal_lld_setgroupmode
 649               	.LVL89:
 122:main.c        ****   palSetLineMode(SECUNDARIO_AMARELO, PAL_MODE_OUTPUT_PUSHPULL);
 650               		.loc 1 122 0
 651 02f2 61E0      		ldi r22,lo8(1)
 652 02f4 83E2      		ldi r24,lo8(35)
 653 02f6 90E0      		ldi r25,0
 654 02f8 0E94 0000 		call _pal_lld_setlineid
 655               	.LVL90:
 656 02fc 0E94 0000 		call _pal_lld_getpadfromline
 657               	.LVL91:
 658 0300 182F      		mov r17,r24
 659 0302 61E0      		ldi r22,lo8(1)
 660 0304 83E2      		ldi r24,lo8(35)
 661 0306 90E0      		ldi r25,0
 662 0308 0E94 0000 		call _pal_lld_setlineid
 663               	.LVL92:
 664 030c 0E94 0000 		call _pal_lld_getportfromline
 665               	.LVL93:
 666 0310 FC01      		movw r30,r24
 667 0312 9281      		ldd r25,Z+2
 668 0314 9E01      		movw r18,r28
 669 0316 00C0      		rjmp 2f
 670               		1:
 671 0318 220F      		lsl r18
 672 031a 331F      		rol r19
 673               		2:
 674 031c 1A95      		dec r17
 675 031e 02F4      		brpl 1b
 676 0320 2095      		com r18
 677 0322 3095      		com r19
 678 0324 9223      		and r25,r18
 679 0326 9283      		std Z+2,r25
 123:main.c        ****   palClearLine(SECUNDARIO_AMARELO);
 680               		.loc 1 123 0
 681 0328 65E0      		ldi r22,lo8(5)
 682 032a 89E2      		ldi r24,lo8(41)
 683 032c 90E0      		ldi r25,0
 684 032e 0E94 0000 		call _pal_lld_setlineid
 685               	.LVL94:
 686 0332 0E94 0000 		call _pal_lld_getpadfromline
 687               	.LVL95:
 688 0336 182F      		mov r17,r24
 689 0338 65E0      		ldi r22,lo8(5)
 690 033a 89E2      		ldi r24,lo8(41)
 691 033c 90E0      		ldi r25,0
 692 033e 0E94 0000 		call _pal_lld_setlineid
 693               	.LVL96:
 694 0342 0E94 0000 		call _pal_lld_getportfromline
 695               	.LVL97:
 696 0346 BE01      		movw r22,r28
 697 0348 00C0      		rjmp 2f
 698               		1:
 699 034a 660F      		lsl r22
 700               		2:
 701 034c 1A95      		dec r17
 702 034e 02F4      		brpl 1b
 703 0350 46E0      		ldi r20,lo8(6)
 704 0352 0E94 0000 		call _pal_lld_setgroupmode
 705               	.LVL98:
 124:main.c        ****   palSetLineMode(SECUNDARIO_VERMELHO, PAL_MODE_OUTPUT_PUSHPULL);
 706               		.loc 1 124 0
 707 0356 65E0      		ldi r22,lo8(5)
 708 0358 89E2      		ldi r24,lo8(41)
 709 035a 90E0      		ldi r25,0
 710 035c 0E94 0000 		call _pal_lld_setlineid
 711               	.LVL99:
 712 0360 0E94 0000 		call _pal_lld_getpadfromline
 713               	.LVL100:
 714 0364 182F      		mov r17,r24
 715 0366 65E0      		ldi r22,lo8(5)
 716 0368 89E2      		ldi r24,lo8(41)
 717 036a 90E0      		ldi r25,0
 718 036c 0E94 0000 		call _pal_lld_setlineid
 719               	.LVL101:
 720 0370 0E94 0000 		call _pal_lld_getportfromline
 721               	.LVL102:
 722 0374 FC01      		movw r30,r24
 723 0376 9281      		ldd r25,Z+2
 724 0378 9E01      		movw r18,r28
 725 037a 00C0      		rjmp 2f
 726               		1:
 727 037c 220F      		lsl r18
 728 037e 331F      		rol r19
 729               		2:
 730 0380 1A95      		dec r17
 731 0382 02F4      		brpl 1b
 732 0384 2095      		com r18
 733 0386 3095      		com r19
 734 0388 9223      		and r25,r18
 735 038a 9283      		std Z+2,r25
 125:main.c        ****   palClearLine(SECUNDARIO_VERMELHO);
 736               		.loc 1 125 0
 737 038c 60E0      		ldi r22,0
 738 038e 83E2      		ldi r24,lo8(35)
 739 0390 90E0      		ldi r25,0
 740 0392 0E94 0000 		call _pal_lld_setlineid
 741               	.LVL103:
 742 0396 0E94 0000 		call _pal_lld_getpadfromline
 743               	.LVL104:
 744 039a 182F      		mov r17,r24
 745 039c 60E0      		ldi r22,0
 746 039e 83E2      		ldi r24,lo8(35)
 747 03a0 90E0      		ldi r25,0
 748 03a2 0E94 0000 		call _pal_lld_setlineid
 749               	.LVL105:
 750 03a6 0E94 0000 		call _pal_lld_getportfromline
 751               	.LVL106:
 752 03aa BE01      		movw r22,r28
 753 03ac 00C0      		rjmp 2f
 754               		1:
 755 03ae 660F      		lsl r22
 756               		2:
 757 03b0 1A95      		dec r17
 758 03b2 02F4      		brpl 1b
 759 03b4 46E0      		ldi r20,lo8(6)
 760 03b6 0E94 0000 		call _pal_lld_setgroupmode
 761               	.LVL107:
 126:main.c        **** 
 762               		.loc 1 126 0
 763 03ba 60E0      		ldi r22,0
 764 03bc 83E2      		ldi r24,lo8(35)
 765 03be 90E0      		ldi r25,0
 766 03c0 0E94 0000 		call _pal_lld_setlineid
 767               	.LVL108:
 768 03c4 0E94 0000 		call _pal_lld_getpadfromline
 769               	.LVL109:
 770 03c8 182F      		mov r17,r24
 771 03ca 60E0      		ldi r22,0
 772 03cc 83E2      		ldi r24,lo8(35)
 773 03ce 90E0      		ldi r25,0
 774 03d0 0E94 0000 		call _pal_lld_setlineid
 775               	.LVL110:
 776 03d4 0E94 0000 		call _pal_lld_getportfromline
 777               	.LVL111:
 778 03d8 FC01      		movw r30,r24
 779 03da 9281      		ldd r25,Z+2
 780 03dc 9E01      		movw r18,r28
 781 03de 00C0      		rjmp 2f
 782               		1:
 783 03e0 220F      		lsl r18
 784 03e2 331F      		rol r19
 785               		2:
 786 03e4 1A95      		dec r17
 787 03e6 02F4      		brpl 1b
 788 03e8 2095      		com r18
 789 03ea 3095      		com r19
 790 03ec 2923      		and r18,r25
 791 03ee 2283      		std Z+2,r18
 131:main.c        **** 
 792               		.loc 1 131 0
 793 03f0 10E0      		ldi r17,0
 794 03f2 00E0      		ldi r16,0
 795 03f4 20E0      		ldi r18,lo8(gs(Thread1))
 796 03f6 30E0      		ldi r19,hi8(gs(Thread1))
 797 03f8 40E8      		ldi r20,lo8(-128)
 798 03fa 63E8      		ldi r22,lo8(-125)
 799 03fc 70E0      		ldi r23,0
 800 03fe 80E0      		ldi r24,lo8(waThread1)
 801 0400 90E0      		ldi r25,hi8(waThread1)
 802 0402 0E94 0000 		call chThdCreateStatic
 803               	.LVL112:
 149:main.c        ****     }
 804               		.loc 1 149 0
 805 0406 01E0      		ldi r16,lo8(1)
 806 0408 10E0      		ldi r17,0
 807 040a 00C0      		rjmp .L19
 808               	.L22:
 137:main.c        ****     }
 809               		.loc 1 137 0
 810 040c 83E2      		ldi r24,lo8(35)
 811 040e 90E0      		ldi r25,0
 812 0410 0E94 0000 		call _pal_lld_setlineid
 813               	.LVL113:
 814 0414 0E94 0000 		call _pal_lld_getportfromline
 815               	.LVL114:
 816 0418 FC01      		movw r30,r24
 817 041a C281      		ldd r28,Z+2
 818 041c 63E0      		ldi r22,lo8(3)
 819 041e 83E2      		ldi r24,lo8(35)
 820 0420 90E0      		ldi r25,0
 821 0422 0E94 0000 		call _pal_lld_setlineid
 822               	.LVL115:
 823 0426 0E94 0000 		call _pal_lld_getpadfromline
 824               	.LVL116:
 825 042a D82F      		mov r29,r24
 826 042c 63E0      		ldi r22,lo8(3)
 827               	.L20:
 149:main.c        ****     }
 828               		.loc 1 149 0
 829 042e 83E2      		ldi r24,lo8(35)
 830 0430 90E0      		ldi r25,0
 831               	.L21:
 832 0432 0E94 0000 		call _pal_lld_setlineid
 833               	.LVL117:
 834 0436 0E94 0000 		call _pal_lld_getportfromline
 835               	.LVL118:
 836 043a 9801      		movw r18,r16
 837 043c 00C0      		rjmp 2f
 838               		1:
 839 043e 220F      		lsl r18
 840               		2:
 841 0440 DA95      		dec r29
 842 0442 02F4      		brpl 1b
 843 0444 C227      		eor r28,r18
 844 0446 FC01      		movw r30,r24
 845 0448 C283      		std Z+2,r28
 846               	.L16:
 152:main.c        ****   }
 847               		.loc 1 152 0
 848 044a 65E3      		ldi r22,lo8(53)
 849 044c 7CE0      		ldi r23,lo8(12)
 850 044e 80E0      		ldi r24,0
 851 0450 90E0      		ldi r25,0
 852 0452 0E94 0000 		call chThdSleep
 853               	.LVL119:
 854               	.L19:
 135:main.c        ****     {
 855               		.loc 1 135 0
 856 0456 65E0      		ldi r22,lo8(5)
 857 0458 86E2      		ldi r24,lo8(38)
 858 045a 90E0      		ldi r25,0
 859 045c 0E94 0000 		call _pal_lld_setlineid
 860               	.LVL120:
 861 0460 0E94 0000 		call _pal_lld_getportfromline
 862               	.LVL121:
 863 0464 FC01      		movw r30,r24
 864 0466 C081      		ld r28,Z
 865 0468 65E0      		ldi r22,lo8(5)
 866 046a 86E2      		ldi r24,lo8(38)
 867 046c 90E0      		ldi r25,0
 868 046e 0E94 0000 		call _pal_lld_setlineid
 869               	.LVL122:
 870 0472 0E94 0000 		call _pal_lld_getpadfromline
 871               	.LVL123:
 872 0476 2C2F      		mov r18,r28
 873 0478 30E0      		ldi r19,0
 874 047a 00C0      		rjmp 2f
 875               		1:
 876 047c 3595      		asr r19
 877 047e 2795      		ror r18
 878               		2:
 879 0480 8A95      		dec r24
 880 0482 02F4      		brpl 1b
 137:main.c        ****     }
 881               		.loc 1 137 0
 882 0484 63E0      		ldi r22,lo8(3)
 135:main.c        ****     {
 883               		.loc 1 135 0
 884 0486 20FF      		sbrs r18,0
 885 0488 00C0      		rjmp .L22
 139:main.c        ****     {
 886               		.loc 1 139 0
 887 048a 86E2      		ldi r24,lo8(38)
 888 048c 90E0      		ldi r25,0
 889 048e 0E94 0000 		call _pal_lld_setlineid
 890               	.LVL124:
 891 0492 0E94 0000 		call _pal_lld_getportfromline
 892               	.LVL125:
 893 0496 FC01      		movw r30,r24
 894 0498 C081      		ld r28,Z
 895 049a 63E0      		ldi r22,lo8(3)
 896 049c 86E2      		ldi r24,lo8(38)
 897 049e 90E0      		ldi r25,0
 898 04a0 0E94 0000 		call _pal_lld_setlineid
 899               	.LVL126:
 900 04a4 0E94 0000 		call _pal_lld_getpadfromline
 901               	.LVL127:
 902 04a8 2C2F      		mov r18,r28
 903 04aa 30E0      		ldi r19,0
 904 04ac 00C0      		rjmp 2f
 905               		1:
 906 04ae 3595      		asr r19
 907 04b0 2795      		ror r18
 908               		2:
 909 04b2 8A95      		dec r24
 910 04b4 02F4      		brpl 1b
 141:main.c        ****     }
 911               		.loc 1 141 0
 912 04b6 64E0      		ldi r22,lo8(4)
 139:main.c        ****     {
 913               		.loc 1 139 0
 914 04b8 20FD      		sbrc r18,0
 915 04ba 00C0      		rjmp .L17
 141:main.c        ****     }
 916               		.loc 1 141 0
 917 04bc 89E2      		ldi r24,lo8(41)
 918 04be 90E0      		ldi r25,0
 919 04c0 0E94 0000 		call _pal_lld_setlineid
 920               	.LVL128:
 921 04c4 0E94 0000 		call _pal_lld_getportfromline
 922               	.LVL129:
 923 04c8 FC01      		movw r30,r24
 924 04ca C281      		ldd r28,Z+2
 925 04cc 64E0      		ldi r22,lo8(4)
 926 04ce 89E2      		ldi r24,lo8(41)
 927 04d0 90E0      		ldi r25,0
 928 04d2 0E94 0000 		call _pal_lld_setlineid
 929               	.LVL130:
 930 04d6 0E94 0000 		call _pal_lld_getpadfromline
 931               	.LVL131:
 932 04da D82F      		mov r29,r24
 933 04dc 64E0      		ldi r22,lo8(4)
 934 04de 89E2      		ldi r24,lo8(41)
 935 04e0 90E0      		ldi r25,0
 936 04e2 00C0      		rjmp .L21
 937               	.L17:
 143:main.c        ****     {
 938               		.loc 1 143 0
 939 04e4 86E2      		ldi r24,lo8(38)
 940 04e6 90E0      		ldi r25,0
 941 04e8 0E94 0000 		call _pal_lld_setlineid
 942               	.LVL132:
 943 04ec 0E94 0000 		call _pal_lld_getportfromline
 944               	.LVL133:
 945 04f0 FC01      		movw r30,r24
 946 04f2 C081      		ld r28,Z
 947 04f4 64E0      		ldi r22,lo8(4)
 948 04f6 86E2      		ldi r24,lo8(38)
 949 04f8 90E0      		ldi r25,0
 950 04fa 0E94 0000 		call _pal_lld_setlineid
 951               	.LVL134:
 952 04fe 0E94 0000 		call _pal_lld_getpadfromline
 953               	.LVL135:
 954 0502 2C2F      		mov r18,r28
 955 0504 30E0      		ldi r19,0
 956 0506 00C0      		rjmp 2f
 957               		1:
 958 0508 3595      		asr r19
 959 050a 2795      		ror r18
 960               		2:
 961 050c 8A95      		dec r24
 962 050e 02F4      		brpl 1b
 963 0510 20FD      		sbrc r18,0
 964 0512 00C0      		rjmp .L18
 145:main.c        ****     }
 965               		.loc 1 145 0
 966 0514 66E0      		ldi r22,lo8(6)
 967 0516 89E2      		ldi r24,lo8(41)
 968 0518 90E0      		ldi r25,0
 969 051a 0E94 0000 		call _pal_lld_setlineid
 970               	.LVL136:
 971 051e 0E94 0000 		call _pal_lld_getportfromline
 972               	.LVL137:
 973 0522 FC01      		movw r30,r24
 974 0524 C281      		ldd r28,Z+2
 975 0526 66E0      		ldi r22,lo8(6)
 976 0528 89E2      		ldi r24,lo8(41)
 977 052a 90E0      		ldi r25,0
 978 052c 0E94 0000 		call _pal_lld_setlineid
 979               	.LVL138:
 980 0530 0E94 0000 		call _pal_lld_getpadfromline
 981               	.LVL139:
 982 0534 D82F      		mov r29,r24
 983 0536 66E0      		ldi r22,lo8(6)
 984 0538 89E2      		ldi r24,lo8(41)
 985 053a 90E0      		ldi r25,0
 986 053c 00C0      		rjmp .L21
 987               	.L18:
 147:main.c        ****     {
 988               		.loc 1 147 0
 989 053e 62E0      		ldi r22,lo8(2)
 990 0540 86E2      		ldi r24,lo8(38)
 991 0542 90E0      		ldi r25,0
 992 0544 0E94 0000 		call _pal_lld_setlineid
 993               	.LVL140:
 994 0548 0E94 0000 		call _pal_lld_getportfromline
 995               	.LVL141:
 996 054c FC01      		movw r30,r24
 997 054e C081      		ld r28,Z
 998 0550 62E0      		ldi r22,lo8(2)
 999 0552 86E2      		ldi r24,lo8(38)
 1000 0554 90E0      		ldi r25,0
 1001 0556 0E94 0000 		call _pal_lld_setlineid
 1002               	.LVL142:
 1003 055a 0E94 0000 		call _pal_lld_getpadfromline
 1004               	.LVL143:
 1005 055e 2C2F      		mov r18,r28
 1006 0560 30E0      		ldi r19,0
 1007 0562 00C0      		rjmp 2f
 1008               		1:
 1009 0564 3595      		asr r19
 1010 0566 2795      		ror r18
 1011               		2:
 1012 0568 8A95      		dec r24
 1013 056a 02F4      		brpl 1b
 1014 056c 20FD      		sbrc r18,0
 1015 056e 00C0      		rjmp .L16
 149:main.c        ****     }
 1016               		.loc 1 149 0
 1017 0570 61E0      		ldi r22,lo8(1)
 1018 0572 83E2      		ldi r24,lo8(35)
 1019 0574 90E0      		ldi r25,0
 1020 0576 0E94 0000 		call _pal_lld_setlineid
 1021               	.LVL144:
 1022 057a 0E94 0000 		call _pal_lld_getportfromline
 1023               	.LVL145:
 1024 057e FC01      		movw r30,r24
 1025 0580 C281      		ldd r28,Z+2
 1026 0582 61E0      		ldi r22,lo8(1)
 1027 0584 83E2      		ldi r24,lo8(35)
 1028 0586 90E0      		ldi r25,0
 1029 0588 0E94 0000 		call _pal_lld_setlineid
 1030               	.LVL146:
 1031 058c 0E94 0000 		call _pal_lld_getpadfromline
 1032               	.LVL147:
 1033 0590 D82F      		mov r29,r24
 1034 0592 61E0      		ldi r22,lo8(1)
 1035 0594 00C0      		rjmp .L20
 1036               		.cfi_endproc
 1037               	.LFE244:
 1039               		.section	.text.bufferInit,"ax",@progbits
 1040               	.global	bufferInit
 1042               	bufferInit:
 1043               	.LFB245:
 157:main.c        ****   buffer->head = 0;
 1044               		.loc 1 157 0
 1045               		.cfi_startproc
 1046               	.LVL148:
 1047               	/* prologue: function */
 1048               	/* frame size = 0 */
 1049               	/* stack size = 0 */
 1050               	.L__stack_usage = 0
 1051 0000 FC01      		movw r30,r24
 158:main.c        ****   buffer->tail = 0;
 1052               		.loc 1 158 0
 1053 0002 1086      		std Z+8,__zero_reg__
 159:main.c        ****   buffer->size = 0;
 1054               		.loc 1 159 0
 1055 0004 1186      		std Z+9,__zero_reg__
 160:main.c        **** }
 1056               		.loc 1 160 0
 1057 0006 1286      		std Z+10,__zero_reg__
 1058               	/* epilogue start */
 161:main.c        **** 
 1059               		.loc 1 161 0
 1060 0008 0895      		ret
 1061               		.cfi_endproc
 1062               	.LFE245:
 1064               		.section	.text.isBufferEmpty,"ax",@progbits
 1065               	.global	isBufferEmpty
 1067               	isBufferEmpty:
 1068               	.LFB246:
 164:main.c        ****   return buffer->size == 0;
 1069               		.loc 1 164 0
 1070               		.cfi_startproc
 1071               	.LVL149:
 1072               	/* prologue: function */
 1073               	/* frame size = 0 */
 1074               	/* stack size = 0 */
 1075               	.L__stack_usage = 0
 165:main.c        **** }
 1076               		.loc 1 165 0
 1077 0000 21E0      		ldi r18,lo8(1)
 1078 0002 FC01      		movw r30,r24
 1079 0004 8285      		ldd r24,Z+10
 1080               	.LVL150:
 1081 0006 8111      		cpse r24,__zero_reg__
 1082 0008 20E0      		ldi r18,0
 1083               	.L25:
 166:main.c        **** 
 1084               		.loc 1 166 0
 1085 000a 822F      		mov r24,r18
 1086               	/* epilogue start */
 1087 000c 0895      		ret
 1088               		.cfi_endproc
 1089               	.LFE246:
 1091               		.section	.text.isBufferFull,"ax",@progbits
 1092               	.global	isBufferFull
 1094               	isBufferFull:
 1095               	.LFB247:
 169:main.c        ****   return buffer->size == BUFFER_SIZE;
 1096               		.loc 1 169 0
 1097               		.cfi_startproc
 1098               	.LVL151:
 1099               	/* prologue: function */
 1100               	/* frame size = 0 */
 1101               	/* stack size = 0 */
 1102               	.L__stack_usage = 0
 170:main.c        **** }
 1103               		.loc 1 170 0
 1104 0000 21E0      		ldi r18,lo8(1)
 1105 0002 FC01      		movw r30,r24
 1106 0004 8285      		ldd r24,Z+10
 1107               	.LVL152:
 1108 0006 8830      		cpi r24,lo8(8)
 1109 0008 01F0      		breq .L30
 1110 000a 20E0      		ldi r18,0
 1111               	.L30:
 171:main.c        **** 
 1112               		.loc 1 171 0
 1113 000c 822F      		mov r24,r18
 1114               	/* epilogue start */
 1115 000e 0895      		ret
 1116               		.cfi_endproc
 1117               	.LFE247:
 1119               		.section	.text.bufferPush,"ax",@progbits
 1120               	.global	bufferPush
 1122               	bufferPush:
 1123               	.LFB248:
 174:main.c        ****   buffer->events[buffer->tail] = event;
 1124               		.loc 1 174 0
 1125               		.cfi_startproc
 1126               	.LVL153:
 1127               	/* prologue: function */
 1128               	/* frame size = 0 */
 1129               	/* stack size = 0 */
 1130               	.L__stack_usage = 0
 1131 0000 FC01      		movw r30,r24
 175:main.c        ****   buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 1132               		.loc 1 175 0
 1133 0002 2185      		ldd r18,Z+9
 1134 0004 30E0      		ldi r19,0
 1135 0006 DC01      		movw r26,r24
 1136 0008 A20F      		add r26,r18
 1137 000a B31F      		adc r27,r19
 1138 000c 6C93      		st X,r22
 176:main.c        ****   buffer->size++;
 1139               		.loc 1 176 0
 1140 000e 2F5F      		subi r18,-1
 1141 0010 3F4F      		sbci r19,-1
 1142 0012 2770      		andi r18,7
 1143 0014 3327      		clr r19
 1144 0016 2187      		std Z+9,r18
 177:main.c        **** }
 1145               		.loc 1 177 0
 1146 0018 8285      		ldd r24,Z+10
 1147               	.LVL154:
 1148 001a 8F5F      		subi r24,lo8(-(1))
 1149 001c 8287      		std Z+10,r24
 1150               	/* epilogue start */
 178:main.c        **** 
 1151               		.loc 1 178 0
 1152 001e 0895      		ret
 1153               		.cfi_endproc
 1154               	.LFE248:
 1156               		.section	.text.bufferPop,"ax",@progbits
 1157               	.global	bufferPop
 1159               	bufferPop:
 1160               	.LFB249:
 181:main.c        ****   if (isBufferEmpty(buffer))
 1161               		.loc 1 181 0
 1162               		.cfi_startproc
 1163               	.LVL155:
 1164               	/* prologue: function */
 1165               	/* frame size = 0 */
 1166               	/* stack size = 0 */
 1167               	.L__stack_usage = 0
 1168 0000 FC01      		movw r30,r24
 1169               	.LVL156:
 1170               	.LBB82:
 1171               	.LBB83:
 165:main.c        **** }
 1172               		.loc 1 165 0
 1173 0002 8285      		ldd r24,Z+10
 1174               	.LVL157:
 1175               	.LBE83:
 1176               	.LBE82:
 182:main.c        ****   {
 1177               		.loc 1 182 0
 1178 0004 8823      		tst r24
 1179 0006 01F0      		breq .L35
 187:main.c        ****   buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 1180               		.loc 1 187 0
 1181 0008 2085      		ldd r18,Z+8
 1182 000a 30E0      		ldi r19,0
 1183 000c DF01      		movw r26,r30
 1184 000e A20F      		add r26,r18
 1185 0010 B31F      		adc r27,r19
 1186 0012 4C91      		ld r20,X
 1187               	.LVL158:
 188:main.c        ****   buffer->size--;
 1188               		.loc 1 188 0
 1189 0014 2F5F      		subi r18,-1
 1190 0016 3F4F      		sbci r19,-1
 1191 0018 2770      		andi r18,7
 1192 001a 3327      		clr r19
 1193 001c 2087      		std Z+8,r18
 189:main.c        ****   return event;
 1194               		.loc 1 189 0
 1195 001e 9FEF      		ldi r25,lo8(-1)
 1196 0020 980F      		add r25,r24
 1197 0022 9287      		std Z+10,r25
 190:main.c        **** }
 1198               		.loc 1 190 0
 1199 0024 842F      		mov r24,r20
 1200               	.LVL159:
 1201               	.L35:
 1202               	/* epilogue start */
 191:main.c        **** 
 1203               		.loc 1 191 0
 1204 0026 0895      		ret
 1205               		.cfi_endproc
 1206               	.LFE249:
 1208               		.section	.bss.waThread1,"aw",@nobits
 1211               	waThread1:
 1212 0000 0000 0000 		.zero	131
 1212      0000 0000 
 1212      0000 0000 
 1212      0000 0000 
 1212      0000 0000 
 1213               		.comm	ev_buffer,11,1
 1214               		.text
 1215               	.Letext0:
 1216               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 1217               		.file 5 "/usr/lib/avr/include/stdint.h"
 1218               		.file 6 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/common/ports/AVR/compilers/
 1219               		.file 7 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chearly.h"
 1220               		.file 8 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chobjects.h"
 1221               		.file 9 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chrfcu.h"
 1222               		.file 10 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chdebug.h"
 1223               		.file 11 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chtime.h"
 1224               		.file 12 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chlists.h"
 1225               		.file 13 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chsem.h"
 1226               		.file 14 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chmtx.h"
 1227               		.file 15 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chsys.h"
 1228               		.file 16 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chregistry.h"
 1229               		.file 17 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chevents.h"
 1230               		.file 18 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/oslib/include/chmemcore.h"
 1231               		.file 19 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal_queues.h"
 1232               		.file 20 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal_pal.h"
 1233               		.file 21 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/ports/AVR/MEGA/LLD/GPI
 1234               		.file 22 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal_serial.h"
 1235               		.file 23 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/ports/AVR/MEGA/LLD/USA
 1236               		.file 24 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/hal/include/hal.h"
 1237               		.file 25 "/home/givaldo/Documents/ChibiStudio/chibios_stable-21.11.x/os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cckuVSXv.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cckuVSXv.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cckuVSXv.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cckuVSXv.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cckuVSXv.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cckuVSXv.s:13     .text.vt_cb:0000000000000000 vt_cb
     /tmp/cckuVSXv.s:91     .text.Thread1:0000000000000000 Thread1
     /tmp/cckuVSXv.s:212    .text.startup.main:0000000000000000 main
                            *COM*:000000000000000b ev_buffer
     /tmp/cckuVSXv.s:1211   .bss.waThread1:0000000000000000 waThread1
     /tmp/cckuVSXv.s:1042   .text.bufferInit:0000000000000000 bufferInit
     /tmp/cckuVSXv.s:1067   .text.isBufferEmpty:0000000000000000 isBufferEmpty
     /tmp/cckuVSXv.s:1094   .text.isBufferFull:0000000000000000 isBufferFull
     /tmp/cckuVSXv.s:1122   .text.bufferPush:0000000000000000 bufferPush
     /tmp/cckuVSXv.s:1159   .text.bufferPop:0000000000000000 bufferPop

UNDEFINED SYMBOLS
chVTDoResetI
chVTDoSetI
chThdSleep
halInit
chSysInit
_pal_lld_setlineid
_pal_lld_getpadfromline
_pal_lld_getportfromline
_pal_lld_setgroupmode
chThdCreateStatic
__do_clear_bss
